var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __esm = (fn2, res) => function __init() {
  return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
};
var __commonJS = (cb, mod2) => function __require() {
  return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to2, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to2, key) && key !== except)
        __defProp(to2, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to2;
};
var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
  mod2
));
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// ../../node_modules/tsup/assets/esm_shims.js
var init_esm_shims = __esm({
  "../../node_modules/tsup/assets/esm_shims.js"() {
  }
});

// ../../node_modules/long/src/long.js
var require_long = __commonJS({
  "../../node_modules/long/src/long.js"(exports2, module2) {
    init_esm_shims();
    module2.exports = Long8;
    var wasm = null;
    try {
      wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
        0,
        97,
        115,
        109,
        1,
        0,
        0,
        0,
        1,
        13,
        2,
        96,
        0,
        1,
        127,
        96,
        4,
        127,
        127,
        127,
        127,
        1,
        127,
        3,
        7,
        6,
        0,
        1,
        1,
        1,
        1,
        1,
        6,
        6,
        1,
        127,
        1,
        65,
        0,
        11,
        7,
        50,
        6,
        3,
        109,
        117,
        108,
        0,
        1,
        5,
        100,
        105,
        118,
        95,
        115,
        0,
        2,
        5,
        100,
        105,
        118,
        95,
        117,
        0,
        3,
        5,
        114,
        101,
        109,
        95,
        115,
        0,
        4,
        5,
        114,
        101,
        109,
        95,
        117,
        0,
        5,
        8,
        103,
        101,
        116,
        95,
        104,
        105,
        103,
        104,
        0,
        0,
        10,
        191,
        1,
        6,
        4,
        0,
        35,
        0,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        126,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        127,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        128,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        129,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11,
        36,
        1,
        1,
        126,
        32,
        0,
        173,
        32,
        1,
        173,
        66,
        32,
        134,
        132,
        32,
        2,
        173,
        32,
        3,
        173,
        66,
        32,
        134,
        132,
        130,
        34,
        4,
        66,
        32,
        135,
        167,
        36,
        0,
        32,
        4,
        167,
        11
      ])), {}).exports;
    } catch (e57) {
    }
    function Long8(low, high, unsigned) {
      this.low = low | 0;
      this.high = high | 0;
      this.unsigned = !!unsigned;
    }
    Long8.prototype.__isLong__;
    Object.defineProperty(Long8.prototype, "__isLong__", { value: true });
    function isLong(obj) {
      return (obj && obj["__isLong__"]) === true;
    }
    Long8.isLong = isLong;
    var INT_CACHE = {};
    var UINT_CACHE = {};
    function fromInt(value, unsigned) {
      var obj, cachedObj, cache;
      if (unsigned) {
        value >>>= 0;
        if (cache = 0 <= value && value < 256) {
          cachedObj = UINT_CACHE[value];
          if (cachedObj)
            return cachedObj;
        }
        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
        if (cache)
          UINT_CACHE[value] = obj;
        return obj;
      } else {
        value |= 0;
        if (cache = -128 <= value && value < 128) {
          cachedObj = INT_CACHE[value];
          if (cachedObj)
            return cachedObj;
        }
        obj = fromBits(value, value < 0 ? -1 : 0, false);
        if (cache)
          INT_CACHE[value] = obj;
        return obj;
      }
    }
    Long8.fromInt = fromInt;
    function fromNumber(value, unsigned) {
      if (isNaN(value))
        return unsigned ? UZERO : ZERO;
      if (unsigned) {
        if (value < 0)
          return UZERO;
        if (value >= TWO_PWR_64_DBL)
          return MAX_UNSIGNED_VALUE;
      } else {
        if (value <= -TWO_PWR_63_DBL)
          return MIN_VALUE;
        if (value + 1 >= TWO_PWR_63_DBL)
          return MAX_VALUE;
      }
      if (value < 0)
        return fromNumber(-value, unsigned).neg();
      return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
    }
    Long8.fromNumber = fromNumber;
    function fromBits(lowBits, highBits, unsigned) {
      return new Long8(lowBits, highBits, unsigned);
    }
    Long8.fromBits = fromBits;
    var pow_dbl = Math.pow;
    function fromString(str, unsigned, radix) {
      if (str.length === 0)
        throw Error("empty string");
      if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
        return ZERO;
      if (typeof unsigned === "number") {
        radix = unsigned, unsigned = false;
      } else {
        unsigned = !!unsigned;
      }
      radix = radix || 10;
      if (radix < 2 || 36 < radix)
        throw RangeError("radix");
      var p55;
      if ((p55 = str.indexOf("-")) > 0)
        throw Error("interior hyphen");
      else if (p55 === 0) {
        return fromString(str.substring(1), unsigned, radix).neg();
      }
      var radixToPower = fromNumber(pow_dbl(radix, 8));
      var result = ZERO;
      for (var i57 = 0; i57 < str.length; i57 += 8) {
        var size = Math.min(8, str.length - i57), value = parseInt(str.substring(i57, i57 + size), radix);
        if (size < 8) {
          var power = fromNumber(pow_dbl(radix, size));
          result = result.mul(power).add(fromNumber(value));
        } else {
          result = result.mul(radixToPower);
          result = result.add(fromNumber(value));
        }
      }
      result.unsigned = unsigned;
      return result;
    }
    Long8.fromString = fromString;
    function fromValue(val, unsigned) {
      if (typeof val === "number")
        return fromNumber(val, unsigned);
      if (typeof val === "string")
        return fromString(val, unsigned);
      return fromBits(val.low, val.high, typeof unsigned === "boolean" ? unsigned : val.unsigned);
    }
    Long8.fromValue = fromValue;
    var TWO_PWR_16_DBL = 1 << 16;
    var TWO_PWR_24_DBL = 1 << 24;
    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
    var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);
    var ZERO = fromInt(0);
    Long8.ZERO = ZERO;
    var UZERO = fromInt(0, true);
    Long8.UZERO = UZERO;
    var ONE = fromInt(1);
    Long8.ONE = ONE;
    var UONE = fromInt(1, true);
    Long8.UONE = UONE;
    var NEG_ONE = fromInt(-1);
    Long8.NEG_ONE = NEG_ONE;
    var MAX_VALUE = fromBits(4294967295 | 0, 2147483647 | 0, false);
    Long8.MAX_VALUE = MAX_VALUE;
    var MAX_UNSIGNED_VALUE = fromBits(4294967295 | 0, 4294967295 | 0, true);
    Long8.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;
    var MIN_VALUE = fromBits(0, 2147483648 | 0, false);
    Long8.MIN_VALUE = MIN_VALUE;
    var LongPrototype = Long8.prototype;
    LongPrototype.toInt = function toInt() {
      return this.unsigned ? this.low >>> 0 : this.low;
    };
    LongPrototype.toNumber = function toNumber() {
      if (this.unsigned)
        return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
      return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
    };
    LongPrototype.toString = function toString(radix) {
      radix = radix || 10;
      if (radix < 2 || 36 < radix)
        throw RangeError("radix");
      if (this.isZero())
        return "0";
      if (this.isNegative()) {
        if (this.eq(MIN_VALUE)) {
          var radixLong = fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);
          return div.toString(radix) + rem1.toInt().toString(radix);
        } else
          return "-" + this.neg().toString(radix);
      }
      var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned), rem = this;
      var result = "";
      while (true) {
        var remDiv = rem.div(radixToPower), intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0, digits = intval.toString(radix);
        rem = remDiv;
        if (rem.isZero())
          return digits + result;
        else {
          while (digits.length < 6)
            digits = "0" + digits;
          result = "" + digits + result;
        }
      }
    };
    LongPrototype.getHighBits = function getHighBits() {
      return this.high;
    };
    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
      return this.high >>> 0;
    };
    LongPrototype.getLowBits = function getLowBits() {
      return this.low;
    };
    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
      return this.low >>> 0;
    };
    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
      if (this.isNegative())
        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
      var val = this.high != 0 ? this.high : this.low;
      for (var bit = 31; bit > 0; bit--)
        if ((val & 1 << bit) != 0)
          break;
      return this.high != 0 ? bit + 33 : bit + 1;
    };
    LongPrototype.isZero = function isZero() {
      return this.high === 0 && this.low === 0;
    };
    LongPrototype.eqz = LongPrototype.isZero;
    LongPrototype.isNegative = function isNegative() {
      return !this.unsigned && this.high < 0;
    };
    LongPrototype.isPositive = function isPositive() {
      return this.unsigned || this.high >= 0;
    };
    LongPrototype.isOdd = function isOdd() {
      return (this.low & 1) === 1;
    };
    LongPrototype.isEven = function isEven() {
      return (this.low & 1) === 0;
    };
    LongPrototype.equals = function equals(other) {
      if (!isLong(other))
        other = fromValue(other);
      if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1)
        return false;
      return this.high === other.high && this.low === other.low;
    };
    LongPrototype.eq = LongPrototype.equals;
    LongPrototype.notEquals = function notEquals(other) {
      return !this.eq(
        /* validates */
        other
      );
    };
    LongPrototype.neq = LongPrototype.notEquals;
    LongPrototype.ne = LongPrototype.notEquals;
    LongPrototype.lessThan = function lessThan(other) {
      return this.comp(
        /* validates */
        other
      ) < 0;
    };
    LongPrototype.lt = LongPrototype.lessThan;
    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
      return this.comp(
        /* validates */
        other
      ) <= 0;
    };
    LongPrototype.lte = LongPrototype.lessThanOrEqual;
    LongPrototype.le = LongPrototype.lessThanOrEqual;
    LongPrototype.greaterThan = function greaterThan(other) {
      return this.comp(
        /* validates */
        other
      ) > 0;
    };
    LongPrototype.gt = LongPrototype.greaterThan;
    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
      return this.comp(
        /* validates */
        other
      ) >= 0;
    };
    LongPrototype.gte = LongPrototype.greaterThanOrEqual;
    LongPrototype.ge = LongPrototype.greaterThanOrEqual;
    LongPrototype.compare = function compare(other) {
      if (!isLong(other))
        other = fromValue(other);
      if (this.eq(other))
        return 0;
      var thisNeg = this.isNegative(), otherNeg = other.isNegative();
      if (thisNeg && !otherNeg)
        return -1;
      if (!thisNeg && otherNeg)
        return 1;
      if (!this.unsigned)
        return this.sub(other).isNegative() ? -1 : 1;
      return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
    };
    LongPrototype.comp = LongPrototype.compare;
    LongPrototype.negate = function negate() {
      if (!this.unsigned && this.eq(MIN_VALUE))
        return MIN_VALUE;
      return this.not().add(ONE);
    };
    LongPrototype.neg = LongPrototype.negate;
    LongPrototype.add = function add(addend) {
      if (!isLong(addend))
        addend = fromValue(addend);
      var a482 = this.high >>> 16;
      var a322 = this.high & 65535;
      var a162 = this.low >>> 16;
      var a00 = this.low & 65535;
      var b482 = addend.high >>> 16;
      var b322 = addend.high & 65535;
      var b162 = addend.low >>> 16;
      var b00 = addend.low & 65535;
      var c482 = 0, c322 = 0, c162 = 0, c00 = 0;
      c00 += a00 + b00;
      c162 += c00 >>> 16;
      c00 &= 65535;
      c162 += a162 + b162;
      c322 += c162 >>> 16;
      c162 &= 65535;
      c322 += a322 + b322;
      c482 += c322 >>> 16;
      c322 &= 65535;
      c482 += a482 + b482;
      c482 &= 65535;
      return fromBits(c162 << 16 | c00, c482 << 16 | c322, this.unsigned);
    };
    LongPrototype.subtract = function subtract(subtrahend) {
      if (!isLong(subtrahend))
        subtrahend = fromValue(subtrahend);
      return this.add(subtrahend.neg());
    };
    LongPrototype.sub = LongPrototype.subtract;
    LongPrototype.multiply = function multiply(multiplier) {
      if (this.isZero())
        return ZERO;
      if (!isLong(multiplier))
        multiplier = fromValue(multiplier);
      if (wasm) {
        var low = wasm.mul(
          this.low,
          this.high,
          multiplier.low,
          multiplier.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
      }
      if (multiplier.isZero())
        return ZERO;
      if (this.eq(MIN_VALUE))
        return multiplier.isOdd() ? MIN_VALUE : ZERO;
      if (multiplier.eq(MIN_VALUE))
        return this.isOdd() ? MIN_VALUE : ZERO;
      if (this.isNegative()) {
        if (multiplier.isNegative())
          return this.neg().mul(multiplier.neg());
        else
          return this.neg().mul(multiplier).neg();
      } else if (multiplier.isNegative())
        return this.mul(multiplier.neg()).neg();
      if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);
      var a482 = this.high >>> 16;
      var a322 = this.high & 65535;
      var a162 = this.low >>> 16;
      var a00 = this.low & 65535;
      var b482 = multiplier.high >>> 16;
      var b322 = multiplier.high & 65535;
      var b162 = multiplier.low >>> 16;
      var b00 = multiplier.low & 65535;
      var c482 = 0, c322 = 0, c162 = 0, c00 = 0;
      c00 += a00 * b00;
      c162 += c00 >>> 16;
      c00 &= 65535;
      c162 += a162 * b00;
      c322 += c162 >>> 16;
      c162 &= 65535;
      c162 += a00 * b162;
      c322 += c162 >>> 16;
      c162 &= 65535;
      c322 += a322 * b00;
      c482 += c322 >>> 16;
      c322 &= 65535;
      c322 += a162 * b162;
      c482 += c322 >>> 16;
      c322 &= 65535;
      c322 += a00 * b322;
      c482 += c322 >>> 16;
      c322 &= 65535;
      c482 += a482 * b00 + a322 * b162 + a162 * b322 + a00 * b482;
      c482 &= 65535;
      return fromBits(c162 << 16 | c00, c482 << 16 | c322, this.unsigned);
    };
    LongPrototype.mul = LongPrototype.multiply;
    LongPrototype.divide = function divide(divisor) {
      if (!isLong(divisor))
        divisor = fromValue(divisor);
      if (divisor.isZero())
        throw Error("division by zero");
      if (wasm) {
        if (!this.unsigned && this.high === -2147483648 && divisor.low === -1 && divisor.high === -1) {
          return this;
        }
        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(
          this.low,
          this.high,
          divisor.low,
          divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
      }
      if (this.isZero())
        return this.unsigned ? UZERO : ZERO;
      var approx, rem, res;
      if (!this.unsigned) {
        if (this.eq(MIN_VALUE)) {
          if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
            return MIN_VALUE;
          else if (divisor.eq(MIN_VALUE))
            return ONE;
          else {
            var halfThis = this.shr(1);
            approx = halfThis.div(divisor).shl(1);
            if (approx.eq(ZERO)) {
              return divisor.isNegative() ? ONE : NEG_ONE;
            } else {
              rem = this.sub(divisor.mul(approx));
              res = approx.add(rem.div(divisor));
              return res;
            }
          }
        } else if (divisor.eq(MIN_VALUE))
          return this.unsigned ? UZERO : ZERO;
        if (this.isNegative()) {
          if (divisor.isNegative())
            return this.neg().div(divisor.neg());
          return this.neg().div(divisor).neg();
        } else if (divisor.isNegative())
          return this.div(divisor.neg()).neg();
        res = ZERO;
      } else {
        if (!divisor.unsigned)
          divisor = divisor.toUnsigned();
        if (divisor.gt(this))
          return UZERO;
        if (divisor.gt(this.shru(1)))
          return UONE;
        res = UZERO;
      }
      rem = this;
      while (rem.gte(divisor)) {
        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
        var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48), approxRes = fromNumber(approx), approxRem = approxRes.mul(divisor);
        while (approxRem.isNegative() || approxRem.gt(rem)) {
          approx -= delta;
          approxRes = fromNumber(approx, this.unsigned);
          approxRem = approxRes.mul(divisor);
        }
        if (approxRes.isZero())
          approxRes = ONE;
        res = res.add(approxRes);
        rem = rem.sub(approxRem);
      }
      return res;
    };
    LongPrototype.div = LongPrototype.divide;
    LongPrototype.modulo = function modulo(divisor) {
      if (!isLong(divisor))
        divisor = fromValue(divisor);
      if (wasm) {
        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(
          this.low,
          this.high,
          divisor.low,
          divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
      }
      return this.sub(this.div(divisor).mul(divisor));
    };
    LongPrototype.mod = LongPrototype.modulo;
    LongPrototype.rem = LongPrototype.modulo;
    LongPrototype.not = function not() {
      return fromBits(~this.low, ~this.high, this.unsigned);
    };
    LongPrototype.and = function and(other) {
      if (!isLong(other))
        other = fromValue(other);
      return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
    };
    LongPrototype.or = function or(other) {
      if (!isLong(other))
        other = fromValue(other);
      return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
    };
    LongPrototype.xor = function xor(other) {
      if (!isLong(other))
        other = fromValue(other);
      return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
    };
    LongPrototype.shiftLeft = function shiftLeft(numBits) {
      if (isLong(numBits))
        numBits = numBits.toInt();
      if ((numBits &= 63) === 0)
        return this;
      else if (numBits < 32)
        return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);
      else
        return fromBits(0, this.low << numBits - 32, this.unsigned);
    };
    LongPrototype.shl = LongPrototype.shiftLeft;
    LongPrototype.shiftRight = function shiftRight(numBits) {
      if (isLong(numBits))
        numBits = numBits.toInt();
      if ((numBits &= 63) === 0)
        return this;
      else if (numBits < 32)
        return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);
      else
        return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
    };
    LongPrototype.shr = LongPrototype.shiftRight;
    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
      if (isLong(numBits))
        numBits = numBits.toInt();
      numBits &= 63;
      if (numBits === 0)
        return this;
      else {
        var high = this.high;
        if (numBits < 32) {
          var low = this.low;
          return fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);
        } else if (numBits === 32)
          return fromBits(high, 0, this.unsigned);
        else
          return fromBits(high >>> numBits - 32, 0, this.unsigned);
      }
    };
    LongPrototype.shru = LongPrototype.shiftRightUnsigned;
    LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;
    LongPrototype.toSigned = function toSigned() {
      if (!this.unsigned)
        return this;
      return fromBits(this.low, this.high, false);
    };
    LongPrototype.toUnsigned = function toUnsigned() {
      if (this.unsigned)
        return this;
      return fromBits(this.low, this.high, true);
    };
    LongPrototype.toBytes = function toBytes(le8) {
      return le8 ? this.toBytesLE() : this.toBytesBE();
    };
    LongPrototype.toBytesLE = function toBytesLE() {
      var hi2 = this.high, lo = this.low;
      return [
        lo & 255,
        lo >>> 8 & 255,
        lo >>> 16 & 255,
        lo >>> 24,
        hi2 & 255,
        hi2 >>> 8 & 255,
        hi2 >>> 16 & 255,
        hi2 >>> 24
      ];
    };
    LongPrototype.toBytesBE = function toBytesBE() {
      var hi2 = this.high, lo = this.low;
      return [
        hi2 >>> 24,
        hi2 >>> 16 & 255,
        hi2 >>> 8 & 255,
        hi2 & 255,
        lo >>> 24,
        lo >>> 16 & 255,
        lo >>> 8 & 255,
        lo & 255
      ];
    };
    Long8.fromBytes = function fromBytes(bytes, unsigned, le8) {
      return le8 ? Long8.fromBytesLE(bytes, unsigned) : Long8.fromBytesBE(bytes, unsigned);
    };
    Long8.fromBytesLE = function fromBytesLE(bytes, unsigned) {
      return new Long8(
        bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24,
        bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24,
        unsigned
      );
    };
    Long8.fromBytesBE = function fromBytesBE(bytes, unsigned) {
      return new Long8(
        bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7],
        bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3],
        unsigned
      );
    };
  }
});

// ../../node_modules/@protobufjs/aspromise/index.js
var require_aspromise = __commonJS({
  "../../node_modules/@protobufjs/aspromise/index.js"(exports2, module2) {
    "use strict";
    init_esm_shims();
    module2.exports = asPromise;
    function asPromise(fn2, ctx) {
      var params = new Array(arguments.length - 1), offset = 0, index = 2, pending = true;
      while (index < arguments.length)
        params[offset++] = arguments[index++];
      return new Promise(function executor(resolve, reject) {
        params[offset] = function callback(err10) {
          if (pending) {
            pending = false;
            if (err10)
              reject(err10);
            else {
              var params2 = new Array(arguments.length - 1), offset2 = 0;
              while (offset2 < params2.length)
                params2[offset2++] = arguments[offset2];
              resolve.apply(null, params2);
            }
          }
        };
        try {
          fn2.apply(ctx || null, params);
        } catch (err10) {
          if (pending) {
            pending = false;
            reject(err10);
          }
        }
      });
    }
  }
});

// ../../node_modules/@protobufjs/base64/index.js
var require_base64 = __commonJS({
  "../../node_modules/@protobufjs/base64/index.js"(exports2) {
    "use strict";
    init_esm_shims();
    var base64 = exports2;
    base64.length = function length(string) {
      var p55 = string.length;
      if (!p55)
        return 0;
      var n57 = 0;
      while (--p55 % 4 > 1 && string.charAt(p55) === "=")
        ++n57;
      return Math.ceil(string.length * 3) / 4 - n57;
    };
    var b64 = new Array(64);
    var s64 = new Array(123);
    for (i57 = 0; i57 < 64; )
      s64[b64[i57] = i57 < 26 ? i57 + 65 : i57 < 52 ? i57 + 71 : i57 < 62 ? i57 - 4 : i57 - 59 | 43] = i57++;
    var i57;
    base64.encode = function encode(buffer, start, end) {
      var parts = null, chunk = [];
      var i58 = 0, j32 = 0, t57;
      while (start < end) {
        var b50 = buffer[start++];
        switch (j32) {
          case 0:
            chunk[i58++] = b64[b50 >> 2];
            t57 = (b50 & 3) << 4;
            j32 = 1;
            break;
          case 1:
            chunk[i58++] = b64[t57 | b50 >> 4];
            t57 = (b50 & 15) << 2;
            j32 = 2;
            break;
          case 2:
            chunk[i58++] = b64[t57 | b50 >> 6];
            chunk[i58++] = b64[b50 & 63];
            j32 = 0;
            break;
        }
        if (i58 > 8191) {
          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
          i58 = 0;
        }
      }
      if (j32) {
        chunk[i58++] = b64[t57];
        chunk[i58++] = 61;
        if (j32 === 1)
          chunk[i58++] = 61;
      }
      if (parts) {
        if (i58)
          parts.push(String.fromCharCode.apply(String, chunk.slice(0, i58)));
        return parts.join("");
      }
      return String.fromCharCode.apply(String, chunk.slice(0, i58));
    };
    var invalidEncoding = "invalid encoding";
    base64.decode = function decode(string, buffer, offset) {
      var start = offset;
      var j32 = 0, t57;
      for (var i58 = 0; i58 < string.length; ) {
        var c52 = string.charCodeAt(i58++);
        if (c52 === 61 && j32 > 1)
          break;
        if ((c52 = s64[c52]) === void 0)
          throw Error(invalidEncoding);
        switch (j32) {
          case 0:
            t57 = c52;
            j32 = 1;
            break;
          case 1:
            buffer[offset++] = t57 << 2 | (c52 & 48) >> 4;
            t57 = c52;
            j32 = 2;
            break;
          case 2:
            buffer[offset++] = (t57 & 15) << 4 | (c52 & 60) >> 2;
            t57 = c52;
            j32 = 3;
            break;
          case 3:
            buffer[offset++] = (t57 & 3) << 6 | c52;
            j32 = 0;
            break;
        }
      }
      if (j32 === 1)
        throw Error(invalidEncoding);
      return offset - start;
    };
    base64.test = function test(string) {
      return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
    };
  }
});

// ../../node_modules/@protobufjs/eventemitter/index.js
var require_eventemitter = __commonJS({
  "../../node_modules/@protobufjs/eventemitter/index.js"(exports2, module2) {
    "use strict";
    init_esm_shims();
    module2.exports = EventEmitter;
    function EventEmitter() {
      this._listeners = {};
    }
    EventEmitter.prototype.on = function on2(evt, fn2, ctx) {
      (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn: fn2,
        ctx: ctx || this
      });
      return this;
    };
    EventEmitter.prototype.off = function off(evt, fn2) {
      if (evt === void 0)
        this._listeners = {};
      else {
        if (fn2 === void 0)
          this._listeners[evt] = [];
        else {
          var listeners = this._listeners[evt];
          for (var i57 = 0; i57 < listeners.length; )
            if (listeners[i57].fn === fn2)
              listeners.splice(i57, 1);
            else
              ++i57;
        }
      }
      return this;
    };
    EventEmitter.prototype.emit = function emit(evt) {
      var listeners = this._listeners[evt];
      if (listeners) {
        var args = [], i57 = 1;
        for (; i57 < arguments.length; )
          args.push(arguments[i57++]);
        for (i57 = 0; i57 < listeners.length; )
          listeners[i57].fn.apply(listeners[i57++].ctx, args);
      }
      return this;
    };
  }
});

// ../../node_modules/@protobufjs/float/index.js
var require_float = __commonJS({
  "../../node_modules/@protobufjs/float/index.js"(exports2, module2) {
    "use strict";
    init_esm_shims();
    module2.exports = factory(factory);
    function factory(exports3) {
      if (typeof Float32Array !== "undefined")
        (function() {
          var f322 = new Float32Array([-0]), f8b = new Uint8Array(f322.buffer), le8 = f8b[3] === 128;
          function writeFloat_f32_cpy(val, buf, pos) {
            f322[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
          }
          function writeFloat_f32_rev(val, buf, pos) {
            f322[0] = val;
            buf[pos] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
          }
          exports3.writeFloatLE = le8 ? writeFloat_f32_cpy : writeFloat_f32_rev;
          exports3.writeFloatBE = le8 ? writeFloat_f32_rev : writeFloat_f32_cpy;
          function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f322[0];
          }
          function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f322[0];
          }
          exports3.readFloatLE = le8 ? readFloat_f32_cpy : readFloat_f32_rev;
          exports3.readFloatBE = le8 ? readFloat_f32_rev : readFloat_f32_cpy;
        })();
      else
        (function() {
          function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
              val = -val;
            if (val === 0)
              writeUint(1 / val > 0 ? (
                /* positive */
                0
              ) : (
                /* negative 0 */
                2147483648
              ), buf, pos);
            else if (isNaN(val))
              writeUint(2143289344, buf, pos);
            else if (val > 34028234663852886e22)
              writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 11754943508222875e-54)
              writeUint((sign << 31 | Math.round(val / 1401298464324817e-60)) >>> 0, buf, pos);
            else {
              var exponent = Math.floor(Math.log(val) / Math.LN2), mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
              writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
          }
          exports3.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
          exports3.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);
          function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos), sign = (uint >> 31) * 2 + 1, exponent = uint >>> 23 & 255, mantissa = uint & 8388607;
            return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 1401298464324817e-60 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
          }
          exports3.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
          exports3.readFloatBE = readFloat_ieee754.bind(null, readUintBE);
        })();
      if (typeof Float64Array !== "undefined")
        (function() {
          var f64 = new Float64Array([-0]), f8b = new Uint8Array(f64.buffer), le8 = f8b[7] === 128;
          function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
          }
          function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
          }
          exports3.writeDoubleLE = le8 ? writeDouble_f64_cpy : writeDouble_f64_rev;
          exports3.writeDoubleBE = le8 ? writeDouble_f64_rev : writeDouble_f64_cpy;
          function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
          }
          function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
          }
          exports3.readDoubleLE = le8 ? readDouble_f64_cpy : readDouble_f64_rev;
          exports3.readDoubleBE = le8 ? readDouble_f64_rev : readDouble_f64_cpy;
        })();
      else
        (function() {
          function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
              val = -val;
            if (val === 0) {
              writeUint(0, buf, pos + off0);
              writeUint(1 / val > 0 ? (
                /* positive */
                0
              ) : (
                /* negative 0 */
                2147483648
              ), buf, pos + off1);
            } else if (isNaN(val)) {
              writeUint(0, buf, pos + off0);
              writeUint(2146959360, buf, pos + off1);
            } else if (val > 17976931348623157e292) {
              writeUint(0, buf, pos + off0);
              writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
              var mantissa;
              if (val < 22250738585072014e-324) {
                mantissa = val / 5e-324;
                writeUint(mantissa >>> 0, buf, pos + off0);
                writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
              } else {
                var exponent = Math.floor(Math.log(val) / Math.LN2);
                if (exponent === 1024)
                  exponent = 1023;
                mantissa = val * Math.pow(2, -exponent);
                writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
              }
            }
          }
          exports3.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
          exports3.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);
          function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0), hi2 = readUint(buf, pos + off1);
            var sign = (hi2 >> 31) * 2 + 1, exponent = hi2 >>> 20 & 2047, mantissa = 4294967296 * (hi2 & 1048575) + lo;
            return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
          }
          exports3.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
          exports3.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);
        })();
      return exports3;
    }
    function writeUintLE(val, buf, pos) {
      buf[pos] = val & 255;
      buf[pos + 1] = val >>> 8 & 255;
      buf[pos + 2] = val >>> 16 & 255;
      buf[pos + 3] = val >>> 24;
    }
    function writeUintBE(val, buf, pos) {
      buf[pos] = val >>> 24;
      buf[pos + 1] = val >>> 16 & 255;
      buf[pos + 2] = val >>> 8 & 255;
      buf[pos + 3] = val & 255;
    }
    function readUintLE(buf, pos) {
      return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;
    }
    function readUintBE(buf, pos) {
      return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;
    }
  }
});

// ../../node_modules/@protobufjs/inquire/index.js
var require_inquire = __commonJS({
  "../../node_modules/@protobufjs/inquire/index.js"(exports, module) {
    "use strict";
    init_esm_shims();
    module.exports = inquire;
    function inquire(moduleName) {
      try {
        var mod = eval("quire".replace(/^/, "re"))(moduleName);
        if (mod && (mod.length || Object.keys(mod).length))
          return mod;
      } catch (e57) {
      }
      return null;
    }
  }
});

// ../../node_modules/@protobufjs/utf8/index.js
var require_utf8 = __commonJS({
  "../../node_modules/@protobufjs/utf8/index.js"(exports2) {
    "use strict";
    init_esm_shims();
    var utf8 = exports2;
    utf8.length = function utf8_length(string) {
      var len = 0, c52 = 0;
      for (var i57 = 0; i57 < string.length; ++i57) {
        c52 = string.charCodeAt(i57);
        if (c52 < 128)
          len += 1;
        else if (c52 < 2048)
          len += 2;
        else if ((c52 & 64512) === 55296 && (string.charCodeAt(i57 + 1) & 64512) === 56320) {
          ++i57;
          len += 4;
        } else
          len += 3;
      }
      return len;
    };
    utf8.read = function utf8_read(buffer, start, end) {
      var len = end - start;
      if (len < 1)
        return "";
      var parts = null, chunk = [], i57 = 0, t57;
      while (start < end) {
        t57 = buffer[start++];
        if (t57 < 128)
          chunk[i57++] = t57;
        else if (t57 > 191 && t57 < 224)
          chunk[i57++] = (t57 & 31) << 6 | buffer[start++] & 63;
        else if (t57 > 239 && t57 < 365) {
          t57 = ((t57 & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 65536;
          chunk[i57++] = 55296 + (t57 >> 10);
          chunk[i57++] = 56320 + (t57 & 1023);
        } else
          chunk[i57++] = (t57 & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i57 > 8191) {
          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
          i57 = 0;
        }
      }
      if (parts) {
        if (i57)
          parts.push(String.fromCharCode.apply(String, chunk.slice(0, i57)));
        return parts.join("");
      }
      return String.fromCharCode.apply(String, chunk.slice(0, i57));
    };
    utf8.write = function utf8_write(string, buffer, offset) {
      var start = offset, c1, c210;
      for (var i57 = 0; i57 < string.length; ++i57) {
        c1 = string.charCodeAt(i57);
        if (c1 < 128) {
          buffer[offset++] = c1;
        } else if (c1 < 2048) {
          buffer[offset++] = c1 >> 6 | 192;
          buffer[offset++] = c1 & 63 | 128;
        } else if ((c1 & 64512) === 55296 && ((c210 = string.charCodeAt(i57 + 1)) & 64512) === 56320) {
          c1 = 65536 + ((c1 & 1023) << 10) + (c210 & 1023);
          ++i57;
          buffer[offset++] = c1 >> 18 | 240;
          buffer[offset++] = c1 >> 12 & 63 | 128;
          buffer[offset++] = c1 >> 6 & 63 | 128;
          buffer[offset++] = c1 & 63 | 128;
        } else {
          buffer[offset++] = c1 >> 12 | 224;
          buffer[offset++] = c1 >> 6 & 63 | 128;
          buffer[offset++] = c1 & 63 | 128;
        }
      }
      return offset - start;
    };
  }
});

// ../../node_modules/@protobufjs/pool/index.js
var require_pool = __commonJS({
  "../../node_modules/@protobufjs/pool/index.js"(exports2, module2) {
    "use strict";
    init_esm_shims();
    module2.exports = pool;
    function pool(alloc, slice, size) {
      var SIZE = size || 8192;
      var MAX = SIZE >>> 1;
      var slab = null;
      var offset = SIZE;
      return function pool_alloc(size2) {
        if (size2 < 1 || size2 > MAX)
          return alloc(size2);
        if (offset + size2 > SIZE) {
          slab = alloc(SIZE);
          offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size2);
        if (offset & 7)
          offset = (offset | 7) + 1;
        return buf;
      };
    }
  }
});

// ../../node_modules/protobufjs/src/util/longbits.js
var require_longbits = __commonJS({
  "../../node_modules/protobufjs/src/util/longbits.js"(exports2, module2) {
    "use strict";
    init_esm_shims();
    module2.exports = LongBits;
    var util = require_minimal();
    function LongBits(lo, hi2) {
      this.lo = lo >>> 0;
      this.hi = hi2 >>> 0;
    }
    var zero = LongBits.zero = new LongBits(0, 0);
    zero.toNumber = function() {
      return 0;
    };
    zero.zzEncode = zero.zzDecode = function() {
      return this;
    };
    zero.length = function() {
      return 1;
    };
    var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";
    LongBits.fromNumber = function fromNumber(value) {
      if (value === 0)
        return zero;
      var sign = value < 0;
      if (sign)
        value = -value;
      var lo = value >>> 0, hi2 = (value - lo) / 4294967296 >>> 0;
      if (sign) {
        hi2 = ~hi2 >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
          lo = 0;
          if (++hi2 > 4294967295)
            hi2 = 0;
        }
      }
      return new LongBits(lo, hi2);
    };
    LongBits.from = function from(value) {
      if (typeof value === "number")
        return LongBits.fromNumber(value);
      if (util.isString(value)) {
        if (util.Long)
          value = util.Long.fromString(value);
        else
          return LongBits.fromNumber(parseInt(value, 10));
      }
      return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
    };
    LongBits.prototype.toNumber = function toNumber(unsigned) {
      if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0, hi2 = ~this.hi >>> 0;
        if (!lo)
          hi2 = hi2 + 1 >>> 0;
        return -(lo + hi2 * 4294967296);
      }
      return this.lo + this.hi * 4294967296;
    };
    LongBits.prototype.toLong = function toLong(unsigned) {
      return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned)) : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
    };
    var charCodeAt = String.prototype.charCodeAt;
    LongBits.fromHash = function fromHash(hash) {
      if (hash === zeroHash)
        return zero;
      return new LongBits(
        (charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0,
        (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0
      );
    };
    LongBits.prototype.toHash = function toHash() {
      return String.fromCharCode(
        this.lo & 255,
        this.lo >>> 8 & 255,
        this.lo >>> 16 & 255,
        this.lo >>> 24,
        this.hi & 255,
        this.hi >>> 8 & 255,
        this.hi >>> 16 & 255,
        this.hi >>> 24
      );
    };
    LongBits.prototype.zzEncode = function zzEncode() {
      var mask = this.hi >> 31;
      this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
      this.lo = (this.lo << 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.zzDecode = function zzDecode() {
      var mask = -(this.lo & 1);
      this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
      this.hi = (this.hi >>> 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.length = function length() {
      var part0 = this.lo, part1 = (this.lo >>> 28 | this.hi << 4) >>> 0, part2 = this.hi >>> 24;
      return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
    };
  }
});

// ../../node_modules/protobufjs/src/util/minimal.js
var require_minimal = __commonJS({
  "../../node_modules/protobufjs/src/util/minimal.js"(exports2) {
    "use strict";
    init_esm_shims();
    var util = exports2;
    util.asPromise = require_aspromise();
    util.base64 = require_base64();
    util.EventEmitter = require_eventemitter();
    util.float = require_float();
    util.inquire = require_inquire();
    util.utf8 = require_utf8();
    util.pool = require_pool();
    util.LongBits = require_longbits();
    util.isNode = Boolean(typeof global !== "undefined" && global && global.process && global.process.versions && global.process.versions.node);
    util.global = util.isNode && global || typeof window !== "undefined" && window || typeof self !== "undefined" && self || exports2;
    util.emptyArray = Object.freeze ? Object.freeze([]) : (
      /* istanbul ignore next */
      []
    );
    util.emptyObject = Object.freeze ? Object.freeze({}) : (
      /* istanbul ignore next */
      {}
    );
    util.isInteger = Number.isInteger || /* istanbul ignore next */
    function isInteger(value) {
      return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
    };
    util.isString = function isString(value) {
      return typeof value === "string" || value instanceof String;
    };
    util.isObject = function isObject(value) {
      return value && typeof value === "object";
    };
    util.isset = /**
     * Checks if a property on a message is considered to be present.
     * @param {Object} obj Plain object or message instance
     * @param {string} prop Property name
     * @returns {boolean} `true` if considered to be present, otherwise `false`
     */
    util.isSet = function isSet10(obj, prop) {
      var value = obj[prop];
      if (value != null && obj.hasOwnProperty(prop))
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
      return false;
    };
    util.Buffer = function() {
      try {
        var Buffer2 = util.inquire("buffer").Buffer;
        return Buffer2.prototype.utf8Write ? Buffer2 : (
          /* istanbul ignore next */
          null
        );
      } catch (e57) {
        return null;
      }
    }();
    util._Buffer_from = null;
    util._Buffer_allocUnsafe = null;
    util.newBuffer = function newBuffer(sizeOrArray) {
      return typeof sizeOrArray === "number" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
    };
    util.Array = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    util.Long = /* istanbul ignore next */
    util.global.dcodeIO && /* istanbul ignore next */
    util.global.dcodeIO.Long || /* istanbul ignore next */
    util.global.Long || util.inquire("long");
    util.key2Re = /^true|false|0|1$/;
    util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
    util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
    util.longToHash = function longToHash(value) {
      return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;
    };
    util.longFromHash = function longFromHash(hash, unsigned) {
      var bits = util.LongBits.fromHash(hash);
      if (util.Long)
        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
      return bits.toNumber(Boolean(unsigned));
    };
    function merge2(dst, src, ifNotSet) {
      for (var keys = Object.keys(src), i57 = 0; i57 < keys.length; ++i57)
        if (dst[keys[i57]] === void 0 || !ifNotSet)
          dst[keys[i57]] = src[keys[i57]];
      return dst;
    }
    util.merge = merge2;
    util.lcFirst = function lcFirst(str) {
      return str.charAt(0).toLowerCase() + str.substring(1);
    };
    function newError(name) {
      function CustomError(message, properties) {
        if (!(this instanceof CustomError))
          return new CustomError(message, properties);
        Object.defineProperty(this, "message", { get: function() {
          return message;
        } });
        if (Error.captureStackTrace)
          Error.captureStackTrace(this, CustomError);
        else
          Object.defineProperty(this, "stack", { value: new Error().stack || "" });
        if (properties)
          merge2(this, properties);
      }
      (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;
      Object.defineProperty(CustomError.prototype, "name", { get: function() {
        return name;
      } });
      CustomError.prototype.toString = function toString() {
        return this.name + ": " + this.message;
      };
      return CustomError;
    }
    util.newError = newError;
    util.ProtocolError = newError("ProtocolError");
    util.oneOfGetter = function getOneOf(fieldNames) {
      var fieldMap = {};
      for (var i57 = 0; i57 < fieldNames.length; ++i57)
        fieldMap[fieldNames[i57]] = 1;
      return function() {
        for (var keys = Object.keys(this), i58 = keys.length - 1; i58 > -1; --i58)
          if (fieldMap[keys[i58]] === 1 && this[keys[i58]] !== void 0 && this[keys[i58]] !== null)
            return keys[i58];
      };
    };
    util.oneOfSetter = function setOneOf(fieldNames) {
      return function(name) {
        for (var i57 = 0; i57 < fieldNames.length; ++i57)
          if (fieldNames[i57] !== name)
            delete this[fieldNames[i57]];
      };
    };
    util.toJSONOptions = {
      longs: String,
      enums: String,
      bytes: String,
      json: true
    };
    util._configure = function() {
      var Buffer2 = util.Buffer;
      if (!Buffer2) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
      }
      util._Buffer_from = Buffer2.from !== Uint8Array.from && Buffer2.from || /* istanbul ignore next */
      function Buffer_from(value, encoding) {
        return new Buffer2(value, encoding);
      };
      util._Buffer_allocUnsafe = Buffer2.allocUnsafe || /* istanbul ignore next */
      function Buffer_allocUnsafe(size) {
        return new Buffer2(size);
      };
    };
  }
});

// ../../node_modules/protobufjs/src/writer.js
var require_writer = __commonJS({
  "../../node_modules/protobufjs/src/writer.js"(exports2, module2) {
    "use strict";
    init_esm_shims();
    module2.exports = Writer;
    var util = require_minimal();
    var BufferWriter;
    var LongBits = util.LongBits;
    var base64 = util.base64;
    var utf8 = util.utf8;
    function Op(fn2, len, val) {
      this.fn = fn2;
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    function noop() {
    }
    function State(writer) {
      this.head = writer.head;
      this.tail = writer.tail;
      this.len = writer.len;
      this.next = writer.states;
    }
    function Writer() {
      this.len = 0;
      this.head = new Op(noop, 0, 0);
      this.tail = this.head;
      this.states = null;
    }
    var create = function create2() {
      return util.Buffer ? function create_buffer_setup() {
        return (Writer.create = function create_buffer() {
          return new BufferWriter();
        })();
      } : function create_array() {
        return new Writer();
      };
    };
    Writer.create = create();
    Writer.alloc = function alloc(size) {
      return new util.Array(size);
    };
    if (util.Array !== Array)
      Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);
    Writer.prototype._push = function push(fn2, len, val) {
      this.tail = this.tail.next = new Op(fn2, len, val);
      this.len += len;
      return this;
    };
    function writeByte(val, buf, pos) {
      buf[pos] = val & 255;
    }
    function writeVarint32(val, buf, pos) {
      while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
      }
      buf[pos] = val;
    }
    function VarintOp(len, val) {
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    VarintOp.prototype = Object.create(Op.prototype);
    VarintOp.prototype.fn = writeVarint32;
    Writer.prototype.uint32 = function write_uint32(value) {
      this.len += (this.tail = this.tail.next = new VarintOp(
        (value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5,
        value
      )).len;
      return this;
    };
    Writer.prototype.int32 = function write_int32(value) {
      return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) : this.uint32(value);
    };
    Writer.prototype.sint32 = function write_sint32(value) {
      return this.uint32((value << 1 ^ value >> 31) >>> 0);
    };
    function writeVarint64(val, buf, pos) {
      while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
      }
      while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
      }
      buf[pos++] = val.lo;
    }
    Writer.prototype.uint64 = function write_uint64(value) {
      var bits = LongBits.from(value);
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.int64 = Writer.prototype.uint64;
    Writer.prototype.sint64 = function write_sint64(value) {
      var bits = LongBits.from(value).zzEncode();
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.bool = function write_bool(value) {
      return this._push(writeByte, 1, value ? 1 : 0);
    };
    function writeFixed32(val, buf, pos) {
      buf[pos] = val & 255;
      buf[pos + 1] = val >>> 8 & 255;
      buf[pos + 2] = val >>> 16 & 255;
      buf[pos + 3] = val >>> 24;
    }
    Writer.prototype.fixed32 = function write_fixed32(value) {
      return this._push(writeFixed32, 4, value >>> 0);
    };
    Writer.prototype.sfixed32 = Writer.prototype.fixed32;
    Writer.prototype.fixed64 = function write_fixed64(value) {
      var bits = LongBits.from(value);
      return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
    };
    Writer.prototype.sfixed64 = Writer.prototype.fixed64;
    Writer.prototype.float = function write_float(value) {
      return this._push(util.float.writeFloatLE, 4, value);
    };
    Writer.prototype.double = function write_double(value) {
      return this._push(util.float.writeDoubleLE, 8, value);
    };
    var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {
      buf.set(val, pos);
    } : function writeBytes_for(val, buf, pos) {
      for (var i57 = 0; i57 < val.length; ++i57)
        buf[pos + i57] = val[i57];
    };
    Writer.prototype.bytes = function write_bytes(value) {
      var len = value.length >>> 0;
      if (!len)
        return this._push(writeByte, 1, 0);
      if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
      }
      return this.uint32(len)._push(writeBytes, len, value);
    };
    Writer.prototype.string = function write_string(value) {
      var len = utf8.length(value);
      return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);
    };
    Writer.prototype.fork = function fork() {
      this.states = new State(this);
      this.head = this.tail = new Op(noop, 0, 0);
      this.len = 0;
      return this;
    };
    Writer.prototype.reset = function reset() {
      if (this.states) {
        this.head = this.states.head;
        this.tail = this.states.tail;
        this.len = this.states.len;
        this.states = this.states.next;
      } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len = 0;
      }
      return this;
    };
    Writer.prototype.ldelim = function ldelim() {
      var head = this.head, tail = this.tail, len = this.len;
      this.reset().uint32(len);
      if (len) {
        this.tail.next = head.next;
        this.tail = tail;
        this.len += len;
      }
      return this;
    };
    Writer.prototype.finish = function finish() {
      var head = this.head.next, buf = this.constructor.alloc(this.len), pos = 0;
      while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
      }
      return buf;
    };
    Writer._configure = function(BufferWriter_) {
      BufferWriter = BufferWriter_;
      Writer.create = create();
      BufferWriter._configure();
    };
  }
});

// ../../node_modules/protobufjs/src/writer_buffer.js
var require_writer_buffer = __commonJS({
  "../../node_modules/protobufjs/src/writer_buffer.js"(exports2, module2) {
    "use strict";
    init_esm_shims();
    module2.exports = BufferWriter;
    var Writer = require_writer();
    (BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;
    var util = require_minimal();
    function BufferWriter() {
      Writer.call(this);
    }
    BufferWriter._configure = function() {
      BufferWriter.alloc = util._Buffer_allocUnsafe;
      BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf, pos) {
        buf.set(val, pos);
      } : function writeBytesBuffer_copy(val, buf, pos) {
        if (val.copy)
          val.copy(buf, pos, 0, val.length);
        else
          for (var i57 = 0; i57 < val.length; )
            buf[pos++] = val[i57++];
      };
    };
    BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
      if (util.isString(value))
        value = util._Buffer_from(value, "base64");
      var len = value.length >>> 0;
      this.uint32(len);
      if (len)
        this._push(BufferWriter.writeBytesBuffer, len, value);
      return this;
    };
    function writeStringBuffer(val, buf, pos) {
      if (val.length < 40)
        util.utf8.write(val, buf, pos);
      else if (buf.utf8Write)
        buf.utf8Write(val, pos);
      else
        buf.write(val, pos);
    }
    BufferWriter.prototype.string = function write_string_buffer(value) {
      var len = util.Buffer.byteLength(value);
      this.uint32(len);
      if (len)
        this._push(writeStringBuffer, len, value);
      return this;
    };
    BufferWriter._configure();
  }
});

// ../../node_modules/protobufjs/src/reader.js
var require_reader = __commonJS({
  "../../node_modules/protobufjs/src/reader.js"(exports2, module2) {
    "use strict";
    init_esm_shims();
    module2.exports = Reader;
    var util = require_minimal();
    var BufferReader;
    var LongBits = util.LongBits;
    var utf8 = util.utf8;
    function indexOutOfRange(reader, writeLength) {
      return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
    }
    function Reader(buffer) {
      this.buf = buffer;
      this.pos = 0;
      this.len = buffer.length;
    }
    var create_array = typeof Uint8Array !== "undefined" ? function create_typed_array(buffer) {
      if (buffer instanceof Uint8Array || Array.isArray(buffer))
        return new Reader(buffer);
      throw Error("illegal buffer");
    } : function create_array2(buffer) {
      if (Array.isArray(buffer))
        return new Reader(buffer);
      throw Error("illegal buffer");
    };
    var create = function create2() {
      return util.Buffer ? function create_buffer_setup(buffer) {
        return (Reader.create = function create_buffer(buffer2) {
          return util.Buffer.isBuffer(buffer2) ? new BufferReader(buffer2) : create_array(buffer2);
        })(buffer);
      } : create_array;
    };
    Reader.create = create();
    Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */
    util.Array.prototype.slice;
    Reader.prototype.uint32 = function read_uint32_setup() {
      var value = 4294967295;
      return function read_uint32() {
        value = (this.buf[this.pos] & 127) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        if ((this.pos += 5) > this.len) {
          this.pos = this.len;
          throw indexOutOfRange(this, 10);
        }
        return value;
      };
    }();
    Reader.prototype.int32 = function read_int32() {
      return this.uint32() | 0;
    };
    Reader.prototype.sint32 = function read_sint32() {
      var value = this.uint32();
      return value >>> 1 ^ -(value & 1) | 0;
    };
    function readLongVarint() {
      var bits = new LongBits(0, 0);
      var i57 = 0;
      if (this.len - this.pos > 4) {
        for (; i57 < 4; ++i57) {
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i57 * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
        if (this.buf[this.pos++] < 128)
          return bits;
        i57 = 0;
      } else {
        for (; i57 < 3; ++i57) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i57 * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i57 * 7) >>> 0;
        return bits;
      }
      if (this.len - this.pos > 4) {
        for (; i57 < 5; ++i57) {
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i57 * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      } else {
        for (; i57 < 5; ++i57) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i57 * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      }
      throw Error("invalid varint encoding");
    }
    Reader.prototype.bool = function read_bool() {
      return this.uint32() !== 0;
    };
    function readFixed32_end(buf, end) {
      return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;
    }
    Reader.prototype.fixed32 = function read_fixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4);
    };
    Reader.prototype.sfixed32 = function read_sfixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4) | 0;
    };
    function readFixed64() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);
      return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
    }
    Reader.prototype.float = function read_float() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util.float.readFloatLE(this.buf, this.pos);
      this.pos += 4;
      return value;
    };
    Reader.prototype.double = function read_double() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util.float.readDoubleLE(this.buf, this.pos);
      this.pos += 8;
      return value;
    };
    Reader.prototype.bytes = function read_bytes() {
      var length = this.uint32(), start = this.pos, end = this.pos + length;
      if (end > this.len)
        throw indexOutOfRange(this, length);
      this.pos += length;
      if (Array.isArray(this.buf))
        return this.buf.slice(start, end);
      return start === end ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end);
    };
    Reader.prototype.string = function read_string() {
      var bytes = this.bytes();
      return utf8.read(bytes, 0, bytes.length);
    };
    Reader.prototype.skip = function skip(length) {
      if (typeof length === "number") {
        if (this.pos + length > this.len)
          throw indexOutOfRange(this, length);
        this.pos += length;
      } else {
        do {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
      }
      return this;
    };
    Reader.prototype.skipType = function(wireType) {
      switch (wireType) {
        case 0:
          this.skip();
          break;
        case 1:
          this.skip(8);
          break;
        case 2:
          this.skip(this.uint32());
          break;
        case 3:
          while ((wireType = this.uint32() & 7) !== 4) {
            this.skipType(wireType);
          }
          break;
        case 5:
          this.skip(4);
          break;
        default:
          throw Error("invalid wire type " + wireType + " at offset " + this.pos);
      }
      return this;
    };
    Reader._configure = function(BufferReader_) {
      BufferReader = BufferReader_;
      Reader.create = create();
      BufferReader._configure();
      var fn2 = util.Long ? "toLong" : (
        /* istanbul ignore next */
        "toNumber"
      );
      util.merge(Reader.prototype, {
        int64: function read_int64() {
          return readLongVarint.call(this)[fn2](false);
        },
        uint64: function read_uint64() {
          return readLongVarint.call(this)[fn2](true);
        },
        sint64: function read_sint64() {
          return readLongVarint.call(this).zzDecode()[fn2](false);
        },
        fixed64: function read_fixed64() {
          return readFixed64.call(this)[fn2](true);
        },
        sfixed64: function read_sfixed64() {
          return readFixed64.call(this)[fn2](false);
        }
      });
    };
  }
});

// ../../node_modules/protobufjs/src/reader_buffer.js
var require_reader_buffer = __commonJS({
  "../../node_modules/protobufjs/src/reader_buffer.js"(exports2, module2) {
    "use strict";
    init_esm_shims();
    module2.exports = BufferReader;
    var Reader = require_reader();
    (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;
    var util = require_minimal();
    function BufferReader(buffer) {
      Reader.call(this, buffer);
    }
    BufferReader._configure = function() {
      if (util.Buffer)
        BufferReader.prototype._slice = util.Buffer.prototype.slice;
    };
    BufferReader.prototype.string = function read_string_buffer() {
      var len = this.uint32();
      return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
    };
    BufferReader._configure();
  }
});

// ../../node_modules/protobufjs/src/rpc/service.js
var require_service = __commonJS({
  "../../node_modules/protobufjs/src/rpc/service.js"(exports2, module2) {
    "use strict";
    init_esm_shims();
    module2.exports = Service;
    var util = require_minimal();
    (Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;
    function Service(rpcImpl, requestDelimited, responseDelimited) {
      if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");
      util.EventEmitter.call(this);
      this.rpcImpl = rpcImpl;
      this.requestDelimited = Boolean(requestDelimited);
      this.responseDelimited = Boolean(responseDelimited);
    }
    Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {
      if (!request)
        throw TypeError("request must be specified");
      var self2 = this;
      if (!callback)
        return util.asPromise(rpcCall, self2, method, requestCtor, responseCtor, request);
      if (!self2.rpcImpl) {
        setTimeout(function() {
          callback(Error("already ended"));
        }, 0);
        return void 0;
      }
      try {
        return self2.rpcImpl(
          method,
          requestCtor[self2.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
          function rpcCallback(err10, response) {
            if (err10) {
              self2.emit("error", err10, method);
              return callback(err10);
            }
            if (response === null) {
              self2.end(
                /* endedByRPC */
                true
              );
              return void 0;
            }
            if (!(response instanceof responseCtor)) {
              try {
                response = responseCtor[self2.responseDelimited ? "decodeDelimited" : "decode"](response);
              } catch (err11) {
                self2.emit("error", err11, method);
                return callback(err11);
              }
            }
            self2.emit("data", response, method);
            return callback(null, response);
          }
        );
      } catch (err10) {
        self2.emit("error", err10, method);
        setTimeout(function() {
          callback(err10);
        }, 0);
        return void 0;
      }
    };
    Service.prototype.end = function end(endedByRPC) {
      if (this.rpcImpl) {
        if (!endedByRPC)
          this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
      }
      return this;
    };
  }
});

// ../../node_modules/protobufjs/src/rpc.js
var require_rpc = __commonJS({
  "../../node_modules/protobufjs/src/rpc.js"(exports2) {
    "use strict";
    init_esm_shims();
    var rpc = exports2;
    rpc.Service = require_service();
  }
});

// ../../node_modules/protobufjs/src/roots.js
var require_roots = __commonJS({
  "../../node_modules/protobufjs/src/roots.js"(exports2, module2) {
    "use strict";
    init_esm_shims();
    module2.exports = {};
  }
});

// ../../node_modules/protobufjs/src/index-minimal.js
var require_index_minimal = __commonJS({
  "../../node_modules/protobufjs/src/index-minimal.js"(exports2) {
    "use strict";
    init_esm_shims();
    var protobuf = exports2;
    protobuf.build = "minimal";
    protobuf.Writer = require_writer();
    protobuf.BufferWriter = require_writer_buffer();
    protobuf.Reader = require_reader();
    protobuf.BufferReader = require_reader_buffer();
    protobuf.util = require_minimal();
    protobuf.rpc = require_rpc();
    protobuf.roots = require_roots();
    protobuf.configure = configure;
    function configure() {
      protobuf.util._configure();
      protobuf.Writer._configure(protobuf.BufferWriter);
      protobuf.Reader._configure(protobuf.BufferReader);
    }
    configure();
  }
});

// ../../node_modules/protobufjs/minimal.js
var require_minimal2 = __commonJS({
  "../../node_modules/protobufjs/minimal.js"(exports2, module2) {
    "use strict";
    init_esm_shims();
    module2.exports = require_index_minimal();
  }
});

// ../../node_modules/lodash.mergewith/index.js
var require_lodash = __commonJS({
  "../../node_modules/lodash.mergewith/index.js"(exports2, module2) {
    init_esm_shims();
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e57) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function baseTimes(n57, iteratee) {
      var index = -1, result = Array(n57);
      while (++index < n57) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var objectCtorString = funcToString.call(Object);
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var Symbol2 = root.Symbol;
    var Uint8Array2 = root.Uint8Array;
    var allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var objectCreate = Object.create;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e57) {
      }
    }();
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var nativeMax = Math.max;
    var nativeNow = Date.now;
    var Map = getNative(root, "Map");
    var nativeCreate = getNative(Object, "create");
    var baseCreate = function() {
      function object() {
      }
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    var baseFor = createBaseFor();
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + "");
    }
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    function copyArray(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e57) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
        return eq(object[index], value);
      }
      return false;
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    function overRest(func, start, transform) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    var setToString = shortOut(baseSetToString);
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e57) {
        }
        try {
          return func + "";
        } catch (e57) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    var mergeWith2 = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });
    function constant(value) {
      return function() {
        return value;
      };
    }
    function identity(value) {
      return value;
    }
    function stubFalse() {
      return false;
    }
    module2.exports = mergeWith2;
  }
});

// src/index.ts
init_esm_shims();

// src/protobufs/index.ts
init_esm_shims();

// src/protobufs/generated/gossip.ts
init_esm_shims();
var import_long3 = __toESM(require_long());
var import_minimal3 = __toESM(require_minimal2());

// src/protobufs/generated/message.ts
init_esm_shims();
var import_long2 = __toESM(require_long());
var import_minimal2 = __toESM(require_minimal2());

// src/protobufs/generated/username_proof.ts
init_esm_shims();
var import_long = __toESM(require_long());
var import_minimal = __toESM(require_minimal2());
var UserNameType = /* @__PURE__ */ ((UserNameType2) => {
  UserNameType2[UserNameType2["USERNAME_TYPE_NONE"] = 0] = "USERNAME_TYPE_NONE";
  UserNameType2[UserNameType2["USERNAME_TYPE_FNAME"] = 1] = "USERNAME_TYPE_FNAME";
  UserNameType2[UserNameType2["USERNAME_TYPE_ENS_L1"] = 2] = "USERNAME_TYPE_ENS_L1";
  return UserNameType2;
})(UserNameType || {});
function userNameTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "USERNAME_TYPE_NONE":
      return 0 /* USERNAME_TYPE_NONE */;
    case 1:
    case "USERNAME_TYPE_FNAME":
      return 1 /* USERNAME_TYPE_FNAME */;
    case 2:
    case "USERNAME_TYPE_ENS_L1":
      return 2 /* USERNAME_TYPE_ENS_L1 */;
    default:
      throw new tsProtoGlobalThis.Error("Unrecognized enum value " + object + " for enum UserNameType");
  }
}
function userNameTypeToJSON(object) {
  switch (object) {
    case 0 /* USERNAME_TYPE_NONE */:
      return "USERNAME_TYPE_NONE";
    case 1 /* USERNAME_TYPE_FNAME */:
      return "USERNAME_TYPE_FNAME";
    case 2 /* USERNAME_TYPE_ENS_L1 */:
      return "USERNAME_TYPE_ENS_L1";
    default:
      throw new tsProtoGlobalThis.Error("Unrecognized enum value " + object + " for enum UserNameType");
  }
}
function createBaseUserNameProof() {
  return {
    timestamp: 0,
    name: new Uint8Array(),
    owner: new Uint8Array(),
    signature: new Uint8Array(),
    fid: 0,
    type: 0
  };
}
var UserNameProof = {
  encode(message, writer = import_minimal.default.Writer.create()) {
    if (message.timestamp !== 0) {
      writer.uint32(8).uint64(message.timestamp);
    }
    if (message.name.length !== 0) {
      writer.uint32(18).bytes(message.name);
    }
    if (message.owner.length !== 0) {
      writer.uint32(26).bytes(message.owner);
    }
    if (message.signature.length !== 0) {
      writer.uint32(34).bytes(message.signature);
    }
    if (message.fid !== 0) {
      writer.uint32(40).uint64(message.fid);
    }
    if (message.type !== 0) {
      writer.uint32(48).int32(message.type);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal.default.Reader ? input : import_minimal.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseUserNameProof();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.timestamp = longToNumber(reader.uint64());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.name = reader.bytes();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.owner = reader.bytes();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.signature = reader.bytes();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.fid = longToNumber(reader.uint64());
          continue;
        case 6:
          if (tag != 48) {
            break;
          }
          message.type = reader.int32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      timestamp: isSet(object.timestamp) ? Number(object.timestamp) : 0,
      name: isSet(object.name) ? bytesFromBase64(object.name) : new Uint8Array(),
      owner: isSet(object.owner) ? bytesFromBase64(object.owner) : new Uint8Array(),
      signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(),
      fid: isSet(object.fid) ? Number(object.fid) : 0,
      type: isSet(object.type) ? userNameTypeFromJSON(object.type) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.timestamp !== void 0 && (obj.timestamp = Math.round(message.timestamp));
    message.name !== void 0 && (obj.name = base64FromBytes(message.name !== void 0 ? message.name : new Uint8Array()));
    message.owner !== void 0 && (obj.owner = base64FromBytes(message.owner !== void 0 ? message.owner : new Uint8Array()));
    message.signature !== void 0 && (obj.signature = base64FromBytes(message.signature !== void 0 ? message.signature : new Uint8Array()));
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.type !== void 0 && (obj.type = userNameTypeToJSON(message.type));
    return obj;
  },
  create(base) {
    return UserNameProof.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d, _e5, _f;
    const message = createBaseUserNameProof();
    message.timestamp = (_a2 = object.timestamp) != null ? _a2 : 0;
    message.name = (_b = object.name) != null ? _b : new Uint8Array();
    message.owner = (_c = object.owner) != null ? _c : new Uint8Array();
    message.signature = (_d = object.signature) != null ? _d : new Uint8Array();
    message.fid = (_e5 = object.fid) != null ? _e5 : 0;
    message.type = (_f = object.type) != null ? _f : 0;
    return message;
  }
};
var tsProtoGlobalThis = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
  if (tsProtoGlobalThis.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i57 = 0; i57 < bin.length; ++i57) {
      arr[i57] = bin.charCodeAt(i57);
    }
    return arr;
  }
}
function base64FromBytes(arr) {
  if (tsProtoGlobalThis.Buffer) {
    return tsProtoGlobalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis.btoa(bin.join(""));
  }
}
function longToNumber(long) {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}
if (import_minimal.default.util.Long !== import_long.default) {
  import_minimal.default.util.Long = import_long.default;
  import_minimal.default.configure();
}
function isSet(value) {
  return value !== null && value !== void 0;
}

// src/protobufs/generated/message.ts
var HashScheme = /* @__PURE__ */ ((HashScheme2) => {
  HashScheme2[HashScheme2["NONE"] = 0] = "NONE";
  HashScheme2[HashScheme2["BLAKE3"] = 1] = "BLAKE3";
  return HashScheme2;
})(HashScheme || {});
function hashSchemeFromJSON(object) {
  switch (object) {
    case 0:
    case "HASH_SCHEME_NONE":
      return 0 /* NONE */;
    case 1:
    case "HASH_SCHEME_BLAKE3":
      return 1 /* BLAKE3 */;
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum HashScheme");
  }
}
function hashSchemeToJSON(object) {
  switch (object) {
    case 0 /* NONE */:
      return "HASH_SCHEME_NONE";
    case 1 /* BLAKE3 */:
      return "HASH_SCHEME_BLAKE3";
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum HashScheme");
  }
}
var SignatureScheme = /* @__PURE__ */ ((SignatureScheme2) => {
  SignatureScheme2[SignatureScheme2["NONE"] = 0] = "NONE";
  SignatureScheme2[SignatureScheme2["ED25519"] = 1] = "ED25519";
  SignatureScheme2[SignatureScheme2["EIP712"] = 2] = "EIP712";
  return SignatureScheme2;
})(SignatureScheme || {});
function signatureSchemeFromJSON(object) {
  switch (object) {
    case 0:
    case "SIGNATURE_SCHEME_NONE":
      return 0 /* NONE */;
    case 1:
    case "SIGNATURE_SCHEME_ED25519":
      return 1 /* ED25519 */;
    case 2:
    case "SIGNATURE_SCHEME_EIP712":
      return 2 /* EIP712 */;
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum SignatureScheme");
  }
}
function signatureSchemeToJSON(object) {
  switch (object) {
    case 0 /* NONE */:
      return "SIGNATURE_SCHEME_NONE";
    case 1 /* ED25519 */:
      return "SIGNATURE_SCHEME_ED25519";
    case 2 /* EIP712 */:
      return "SIGNATURE_SCHEME_EIP712";
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum SignatureScheme");
  }
}
var MessageType = /* @__PURE__ */ ((MessageType2) => {
  MessageType2[MessageType2["NONE"] = 0] = "NONE";
  MessageType2[MessageType2["CAST_ADD"] = 1] = "CAST_ADD";
  MessageType2[MessageType2["CAST_REMOVE"] = 2] = "CAST_REMOVE";
  MessageType2[MessageType2["REACTION_ADD"] = 3] = "REACTION_ADD";
  MessageType2[MessageType2["REACTION_REMOVE"] = 4] = "REACTION_REMOVE";
  MessageType2[MessageType2["LINK_ADD"] = 5] = "LINK_ADD";
  MessageType2[MessageType2["LINK_REMOVE"] = 6] = "LINK_REMOVE";
  MessageType2[MessageType2["VERIFICATION_ADD_ETH_ADDRESS"] = 7] = "VERIFICATION_ADD_ETH_ADDRESS";
  MessageType2[MessageType2["VERIFICATION_REMOVE"] = 8] = "VERIFICATION_REMOVE";
  MessageType2[MessageType2["USER_DATA_ADD"] = 11] = "USER_DATA_ADD";
  MessageType2[MessageType2["USERNAME_PROOF"] = 12] = "USERNAME_PROOF";
  MessageType2[MessageType2["FRAME_ACTION"] = 13] = "FRAME_ACTION";
  return MessageType2;
})(MessageType || {});
function messageTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "MESSAGE_TYPE_NONE":
      return 0 /* NONE */;
    case 1:
    case "MESSAGE_TYPE_CAST_ADD":
      return 1 /* CAST_ADD */;
    case 2:
    case "MESSAGE_TYPE_CAST_REMOVE":
      return 2 /* CAST_REMOVE */;
    case 3:
    case "MESSAGE_TYPE_REACTION_ADD":
      return 3 /* REACTION_ADD */;
    case 4:
    case "MESSAGE_TYPE_REACTION_REMOVE":
      return 4 /* REACTION_REMOVE */;
    case 5:
    case "MESSAGE_TYPE_LINK_ADD":
      return 5 /* LINK_ADD */;
    case 6:
    case "MESSAGE_TYPE_LINK_REMOVE":
      return 6 /* LINK_REMOVE */;
    case 7:
    case "MESSAGE_TYPE_VERIFICATION_ADD_ETH_ADDRESS":
      return 7 /* VERIFICATION_ADD_ETH_ADDRESS */;
    case 8:
    case "MESSAGE_TYPE_VERIFICATION_REMOVE":
      return 8 /* VERIFICATION_REMOVE */;
    case 11:
    case "MESSAGE_TYPE_USER_DATA_ADD":
      return 11 /* USER_DATA_ADD */;
    case 12:
    case "MESSAGE_TYPE_USERNAME_PROOF":
      return 12 /* USERNAME_PROOF */;
    case 13:
    case "MESSAGE_TYPE_FRAME_ACTION":
      return 13 /* FRAME_ACTION */;
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum MessageType");
  }
}
function messageTypeToJSON(object) {
  switch (object) {
    case 0 /* NONE */:
      return "MESSAGE_TYPE_NONE";
    case 1 /* CAST_ADD */:
      return "MESSAGE_TYPE_CAST_ADD";
    case 2 /* CAST_REMOVE */:
      return "MESSAGE_TYPE_CAST_REMOVE";
    case 3 /* REACTION_ADD */:
      return "MESSAGE_TYPE_REACTION_ADD";
    case 4 /* REACTION_REMOVE */:
      return "MESSAGE_TYPE_REACTION_REMOVE";
    case 5 /* LINK_ADD */:
      return "MESSAGE_TYPE_LINK_ADD";
    case 6 /* LINK_REMOVE */:
      return "MESSAGE_TYPE_LINK_REMOVE";
    case 7 /* VERIFICATION_ADD_ETH_ADDRESS */:
      return "MESSAGE_TYPE_VERIFICATION_ADD_ETH_ADDRESS";
    case 8 /* VERIFICATION_REMOVE */:
      return "MESSAGE_TYPE_VERIFICATION_REMOVE";
    case 11 /* USER_DATA_ADD */:
      return "MESSAGE_TYPE_USER_DATA_ADD";
    case 12 /* USERNAME_PROOF */:
      return "MESSAGE_TYPE_USERNAME_PROOF";
    case 13 /* FRAME_ACTION */:
      return "MESSAGE_TYPE_FRAME_ACTION";
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum MessageType");
  }
}
var FarcasterNetwork = /* @__PURE__ */ ((FarcasterNetwork3) => {
  FarcasterNetwork3[FarcasterNetwork3["NONE"] = 0] = "NONE";
  FarcasterNetwork3[FarcasterNetwork3["MAINNET"] = 1] = "MAINNET";
  FarcasterNetwork3[FarcasterNetwork3["TESTNET"] = 2] = "TESTNET";
  FarcasterNetwork3[FarcasterNetwork3["DEVNET"] = 3] = "DEVNET";
  return FarcasterNetwork3;
})(FarcasterNetwork || {});
function farcasterNetworkFromJSON(object) {
  switch (object) {
    case 0:
    case "FARCASTER_NETWORK_NONE":
      return 0 /* NONE */;
    case 1:
    case "FARCASTER_NETWORK_MAINNET":
      return 1 /* MAINNET */;
    case 2:
    case "FARCASTER_NETWORK_TESTNET":
      return 2 /* TESTNET */;
    case 3:
    case "FARCASTER_NETWORK_DEVNET":
      return 3 /* DEVNET */;
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum FarcasterNetwork");
  }
}
function farcasterNetworkToJSON(object) {
  switch (object) {
    case 0 /* NONE */:
      return "FARCASTER_NETWORK_NONE";
    case 1 /* MAINNET */:
      return "FARCASTER_NETWORK_MAINNET";
    case 2 /* TESTNET */:
      return "FARCASTER_NETWORK_TESTNET";
    case 3 /* DEVNET */:
      return "FARCASTER_NETWORK_DEVNET";
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum FarcasterNetwork");
  }
}
var UserDataType = /* @__PURE__ */ ((UserDataType3) => {
  UserDataType3[UserDataType3["NONE"] = 0] = "NONE";
  UserDataType3[UserDataType3["PFP"] = 1] = "PFP";
  UserDataType3[UserDataType3["DISPLAY"] = 2] = "DISPLAY";
  UserDataType3[UserDataType3["BIO"] = 3] = "BIO";
  UserDataType3[UserDataType3["URL"] = 5] = "URL";
  UserDataType3[UserDataType3["USERNAME"] = 6] = "USERNAME";
  return UserDataType3;
})(UserDataType || {});
function userDataTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "USER_DATA_TYPE_NONE":
      return 0 /* NONE */;
    case 1:
    case "USER_DATA_TYPE_PFP":
      return 1 /* PFP */;
    case 2:
    case "USER_DATA_TYPE_DISPLAY":
      return 2 /* DISPLAY */;
    case 3:
    case "USER_DATA_TYPE_BIO":
      return 3 /* BIO */;
    case 5:
    case "USER_DATA_TYPE_URL":
      return 5 /* URL */;
    case 6:
    case "USER_DATA_TYPE_USERNAME":
      return 6 /* USERNAME */;
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum UserDataType");
  }
}
function userDataTypeToJSON(object) {
  switch (object) {
    case 0 /* NONE */:
      return "USER_DATA_TYPE_NONE";
    case 1 /* PFP */:
      return "USER_DATA_TYPE_PFP";
    case 2 /* DISPLAY */:
      return "USER_DATA_TYPE_DISPLAY";
    case 3 /* BIO */:
      return "USER_DATA_TYPE_BIO";
    case 5 /* URL */:
      return "USER_DATA_TYPE_URL";
    case 6 /* USERNAME */:
      return "USER_DATA_TYPE_USERNAME";
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum UserDataType");
  }
}
var ReactionType = /* @__PURE__ */ ((ReactionType3) => {
  ReactionType3[ReactionType3["NONE"] = 0] = "NONE";
  ReactionType3[ReactionType3["LIKE"] = 1] = "LIKE";
  ReactionType3[ReactionType3["RECAST"] = 2] = "RECAST";
  return ReactionType3;
})(ReactionType || {});
function reactionTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "REACTION_TYPE_NONE":
      return 0 /* NONE */;
    case 1:
    case "REACTION_TYPE_LIKE":
      return 1 /* LIKE */;
    case 2:
    case "REACTION_TYPE_RECAST":
      return 2 /* RECAST */;
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum ReactionType");
  }
}
function reactionTypeToJSON(object) {
  switch (object) {
    case 0 /* NONE */:
      return "REACTION_TYPE_NONE";
    case 1 /* LIKE */:
      return "REACTION_TYPE_LIKE";
    case 2 /* RECAST */:
      return "REACTION_TYPE_RECAST";
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum ReactionType");
  }
}
var Protocol = /* @__PURE__ */ ((Protocol2) => {
  Protocol2[Protocol2["ETHEREUM"] = 0] = "ETHEREUM";
  Protocol2[Protocol2["SOLANA"] = 1] = "SOLANA";
  return Protocol2;
})(Protocol || {});
function protocolFromJSON(object) {
  switch (object) {
    case 0:
    case "PROTOCOL_ETHEREUM":
      return 0 /* ETHEREUM */;
    case 1:
    case "PROTOCOL_SOLANA":
      return 1 /* SOLANA */;
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum Protocol");
  }
}
function protocolToJSON(object) {
  switch (object) {
    case 0 /* ETHEREUM */:
      return "PROTOCOL_ETHEREUM";
    case 1 /* SOLANA */:
      return "PROTOCOL_SOLANA";
    default:
      throw new tsProtoGlobalThis2.Error("Unrecognized enum value " + object + " for enum Protocol");
  }
}
function createBaseMessage() {
  return {
    data: void 0,
    hash: new Uint8Array(),
    hashScheme: 0,
    signature: new Uint8Array(),
    signatureScheme: 0,
    signer: new Uint8Array(),
    dataBytes: void 0
  };
}
var Message = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.data !== void 0) {
      MessageData.encode(message.data, writer.uint32(10).fork()).ldelim();
    }
    if (message.hash.length !== 0) {
      writer.uint32(18).bytes(message.hash);
    }
    if (message.hashScheme !== 0) {
      writer.uint32(24).int32(message.hashScheme);
    }
    if (message.signature.length !== 0) {
      writer.uint32(34).bytes(message.signature);
    }
    if (message.signatureScheme !== 0) {
      writer.uint32(40).int32(message.signatureScheme);
    }
    if (message.signer.length !== 0) {
      writer.uint32(50).bytes(message.signer);
    }
    if (message.dataBytes !== void 0) {
      writer.uint32(58).bytes(message.dataBytes);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.data = MessageData.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.hash = reader.bytes();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.hashScheme = reader.int32();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.signature = reader.bytes();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.signatureScheme = reader.int32();
          continue;
        case 6:
          if (tag != 50) {
            break;
          }
          message.signer = reader.bytes();
          continue;
        case 7:
          if (tag != 58) {
            break;
          }
          message.dataBytes = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      data: isSet2(object.data) ? MessageData.fromJSON(object.data) : void 0,
      hash: isSet2(object.hash) ? bytesFromBase642(object.hash) : new Uint8Array(),
      hashScheme: isSet2(object.hashScheme) ? hashSchemeFromJSON(object.hashScheme) : 0,
      signature: isSet2(object.signature) ? bytesFromBase642(object.signature) : new Uint8Array(),
      signatureScheme: isSet2(object.signatureScheme) ? signatureSchemeFromJSON(object.signatureScheme) : 0,
      signer: isSet2(object.signer) ? bytesFromBase642(object.signer) : new Uint8Array(),
      dataBytes: isSet2(object.dataBytes) ? bytesFromBase642(object.dataBytes) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.data !== void 0 && (obj.data = message.data ? MessageData.toJSON(message.data) : void 0);
    message.hash !== void 0 && (obj.hash = base64FromBytes2(message.hash !== void 0 ? message.hash : new Uint8Array()));
    message.hashScheme !== void 0 && (obj.hashScheme = hashSchemeToJSON(message.hashScheme));
    message.signature !== void 0 && (obj.signature = base64FromBytes2(message.signature !== void 0 ? message.signature : new Uint8Array()));
    message.signatureScheme !== void 0 && (obj.signatureScheme = signatureSchemeToJSON(message.signatureScheme));
    message.signer !== void 0 && (obj.signer = base64FromBytes2(message.signer !== void 0 ? message.signer : new Uint8Array()));
    message.dataBytes !== void 0 && (obj.dataBytes = message.dataBytes !== void 0 ? base64FromBytes2(message.dataBytes) : void 0);
    return obj;
  },
  create(base) {
    return Message.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d, _e5, _f;
    const message = createBaseMessage();
    message.data = object.data !== void 0 && object.data !== null ? MessageData.fromPartial(object.data) : void 0;
    message.hash = (_a2 = object.hash) != null ? _a2 : new Uint8Array();
    message.hashScheme = (_b = object.hashScheme) != null ? _b : 0;
    message.signature = (_c = object.signature) != null ? _c : new Uint8Array();
    message.signatureScheme = (_d = object.signatureScheme) != null ? _d : 0;
    message.signer = (_e5 = object.signer) != null ? _e5 : new Uint8Array();
    message.dataBytes = (_f = object.dataBytes) != null ? _f : void 0;
    return message;
  }
};
function createBaseMessageData() {
  return {
    type: 0,
    fid: 0,
    timestamp: 0,
    network: 0,
    castAddBody: void 0,
    castRemoveBody: void 0,
    reactionBody: void 0,
    verificationAddAddressBody: void 0,
    verificationRemoveBody: void 0,
    userDataBody: void 0,
    linkBody: void 0,
    usernameProofBody: void 0,
    frameActionBody: void 0
  };
}
var MessageData = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.fid !== 0) {
      writer.uint32(16).uint64(message.fid);
    }
    if (message.timestamp !== 0) {
      writer.uint32(24).uint32(message.timestamp);
    }
    if (message.network !== 0) {
      writer.uint32(32).int32(message.network);
    }
    if (message.castAddBody !== void 0) {
      CastAddBody.encode(message.castAddBody, writer.uint32(42).fork()).ldelim();
    }
    if (message.castRemoveBody !== void 0) {
      CastRemoveBody.encode(message.castRemoveBody, writer.uint32(50).fork()).ldelim();
    }
    if (message.reactionBody !== void 0) {
      ReactionBody.encode(message.reactionBody, writer.uint32(58).fork()).ldelim();
    }
    if (message.verificationAddAddressBody !== void 0) {
      VerificationAddAddressBody.encode(message.verificationAddAddressBody, writer.uint32(74).fork()).ldelim();
    }
    if (message.verificationRemoveBody !== void 0) {
      VerificationRemoveBody.encode(message.verificationRemoveBody, writer.uint32(82).fork()).ldelim();
    }
    if (message.userDataBody !== void 0) {
      UserDataBody.encode(message.userDataBody, writer.uint32(98).fork()).ldelim();
    }
    if (message.linkBody !== void 0) {
      LinkBody.encode(message.linkBody, writer.uint32(114).fork()).ldelim();
    }
    if (message.usernameProofBody !== void 0) {
      UserNameProof.encode(message.usernameProofBody, writer.uint32(122).fork()).ldelim();
    }
    if (message.frameActionBody !== void 0) {
      FrameActionBody.encode(message.frameActionBody, writer.uint32(130).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMessageData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.type = reader.int32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.fid = longToNumber2(reader.uint64());
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.timestamp = reader.uint32();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }
          message.network = reader.int32();
          continue;
        case 5:
          if (tag != 42) {
            break;
          }
          message.castAddBody = CastAddBody.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }
          message.castRemoveBody = CastRemoveBody.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }
          message.reactionBody = ReactionBody.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }
          message.verificationAddAddressBody = VerificationAddAddressBody.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag != 82) {
            break;
          }
          message.verificationRemoveBody = VerificationRemoveBody.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag != 98) {
            break;
          }
          message.userDataBody = UserDataBody.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag != 114) {
            break;
          }
          message.linkBody = LinkBody.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag != 122) {
            break;
          }
          message.usernameProofBody = UserNameProof.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag != 130) {
            break;
          }
          message.frameActionBody = FrameActionBody.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      type: isSet2(object.type) ? messageTypeFromJSON(object.type) : 0,
      fid: isSet2(object.fid) ? Number(object.fid) : 0,
      timestamp: isSet2(object.timestamp) ? Number(object.timestamp) : 0,
      network: isSet2(object.network) ? farcasterNetworkFromJSON(object.network) : 0,
      castAddBody: isSet2(object.castAddBody) ? CastAddBody.fromJSON(object.castAddBody) : void 0,
      castRemoveBody: isSet2(object.castRemoveBody) ? CastRemoveBody.fromJSON(object.castRemoveBody) : void 0,
      reactionBody: isSet2(object.reactionBody) ? ReactionBody.fromJSON(object.reactionBody) : void 0,
      verificationAddAddressBody: isSet2(object.verificationAddAddressBody) ? VerificationAddAddressBody.fromJSON(object.verificationAddAddressBody) : void 0,
      verificationRemoveBody: isSet2(object.verificationRemoveBody) ? VerificationRemoveBody.fromJSON(object.verificationRemoveBody) : void 0,
      userDataBody: isSet2(object.userDataBody) ? UserDataBody.fromJSON(object.userDataBody) : void 0,
      linkBody: isSet2(object.linkBody) ? LinkBody.fromJSON(object.linkBody) : void 0,
      usernameProofBody: isSet2(object.usernameProofBody) ? UserNameProof.fromJSON(object.usernameProofBody) : void 0,
      frameActionBody: isSet2(object.frameActionBody) ? FrameActionBody.fromJSON(object.frameActionBody) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.type !== void 0 && (obj.type = messageTypeToJSON(message.type));
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.timestamp !== void 0 && (obj.timestamp = Math.round(message.timestamp));
    message.network !== void 0 && (obj.network = farcasterNetworkToJSON(message.network));
    message.castAddBody !== void 0 && (obj.castAddBody = message.castAddBody ? CastAddBody.toJSON(message.castAddBody) : void 0);
    message.castRemoveBody !== void 0 && (obj.castRemoveBody = message.castRemoveBody ? CastRemoveBody.toJSON(message.castRemoveBody) : void 0);
    message.reactionBody !== void 0 && (obj.reactionBody = message.reactionBody ? ReactionBody.toJSON(message.reactionBody) : void 0);
    message.verificationAddAddressBody !== void 0 && (obj.verificationAddAddressBody = message.verificationAddAddressBody ? VerificationAddAddressBody.toJSON(message.verificationAddAddressBody) : void 0);
    message.verificationRemoveBody !== void 0 && (obj.verificationRemoveBody = message.verificationRemoveBody ? VerificationRemoveBody.toJSON(message.verificationRemoveBody) : void 0);
    message.userDataBody !== void 0 && (obj.userDataBody = message.userDataBody ? UserDataBody.toJSON(message.userDataBody) : void 0);
    message.linkBody !== void 0 && (obj.linkBody = message.linkBody ? LinkBody.toJSON(message.linkBody) : void 0);
    message.usernameProofBody !== void 0 && (obj.usernameProofBody = message.usernameProofBody ? UserNameProof.toJSON(message.usernameProofBody) : void 0);
    message.frameActionBody !== void 0 && (obj.frameActionBody = message.frameActionBody ? FrameActionBody.toJSON(message.frameActionBody) : void 0);
    return obj;
  },
  create(base) {
    return MessageData.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d;
    const message = createBaseMessageData();
    message.type = (_a2 = object.type) != null ? _a2 : 0;
    message.fid = (_b = object.fid) != null ? _b : 0;
    message.timestamp = (_c = object.timestamp) != null ? _c : 0;
    message.network = (_d = object.network) != null ? _d : 0;
    message.castAddBody = object.castAddBody !== void 0 && object.castAddBody !== null ? CastAddBody.fromPartial(object.castAddBody) : void 0;
    message.castRemoveBody = object.castRemoveBody !== void 0 && object.castRemoveBody !== null ? CastRemoveBody.fromPartial(object.castRemoveBody) : void 0;
    message.reactionBody = object.reactionBody !== void 0 && object.reactionBody !== null ? ReactionBody.fromPartial(object.reactionBody) : void 0;
    message.verificationAddAddressBody = object.verificationAddAddressBody !== void 0 && object.verificationAddAddressBody !== null ? VerificationAddAddressBody.fromPartial(object.verificationAddAddressBody) : void 0;
    message.verificationRemoveBody = object.verificationRemoveBody !== void 0 && object.verificationRemoveBody !== null ? VerificationRemoveBody.fromPartial(object.verificationRemoveBody) : void 0;
    message.userDataBody = object.userDataBody !== void 0 && object.userDataBody !== null ? UserDataBody.fromPartial(object.userDataBody) : void 0;
    message.linkBody = object.linkBody !== void 0 && object.linkBody !== null ? LinkBody.fromPartial(object.linkBody) : void 0;
    message.usernameProofBody = object.usernameProofBody !== void 0 && object.usernameProofBody !== null ? UserNameProof.fromPartial(object.usernameProofBody) : void 0;
    message.frameActionBody = object.frameActionBody !== void 0 && object.frameActionBody !== null ? FrameActionBody.fromPartial(object.frameActionBody) : void 0;
    return message;
  }
};
function createBaseUserDataBody() {
  return { type: 0, value: "" };
}
var UserDataBody = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseUserDataBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.type = reader.int32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.value = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      type: isSet2(object.type) ? userDataTypeFromJSON(object.type) : 0,
      value: isSet2(object.value) ? String(object.value) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    message.type !== void 0 && (obj.type = userDataTypeToJSON(message.type));
    message.value !== void 0 && (obj.value = message.value);
    return obj;
  },
  create(base) {
    return UserDataBody.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b;
    const message = createBaseUserDataBody();
    message.type = (_a2 = object.type) != null ? _a2 : 0;
    message.value = (_b = object.value) != null ? _b : "";
    return message;
  }
};
function createBaseEmbed() {
  return { url: void 0, castId: void 0 };
}
var Embed = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.url !== void 0) {
      writer.uint32(10).string(message.url);
    }
    if (message.castId !== void 0) {
      CastId.encode(message.castId, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseEmbed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.url = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.castId = CastId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      url: isSet2(object.url) ? String(object.url) : void 0,
      castId: isSet2(object.castId) ? CastId.fromJSON(object.castId) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.url !== void 0 && (obj.url = message.url);
    message.castId !== void 0 && (obj.castId = message.castId ? CastId.toJSON(message.castId) : void 0);
    return obj;
  },
  create(base) {
    return Embed.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2;
    const message = createBaseEmbed();
    message.url = (_a2 = object.url) != null ? _a2 : void 0;
    message.castId = object.castId !== void 0 && object.castId !== null ? CastId.fromPartial(object.castId) : void 0;
    return message;
  }
};
function createBaseCastAddBody() {
  return {
    embedsDeprecated: [],
    mentions: [],
    parentCastId: void 0,
    parentUrl: void 0,
    text: "",
    mentionsPositions: [],
    embeds: []
  };
}
var CastAddBody = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    for (const v37 of message.embedsDeprecated) {
      writer.uint32(10).string(v37);
    }
    writer.uint32(18).fork();
    for (const v37 of message.mentions) {
      writer.uint64(v37);
    }
    writer.ldelim();
    if (message.parentCastId !== void 0) {
      CastId.encode(message.parentCastId, writer.uint32(26).fork()).ldelim();
    }
    if (message.parentUrl !== void 0) {
      writer.uint32(58).string(message.parentUrl);
    }
    if (message.text !== "") {
      writer.uint32(34).string(message.text);
    }
    writer.uint32(42).fork();
    for (const v37 of message.mentionsPositions) {
      writer.uint32(v37);
    }
    writer.ldelim();
    for (const v37 of message.embeds) {
      Embed.encode(v37, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCastAddBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.embedsDeprecated.push(reader.string());
          continue;
        case 2:
          if (tag == 16) {
            message.mentions.push(longToNumber2(reader.uint64()));
            continue;
          }
          if (tag == 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.mentions.push(longToNumber2(reader.uint64()));
            }
            continue;
          }
          break;
        case 3:
          if (tag != 26) {
            break;
          }
          message.parentCastId = CastId.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }
          message.parentUrl = reader.string();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.text = reader.string();
          continue;
        case 5:
          if (tag == 40) {
            message.mentionsPositions.push(reader.uint32());
            continue;
          }
          if (tag == 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.mentionsPositions.push(reader.uint32());
            }
            continue;
          }
          break;
        case 6:
          if (tag != 50) {
            break;
          }
          message.embeds.push(Embed.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      embedsDeprecated: Array.isArray(object == null ? void 0 : object.embedsDeprecated) ? object.embedsDeprecated.map((e57) => String(e57)) : [],
      mentions: Array.isArray(object == null ? void 0 : object.mentions) ? object.mentions.map((e57) => Number(e57)) : [],
      parentCastId: isSet2(object.parentCastId) ? CastId.fromJSON(object.parentCastId) : void 0,
      parentUrl: isSet2(object.parentUrl) ? String(object.parentUrl) : void 0,
      text: isSet2(object.text) ? String(object.text) : "",
      mentionsPositions: Array.isArray(object == null ? void 0 : object.mentionsPositions) ? object.mentionsPositions.map((e57) => Number(e57)) : [],
      embeds: Array.isArray(object == null ? void 0 : object.embeds) ? object.embeds.map((e57) => Embed.fromJSON(e57)) : []
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.embedsDeprecated) {
      obj.embedsDeprecated = message.embedsDeprecated.map((e57) => e57);
    } else {
      obj.embedsDeprecated = [];
    }
    if (message.mentions) {
      obj.mentions = message.mentions.map((e57) => Math.round(e57));
    } else {
      obj.mentions = [];
    }
    message.parentCastId !== void 0 && (obj.parentCastId = message.parentCastId ? CastId.toJSON(message.parentCastId) : void 0);
    message.parentUrl !== void 0 && (obj.parentUrl = message.parentUrl);
    message.text !== void 0 && (obj.text = message.text);
    if (message.mentionsPositions) {
      obj.mentionsPositions = message.mentionsPositions.map((e57) => Math.round(e57));
    } else {
      obj.mentionsPositions = [];
    }
    if (message.embeds) {
      obj.embeds = message.embeds.map((e57) => e57 ? Embed.toJSON(e57) : void 0);
    } else {
      obj.embeds = [];
    }
    return obj;
  },
  create(base) {
    return CastAddBody.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d, _e5, _f;
    const message = createBaseCastAddBody();
    message.embedsDeprecated = ((_a2 = object.embedsDeprecated) == null ? void 0 : _a2.map((e57) => e57)) || [];
    message.mentions = ((_b = object.mentions) == null ? void 0 : _b.map((e57) => e57)) || [];
    message.parentCastId = object.parentCastId !== void 0 && object.parentCastId !== null ? CastId.fromPartial(object.parentCastId) : void 0;
    message.parentUrl = (_c = object.parentUrl) != null ? _c : void 0;
    message.text = (_d = object.text) != null ? _d : "";
    message.mentionsPositions = ((_e5 = object.mentionsPositions) == null ? void 0 : _e5.map((e57) => e57)) || [];
    message.embeds = ((_f = object.embeds) == null ? void 0 : _f.map((e57) => Embed.fromPartial(e57))) || [];
    return message;
  }
};
function createBaseCastRemoveBody() {
  return { targetHash: new Uint8Array() };
}
var CastRemoveBody = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.targetHash.length !== 0) {
      writer.uint32(10).bytes(message.targetHash);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCastRemoveBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.targetHash = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { targetHash: isSet2(object.targetHash) ? bytesFromBase642(object.targetHash) : new Uint8Array() };
  },
  toJSON(message) {
    const obj = {};
    message.targetHash !== void 0 && (obj.targetHash = base64FromBytes2(message.targetHash !== void 0 ? message.targetHash : new Uint8Array()));
    return obj;
  },
  create(base) {
    return CastRemoveBody.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2;
    const message = createBaseCastRemoveBody();
    message.targetHash = (_a2 = object.targetHash) != null ? _a2 : new Uint8Array();
    return message;
  }
};
function createBaseCastId() {
  return { fid: 0, hash: new Uint8Array() };
}
var CastId = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.hash.length !== 0) {
      writer.uint32(18).bytes(message.hash);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCastId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber2(reader.uint64());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.hash = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet2(object.fid) ? Number(object.fid) : 0,
      hash: isSet2(object.hash) ? bytesFromBase642(object.hash) : new Uint8Array()
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.hash !== void 0 && (obj.hash = base64FromBytes2(message.hash !== void 0 ? message.hash : new Uint8Array()));
    return obj;
  },
  create(base) {
    return CastId.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b;
    const message = createBaseCastId();
    message.fid = (_a2 = object.fid) != null ? _a2 : 0;
    message.hash = (_b = object.hash) != null ? _b : new Uint8Array();
    return message;
  }
};
function createBaseReactionBody() {
  return { type: 0, targetCastId: void 0, targetUrl: void 0 };
}
var ReactionBody = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.targetCastId !== void 0) {
      CastId.encode(message.targetCastId, writer.uint32(18).fork()).ldelim();
    }
    if (message.targetUrl !== void 0) {
      writer.uint32(26).string(message.targetUrl);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseReactionBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.type = reader.int32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.targetCastId = CastId.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.targetUrl = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      type: isSet2(object.type) ? reactionTypeFromJSON(object.type) : 0,
      targetCastId: isSet2(object.targetCastId) ? CastId.fromJSON(object.targetCastId) : void 0,
      targetUrl: isSet2(object.targetUrl) ? String(object.targetUrl) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.type !== void 0 && (obj.type = reactionTypeToJSON(message.type));
    message.targetCastId !== void 0 && (obj.targetCastId = message.targetCastId ? CastId.toJSON(message.targetCastId) : void 0);
    message.targetUrl !== void 0 && (obj.targetUrl = message.targetUrl);
    return obj;
  },
  create(base) {
    return ReactionBody.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b;
    const message = createBaseReactionBody();
    message.type = (_a2 = object.type) != null ? _a2 : 0;
    message.targetCastId = object.targetCastId !== void 0 && object.targetCastId !== null ? CastId.fromPartial(object.targetCastId) : void 0;
    message.targetUrl = (_b = object.targetUrl) != null ? _b : void 0;
    return message;
  }
};
function createBaseVerificationAddAddressBody() {
  return {
    address: new Uint8Array(),
    claimSignature: new Uint8Array(),
    blockHash: new Uint8Array(),
    verificationType: 0,
    chainId: 0,
    protocol: 0
  };
}
var VerificationAddAddressBody = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.address.length !== 0) {
      writer.uint32(10).bytes(message.address);
    }
    if (message.claimSignature.length !== 0) {
      writer.uint32(18).bytes(message.claimSignature);
    }
    if (message.blockHash.length !== 0) {
      writer.uint32(26).bytes(message.blockHash);
    }
    if (message.verificationType !== 0) {
      writer.uint32(32).uint32(message.verificationType);
    }
    if (message.chainId !== 0) {
      writer.uint32(40).uint32(message.chainId);
    }
    if (message.protocol !== 0) {
      writer.uint32(56).int32(message.protocol);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseVerificationAddAddressBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.address = reader.bytes();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.claimSignature = reader.bytes();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.blockHash = reader.bytes();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }
          message.verificationType = reader.uint32();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.chainId = reader.uint32();
          continue;
        case 7:
          if (tag != 56) {
            break;
          }
          message.protocol = reader.int32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet2(object.address) ? bytesFromBase642(object.address) : new Uint8Array(),
      claimSignature: isSet2(object.claimSignature) ? bytesFromBase642(object.claimSignature) : new Uint8Array(),
      blockHash: isSet2(object.blockHash) ? bytesFromBase642(object.blockHash) : new Uint8Array(),
      verificationType: isSet2(object.verificationType) ? Number(object.verificationType) : 0,
      chainId: isSet2(object.chainId) ? Number(object.chainId) : 0,
      protocol: isSet2(object.protocol) ? protocolFromJSON(object.protocol) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.address !== void 0 && (obj.address = base64FromBytes2(message.address !== void 0 ? message.address : new Uint8Array()));
    message.claimSignature !== void 0 && (obj.claimSignature = base64FromBytes2(
      message.claimSignature !== void 0 ? message.claimSignature : new Uint8Array()
    ));
    message.blockHash !== void 0 && (obj.blockHash = base64FromBytes2(message.blockHash !== void 0 ? message.blockHash : new Uint8Array()));
    message.verificationType !== void 0 && (obj.verificationType = Math.round(message.verificationType));
    message.chainId !== void 0 && (obj.chainId = Math.round(message.chainId));
    message.protocol !== void 0 && (obj.protocol = protocolToJSON(message.protocol));
    return obj;
  },
  create(base) {
    return VerificationAddAddressBody.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d, _e5, _f;
    const message = createBaseVerificationAddAddressBody();
    message.address = (_a2 = object.address) != null ? _a2 : new Uint8Array();
    message.claimSignature = (_b = object.claimSignature) != null ? _b : new Uint8Array();
    message.blockHash = (_c = object.blockHash) != null ? _c : new Uint8Array();
    message.verificationType = (_d = object.verificationType) != null ? _d : 0;
    message.chainId = (_e5 = object.chainId) != null ? _e5 : 0;
    message.protocol = (_f = object.protocol) != null ? _f : 0;
    return message;
  }
};
function createBaseVerificationRemoveBody() {
  return { address: new Uint8Array(), protocol: 0 };
}
var VerificationRemoveBody = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.address.length !== 0) {
      writer.uint32(10).bytes(message.address);
    }
    if (message.protocol !== 0) {
      writer.uint32(16).int32(message.protocol);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseVerificationRemoveBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.address = reader.bytes();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.protocol = reader.int32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet2(object.address) ? bytesFromBase642(object.address) : new Uint8Array(),
      protocol: isSet2(object.protocol) ? protocolFromJSON(object.protocol) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.address !== void 0 && (obj.address = base64FromBytes2(message.address !== void 0 ? message.address : new Uint8Array()));
    message.protocol !== void 0 && (obj.protocol = protocolToJSON(message.protocol));
    return obj;
  },
  create(base) {
    return VerificationRemoveBody.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b;
    const message = createBaseVerificationRemoveBody();
    message.address = (_a2 = object.address) != null ? _a2 : new Uint8Array();
    message.protocol = (_b = object.protocol) != null ? _b : 0;
    return message;
  }
};
function createBaseLinkBody() {
  return { type: "", displayTimestamp: void 0, targetFid: void 0 };
}
var LinkBody = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.displayTimestamp !== void 0) {
      writer.uint32(16).uint32(message.displayTimestamp);
    }
    if (message.targetFid !== void 0) {
      writer.uint32(24).uint64(message.targetFid);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseLinkBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.type = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.displayTimestamp = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.targetFid = longToNumber2(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      type: isSet2(object.type) ? String(object.type) : "",
      displayTimestamp: isSet2(object.displayTimestamp) ? Number(object.displayTimestamp) : void 0,
      targetFid: isSet2(object.targetFid) ? Number(object.targetFid) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.type !== void 0 && (obj.type = message.type);
    message.displayTimestamp !== void 0 && (obj.displayTimestamp = Math.round(message.displayTimestamp));
    message.targetFid !== void 0 && (obj.targetFid = Math.round(message.targetFid));
    return obj;
  },
  create(base) {
    return LinkBody.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c;
    const message = createBaseLinkBody();
    message.type = (_a2 = object.type) != null ? _a2 : "";
    message.displayTimestamp = (_b = object.displayTimestamp) != null ? _b : void 0;
    message.targetFid = (_c = object.targetFid) != null ? _c : void 0;
    return message;
  }
};
function createBaseFrameActionBody() {
  return { url: new Uint8Array(), buttonIndex: 0, castId: void 0, inputText: new Uint8Array() };
}
var FrameActionBody = {
  encode(message, writer = import_minimal2.default.Writer.create()) {
    if (message.url.length !== 0) {
      writer.uint32(10).bytes(message.url);
    }
    if (message.buttonIndex !== 0) {
      writer.uint32(16).uint32(message.buttonIndex);
    }
    if (message.castId !== void 0) {
      CastId.encode(message.castId, writer.uint32(26).fork()).ldelim();
    }
    if (message.inputText.length !== 0) {
      writer.uint32(34).bytes(message.inputText);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal2.default.Reader ? input : import_minimal2.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFrameActionBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.url = reader.bytes();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.buttonIndex = reader.uint32();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.castId = CastId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.inputText = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      url: isSet2(object.url) ? bytesFromBase642(object.url) : new Uint8Array(),
      buttonIndex: isSet2(object.buttonIndex) ? Number(object.buttonIndex) : 0,
      castId: isSet2(object.castId) ? CastId.fromJSON(object.castId) : void 0,
      inputText: isSet2(object.inputText) ? bytesFromBase642(object.inputText) : new Uint8Array()
    };
  },
  toJSON(message) {
    const obj = {};
    message.url !== void 0 && (obj.url = base64FromBytes2(message.url !== void 0 ? message.url : new Uint8Array()));
    message.buttonIndex !== void 0 && (obj.buttonIndex = Math.round(message.buttonIndex));
    message.castId !== void 0 && (obj.castId = message.castId ? CastId.toJSON(message.castId) : void 0);
    message.inputText !== void 0 && (obj.inputText = base64FromBytes2(message.inputText !== void 0 ? message.inputText : new Uint8Array()));
    return obj;
  },
  create(base) {
    return FrameActionBody.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c;
    const message = createBaseFrameActionBody();
    message.url = (_a2 = object.url) != null ? _a2 : new Uint8Array();
    message.buttonIndex = (_b = object.buttonIndex) != null ? _b : 0;
    message.castId = object.castId !== void 0 && object.castId !== null ? CastId.fromPartial(object.castId) : void 0;
    message.inputText = (_c = object.inputText) != null ? _c : new Uint8Array();
    return message;
  }
};
var tsProtoGlobalThis2 = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();
function bytesFromBase642(b64) {
  if (tsProtoGlobalThis2.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis2.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis2.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i57 = 0; i57 < bin.length; ++i57) {
      arr[i57] = bin.charCodeAt(i57);
    }
    return arr;
  }
}
function base64FromBytes2(arr) {
  if (tsProtoGlobalThis2.Buffer) {
    return tsProtoGlobalThis2.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis2.btoa(bin.join(""));
  }
}
function longToNumber2(long) {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis2.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}
if (import_minimal2.default.util.Long !== import_long2.default) {
  import_minimal2.default.util.Long = import_long2.default;
  import_minimal2.default.configure();
}
function isSet2(value) {
  return value !== null && value !== void 0;
}

// src/protobufs/generated/gossip.ts
var GossipVersion = /* @__PURE__ */ ((GossipVersion2) => {
  GossipVersion2[GossipVersion2["V1"] = 0] = "V1";
  GossipVersion2[GossipVersion2["V1_1"] = 1] = "V1_1";
  return GossipVersion2;
})(GossipVersion || {});
function gossipVersionFromJSON(object) {
  switch (object) {
    case 0:
    case "GOSSIP_VERSION_V1":
      return 0 /* V1 */;
    case 1:
    case "GOSSIP_VERSION_V1_1":
      return 1 /* V1_1 */;
    default:
      throw new tsProtoGlobalThis3.Error("Unrecognized enum value " + object + " for enum GossipVersion");
  }
}
function gossipVersionToJSON(object) {
  switch (object) {
    case 0 /* V1 */:
      return "GOSSIP_VERSION_V1";
    case 1 /* V1_1 */:
      return "GOSSIP_VERSION_V1_1";
    default:
      throw new tsProtoGlobalThis3.Error("Unrecognized enum value " + object + " for enum GossipVersion");
  }
}
function createBaseGossipAddressInfo() {
  return { address: "", family: 0, port: 0, dnsName: "" };
}
var GossipAddressInfo = {
  encode(message, writer = import_minimal3.default.Writer.create()) {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.family !== 0) {
      writer.uint32(16).uint32(message.family);
    }
    if (message.port !== 0) {
      writer.uint32(24).uint32(message.port);
    }
    if (message.dnsName !== "") {
      writer.uint32(34).string(message.dnsName);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal3.default.Reader ? input : import_minimal3.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGossipAddressInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.address = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.family = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.port = reader.uint32();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.dnsName = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      address: isSet3(object.address) ? String(object.address) : "",
      family: isSet3(object.family) ? Number(object.family) : 0,
      port: isSet3(object.port) ? Number(object.port) : 0,
      dnsName: isSet3(object.dnsName) ? String(object.dnsName) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    message.address !== void 0 && (obj.address = message.address);
    message.family !== void 0 && (obj.family = Math.round(message.family));
    message.port !== void 0 && (obj.port = Math.round(message.port));
    message.dnsName !== void 0 && (obj.dnsName = message.dnsName);
    return obj;
  },
  create(base) {
    return GossipAddressInfo.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d;
    const message = createBaseGossipAddressInfo();
    message.address = (_a2 = object.address) != null ? _a2 : "";
    message.family = (_b = object.family) != null ? _b : 0;
    message.port = (_c = object.port) != null ? _c : 0;
    message.dnsName = (_d = object.dnsName) != null ? _d : "";
    return message;
  }
};
function createBaseContactInfoContentBody() {
  return {
    gossipAddress: void 0,
    rpcAddress: void 0,
    excludedHashes: [],
    count: 0,
    hubVersion: "",
    network: 0,
    appVersion: "",
    timestamp: 0
  };
}
var ContactInfoContentBody = {
  encode(message, writer = import_minimal3.default.Writer.create()) {
    if (message.gossipAddress !== void 0) {
      GossipAddressInfo.encode(message.gossipAddress, writer.uint32(10).fork()).ldelim();
    }
    if (message.rpcAddress !== void 0) {
      GossipAddressInfo.encode(message.rpcAddress, writer.uint32(18).fork()).ldelim();
    }
    for (const v37 of message.excludedHashes) {
      writer.uint32(26).string(v37);
    }
    if (message.count !== 0) {
      writer.uint32(32).uint32(message.count);
    }
    if (message.hubVersion !== "") {
      writer.uint32(42).string(message.hubVersion);
    }
    if (message.network !== 0) {
      writer.uint32(48).int32(message.network);
    }
    if (message.appVersion !== "") {
      writer.uint32(58).string(message.appVersion);
    }
    if (message.timestamp !== 0) {
      writer.uint32(64).uint64(message.timestamp);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal3.default.Reader ? input : import_minimal3.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseContactInfoContentBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.gossipAddress = GossipAddressInfo.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.rpcAddress = GossipAddressInfo.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.excludedHashes.push(reader.string());
          continue;
        case 4:
          if (tag != 32) {
            break;
          }
          message.count = reader.uint32();
          continue;
        case 5:
          if (tag != 42) {
            break;
          }
          message.hubVersion = reader.string();
          continue;
        case 6:
          if (tag != 48) {
            break;
          }
          message.network = reader.int32();
          continue;
        case 7:
          if (tag != 58) {
            break;
          }
          message.appVersion = reader.string();
          continue;
        case 8:
          if (tag != 64) {
            break;
          }
          message.timestamp = longToNumber3(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      gossipAddress: isSet3(object.gossipAddress) ? GossipAddressInfo.fromJSON(object.gossipAddress) : void 0,
      rpcAddress: isSet3(object.rpcAddress) ? GossipAddressInfo.fromJSON(object.rpcAddress) : void 0,
      excludedHashes: Array.isArray(object == null ? void 0 : object.excludedHashes) ? object.excludedHashes.map((e57) => String(e57)) : [],
      count: isSet3(object.count) ? Number(object.count) : 0,
      hubVersion: isSet3(object.hubVersion) ? String(object.hubVersion) : "",
      network: isSet3(object.network) ? farcasterNetworkFromJSON(object.network) : 0,
      appVersion: isSet3(object.appVersion) ? String(object.appVersion) : "",
      timestamp: isSet3(object.timestamp) ? Number(object.timestamp) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.gossipAddress !== void 0 && (obj.gossipAddress = message.gossipAddress ? GossipAddressInfo.toJSON(message.gossipAddress) : void 0);
    message.rpcAddress !== void 0 && (obj.rpcAddress = message.rpcAddress ? GossipAddressInfo.toJSON(message.rpcAddress) : void 0);
    if (message.excludedHashes) {
      obj.excludedHashes = message.excludedHashes.map((e57) => e57);
    } else {
      obj.excludedHashes = [];
    }
    message.count !== void 0 && (obj.count = Math.round(message.count));
    message.hubVersion !== void 0 && (obj.hubVersion = message.hubVersion);
    message.network !== void 0 && (obj.network = farcasterNetworkToJSON(message.network));
    message.appVersion !== void 0 && (obj.appVersion = message.appVersion);
    message.timestamp !== void 0 && (obj.timestamp = Math.round(message.timestamp));
    return obj;
  },
  create(base) {
    return ContactInfoContentBody.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d, _e5, _f;
    const message = createBaseContactInfoContentBody();
    message.gossipAddress = object.gossipAddress !== void 0 && object.gossipAddress !== null ? GossipAddressInfo.fromPartial(object.gossipAddress) : void 0;
    message.rpcAddress = object.rpcAddress !== void 0 && object.rpcAddress !== null ? GossipAddressInfo.fromPartial(object.rpcAddress) : void 0;
    message.excludedHashes = ((_a2 = object.excludedHashes) == null ? void 0 : _a2.map((e57) => e57)) || [];
    message.count = (_b = object.count) != null ? _b : 0;
    message.hubVersion = (_c = object.hubVersion) != null ? _c : "";
    message.network = (_d = object.network) != null ? _d : 0;
    message.appVersion = (_e5 = object.appVersion) != null ? _e5 : "";
    message.timestamp = (_f = object.timestamp) != null ? _f : 0;
    return message;
  }
};
function createBaseContactInfoContent() {
  return {
    gossipAddress: void 0,
    rpcAddress: void 0,
    excludedHashes: [],
    count: 0,
    hubVersion: "",
    network: 0,
    appVersion: "",
    timestamp: 0,
    body: void 0,
    signature: new Uint8Array(),
    signer: new Uint8Array(),
    dataBytes: void 0
  };
}
var ContactInfoContent = {
  encode(message, writer = import_minimal3.default.Writer.create()) {
    if (message.gossipAddress !== void 0) {
      GossipAddressInfo.encode(message.gossipAddress, writer.uint32(10).fork()).ldelim();
    }
    if (message.rpcAddress !== void 0) {
      GossipAddressInfo.encode(message.rpcAddress, writer.uint32(18).fork()).ldelim();
    }
    for (const v37 of message.excludedHashes) {
      writer.uint32(26).string(v37);
    }
    if (message.count !== 0) {
      writer.uint32(32).uint32(message.count);
    }
    if (message.hubVersion !== "") {
      writer.uint32(42).string(message.hubVersion);
    }
    if (message.network !== 0) {
      writer.uint32(48).int32(message.network);
    }
    if (message.appVersion !== "") {
      writer.uint32(58).string(message.appVersion);
    }
    if (message.timestamp !== 0) {
      writer.uint32(64).uint64(message.timestamp);
    }
    if (message.body !== void 0) {
      ContactInfoContentBody.encode(message.body, writer.uint32(74).fork()).ldelim();
    }
    if (message.signature.length !== 0) {
      writer.uint32(82).bytes(message.signature);
    }
    if (message.signer.length !== 0) {
      writer.uint32(90).bytes(message.signer);
    }
    if (message.dataBytes !== void 0) {
      writer.uint32(98).bytes(message.dataBytes);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal3.default.Reader ? input : import_minimal3.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseContactInfoContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.gossipAddress = GossipAddressInfo.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.rpcAddress = GossipAddressInfo.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.excludedHashes.push(reader.string());
          continue;
        case 4:
          if (tag != 32) {
            break;
          }
          message.count = reader.uint32();
          continue;
        case 5:
          if (tag != 42) {
            break;
          }
          message.hubVersion = reader.string();
          continue;
        case 6:
          if (tag != 48) {
            break;
          }
          message.network = reader.int32();
          continue;
        case 7:
          if (tag != 58) {
            break;
          }
          message.appVersion = reader.string();
          continue;
        case 8:
          if (tag != 64) {
            break;
          }
          message.timestamp = longToNumber3(reader.uint64());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }
          message.body = ContactInfoContentBody.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag != 82) {
            break;
          }
          message.signature = reader.bytes();
          continue;
        case 11:
          if (tag != 90) {
            break;
          }
          message.signer = reader.bytes();
          continue;
        case 12:
          if (tag != 98) {
            break;
          }
          message.dataBytes = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      gossipAddress: isSet3(object.gossipAddress) ? GossipAddressInfo.fromJSON(object.gossipAddress) : void 0,
      rpcAddress: isSet3(object.rpcAddress) ? GossipAddressInfo.fromJSON(object.rpcAddress) : void 0,
      excludedHashes: Array.isArray(object == null ? void 0 : object.excludedHashes) ? object.excludedHashes.map((e57) => String(e57)) : [],
      count: isSet3(object.count) ? Number(object.count) : 0,
      hubVersion: isSet3(object.hubVersion) ? String(object.hubVersion) : "",
      network: isSet3(object.network) ? farcasterNetworkFromJSON(object.network) : 0,
      appVersion: isSet3(object.appVersion) ? String(object.appVersion) : "",
      timestamp: isSet3(object.timestamp) ? Number(object.timestamp) : 0,
      body: isSet3(object.body) ? ContactInfoContentBody.fromJSON(object.body) : void 0,
      signature: isSet3(object.signature) ? bytesFromBase643(object.signature) : new Uint8Array(),
      signer: isSet3(object.signer) ? bytesFromBase643(object.signer) : new Uint8Array(),
      dataBytes: isSet3(object.dataBytes) ? bytesFromBase643(object.dataBytes) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.gossipAddress !== void 0 && (obj.gossipAddress = message.gossipAddress ? GossipAddressInfo.toJSON(message.gossipAddress) : void 0);
    message.rpcAddress !== void 0 && (obj.rpcAddress = message.rpcAddress ? GossipAddressInfo.toJSON(message.rpcAddress) : void 0);
    if (message.excludedHashes) {
      obj.excludedHashes = message.excludedHashes.map((e57) => e57);
    } else {
      obj.excludedHashes = [];
    }
    message.count !== void 0 && (obj.count = Math.round(message.count));
    message.hubVersion !== void 0 && (obj.hubVersion = message.hubVersion);
    message.network !== void 0 && (obj.network = farcasterNetworkToJSON(message.network));
    message.appVersion !== void 0 && (obj.appVersion = message.appVersion);
    message.timestamp !== void 0 && (obj.timestamp = Math.round(message.timestamp));
    message.body !== void 0 && (obj.body = message.body ? ContactInfoContentBody.toJSON(message.body) : void 0);
    message.signature !== void 0 && (obj.signature = base64FromBytes3(message.signature !== void 0 ? message.signature : new Uint8Array()));
    message.signer !== void 0 && (obj.signer = base64FromBytes3(message.signer !== void 0 ? message.signer : new Uint8Array()));
    message.dataBytes !== void 0 && (obj.dataBytes = message.dataBytes !== void 0 ? base64FromBytes3(message.dataBytes) : void 0);
    return obj;
  },
  create(base) {
    return ContactInfoContent.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d, _e5, _f, _g, _h, _i2;
    const message = createBaseContactInfoContent();
    message.gossipAddress = object.gossipAddress !== void 0 && object.gossipAddress !== null ? GossipAddressInfo.fromPartial(object.gossipAddress) : void 0;
    message.rpcAddress = object.rpcAddress !== void 0 && object.rpcAddress !== null ? GossipAddressInfo.fromPartial(object.rpcAddress) : void 0;
    message.excludedHashes = ((_a2 = object.excludedHashes) == null ? void 0 : _a2.map((e57) => e57)) || [];
    message.count = (_b = object.count) != null ? _b : 0;
    message.hubVersion = (_c = object.hubVersion) != null ? _c : "";
    message.network = (_d = object.network) != null ? _d : 0;
    message.appVersion = (_e5 = object.appVersion) != null ? _e5 : "";
    message.timestamp = (_f = object.timestamp) != null ? _f : 0;
    message.body = object.body !== void 0 && object.body !== null ? ContactInfoContentBody.fromPartial(object.body) : void 0;
    message.signature = (_g = object.signature) != null ? _g : new Uint8Array();
    message.signer = (_h = object.signer) != null ? _h : new Uint8Array();
    message.dataBytes = (_i2 = object.dataBytes) != null ? _i2 : void 0;
    return message;
  }
};
function createBasePingMessageBody() {
  return { pingOriginPeerId: new Uint8Array(), pingTimestamp: 0 };
}
var PingMessageBody = {
  encode(message, writer = import_minimal3.default.Writer.create()) {
    if (message.pingOriginPeerId.length !== 0) {
      writer.uint32(10).bytes(message.pingOriginPeerId);
    }
    if (message.pingTimestamp !== 0) {
      writer.uint32(16).uint64(message.pingTimestamp);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal3.default.Reader ? input : import_minimal3.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePingMessageBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.pingOriginPeerId = reader.bytes();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.pingTimestamp = longToNumber3(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      pingOriginPeerId: isSet3(object.pingOriginPeerId) ? bytesFromBase643(object.pingOriginPeerId) : new Uint8Array(),
      pingTimestamp: isSet3(object.pingTimestamp) ? Number(object.pingTimestamp) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.pingOriginPeerId !== void 0 && (obj.pingOriginPeerId = base64FromBytes3(
      message.pingOriginPeerId !== void 0 ? message.pingOriginPeerId : new Uint8Array()
    ));
    message.pingTimestamp !== void 0 && (obj.pingTimestamp = Math.round(message.pingTimestamp));
    return obj;
  },
  create(base) {
    return PingMessageBody.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b;
    const message = createBasePingMessageBody();
    message.pingOriginPeerId = (_a2 = object.pingOriginPeerId) != null ? _a2 : new Uint8Array();
    message.pingTimestamp = (_b = object.pingTimestamp) != null ? _b : 0;
    return message;
  }
};
function createBaseAckMessageBody() {
  return { pingOriginPeerId: new Uint8Array(), ackOriginPeerId: new Uint8Array(), pingTimestamp: 0, ackTimestamp: 0 };
}
var AckMessageBody = {
  encode(message, writer = import_minimal3.default.Writer.create()) {
    if (message.pingOriginPeerId.length !== 0) {
      writer.uint32(10).bytes(message.pingOriginPeerId);
    }
    if (message.ackOriginPeerId.length !== 0) {
      writer.uint32(18).bytes(message.ackOriginPeerId);
    }
    if (message.pingTimestamp !== 0) {
      writer.uint32(24).uint64(message.pingTimestamp);
    }
    if (message.ackTimestamp !== 0) {
      writer.uint32(32).uint64(message.ackTimestamp);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal3.default.Reader ? input : import_minimal3.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseAckMessageBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.pingOriginPeerId = reader.bytes();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.ackOriginPeerId = reader.bytes();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.pingTimestamp = longToNumber3(reader.uint64());
          continue;
        case 4:
          if (tag != 32) {
            break;
          }
          message.ackTimestamp = longToNumber3(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      pingOriginPeerId: isSet3(object.pingOriginPeerId) ? bytesFromBase643(object.pingOriginPeerId) : new Uint8Array(),
      ackOriginPeerId: isSet3(object.ackOriginPeerId) ? bytesFromBase643(object.ackOriginPeerId) : new Uint8Array(),
      pingTimestamp: isSet3(object.pingTimestamp) ? Number(object.pingTimestamp) : 0,
      ackTimestamp: isSet3(object.ackTimestamp) ? Number(object.ackTimestamp) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.pingOriginPeerId !== void 0 && (obj.pingOriginPeerId = base64FromBytes3(
      message.pingOriginPeerId !== void 0 ? message.pingOriginPeerId : new Uint8Array()
    ));
    message.ackOriginPeerId !== void 0 && (obj.ackOriginPeerId = base64FromBytes3(
      message.ackOriginPeerId !== void 0 ? message.ackOriginPeerId : new Uint8Array()
    ));
    message.pingTimestamp !== void 0 && (obj.pingTimestamp = Math.round(message.pingTimestamp));
    message.ackTimestamp !== void 0 && (obj.ackTimestamp = Math.round(message.ackTimestamp));
    return obj;
  },
  create(base) {
    return AckMessageBody.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d;
    const message = createBaseAckMessageBody();
    message.pingOriginPeerId = (_a2 = object.pingOriginPeerId) != null ? _a2 : new Uint8Array();
    message.ackOriginPeerId = (_b = object.ackOriginPeerId) != null ? _b : new Uint8Array();
    message.pingTimestamp = (_c = object.pingTimestamp) != null ? _c : 0;
    message.ackTimestamp = (_d = object.ackTimestamp) != null ? _d : 0;
    return message;
  }
};
function createBaseNetworkLatencyMessage() {
  return { pingMessage: void 0, ackMessage: void 0 };
}
var NetworkLatencyMessage = {
  encode(message, writer = import_minimal3.default.Writer.create()) {
    if (message.pingMessage !== void 0) {
      PingMessageBody.encode(message.pingMessage, writer.uint32(18).fork()).ldelim();
    }
    if (message.ackMessage !== void 0) {
      AckMessageBody.encode(message.ackMessage, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal3.default.Reader ? input : import_minimal3.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseNetworkLatencyMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag != 18) {
            break;
          }
          message.pingMessage = PingMessageBody.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.ackMessage = AckMessageBody.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      pingMessage: isSet3(object.pingMessage) ? PingMessageBody.fromJSON(object.pingMessage) : void 0,
      ackMessage: isSet3(object.ackMessage) ? AckMessageBody.fromJSON(object.ackMessage) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.pingMessage !== void 0 && (obj.pingMessage = message.pingMessage ? PingMessageBody.toJSON(message.pingMessage) : void 0);
    message.ackMessage !== void 0 && (obj.ackMessage = message.ackMessage ? AckMessageBody.toJSON(message.ackMessage) : void 0);
    return obj;
  },
  create(base) {
    return NetworkLatencyMessage.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    const message = createBaseNetworkLatencyMessage();
    message.pingMessage = object.pingMessage !== void 0 && object.pingMessage !== null ? PingMessageBody.fromPartial(object.pingMessage) : void 0;
    message.ackMessage = object.ackMessage !== void 0 && object.ackMessage !== null ? AckMessageBody.fromPartial(object.ackMessage) : void 0;
    return message;
  }
};
function createBaseGossipMessage() {
  return {
    message: void 0,
    contactInfoContent: void 0,
    networkLatencyMessage: void 0,
    topics: [],
    peerId: new Uint8Array(),
    version: 0
  };
}
var GossipMessage = {
  encode(message, writer = import_minimal3.default.Writer.create()) {
    if (message.message !== void 0) {
      Message.encode(message.message, writer.uint32(10).fork()).ldelim();
    }
    if (message.contactInfoContent !== void 0) {
      ContactInfoContent.encode(message.contactInfoContent, writer.uint32(26).fork()).ldelim();
    }
    if (message.networkLatencyMessage !== void 0) {
      NetworkLatencyMessage.encode(message.networkLatencyMessage, writer.uint32(58).fork()).ldelim();
    }
    for (const v37 of message.topics) {
      writer.uint32(34).string(v37);
    }
    if (message.peerId.length !== 0) {
      writer.uint32(42).bytes(message.peerId);
    }
    if (message.version !== 0) {
      writer.uint32(48).int32(message.version);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal3.default.Reader ? input : import_minimal3.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseGossipMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.message = Message.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.contactInfoContent = ContactInfoContent.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }
          message.networkLatencyMessage = NetworkLatencyMessage.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.topics.push(reader.string());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }
          message.peerId = reader.bytes();
          continue;
        case 6:
          if (tag != 48) {
            break;
          }
          message.version = reader.int32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      message: isSet3(object.message) ? Message.fromJSON(object.message) : void 0,
      contactInfoContent: isSet3(object.contactInfoContent) ? ContactInfoContent.fromJSON(object.contactInfoContent) : void 0,
      networkLatencyMessage: isSet3(object.networkLatencyMessage) ? NetworkLatencyMessage.fromJSON(object.networkLatencyMessage) : void 0,
      topics: Array.isArray(object == null ? void 0 : object.topics) ? object.topics.map((e57) => String(e57)) : [],
      peerId: isSet3(object.peerId) ? bytesFromBase643(object.peerId) : new Uint8Array(),
      version: isSet3(object.version) ? gossipVersionFromJSON(object.version) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.message !== void 0 && (obj.message = message.message ? Message.toJSON(message.message) : void 0);
    message.contactInfoContent !== void 0 && (obj.contactInfoContent = message.contactInfoContent ? ContactInfoContent.toJSON(message.contactInfoContent) : void 0);
    message.networkLatencyMessage !== void 0 && (obj.networkLatencyMessage = message.networkLatencyMessage ? NetworkLatencyMessage.toJSON(message.networkLatencyMessage) : void 0);
    if (message.topics) {
      obj.topics = message.topics.map((e57) => e57);
    } else {
      obj.topics = [];
    }
    message.peerId !== void 0 && (obj.peerId = base64FromBytes3(message.peerId !== void 0 ? message.peerId : new Uint8Array()));
    message.version !== void 0 && (obj.version = gossipVersionToJSON(message.version));
    return obj;
  },
  create(base) {
    return GossipMessage.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c;
    const message = createBaseGossipMessage();
    message.message = object.message !== void 0 && object.message !== null ? Message.fromPartial(object.message) : void 0;
    message.contactInfoContent = object.contactInfoContent !== void 0 && object.contactInfoContent !== null ? ContactInfoContent.fromPartial(object.contactInfoContent) : void 0;
    message.networkLatencyMessage = object.networkLatencyMessage !== void 0 && object.networkLatencyMessage !== null ? NetworkLatencyMessage.fromPartial(object.networkLatencyMessage) : void 0;
    message.topics = ((_a2 = object.topics) == null ? void 0 : _a2.map((e57) => e57)) || [];
    message.peerId = (_b = object.peerId) != null ? _b : new Uint8Array();
    message.version = (_c = object.version) != null ? _c : 0;
    return message;
  }
};
var tsProtoGlobalThis3 = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();
function bytesFromBase643(b64) {
  if (tsProtoGlobalThis3.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis3.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis3.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i57 = 0; i57 < bin.length; ++i57) {
      arr[i57] = bin.charCodeAt(i57);
    }
    return arr;
  }
}
function base64FromBytes3(arr) {
  if (tsProtoGlobalThis3.Buffer) {
    return tsProtoGlobalThis3.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis3.btoa(bin.join(""));
  }
}
function longToNumber3(long) {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis3.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}
if (import_minimal3.default.util.Long !== import_long3.default) {
  import_minimal3.default.util.Long = import_long3.default;
  import_minimal3.default.configure();
}
function isSet3(value) {
  return value !== null && value !== void 0;
}

// src/protobufs/generated/hub_event.ts
init_esm_shims();
var import_long5 = __toESM(require_long());
var import_minimal5 = __toESM(require_minimal2());

// src/protobufs/generated/onchain_event.ts
init_esm_shims();
var import_long4 = __toESM(require_long());
var import_minimal4 = __toESM(require_minimal2());
var OnChainEventType = /* @__PURE__ */ ((OnChainEventType3) => {
  OnChainEventType3[OnChainEventType3["EVENT_TYPE_NONE"] = 0] = "EVENT_TYPE_NONE";
  OnChainEventType3[OnChainEventType3["EVENT_TYPE_SIGNER"] = 1] = "EVENT_TYPE_SIGNER";
  OnChainEventType3[OnChainEventType3["EVENT_TYPE_SIGNER_MIGRATED"] = 2] = "EVENT_TYPE_SIGNER_MIGRATED";
  OnChainEventType3[OnChainEventType3["EVENT_TYPE_ID_REGISTER"] = 3] = "EVENT_TYPE_ID_REGISTER";
  OnChainEventType3[OnChainEventType3["EVENT_TYPE_STORAGE_RENT"] = 4] = "EVENT_TYPE_STORAGE_RENT";
  return OnChainEventType3;
})(OnChainEventType || {});
function onChainEventTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "EVENT_TYPE_NONE":
      return 0 /* EVENT_TYPE_NONE */;
    case 1:
    case "EVENT_TYPE_SIGNER":
      return 1 /* EVENT_TYPE_SIGNER */;
    case 2:
    case "EVENT_TYPE_SIGNER_MIGRATED":
      return 2 /* EVENT_TYPE_SIGNER_MIGRATED */;
    case 3:
    case "EVENT_TYPE_ID_REGISTER":
      return 3 /* EVENT_TYPE_ID_REGISTER */;
    case 4:
    case "EVENT_TYPE_STORAGE_RENT":
      return 4 /* EVENT_TYPE_STORAGE_RENT */;
    default:
      throw new tsProtoGlobalThis4.Error("Unrecognized enum value " + object + " for enum OnChainEventType");
  }
}
function onChainEventTypeToJSON(object) {
  switch (object) {
    case 0 /* EVENT_TYPE_NONE */:
      return "EVENT_TYPE_NONE";
    case 1 /* EVENT_TYPE_SIGNER */:
      return "EVENT_TYPE_SIGNER";
    case 2 /* EVENT_TYPE_SIGNER_MIGRATED */:
      return "EVENT_TYPE_SIGNER_MIGRATED";
    case 3 /* EVENT_TYPE_ID_REGISTER */:
      return "EVENT_TYPE_ID_REGISTER";
    case 4 /* EVENT_TYPE_STORAGE_RENT */:
      return "EVENT_TYPE_STORAGE_RENT";
    default:
      throw new tsProtoGlobalThis4.Error("Unrecognized enum value " + object + " for enum OnChainEventType");
  }
}
var SignerEventType = /* @__PURE__ */ ((SignerEventType2) => {
  SignerEventType2[SignerEventType2["NONE"] = 0] = "NONE";
  SignerEventType2[SignerEventType2["ADD"] = 1] = "ADD";
  SignerEventType2[SignerEventType2["REMOVE"] = 2] = "REMOVE";
  SignerEventType2[SignerEventType2["ADMIN_RESET"] = 3] = "ADMIN_RESET";
  return SignerEventType2;
})(SignerEventType || {});
function signerEventTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "SIGNER_EVENT_TYPE_NONE":
      return 0 /* NONE */;
    case 1:
    case "SIGNER_EVENT_TYPE_ADD":
      return 1 /* ADD */;
    case 2:
    case "SIGNER_EVENT_TYPE_REMOVE":
      return 2 /* REMOVE */;
    case 3:
    case "SIGNER_EVENT_TYPE_ADMIN_RESET":
      return 3 /* ADMIN_RESET */;
    default:
      throw new tsProtoGlobalThis4.Error("Unrecognized enum value " + object + " for enum SignerEventType");
  }
}
function signerEventTypeToJSON(object) {
  switch (object) {
    case 0 /* NONE */:
      return "SIGNER_EVENT_TYPE_NONE";
    case 1 /* ADD */:
      return "SIGNER_EVENT_TYPE_ADD";
    case 2 /* REMOVE */:
      return "SIGNER_EVENT_TYPE_REMOVE";
    case 3 /* ADMIN_RESET */:
      return "SIGNER_EVENT_TYPE_ADMIN_RESET";
    default:
      throw new tsProtoGlobalThis4.Error("Unrecognized enum value " + object + " for enum SignerEventType");
  }
}
var IdRegisterEventType = /* @__PURE__ */ ((IdRegisterEventType2) => {
  IdRegisterEventType2[IdRegisterEventType2["NONE"] = 0] = "NONE";
  IdRegisterEventType2[IdRegisterEventType2["REGISTER"] = 1] = "REGISTER";
  IdRegisterEventType2[IdRegisterEventType2["TRANSFER"] = 2] = "TRANSFER";
  IdRegisterEventType2[IdRegisterEventType2["CHANGE_RECOVERY"] = 3] = "CHANGE_RECOVERY";
  return IdRegisterEventType2;
})(IdRegisterEventType || {});
function idRegisterEventTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "ID_REGISTER_EVENT_TYPE_NONE":
      return 0 /* NONE */;
    case 1:
    case "ID_REGISTER_EVENT_TYPE_REGISTER":
      return 1 /* REGISTER */;
    case 2:
    case "ID_REGISTER_EVENT_TYPE_TRANSFER":
      return 2 /* TRANSFER */;
    case 3:
    case "ID_REGISTER_EVENT_TYPE_CHANGE_RECOVERY":
      return 3 /* CHANGE_RECOVERY */;
    default:
      throw new tsProtoGlobalThis4.Error("Unrecognized enum value " + object + " for enum IdRegisterEventType");
  }
}
function idRegisterEventTypeToJSON(object) {
  switch (object) {
    case 0 /* NONE */:
      return "ID_REGISTER_EVENT_TYPE_NONE";
    case 1 /* REGISTER */:
      return "ID_REGISTER_EVENT_TYPE_REGISTER";
    case 2 /* TRANSFER */:
      return "ID_REGISTER_EVENT_TYPE_TRANSFER";
    case 3 /* CHANGE_RECOVERY */:
      return "ID_REGISTER_EVENT_TYPE_CHANGE_RECOVERY";
    default:
      throw new tsProtoGlobalThis4.Error("Unrecognized enum value " + object + " for enum IdRegisterEventType");
  }
}
function createBaseOnChainEvent() {
  return {
    type: 0,
    chainId: 0,
    blockNumber: 0,
    blockHash: new Uint8Array(),
    blockTimestamp: 0,
    transactionHash: new Uint8Array(),
    logIndex: 0,
    fid: 0,
    signerEventBody: void 0,
    signerMigratedEventBody: void 0,
    idRegisterEventBody: void 0,
    storageRentEventBody: void 0,
    txIndex: 0,
    version: 0
  };
}
var OnChainEvent = {
  encode(message, writer = import_minimal4.default.Writer.create()) {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.chainId !== 0) {
      writer.uint32(16).uint32(message.chainId);
    }
    if (message.blockNumber !== 0) {
      writer.uint32(24).uint32(message.blockNumber);
    }
    if (message.blockHash.length !== 0) {
      writer.uint32(34).bytes(message.blockHash);
    }
    if (message.blockTimestamp !== 0) {
      writer.uint32(40).uint64(message.blockTimestamp);
    }
    if (message.transactionHash.length !== 0) {
      writer.uint32(50).bytes(message.transactionHash);
    }
    if (message.logIndex !== 0) {
      writer.uint32(56).uint32(message.logIndex);
    }
    if (message.fid !== 0) {
      writer.uint32(64).uint64(message.fid);
    }
    if (message.signerEventBody !== void 0) {
      SignerEventBody.encode(message.signerEventBody, writer.uint32(74).fork()).ldelim();
    }
    if (message.signerMigratedEventBody !== void 0) {
      SignerMigratedEventBody.encode(message.signerMigratedEventBody, writer.uint32(82).fork()).ldelim();
    }
    if (message.idRegisterEventBody !== void 0) {
      IdRegisterEventBody.encode(message.idRegisterEventBody, writer.uint32(90).fork()).ldelim();
    }
    if (message.storageRentEventBody !== void 0) {
      StorageRentEventBody.encode(message.storageRentEventBody, writer.uint32(98).fork()).ldelim();
    }
    if (message.txIndex !== 0) {
      writer.uint32(104).uint32(message.txIndex);
    }
    if (message.version !== 0) {
      writer.uint32(112).uint32(message.version);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal4.default.Reader ? input : import_minimal4.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseOnChainEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.type = reader.int32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.chainId = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.blockNumber = reader.uint32();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.blockHash = reader.bytes();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.blockTimestamp = longToNumber4(reader.uint64());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }
          message.transactionHash = reader.bytes();
          continue;
        case 7:
          if (tag != 56) {
            break;
          }
          message.logIndex = reader.uint32();
          continue;
        case 8:
          if (tag != 64) {
            break;
          }
          message.fid = longToNumber4(reader.uint64());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }
          message.signerEventBody = SignerEventBody.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag != 82) {
            break;
          }
          message.signerMigratedEventBody = SignerMigratedEventBody.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag != 90) {
            break;
          }
          message.idRegisterEventBody = IdRegisterEventBody.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag != 98) {
            break;
          }
          message.storageRentEventBody = StorageRentEventBody.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag != 104) {
            break;
          }
          message.txIndex = reader.uint32();
          continue;
        case 14:
          if (tag != 112) {
            break;
          }
          message.version = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      type: isSet4(object.type) ? onChainEventTypeFromJSON(object.type) : 0,
      chainId: isSet4(object.chainId) ? Number(object.chainId) : 0,
      blockNumber: isSet4(object.blockNumber) ? Number(object.blockNumber) : 0,
      blockHash: isSet4(object.blockHash) ? bytesFromBase644(object.blockHash) : new Uint8Array(),
      blockTimestamp: isSet4(object.blockTimestamp) ? Number(object.blockTimestamp) : 0,
      transactionHash: isSet4(object.transactionHash) ? bytesFromBase644(object.transactionHash) : new Uint8Array(),
      logIndex: isSet4(object.logIndex) ? Number(object.logIndex) : 0,
      fid: isSet4(object.fid) ? Number(object.fid) : 0,
      signerEventBody: isSet4(object.signerEventBody) ? SignerEventBody.fromJSON(object.signerEventBody) : void 0,
      signerMigratedEventBody: isSet4(object.signerMigratedEventBody) ? SignerMigratedEventBody.fromJSON(object.signerMigratedEventBody) : void 0,
      idRegisterEventBody: isSet4(object.idRegisterEventBody) ? IdRegisterEventBody.fromJSON(object.idRegisterEventBody) : void 0,
      storageRentEventBody: isSet4(object.storageRentEventBody) ? StorageRentEventBody.fromJSON(object.storageRentEventBody) : void 0,
      txIndex: isSet4(object.txIndex) ? Number(object.txIndex) : 0,
      version: isSet4(object.version) ? Number(object.version) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.type !== void 0 && (obj.type = onChainEventTypeToJSON(message.type));
    message.chainId !== void 0 && (obj.chainId = Math.round(message.chainId));
    message.blockNumber !== void 0 && (obj.blockNumber = Math.round(message.blockNumber));
    message.blockHash !== void 0 && (obj.blockHash = base64FromBytes4(message.blockHash !== void 0 ? message.blockHash : new Uint8Array()));
    message.blockTimestamp !== void 0 && (obj.blockTimestamp = Math.round(message.blockTimestamp));
    message.transactionHash !== void 0 && (obj.transactionHash = base64FromBytes4(
      message.transactionHash !== void 0 ? message.transactionHash : new Uint8Array()
    ));
    message.logIndex !== void 0 && (obj.logIndex = Math.round(message.logIndex));
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.signerEventBody !== void 0 && (obj.signerEventBody = message.signerEventBody ? SignerEventBody.toJSON(message.signerEventBody) : void 0);
    message.signerMigratedEventBody !== void 0 && (obj.signerMigratedEventBody = message.signerMigratedEventBody ? SignerMigratedEventBody.toJSON(message.signerMigratedEventBody) : void 0);
    message.idRegisterEventBody !== void 0 && (obj.idRegisterEventBody = message.idRegisterEventBody ? IdRegisterEventBody.toJSON(message.idRegisterEventBody) : void 0);
    message.storageRentEventBody !== void 0 && (obj.storageRentEventBody = message.storageRentEventBody ? StorageRentEventBody.toJSON(message.storageRentEventBody) : void 0);
    message.txIndex !== void 0 && (obj.txIndex = Math.round(message.txIndex));
    message.version !== void 0 && (obj.version = Math.round(message.version));
    return obj;
  },
  create(base) {
    return OnChainEvent.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d, _e5, _f, _g, _h, _i2, _j;
    const message = createBaseOnChainEvent();
    message.type = (_a2 = object.type) != null ? _a2 : 0;
    message.chainId = (_b = object.chainId) != null ? _b : 0;
    message.blockNumber = (_c = object.blockNumber) != null ? _c : 0;
    message.blockHash = (_d = object.blockHash) != null ? _d : new Uint8Array();
    message.blockTimestamp = (_e5 = object.blockTimestamp) != null ? _e5 : 0;
    message.transactionHash = (_f = object.transactionHash) != null ? _f : new Uint8Array();
    message.logIndex = (_g = object.logIndex) != null ? _g : 0;
    message.fid = (_h = object.fid) != null ? _h : 0;
    message.signerEventBody = object.signerEventBody !== void 0 && object.signerEventBody !== null ? SignerEventBody.fromPartial(object.signerEventBody) : void 0;
    message.signerMigratedEventBody = object.signerMigratedEventBody !== void 0 && object.signerMigratedEventBody !== null ? SignerMigratedEventBody.fromPartial(object.signerMigratedEventBody) : void 0;
    message.idRegisterEventBody = object.idRegisterEventBody !== void 0 && object.idRegisterEventBody !== null ? IdRegisterEventBody.fromPartial(object.idRegisterEventBody) : void 0;
    message.storageRentEventBody = object.storageRentEventBody !== void 0 && object.storageRentEventBody !== null ? StorageRentEventBody.fromPartial(object.storageRentEventBody) : void 0;
    message.txIndex = (_i2 = object.txIndex) != null ? _i2 : 0;
    message.version = (_j = object.version) != null ? _j : 0;
    return message;
  }
};
function createBaseSignerEventBody() {
  return { key: new Uint8Array(), keyType: 0, eventType: 0, metadata: new Uint8Array(), metadataType: 0 };
}
var SignerEventBody = {
  encode(message, writer = import_minimal4.default.Writer.create()) {
    if (message.key.length !== 0) {
      writer.uint32(10).bytes(message.key);
    }
    if (message.keyType !== 0) {
      writer.uint32(16).uint32(message.keyType);
    }
    if (message.eventType !== 0) {
      writer.uint32(24).int32(message.eventType);
    }
    if (message.metadata.length !== 0) {
      writer.uint32(34).bytes(message.metadata);
    }
    if (message.metadataType !== 0) {
      writer.uint32(40).uint32(message.metadataType);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal4.default.Reader ? input : import_minimal4.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSignerEventBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.key = reader.bytes();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.keyType = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.eventType = reader.int32();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.metadata = reader.bytes();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.metadataType = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      key: isSet4(object.key) ? bytesFromBase644(object.key) : new Uint8Array(),
      keyType: isSet4(object.keyType) ? Number(object.keyType) : 0,
      eventType: isSet4(object.eventType) ? signerEventTypeFromJSON(object.eventType) : 0,
      metadata: isSet4(object.metadata) ? bytesFromBase644(object.metadata) : new Uint8Array(),
      metadataType: isSet4(object.metadataType) ? Number(object.metadataType) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.key !== void 0 && (obj.key = base64FromBytes4(message.key !== void 0 ? message.key : new Uint8Array()));
    message.keyType !== void 0 && (obj.keyType = Math.round(message.keyType));
    message.eventType !== void 0 && (obj.eventType = signerEventTypeToJSON(message.eventType));
    message.metadata !== void 0 && (obj.metadata = base64FromBytes4(message.metadata !== void 0 ? message.metadata : new Uint8Array()));
    message.metadataType !== void 0 && (obj.metadataType = Math.round(message.metadataType));
    return obj;
  },
  create(base) {
    return SignerEventBody.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d, _e5;
    const message = createBaseSignerEventBody();
    message.key = (_a2 = object.key) != null ? _a2 : new Uint8Array();
    message.keyType = (_b = object.keyType) != null ? _b : 0;
    message.eventType = (_c = object.eventType) != null ? _c : 0;
    message.metadata = (_d = object.metadata) != null ? _d : new Uint8Array();
    message.metadataType = (_e5 = object.metadataType) != null ? _e5 : 0;
    return message;
  }
};
function createBaseSignerMigratedEventBody() {
  return { migratedAt: 0 };
}
var SignerMigratedEventBody = {
  encode(message, writer = import_minimal4.default.Writer.create()) {
    if (message.migratedAt !== 0) {
      writer.uint32(8).uint32(message.migratedAt);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal4.default.Reader ? input : import_minimal4.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSignerMigratedEventBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.migratedAt = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { migratedAt: isSet4(object.migratedAt) ? Number(object.migratedAt) : 0 };
  },
  toJSON(message) {
    const obj = {};
    message.migratedAt !== void 0 && (obj.migratedAt = Math.round(message.migratedAt));
    return obj;
  },
  create(base) {
    return SignerMigratedEventBody.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2;
    const message = createBaseSignerMigratedEventBody();
    message.migratedAt = (_a2 = object.migratedAt) != null ? _a2 : 0;
    return message;
  }
};
function createBaseIdRegisterEventBody() {
  return { to: new Uint8Array(), eventType: 0, from: new Uint8Array(), recoveryAddress: new Uint8Array() };
}
var IdRegisterEventBody = {
  encode(message, writer = import_minimal4.default.Writer.create()) {
    if (message.to.length !== 0) {
      writer.uint32(10).bytes(message.to);
    }
    if (message.eventType !== 0) {
      writer.uint32(16).int32(message.eventType);
    }
    if (message.from.length !== 0) {
      writer.uint32(26).bytes(message.from);
    }
    if (message.recoveryAddress.length !== 0) {
      writer.uint32(34).bytes(message.recoveryAddress);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal4.default.Reader ? input : import_minimal4.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseIdRegisterEventBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.to = reader.bytes();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.eventType = reader.int32();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.from = reader.bytes();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.recoveryAddress = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      to: isSet4(object.to) ? bytesFromBase644(object.to) : new Uint8Array(),
      eventType: isSet4(object.eventType) ? idRegisterEventTypeFromJSON(object.eventType) : 0,
      from: isSet4(object.from) ? bytesFromBase644(object.from) : new Uint8Array(),
      recoveryAddress: isSet4(object.recoveryAddress) ? bytesFromBase644(object.recoveryAddress) : new Uint8Array()
    };
  },
  toJSON(message) {
    const obj = {};
    message.to !== void 0 && (obj.to = base64FromBytes4(message.to !== void 0 ? message.to : new Uint8Array()));
    message.eventType !== void 0 && (obj.eventType = idRegisterEventTypeToJSON(message.eventType));
    message.from !== void 0 && (obj.from = base64FromBytes4(message.from !== void 0 ? message.from : new Uint8Array()));
    message.recoveryAddress !== void 0 && (obj.recoveryAddress = base64FromBytes4(
      message.recoveryAddress !== void 0 ? message.recoveryAddress : new Uint8Array()
    ));
    return obj;
  },
  create(base) {
    return IdRegisterEventBody.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d;
    const message = createBaseIdRegisterEventBody();
    message.to = (_a2 = object.to) != null ? _a2 : new Uint8Array();
    message.eventType = (_b = object.eventType) != null ? _b : 0;
    message.from = (_c = object.from) != null ? _c : new Uint8Array();
    message.recoveryAddress = (_d = object.recoveryAddress) != null ? _d : new Uint8Array();
    return message;
  }
};
function createBaseStorageRentEventBody() {
  return { payer: new Uint8Array(), units: 0, expiry: 0 };
}
var StorageRentEventBody = {
  encode(message, writer = import_minimal4.default.Writer.create()) {
    if (message.payer.length !== 0) {
      writer.uint32(10).bytes(message.payer);
    }
    if (message.units !== 0) {
      writer.uint32(16).uint32(message.units);
    }
    if (message.expiry !== 0) {
      writer.uint32(24).uint32(message.expiry);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal4.default.Reader ? input : import_minimal4.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseStorageRentEventBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.payer = reader.bytes();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.units = reader.uint32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.expiry = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      payer: isSet4(object.payer) ? bytesFromBase644(object.payer) : new Uint8Array(),
      units: isSet4(object.units) ? Number(object.units) : 0,
      expiry: isSet4(object.expiry) ? Number(object.expiry) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.payer !== void 0 && (obj.payer = base64FromBytes4(message.payer !== void 0 ? message.payer : new Uint8Array()));
    message.units !== void 0 && (obj.units = Math.round(message.units));
    message.expiry !== void 0 && (obj.expiry = Math.round(message.expiry));
    return obj;
  },
  create(base) {
    return StorageRentEventBody.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c;
    const message = createBaseStorageRentEventBody();
    message.payer = (_a2 = object.payer) != null ? _a2 : new Uint8Array();
    message.units = (_b = object.units) != null ? _b : 0;
    message.expiry = (_c = object.expiry) != null ? _c : 0;
    return message;
  }
};
var tsProtoGlobalThis4 = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();
function bytesFromBase644(b64) {
  if (tsProtoGlobalThis4.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis4.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis4.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i57 = 0; i57 < bin.length; ++i57) {
      arr[i57] = bin.charCodeAt(i57);
    }
    return arr;
  }
}
function base64FromBytes4(arr) {
  if (tsProtoGlobalThis4.Buffer) {
    return tsProtoGlobalThis4.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis4.btoa(bin.join(""));
  }
}
function longToNumber4(long) {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis4.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}
if (import_minimal4.default.util.Long !== import_long4.default) {
  import_minimal4.default.util.Long = import_long4.default;
  import_minimal4.default.configure();
}
function isSet4(value) {
  return value !== null && value !== void 0;
}

// src/protobufs/generated/hub_event.ts
var HubEventType = /* @__PURE__ */ ((HubEventType3) => {
  HubEventType3[HubEventType3["NONE"] = 0] = "NONE";
  HubEventType3[HubEventType3["MERGE_MESSAGE"] = 1] = "MERGE_MESSAGE";
  HubEventType3[HubEventType3["PRUNE_MESSAGE"] = 2] = "PRUNE_MESSAGE";
  HubEventType3[HubEventType3["REVOKE_MESSAGE"] = 3] = "REVOKE_MESSAGE";
  HubEventType3[HubEventType3["MERGE_USERNAME_PROOF"] = 6] = "MERGE_USERNAME_PROOF";
  HubEventType3[HubEventType3["MERGE_ON_CHAIN_EVENT"] = 9] = "MERGE_ON_CHAIN_EVENT";
  return HubEventType3;
})(HubEventType || {});
function hubEventTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "HUB_EVENT_TYPE_NONE":
      return 0 /* NONE */;
    case 1:
    case "HUB_EVENT_TYPE_MERGE_MESSAGE":
      return 1 /* MERGE_MESSAGE */;
    case 2:
    case "HUB_EVENT_TYPE_PRUNE_MESSAGE":
      return 2 /* PRUNE_MESSAGE */;
    case 3:
    case "HUB_EVENT_TYPE_REVOKE_MESSAGE":
      return 3 /* REVOKE_MESSAGE */;
    case 6:
    case "HUB_EVENT_TYPE_MERGE_USERNAME_PROOF":
      return 6 /* MERGE_USERNAME_PROOF */;
    case 9:
    case "HUB_EVENT_TYPE_MERGE_ON_CHAIN_EVENT":
      return 9 /* MERGE_ON_CHAIN_EVENT */;
    default:
      throw new tsProtoGlobalThis5.Error("Unrecognized enum value " + object + " for enum HubEventType");
  }
}
function hubEventTypeToJSON(object) {
  switch (object) {
    case 0 /* NONE */:
      return "HUB_EVENT_TYPE_NONE";
    case 1 /* MERGE_MESSAGE */:
      return "HUB_EVENT_TYPE_MERGE_MESSAGE";
    case 2 /* PRUNE_MESSAGE */:
      return "HUB_EVENT_TYPE_PRUNE_MESSAGE";
    case 3 /* REVOKE_MESSAGE */:
      return "HUB_EVENT_TYPE_REVOKE_MESSAGE";
    case 6 /* MERGE_USERNAME_PROOF */:
      return "HUB_EVENT_TYPE_MERGE_USERNAME_PROOF";
    case 9 /* MERGE_ON_CHAIN_EVENT */:
      return "HUB_EVENT_TYPE_MERGE_ON_CHAIN_EVENT";
    default:
      throw new tsProtoGlobalThis5.Error("Unrecognized enum value " + object + " for enum HubEventType");
  }
}
function createBaseMergeMessageBody() {
  return { message: void 0, deletedMessages: [] };
}
var MergeMessageBody = {
  encode(message, writer = import_minimal5.default.Writer.create()) {
    if (message.message !== void 0) {
      Message.encode(message.message, writer.uint32(10).fork()).ldelim();
    }
    for (const v37 of message.deletedMessages) {
      Message.encode(v37, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal5.default.Reader ? input : import_minimal5.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMergeMessageBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.message = Message.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.deletedMessages.push(Message.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      message: isSet5(object.message) ? Message.fromJSON(object.message) : void 0,
      deletedMessages: Array.isArray(object == null ? void 0 : object.deletedMessages) ? object.deletedMessages.map((e57) => Message.fromJSON(e57)) : []
    };
  },
  toJSON(message) {
    const obj = {};
    message.message !== void 0 && (obj.message = message.message ? Message.toJSON(message.message) : void 0);
    if (message.deletedMessages) {
      obj.deletedMessages = message.deletedMessages.map((e57) => e57 ? Message.toJSON(e57) : void 0);
    } else {
      obj.deletedMessages = [];
    }
    return obj;
  },
  create(base) {
    return MergeMessageBody.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2;
    const message = createBaseMergeMessageBody();
    message.message = object.message !== void 0 && object.message !== null ? Message.fromPartial(object.message) : void 0;
    message.deletedMessages = ((_a2 = object.deletedMessages) == null ? void 0 : _a2.map((e57) => Message.fromPartial(e57))) || [];
    return message;
  }
};
function createBasePruneMessageBody() {
  return { message: void 0 };
}
var PruneMessageBody = {
  encode(message, writer = import_minimal5.default.Writer.create()) {
    if (message.message !== void 0) {
      Message.encode(message.message, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal5.default.Reader ? input : import_minimal5.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBasePruneMessageBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.message = Message.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { message: isSet5(object.message) ? Message.fromJSON(object.message) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    message.message !== void 0 && (obj.message = message.message ? Message.toJSON(message.message) : void 0);
    return obj;
  },
  create(base) {
    return PruneMessageBody.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    const message = createBasePruneMessageBody();
    message.message = object.message !== void 0 && object.message !== null ? Message.fromPartial(object.message) : void 0;
    return message;
  }
};
function createBaseRevokeMessageBody() {
  return { message: void 0 };
}
var RevokeMessageBody = {
  encode(message, writer = import_minimal5.default.Writer.create()) {
    if (message.message !== void 0) {
      Message.encode(message.message, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal5.default.Reader ? input : import_minimal5.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRevokeMessageBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.message = Message.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { message: isSet5(object.message) ? Message.fromJSON(object.message) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    message.message !== void 0 && (obj.message = message.message ? Message.toJSON(message.message) : void 0);
    return obj;
  },
  create(base) {
    return RevokeMessageBody.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    const message = createBaseRevokeMessageBody();
    message.message = object.message !== void 0 && object.message !== null ? Message.fromPartial(object.message) : void 0;
    return message;
  }
};
function createBaseMergeOnChainEventBody() {
  return { onChainEvent: void 0 };
}
var MergeOnChainEventBody = {
  encode(message, writer = import_minimal5.default.Writer.create()) {
    if (message.onChainEvent !== void 0) {
      OnChainEvent.encode(message.onChainEvent, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal5.default.Reader ? input : import_minimal5.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMergeOnChainEventBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.onChainEvent = OnChainEvent.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { onChainEvent: isSet5(object.onChainEvent) ? OnChainEvent.fromJSON(object.onChainEvent) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    message.onChainEvent !== void 0 && (obj.onChainEvent = message.onChainEvent ? OnChainEvent.toJSON(message.onChainEvent) : void 0);
    return obj;
  },
  create(base) {
    return MergeOnChainEventBody.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    const message = createBaseMergeOnChainEventBody();
    message.onChainEvent = object.onChainEvent !== void 0 && object.onChainEvent !== null ? OnChainEvent.fromPartial(object.onChainEvent) : void 0;
    return message;
  }
};
function createBaseMergeUserNameProofBody() {
  return {
    usernameProof: void 0,
    deletedUsernameProof: void 0,
    usernameProofMessage: void 0,
    deletedUsernameProofMessage: void 0
  };
}
var MergeUserNameProofBody = {
  encode(message, writer = import_minimal5.default.Writer.create()) {
    if (message.usernameProof !== void 0) {
      UserNameProof.encode(message.usernameProof, writer.uint32(10).fork()).ldelim();
    }
    if (message.deletedUsernameProof !== void 0) {
      UserNameProof.encode(message.deletedUsernameProof, writer.uint32(18).fork()).ldelim();
    }
    if (message.usernameProofMessage !== void 0) {
      Message.encode(message.usernameProofMessage, writer.uint32(26).fork()).ldelim();
    }
    if (message.deletedUsernameProofMessage !== void 0) {
      Message.encode(message.deletedUsernameProofMessage, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal5.default.Reader ? input : import_minimal5.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMergeUserNameProofBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.usernameProof = UserNameProof.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.deletedUsernameProof = UserNameProof.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.usernameProofMessage = Message.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.deletedUsernameProofMessage = Message.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      usernameProof: isSet5(object.usernameProof) ? UserNameProof.fromJSON(object.usernameProof) : void 0,
      deletedUsernameProof: isSet5(object.deletedUsernameProof) ? UserNameProof.fromJSON(object.deletedUsernameProof) : void 0,
      usernameProofMessage: isSet5(object.usernameProofMessage) ? Message.fromJSON(object.usernameProofMessage) : void 0,
      deletedUsernameProofMessage: isSet5(object.deletedUsernameProofMessage) ? Message.fromJSON(object.deletedUsernameProofMessage) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.usernameProof !== void 0 && (obj.usernameProof = message.usernameProof ? UserNameProof.toJSON(message.usernameProof) : void 0);
    message.deletedUsernameProof !== void 0 && (obj.deletedUsernameProof = message.deletedUsernameProof ? UserNameProof.toJSON(message.deletedUsernameProof) : void 0);
    message.usernameProofMessage !== void 0 && (obj.usernameProofMessage = message.usernameProofMessage ? Message.toJSON(message.usernameProofMessage) : void 0);
    message.deletedUsernameProofMessage !== void 0 && (obj.deletedUsernameProofMessage = message.deletedUsernameProofMessage ? Message.toJSON(message.deletedUsernameProofMessage) : void 0);
    return obj;
  },
  create(base) {
    return MergeUserNameProofBody.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    const message = createBaseMergeUserNameProofBody();
    message.usernameProof = object.usernameProof !== void 0 && object.usernameProof !== null ? UserNameProof.fromPartial(object.usernameProof) : void 0;
    message.deletedUsernameProof = object.deletedUsernameProof !== void 0 && object.deletedUsernameProof !== null ? UserNameProof.fromPartial(object.deletedUsernameProof) : void 0;
    message.usernameProofMessage = object.usernameProofMessage !== void 0 && object.usernameProofMessage !== null ? Message.fromPartial(object.usernameProofMessage) : void 0;
    message.deletedUsernameProofMessage = object.deletedUsernameProofMessage !== void 0 && object.deletedUsernameProofMessage !== null ? Message.fromPartial(object.deletedUsernameProofMessage) : void 0;
    return message;
  }
};
function createBaseHubEvent() {
  return {
    type: 0,
    id: 0,
    mergeMessageBody: void 0,
    pruneMessageBody: void 0,
    revokeMessageBody: void 0,
    mergeUsernameProofBody: void 0,
    mergeOnChainEventBody: void 0
  };
}
var HubEvent = {
  encode(message, writer = import_minimal5.default.Writer.create()) {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.id !== 0) {
      writer.uint32(16).uint64(message.id);
    }
    if (message.mergeMessageBody !== void 0) {
      MergeMessageBody.encode(message.mergeMessageBody, writer.uint32(26).fork()).ldelim();
    }
    if (message.pruneMessageBody !== void 0) {
      PruneMessageBody.encode(message.pruneMessageBody, writer.uint32(34).fork()).ldelim();
    }
    if (message.revokeMessageBody !== void 0) {
      RevokeMessageBody.encode(message.revokeMessageBody, writer.uint32(42).fork()).ldelim();
    }
    if (message.mergeUsernameProofBody !== void 0) {
      MergeUserNameProofBody.encode(message.mergeUsernameProofBody, writer.uint32(66).fork()).ldelim();
    }
    if (message.mergeOnChainEventBody !== void 0) {
      MergeOnChainEventBody.encode(message.mergeOnChainEventBody, writer.uint32(90).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal5.default.Reader ? input : import_minimal5.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseHubEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.type = reader.int32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.id = longToNumber5(reader.uint64());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.mergeMessageBody = MergeMessageBody.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.pruneMessageBody = PruneMessageBody.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }
          message.revokeMessageBody = RevokeMessageBody.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }
          message.mergeUsernameProofBody = MergeUserNameProofBody.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag != 90) {
            break;
          }
          message.mergeOnChainEventBody = MergeOnChainEventBody.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      type: isSet5(object.type) ? hubEventTypeFromJSON(object.type) : 0,
      id: isSet5(object.id) ? Number(object.id) : 0,
      mergeMessageBody: isSet5(object.mergeMessageBody) ? MergeMessageBody.fromJSON(object.mergeMessageBody) : void 0,
      pruneMessageBody: isSet5(object.pruneMessageBody) ? PruneMessageBody.fromJSON(object.pruneMessageBody) : void 0,
      revokeMessageBody: isSet5(object.revokeMessageBody) ? RevokeMessageBody.fromJSON(object.revokeMessageBody) : void 0,
      mergeUsernameProofBody: isSet5(object.mergeUsernameProofBody) ? MergeUserNameProofBody.fromJSON(object.mergeUsernameProofBody) : void 0,
      mergeOnChainEventBody: isSet5(object.mergeOnChainEventBody) ? MergeOnChainEventBody.fromJSON(object.mergeOnChainEventBody) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.type !== void 0 && (obj.type = hubEventTypeToJSON(message.type));
    message.id !== void 0 && (obj.id = Math.round(message.id));
    message.mergeMessageBody !== void 0 && (obj.mergeMessageBody = message.mergeMessageBody ? MergeMessageBody.toJSON(message.mergeMessageBody) : void 0);
    message.pruneMessageBody !== void 0 && (obj.pruneMessageBody = message.pruneMessageBody ? PruneMessageBody.toJSON(message.pruneMessageBody) : void 0);
    message.revokeMessageBody !== void 0 && (obj.revokeMessageBody = message.revokeMessageBody ? RevokeMessageBody.toJSON(message.revokeMessageBody) : void 0);
    message.mergeUsernameProofBody !== void 0 && (obj.mergeUsernameProofBody = message.mergeUsernameProofBody ? MergeUserNameProofBody.toJSON(message.mergeUsernameProofBody) : void 0);
    message.mergeOnChainEventBody !== void 0 && (obj.mergeOnChainEventBody = message.mergeOnChainEventBody ? MergeOnChainEventBody.toJSON(message.mergeOnChainEventBody) : void 0);
    return obj;
  },
  create(base) {
    return HubEvent.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b;
    const message = createBaseHubEvent();
    message.type = (_a2 = object.type) != null ? _a2 : 0;
    message.id = (_b = object.id) != null ? _b : 0;
    message.mergeMessageBody = object.mergeMessageBody !== void 0 && object.mergeMessageBody !== null ? MergeMessageBody.fromPartial(object.mergeMessageBody) : void 0;
    message.pruneMessageBody = object.pruneMessageBody !== void 0 && object.pruneMessageBody !== null ? PruneMessageBody.fromPartial(object.pruneMessageBody) : void 0;
    message.revokeMessageBody = object.revokeMessageBody !== void 0 && object.revokeMessageBody !== null ? RevokeMessageBody.fromPartial(object.revokeMessageBody) : void 0;
    message.mergeUsernameProofBody = object.mergeUsernameProofBody !== void 0 && object.mergeUsernameProofBody !== null ? MergeUserNameProofBody.fromPartial(object.mergeUsernameProofBody) : void 0;
    message.mergeOnChainEventBody = object.mergeOnChainEventBody !== void 0 && object.mergeOnChainEventBody !== null ? MergeOnChainEventBody.fromPartial(object.mergeOnChainEventBody) : void 0;
    return message;
  }
};
var tsProtoGlobalThis5 = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();
function longToNumber5(long) {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis5.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}
if (import_minimal5.default.util.Long !== import_long5.default) {
  import_minimal5.default.util.Long = import_long5.default;
  import_minimal5.default.configure();
}
function isSet5(value) {
  return value !== null && value !== void 0;
}

// src/protobufs/generated/hub_state.ts
init_esm_shims();
var import_long6 = __toESM(require_long());
var import_minimal6 = __toESM(require_minimal2());
function createBaseHubState() {
  return { lastFnameProof: 0, lastL2Block: 0 };
}
var HubState = {
  encode(message, writer = import_minimal6.default.Writer.create()) {
    if (message.lastFnameProof !== 0) {
      writer.uint32(16).uint64(message.lastFnameProof);
    }
    if (message.lastL2Block !== 0) {
      writer.uint32(24).uint64(message.lastL2Block);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal6.default.Reader ? input : import_minimal6.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseHubState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag != 16) {
            break;
          }
          message.lastFnameProof = longToNumber6(reader.uint64());
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.lastL2Block = longToNumber6(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      lastFnameProof: isSet6(object.lastFnameProof) ? Number(object.lastFnameProof) : 0,
      lastL2Block: isSet6(object.lastL2Block) ? Number(object.lastL2Block) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.lastFnameProof !== void 0 && (obj.lastFnameProof = Math.round(message.lastFnameProof));
    message.lastL2Block !== void 0 && (obj.lastL2Block = Math.round(message.lastL2Block));
    return obj;
  },
  create(base) {
    return HubState.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b;
    const message = createBaseHubState();
    message.lastFnameProof = (_a2 = object.lastFnameProof) != null ? _a2 : 0;
    message.lastL2Block = (_b = object.lastL2Block) != null ? _b : 0;
    return message;
  }
};
var tsProtoGlobalThis6 = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();
function longToNumber6(long) {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis6.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}
if (import_minimal6.default.util.Long !== import_long6.default) {
  import_minimal6.default.util.Long = import_long6.default;
  import_minimal6.default.configure();
}
function isSet6(value) {
  return value !== null && value !== void 0;
}

// src/protobufs/generated/job.ts
init_esm_shims();
var import_minimal7 = __toESM(require_minimal2());
function createBaseRevokeMessagesBySignerJobPayload() {
  return { fid: 0, signer: new Uint8Array() };
}
var RevokeMessagesBySignerJobPayload = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint32(message.fid);
    }
    if (message.signer.length !== 0) {
      writer.uint32(18).bytes(message.signer);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRevokeMessagesBySignerJobPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.signer = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet7(object.fid) ? Number(object.fid) : 0,
      signer: isSet7(object.signer) ? bytesFromBase645(object.signer) : new Uint8Array()
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.signer !== void 0 && (obj.signer = base64FromBytes5(message.signer !== void 0 ? message.signer : new Uint8Array()));
    return obj;
  },
  create(base) {
    return RevokeMessagesBySignerJobPayload.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b;
    const message = createBaseRevokeMessagesBySignerJobPayload();
    message.fid = (_a2 = object.fid) != null ? _a2 : 0;
    message.signer = (_b = object.signer) != null ? _b : new Uint8Array();
    return message;
  }
};
function createBaseUpdateNameRegistryEventExpiryJobPayload() {
  return { fname: new Uint8Array() };
}
var UpdateNameRegistryEventExpiryJobPayload = {
  encode(message, writer = import_minimal7.default.Writer.create()) {
    if (message.fname.length !== 0) {
      writer.uint32(10).bytes(message.fname);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal7.default.Reader ? input : import_minimal7.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseUpdateNameRegistryEventExpiryJobPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.fname = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { fname: isSet7(object.fname) ? bytesFromBase645(object.fname) : new Uint8Array() };
  },
  toJSON(message) {
    const obj = {};
    message.fname !== void 0 && (obj.fname = base64FromBytes5(message.fname !== void 0 ? message.fname : new Uint8Array()));
    return obj;
  },
  create(base) {
    return UpdateNameRegistryEventExpiryJobPayload.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2;
    const message = createBaseUpdateNameRegistryEventExpiryJobPayload();
    message.fname = (_a2 = object.fname) != null ? _a2 : new Uint8Array();
    return message;
  }
};
var tsProtoGlobalThis7 = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();
function bytesFromBase645(b64) {
  if (tsProtoGlobalThis7.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis7.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis7.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i57 = 0; i57 < bin.length; ++i57) {
      arr[i57] = bin.charCodeAt(i57);
    }
    return arr;
  }
}
function base64FromBytes5(arr) {
  if (tsProtoGlobalThis7.Buffer) {
    return tsProtoGlobalThis7.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis7.btoa(bin.join(""));
  }
}
function isSet7(value) {
  return value !== null && value !== void 0;
}

// src/protobufs/generated/sync_trie.ts
init_esm_shims();
var import_minimal8 = __toESM(require_minimal2());
function createBaseDbTrieNode() {
  return { key: new Uint8Array(), childChars: [], items: 0, hash: new Uint8Array() };
}
var DbTrieNode = {
  encode(message, writer = import_minimal8.default.Writer.create()) {
    if (message.key.length !== 0) {
      writer.uint32(10).bytes(message.key);
    }
    writer.uint32(18).fork();
    for (const v37 of message.childChars) {
      writer.uint32(v37);
    }
    writer.ldelim();
    if (message.items !== 0) {
      writer.uint32(24).uint32(message.items);
    }
    if (message.hash.length !== 0) {
      writer.uint32(34).bytes(message.hash);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal8.default.Reader ? input : import_minimal8.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDbTrieNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.key = reader.bytes();
          continue;
        case 2:
          if (tag == 16) {
            message.childChars.push(reader.uint32());
            continue;
          }
          if (tag == 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.childChars.push(reader.uint32());
            }
            continue;
          }
          break;
        case 3:
          if (tag != 24) {
            break;
          }
          message.items = reader.uint32();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.hash = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      key: isSet8(object.key) ? bytesFromBase646(object.key) : new Uint8Array(),
      childChars: Array.isArray(object == null ? void 0 : object.childChars) ? object.childChars.map((e57) => Number(e57)) : [],
      items: isSet8(object.items) ? Number(object.items) : 0,
      hash: isSet8(object.hash) ? bytesFromBase646(object.hash) : new Uint8Array()
    };
  },
  toJSON(message) {
    const obj = {};
    message.key !== void 0 && (obj.key = base64FromBytes6(message.key !== void 0 ? message.key : new Uint8Array()));
    if (message.childChars) {
      obj.childChars = message.childChars.map((e57) => Math.round(e57));
    } else {
      obj.childChars = [];
    }
    message.items !== void 0 && (obj.items = Math.round(message.items));
    message.hash !== void 0 && (obj.hash = base64FromBytes6(message.hash !== void 0 ? message.hash : new Uint8Array()));
    return obj;
  },
  create(base) {
    return DbTrieNode.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d;
    const message = createBaseDbTrieNode();
    message.key = (_a2 = object.key) != null ? _a2 : new Uint8Array();
    message.childChars = ((_b = object.childChars) == null ? void 0 : _b.map((e57) => e57)) || [];
    message.items = (_c = object.items) != null ? _c : 0;
    message.hash = (_d = object.hash) != null ? _d : new Uint8Array();
    return message;
  }
};
var tsProtoGlobalThis8 = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();
function bytesFromBase646(b64) {
  if (tsProtoGlobalThis8.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis8.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis8.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i57 = 0; i57 < bin.length; ++i57) {
      arr[i57] = bin.charCodeAt(i57);
    }
    return arr;
  }
}
function base64FromBytes6(arr) {
  if (tsProtoGlobalThis8.Buffer) {
    return tsProtoGlobalThis8.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis8.btoa(bin.join(""));
  }
}
function isSet8(value) {
  return value !== null && value !== void 0;
}

// src/protobufs/generated/request_response.ts
init_esm_shims();
var import_long7 = __toESM(require_long());
var import_minimal9 = __toESM(require_minimal2());
var StoreType = /* @__PURE__ */ ((StoreType2) => {
  StoreType2[StoreType2["NONE"] = 0] = "NONE";
  StoreType2[StoreType2["CASTS"] = 1] = "CASTS";
  StoreType2[StoreType2["LINKS"] = 2] = "LINKS";
  StoreType2[StoreType2["REACTIONS"] = 3] = "REACTIONS";
  StoreType2[StoreType2["USER_DATA"] = 4] = "USER_DATA";
  StoreType2[StoreType2["VERIFICATIONS"] = 5] = "VERIFICATIONS";
  StoreType2[StoreType2["USERNAME_PROOFS"] = 6] = "USERNAME_PROOFS";
  return StoreType2;
})(StoreType || {});
function storeTypeFromJSON(object) {
  switch (object) {
    case 0:
    case "STORE_TYPE_NONE":
      return 0 /* NONE */;
    case 1:
    case "STORE_TYPE_CASTS":
      return 1 /* CASTS */;
    case 2:
    case "STORE_TYPE_LINKS":
      return 2 /* LINKS */;
    case 3:
    case "STORE_TYPE_REACTIONS":
      return 3 /* REACTIONS */;
    case 4:
    case "STORE_TYPE_USER_DATA":
      return 4 /* USER_DATA */;
    case 5:
    case "STORE_TYPE_VERIFICATIONS":
      return 5 /* VERIFICATIONS */;
    case 6:
    case "STORE_TYPE_USERNAME_PROOFS":
      return 6 /* USERNAME_PROOFS */;
    default:
      throw new tsProtoGlobalThis9.Error("Unrecognized enum value " + object + " for enum StoreType");
  }
}
function storeTypeToJSON(object) {
  switch (object) {
    case 0 /* NONE */:
      return "STORE_TYPE_NONE";
    case 1 /* CASTS */:
      return "STORE_TYPE_CASTS";
    case 2 /* LINKS */:
      return "STORE_TYPE_LINKS";
    case 3 /* REACTIONS */:
      return "STORE_TYPE_REACTIONS";
    case 4 /* USER_DATA */:
      return "STORE_TYPE_USER_DATA";
    case 5 /* VERIFICATIONS */:
      return "STORE_TYPE_VERIFICATIONS";
    case 6 /* USERNAME_PROOFS */:
      return "STORE_TYPE_USERNAME_PROOFS";
    default:
      throw new tsProtoGlobalThis9.Error("Unrecognized enum value " + object + " for enum StoreType");
  }
}
function createBaseEmpty() {
  return {};
}
var Empty = {
  encode(_37, writer = import_minimal9.default.Writer.create()) {
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(_37) {
    return {};
  },
  toJSON(_37) {
    const obj = {};
    return obj;
  },
  create(base) {
    return Empty.fromPartial(base != null ? base : {});
  },
  fromPartial(_37) {
    const message = createBaseEmpty();
    return message;
  }
};
function createBaseSubscribeRequest() {
  return { eventTypes: [], fromId: void 0 };
}
var SubscribeRequest = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    writer.uint32(10).fork();
    for (const v37 of message.eventTypes) {
      writer.int32(v37);
    }
    writer.ldelim();
    if (message.fromId !== void 0) {
      writer.uint32(16).uint64(message.fromId);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSubscribeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag == 8) {
            message.eventTypes.push(reader.int32());
            continue;
          }
          if (tag == 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.eventTypes.push(reader.int32());
            }
            continue;
          }
          break;
        case 2:
          if (tag != 16) {
            break;
          }
          message.fromId = longToNumber7(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      eventTypes: Array.isArray(object == null ? void 0 : object.eventTypes) ? object.eventTypes.map((e57) => hubEventTypeFromJSON(e57)) : [],
      fromId: isSet9(object.fromId) ? Number(object.fromId) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.eventTypes) {
      obj.eventTypes = message.eventTypes.map((e57) => hubEventTypeToJSON(e57));
    } else {
      obj.eventTypes = [];
    }
    message.fromId !== void 0 && (obj.fromId = Math.round(message.fromId));
    return obj;
  },
  create(base) {
    return SubscribeRequest.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b;
    const message = createBaseSubscribeRequest();
    message.eventTypes = ((_a2 = object.eventTypes) == null ? void 0 : _a2.map((e57) => e57)) || [];
    message.fromId = (_b = object.fromId) != null ? _b : void 0;
    return message;
  }
};
function createBaseEventRequest() {
  return { id: 0 };
}
var EventRequest = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.id = longToNumber7(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { id: isSet9(object.id) ? Number(object.id) : 0 };
  },
  toJSON(message) {
    const obj = {};
    message.id !== void 0 && (obj.id = Math.round(message.id));
    return obj;
  },
  create(base) {
    return EventRequest.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2;
    const message = createBaseEventRequest();
    message.id = (_a2 = object.id) != null ? _a2 : 0;
    return message;
  }
};
function createBaseHubInfoRequest() {
  return { dbStats: false };
}
var HubInfoRequest = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.dbStats === true) {
      writer.uint32(8).bool(message.dbStats);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseHubInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.dbStats = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { dbStats: isSet9(object.dbStats) ? Boolean(object.dbStats) : false };
  },
  toJSON(message) {
    const obj = {};
    message.dbStats !== void 0 && (obj.dbStats = message.dbStats);
    return obj;
  },
  create(base) {
    return HubInfoRequest.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2;
    const message = createBaseHubInfoRequest();
    message.dbStats = (_a2 = object.dbStats) != null ? _a2 : false;
    return message;
  }
};
function createBaseHubInfoResponse() {
  return {
    version: "",
    isSyncing: false,
    nickname: "",
    rootHash: "",
    dbStats: void 0,
    peerId: "",
    hubOperatorFid: 0
  };
}
var HubInfoResponse = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    if (message.isSyncing === true) {
      writer.uint32(16).bool(message.isSyncing);
    }
    if (message.nickname !== "") {
      writer.uint32(26).string(message.nickname);
    }
    if (message.rootHash !== "") {
      writer.uint32(34).string(message.rootHash);
    }
    if (message.dbStats !== void 0) {
      DbStats.encode(message.dbStats, writer.uint32(42).fork()).ldelim();
    }
    if (message.peerId !== "") {
      writer.uint32(50).string(message.peerId);
    }
    if (message.hubOperatorFid !== 0) {
      writer.uint32(56).uint64(message.hubOperatorFid);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseHubInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.version = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.isSyncing = reader.bool();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.nickname = reader.string();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.rootHash = reader.string();
          continue;
        case 5:
          if (tag != 42) {
            break;
          }
          message.dbStats = DbStats.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }
          message.peerId = reader.string();
          continue;
        case 7:
          if (tag != 56) {
            break;
          }
          message.hubOperatorFid = longToNumber7(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      version: isSet9(object.version) ? String(object.version) : "",
      isSyncing: isSet9(object.isSyncing) ? Boolean(object.isSyncing) : false,
      nickname: isSet9(object.nickname) ? String(object.nickname) : "",
      rootHash: isSet9(object.rootHash) ? String(object.rootHash) : "",
      dbStats: isSet9(object.dbStats) ? DbStats.fromJSON(object.dbStats) : void 0,
      peerId: isSet9(object.peerId) ? String(object.peerId) : "",
      hubOperatorFid: isSet9(object.hubOperatorFid) ? Number(object.hubOperatorFid) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.version !== void 0 && (obj.version = message.version);
    message.isSyncing !== void 0 && (obj.isSyncing = message.isSyncing);
    message.nickname !== void 0 && (obj.nickname = message.nickname);
    message.rootHash !== void 0 && (obj.rootHash = message.rootHash);
    message.dbStats !== void 0 && (obj.dbStats = message.dbStats ? DbStats.toJSON(message.dbStats) : void 0);
    message.peerId !== void 0 && (obj.peerId = message.peerId);
    message.hubOperatorFid !== void 0 && (obj.hubOperatorFid = Math.round(message.hubOperatorFid));
    return obj;
  },
  create(base) {
    return HubInfoResponse.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d, _e5, _f;
    const message = createBaseHubInfoResponse();
    message.version = (_a2 = object.version) != null ? _a2 : "";
    message.isSyncing = (_b = object.isSyncing) != null ? _b : false;
    message.nickname = (_c = object.nickname) != null ? _c : "";
    message.rootHash = (_d = object.rootHash) != null ? _d : "";
    message.dbStats = object.dbStats !== void 0 && object.dbStats !== null ? DbStats.fromPartial(object.dbStats) : void 0;
    message.peerId = (_e5 = object.peerId) != null ? _e5 : "";
    message.hubOperatorFid = (_f = object.hubOperatorFid) != null ? _f : 0;
    return message;
  }
};
function createBaseDbStats() {
  return { numMessages: 0, numFidEvents: 0, numFnameEvents: 0 };
}
var DbStats = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.numMessages !== 0) {
      writer.uint32(8).uint64(message.numMessages);
    }
    if (message.numFidEvents !== 0) {
      writer.uint32(16).uint64(message.numFidEvents);
    }
    if (message.numFnameEvents !== 0) {
      writer.uint32(24).uint64(message.numFnameEvents);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseDbStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.numMessages = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.numFidEvents = longToNumber7(reader.uint64());
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.numFnameEvents = longToNumber7(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      numMessages: isSet9(object.numMessages) ? Number(object.numMessages) : 0,
      numFidEvents: isSet9(object.numFidEvents) ? Number(object.numFidEvents) : 0,
      numFnameEvents: isSet9(object.numFnameEvents) ? Number(object.numFnameEvents) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.numMessages !== void 0 && (obj.numMessages = Math.round(message.numMessages));
    message.numFidEvents !== void 0 && (obj.numFidEvents = Math.round(message.numFidEvents));
    message.numFnameEvents !== void 0 && (obj.numFnameEvents = Math.round(message.numFnameEvents));
    return obj;
  },
  create(base) {
    return DbStats.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c;
    const message = createBaseDbStats();
    message.numMessages = (_a2 = object.numMessages) != null ? _a2 : 0;
    message.numFidEvents = (_b = object.numFidEvents) != null ? _b : 0;
    message.numFnameEvents = (_c = object.numFnameEvents) != null ? _c : 0;
    return message;
  }
};
function createBaseSyncStatusRequest() {
  return { peerId: void 0 };
}
var SyncStatusRequest = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.peerId !== void 0) {
      writer.uint32(10).string(message.peerId);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSyncStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.peerId = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { peerId: isSet9(object.peerId) ? String(object.peerId) : void 0 };
  },
  toJSON(message) {
    const obj = {};
    message.peerId !== void 0 && (obj.peerId = message.peerId);
    return obj;
  },
  create(base) {
    return SyncStatusRequest.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2;
    const message = createBaseSyncStatusRequest();
    message.peerId = (_a2 = object.peerId) != null ? _a2 : void 0;
    return message;
  }
};
function createBaseSyncStatusResponse() {
  return { isSyncing: false, syncStatus: [], engineStarted: false };
}
var SyncStatusResponse = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.isSyncing === true) {
      writer.uint32(8).bool(message.isSyncing);
    }
    for (const v37 of message.syncStatus) {
      SyncStatus.encode(v37, writer.uint32(18).fork()).ldelim();
    }
    if (message.engineStarted === true) {
      writer.uint32(24).bool(message.engineStarted);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSyncStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.isSyncing = reader.bool();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.syncStatus.push(SyncStatus.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.engineStarted = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      isSyncing: isSet9(object.isSyncing) ? Boolean(object.isSyncing) : false,
      syncStatus: Array.isArray(object == null ? void 0 : object.syncStatus) ? object.syncStatus.map((e57) => SyncStatus.fromJSON(e57)) : [],
      engineStarted: isSet9(object.engineStarted) ? Boolean(object.engineStarted) : false
    };
  },
  toJSON(message) {
    const obj = {};
    message.isSyncing !== void 0 && (obj.isSyncing = message.isSyncing);
    if (message.syncStatus) {
      obj.syncStatus = message.syncStatus.map((e57) => e57 ? SyncStatus.toJSON(e57) : void 0);
    } else {
      obj.syncStatus = [];
    }
    message.engineStarted !== void 0 && (obj.engineStarted = message.engineStarted);
    return obj;
  },
  create(base) {
    return SyncStatusResponse.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c;
    const message = createBaseSyncStatusResponse();
    message.isSyncing = (_a2 = object.isSyncing) != null ? _a2 : false;
    message.syncStatus = ((_b = object.syncStatus) == null ? void 0 : _b.map((e57) => SyncStatus.fromPartial(e57))) || [];
    message.engineStarted = (_c = object.engineStarted) != null ? _c : false;
    return message;
  }
};
function createBaseSyncStatus() {
  return {
    peerId: "",
    inSync: "",
    shouldSync: false,
    divergencePrefix: "",
    divergenceSecondsAgo: 0,
    theirMessages: 0,
    ourMessages: 0,
    lastBadSync: 0,
    score: 0
  };
}
var SyncStatus = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.peerId !== "") {
      writer.uint32(10).string(message.peerId);
    }
    if (message.inSync !== "") {
      writer.uint32(18).string(message.inSync);
    }
    if (message.shouldSync === true) {
      writer.uint32(24).bool(message.shouldSync);
    }
    if (message.divergencePrefix !== "") {
      writer.uint32(34).string(message.divergencePrefix);
    }
    if (message.divergenceSecondsAgo !== 0) {
      writer.uint32(40).int32(message.divergenceSecondsAgo);
    }
    if (message.theirMessages !== 0) {
      writer.uint32(48).uint64(message.theirMessages);
    }
    if (message.ourMessages !== 0) {
      writer.uint32(56).uint64(message.ourMessages);
    }
    if (message.lastBadSync !== 0) {
      writer.uint32(64).int64(message.lastBadSync);
    }
    if (message.score !== 0) {
      writer.uint32(72).int64(message.score);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSyncStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.peerId = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.inSync = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.shouldSync = reader.bool();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.divergencePrefix = reader.string();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.divergenceSecondsAgo = reader.int32();
          continue;
        case 6:
          if (tag != 48) {
            break;
          }
          message.theirMessages = longToNumber7(reader.uint64());
          continue;
        case 7:
          if (tag != 56) {
            break;
          }
          message.ourMessages = longToNumber7(reader.uint64());
          continue;
        case 8:
          if (tag != 64) {
            break;
          }
          message.lastBadSync = longToNumber7(reader.int64());
          continue;
        case 9:
          if (tag != 72) {
            break;
          }
          message.score = longToNumber7(reader.int64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      peerId: isSet9(object.peerId) ? String(object.peerId) : "",
      inSync: isSet9(object.inSync) ? String(object.inSync) : "",
      shouldSync: isSet9(object.shouldSync) ? Boolean(object.shouldSync) : false,
      divergencePrefix: isSet9(object.divergencePrefix) ? String(object.divergencePrefix) : "",
      divergenceSecondsAgo: isSet9(object.divergenceSecondsAgo) ? Number(object.divergenceSecondsAgo) : 0,
      theirMessages: isSet9(object.theirMessages) ? Number(object.theirMessages) : 0,
      ourMessages: isSet9(object.ourMessages) ? Number(object.ourMessages) : 0,
      lastBadSync: isSet9(object.lastBadSync) ? Number(object.lastBadSync) : 0,
      score: isSet9(object.score) ? Number(object.score) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.peerId !== void 0 && (obj.peerId = message.peerId);
    message.inSync !== void 0 && (obj.inSync = message.inSync);
    message.shouldSync !== void 0 && (obj.shouldSync = message.shouldSync);
    message.divergencePrefix !== void 0 && (obj.divergencePrefix = message.divergencePrefix);
    message.divergenceSecondsAgo !== void 0 && (obj.divergenceSecondsAgo = Math.round(message.divergenceSecondsAgo));
    message.theirMessages !== void 0 && (obj.theirMessages = Math.round(message.theirMessages));
    message.ourMessages !== void 0 && (obj.ourMessages = Math.round(message.ourMessages));
    message.lastBadSync !== void 0 && (obj.lastBadSync = Math.round(message.lastBadSync));
    message.score !== void 0 && (obj.score = Math.round(message.score));
    return obj;
  },
  create(base) {
    return SyncStatus.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d, _e5, _f, _g, _h, _i2;
    const message = createBaseSyncStatus();
    message.peerId = (_a2 = object.peerId) != null ? _a2 : "";
    message.inSync = (_b = object.inSync) != null ? _b : "";
    message.shouldSync = (_c = object.shouldSync) != null ? _c : false;
    message.divergencePrefix = (_d = object.divergencePrefix) != null ? _d : "";
    message.divergenceSecondsAgo = (_e5 = object.divergenceSecondsAgo) != null ? _e5 : 0;
    message.theirMessages = (_f = object.theirMessages) != null ? _f : 0;
    message.ourMessages = (_g = object.ourMessages) != null ? _g : 0;
    message.lastBadSync = (_h = object.lastBadSync) != null ? _h : 0;
    message.score = (_i2 = object.score) != null ? _i2 : 0;
    return message;
  }
};
function createBaseTrieNodeMetadataResponse() {
  return { prefix: new Uint8Array(), numMessages: 0, hash: "", children: [] };
}
var TrieNodeMetadataResponse = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.prefix.length !== 0) {
      writer.uint32(10).bytes(message.prefix);
    }
    if (message.numMessages !== 0) {
      writer.uint32(16).uint64(message.numMessages);
    }
    if (message.hash !== "") {
      writer.uint32(26).string(message.hash);
    }
    for (const v37 of message.children) {
      TrieNodeMetadataResponse.encode(v37, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTrieNodeMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.prefix = reader.bytes();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.numMessages = longToNumber7(reader.uint64());
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.hash = reader.string();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.children.push(TrieNodeMetadataResponse.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      prefix: isSet9(object.prefix) ? bytesFromBase647(object.prefix) : new Uint8Array(),
      numMessages: isSet9(object.numMessages) ? Number(object.numMessages) : 0,
      hash: isSet9(object.hash) ? String(object.hash) : "",
      children: Array.isArray(object == null ? void 0 : object.children) ? object.children.map((e57) => TrieNodeMetadataResponse.fromJSON(e57)) : []
    };
  },
  toJSON(message) {
    const obj = {};
    message.prefix !== void 0 && (obj.prefix = base64FromBytes7(message.prefix !== void 0 ? message.prefix : new Uint8Array()));
    message.numMessages !== void 0 && (obj.numMessages = Math.round(message.numMessages));
    message.hash !== void 0 && (obj.hash = message.hash);
    if (message.children) {
      obj.children = message.children.map((e57) => e57 ? TrieNodeMetadataResponse.toJSON(e57) : void 0);
    } else {
      obj.children = [];
    }
    return obj;
  },
  create(base) {
    return TrieNodeMetadataResponse.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d;
    const message = createBaseTrieNodeMetadataResponse();
    message.prefix = (_a2 = object.prefix) != null ? _a2 : new Uint8Array();
    message.numMessages = (_b = object.numMessages) != null ? _b : 0;
    message.hash = (_c = object.hash) != null ? _c : "";
    message.children = ((_d = object.children) == null ? void 0 : _d.map((e57) => TrieNodeMetadataResponse.fromPartial(e57))) || [];
    return message;
  }
};
function createBaseTrieNodeSnapshotResponse() {
  return { prefix: new Uint8Array(), excludedHashes: [], numMessages: 0, rootHash: "" };
}
var TrieNodeSnapshotResponse = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.prefix.length !== 0) {
      writer.uint32(10).bytes(message.prefix);
    }
    for (const v37 of message.excludedHashes) {
      writer.uint32(18).string(v37);
    }
    if (message.numMessages !== 0) {
      writer.uint32(24).uint64(message.numMessages);
    }
    if (message.rootHash !== "") {
      writer.uint32(34).string(message.rootHash);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTrieNodeSnapshotResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.prefix = reader.bytes();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.excludedHashes.push(reader.string());
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.numMessages = longToNumber7(reader.uint64());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.rootHash = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      prefix: isSet9(object.prefix) ? bytesFromBase647(object.prefix) : new Uint8Array(),
      excludedHashes: Array.isArray(object == null ? void 0 : object.excludedHashes) ? object.excludedHashes.map((e57) => String(e57)) : [],
      numMessages: isSet9(object.numMessages) ? Number(object.numMessages) : 0,
      rootHash: isSet9(object.rootHash) ? String(object.rootHash) : ""
    };
  },
  toJSON(message) {
    const obj = {};
    message.prefix !== void 0 && (obj.prefix = base64FromBytes7(message.prefix !== void 0 ? message.prefix : new Uint8Array()));
    if (message.excludedHashes) {
      obj.excludedHashes = message.excludedHashes.map((e57) => e57);
    } else {
      obj.excludedHashes = [];
    }
    message.numMessages !== void 0 && (obj.numMessages = Math.round(message.numMessages));
    message.rootHash !== void 0 && (obj.rootHash = message.rootHash);
    return obj;
  },
  create(base) {
    return TrieNodeSnapshotResponse.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d;
    const message = createBaseTrieNodeSnapshotResponse();
    message.prefix = (_a2 = object.prefix) != null ? _a2 : new Uint8Array();
    message.excludedHashes = ((_b = object.excludedHashes) == null ? void 0 : _b.map((e57) => e57)) || [];
    message.numMessages = (_c = object.numMessages) != null ? _c : 0;
    message.rootHash = (_d = object.rootHash) != null ? _d : "";
    return message;
  }
};
function createBaseTrieNodePrefix() {
  return { prefix: new Uint8Array() };
}
var TrieNodePrefix = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.prefix.length !== 0) {
      writer.uint32(10).bytes(message.prefix);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseTrieNodePrefix();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.prefix = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { prefix: isSet9(object.prefix) ? bytesFromBase647(object.prefix) : new Uint8Array() };
  },
  toJSON(message) {
    const obj = {};
    message.prefix !== void 0 && (obj.prefix = base64FromBytes7(message.prefix !== void 0 ? message.prefix : new Uint8Array()));
    return obj;
  },
  create(base) {
    return TrieNodePrefix.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2;
    const message = createBaseTrieNodePrefix();
    message.prefix = (_a2 = object.prefix) != null ? _a2 : new Uint8Array();
    return message;
  }
};
function createBaseSyncIds() {
  return { syncIds: [] };
}
var SyncIds = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    for (const v37 of message.syncIds) {
      writer.uint32(10).bytes(v37);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSyncIds();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.syncIds.push(reader.bytes());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { syncIds: Array.isArray(object == null ? void 0 : object.syncIds) ? object.syncIds.map((e57) => bytesFromBase647(e57)) : [] };
  },
  toJSON(message) {
    const obj = {};
    if (message.syncIds) {
      obj.syncIds = message.syncIds.map((e57) => base64FromBytes7(e57 !== void 0 ? e57 : new Uint8Array()));
    } else {
      obj.syncIds = [];
    }
    return obj;
  },
  create(base) {
    return SyncIds.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2;
    const message = createBaseSyncIds();
    message.syncIds = ((_a2 = object.syncIds) == null ? void 0 : _a2.map((e57) => e57)) || [];
    return message;
  }
};
function createBaseFidRequest() {
  return { fid: 0, pageSize: void 0, pageToken: void 0, reverse: void 0 };
}
var FidRequest = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.pageSize !== void 0) {
      writer.uint32(16).uint32(message.pageSize);
    }
    if (message.pageToken !== void 0) {
      writer.uint32(26).bytes(message.pageToken);
    }
    if (message.reverse !== void 0) {
      writer.uint32(32).bool(message.reverse);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFidRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.pageSize = reader.uint32();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.pageToken = reader.bytes();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }
          message.reverse = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet9(object.fid) ? Number(object.fid) : 0,
      pageSize: isSet9(object.pageSize) ? Number(object.pageSize) : void 0,
      pageToken: isSet9(object.pageToken) ? bytesFromBase647(object.pageToken) : void 0,
      reverse: isSet9(object.reverse) ? Boolean(object.reverse) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.pageSize !== void 0 && (obj.pageSize = Math.round(message.pageSize));
    message.pageToken !== void 0 && (obj.pageToken = message.pageToken !== void 0 ? base64FromBytes7(message.pageToken) : void 0);
    message.reverse !== void 0 && (obj.reverse = message.reverse);
    return obj;
  },
  create(base) {
    return FidRequest.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d;
    const message = createBaseFidRequest();
    message.fid = (_a2 = object.fid) != null ? _a2 : 0;
    message.pageSize = (_b = object.pageSize) != null ? _b : void 0;
    message.pageToken = (_c = object.pageToken) != null ? _c : void 0;
    message.reverse = (_d = object.reverse) != null ? _d : void 0;
    return message;
  }
};
function createBaseFidsRequest() {
  return { pageSize: void 0, pageToken: void 0, reverse: void 0 };
}
var FidsRequest = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.pageSize !== void 0) {
      writer.uint32(8).uint32(message.pageSize);
    }
    if (message.pageToken !== void 0) {
      writer.uint32(18).bytes(message.pageToken);
    }
    if (message.reverse !== void 0) {
      writer.uint32(24).bool(message.reverse);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFidsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.pageSize = reader.uint32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.pageToken = reader.bytes();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.reverse = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      pageSize: isSet9(object.pageSize) ? Number(object.pageSize) : void 0,
      pageToken: isSet9(object.pageToken) ? bytesFromBase647(object.pageToken) : void 0,
      reverse: isSet9(object.reverse) ? Boolean(object.reverse) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.pageSize !== void 0 && (obj.pageSize = Math.round(message.pageSize));
    message.pageToken !== void 0 && (obj.pageToken = message.pageToken !== void 0 ? base64FromBytes7(message.pageToken) : void 0);
    message.reverse !== void 0 && (obj.reverse = message.reverse);
    return obj;
  },
  create(base) {
    return FidsRequest.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c;
    const message = createBaseFidsRequest();
    message.pageSize = (_a2 = object.pageSize) != null ? _a2 : void 0;
    message.pageToken = (_b = object.pageToken) != null ? _b : void 0;
    message.reverse = (_c = object.reverse) != null ? _c : void 0;
    return message;
  }
};
function createBaseFidsResponse() {
  return { fids: [], nextPageToken: void 0 };
}
var FidsResponse = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    writer.uint32(10).fork();
    for (const v37 of message.fids) {
      writer.uint64(v37);
    }
    writer.ldelim();
    if (message.nextPageToken !== void 0) {
      writer.uint32(18).bytes(message.nextPageToken);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseFidsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag == 8) {
            message.fids.push(longToNumber7(reader.uint64()));
            continue;
          }
          if (tag == 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.fids.push(longToNumber7(reader.uint64()));
            }
            continue;
          }
          break;
        case 2:
          if (tag != 18) {
            break;
          }
          message.nextPageToken = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fids: Array.isArray(object == null ? void 0 : object.fids) ? object.fids.map((e57) => Number(e57)) : [],
      nextPageToken: isSet9(object.nextPageToken) ? bytesFromBase647(object.nextPageToken) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.fids) {
      obj.fids = message.fids.map((e57) => Math.round(e57));
    } else {
      obj.fids = [];
    }
    message.nextPageToken !== void 0 && (obj.nextPageToken = message.nextPageToken !== void 0 ? base64FromBytes7(message.nextPageToken) : void 0);
    return obj;
  },
  create(base) {
    return FidsResponse.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b;
    const message = createBaseFidsResponse();
    message.fids = ((_a2 = object.fids) == null ? void 0 : _a2.map((e57) => e57)) || [];
    message.nextPageToken = (_b = object.nextPageToken) != null ? _b : void 0;
    return message;
  }
};
function createBaseMessagesResponse() {
  return { messages: [], nextPageToken: void 0 };
}
var MessagesResponse = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    for (const v37 of message.messages) {
      Message.encode(v37, writer.uint32(10).fork()).ldelim();
    }
    if (message.nextPageToken !== void 0) {
      writer.uint32(18).bytes(message.nextPageToken);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseMessagesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.messages.push(Message.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.nextPageToken = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      messages: Array.isArray(object == null ? void 0 : object.messages) ? object.messages.map((e57) => Message.fromJSON(e57)) : [],
      nextPageToken: isSet9(object.nextPageToken) ? bytesFromBase647(object.nextPageToken) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.messages) {
      obj.messages = message.messages.map((e57) => e57 ? Message.toJSON(e57) : void 0);
    } else {
      obj.messages = [];
    }
    message.nextPageToken !== void 0 && (obj.nextPageToken = message.nextPageToken !== void 0 ? base64FromBytes7(message.nextPageToken) : void 0);
    return obj;
  },
  create(base) {
    return MessagesResponse.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b;
    const message = createBaseMessagesResponse();
    message.messages = ((_a2 = object.messages) == null ? void 0 : _a2.map((e57) => Message.fromPartial(e57))) || [];
    message.nextPageToken = (_b = object.nextPageToken) != null ? _b : void 0;
    return message;
  }
};
function createBaseCastsByParentRequest() {
  return {
    parentCastId: void 0,
    parentUrl: void 0,
    pageSize: void 0,
    pageToken: void 0,
    reverse: void 0
  };
}
var CastsByParentRequest = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.parentCastId !== void 0) {
      CastId.encode(message.parentCastId, writer.uint32(10).fork()).ldelim();
    }
    if (message.parentUrl !== void 0) {
      writer.uint32(42).string(message.parentUrl);
    }
    if (message.pageSize !== void 0) {
      writer.uint32(16).uint32(message.pageSize);
    }
    if (message.pageToken !== void 0) {
      writer.uint32(26).bytes(message.pageToken);
    }
    if (message.reverse !== void 0) {
      writer.uint32(32).bool(message.reverse);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseCastsByParentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.parentCastId = CastId.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }
          message.parentUrl = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.pageSize = reader.uint32();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.pageToken = reader.bytes();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }
          message.reverse = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      parentCastId: isSet9(object.parentCastId) ? CastId.fromJSON(object.parentCastId) : void 0,
      parentUrl: isSet9(object.parentUrl) ? String(object.parentUrl) : void 0,
      pageSize: isSet9(object.pageSize) ? Number(object.pageSize) : void 0,
      pageToken: isSet9(object.pageToken) ? bytesFromBase647(object.pageToken) : void 0,
      reverse: isSet9(object.reverse) ? Boolean(object.reverse) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.parentCastId !== void 0 && (obj.parentCastId = message.parentCastId ? CastId.toJSON(message.parentCastId) : void 0);
    message.parentUrl !== void 0 && (obj.parentUrl = message.parentUrl);
    message.pageSize !== void 0 && (obj.pageSize = Math.round(message.pageSize));
    message.pageToken !== void 0 && (obj.pageToken = message.pageToken !== void 0 ? base64FromBytes7(message.pageToken) : void 0);
    message.reverse !== void 0 && (obj.reverse = message.reverse);
    return obj;
  },
  create(base) {
    return CastsByParentRequest.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d;
    const message = createBaseCastsByParentRequest();
    message.parentCastId = object.parentCastId !== void 0 && object.parentCastId !== null ? CastId.fromPartial(object.parentCastId) : void 0;
    message.parentUrl = (_a2 = object.parentUrl) != null ? _a2 : void 0;
    message.pageSize = (_b = object.pageSize) != null ? _b : void 0;
    message.pageToken = (_c = object.pageToken) != null ? _c : void 0;
    message.reverse = (_d = object.reverse) != null ? _d : void 0;
    return message;
  }
};
function createBaseReactionRequest() {
  return { fid: 0, reactionType: 0, targetCastId: void 0, targetUrl: void 0 };
}
var ReactionRequest = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.reactionType !== 0) {
      writer.uint32(16).int32(message.reactionType);
    }
    if (message.targetCastId !== void 0) {
      CastId.encode(message.targetCastId, writer.uint32(26).fork()).ldelim();
    }
    if (message.targetUrl !== void 0) {
      writer.uint32(34).string(message.targetUrl);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseReactionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.reactionType = reader.int32();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }
          message.targetCastId = CastId.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.targetUrl = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet9(object.fid) ? Number(object.fid) : 0,
      reactionType: isSet9(object.reactionType) ? reactionTypeFromJSON(object.reactionType) : 0,
      targetCastId: isSet9(object.targetCastId) ? CastId.fromJSON(object.targetCastId) : void 0,
      targetUrl: isSet9(object.targetUrl) ? String(object.targetUrl) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.reactionType !== void 0 && (obj.reactionType = reactionTypeToJSON(message.reactionType));
    message.targetCastId !== void 0 && (obj.targetCastId = message.targetCastId ? CastId.toJSON(message.targetCastId) : void 0);
    message.targetUrl !== void 0 && (obj.targetUrl = message.targetUrl);
    return obj;
  },
  create(base) {
    return ReactionRequest.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c;
    const message = createBaseReactionRequest();
    message.fid = (_a2 = object.fid) != null ? _a2 : 0;
    message.reactionType = (_b = object.reactionType) != null ? _b : 0;
    message.targetCastId = object.targetCastId !== void 0 && object.targetCastId !== null ? CastId.fromPartial(object.targetCastId) : void 0;
    message.targetUrl = (_c = object.targetUrl) != null ? _c : void 0;
    return message;
  }
};
function createBaseReactionsByFidRequest() {
  return { fid: 0, reactionType: void 0, pageSize: void 0, pageToken: void 0, reverse: void 0 };
}
var ReactionsByFidRequest = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.reactionType !== void 0) {
      writer.uint32(16).int32(message.reactionType);
    }
    if (message.pageSize !== void 0) {
      writer.uint32(24).uint32(message.pageSize);
    }
    if (message.pageToken !== void 0) {
      writer.uint32(34).bytes(message.pageToken);
    }
    if (message.reverse !== void 0) {
      writer.uint32(40).bool(message.reverse);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseReactionsByFidRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.reactionType = reader.int32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.pageSize = reader.uint32();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.pageToken = reader.bytes();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.reverse = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet9(object.fid) ? Number(object.fid) : 0,
      reactionType: isSet9(object.reactionType) ? reactionTypeFromJSON(object.reactionType) : void 0,
      pageSize: isSet9(object.pageSize) ? Number(object.pageSize) : void 0,
      pageToken: isSet9(object.pageToken) ? bytesFromBase647(object.pageToken) : void 0,
      reverse: isSet9(object.reverse) ? Boolean(object.reverse) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.reactionType !== void 0 && (obj.reactionType = message.reactionType !== void 0 ? reactionTypeToJSON(message.reactionType) : void 0);
    message.pageSize !== void 0 && (obj.pageSize = Math.round(message.pageSize));
    message.pageToken !== void 0 && (obj.pageToken = message.pageToken !== void 0 ? base64FromBytes7(message.pageToken) : void 0);
    message.reverse !== void 0 && (obj.reverse = message.reverse);
    return obj;
  },
  create(base) {
    return ReactionsByFidRequest.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d, _e5;
    const message = createBaseReactionsByFidRequest();
    message.fid = (_a2 = object.fid) != null ? _a2 : 0;
    message.reactionType = (_b = object.reactionType) != null ? _b : void 0;
    message.pageSize = (_c = object.pageSize) != null ? _c : void 0;
    message.pageToken = (_d = object.pageToken) != null ? _d : void 0;
    message.reverse = (_e5 = object.reverse) != null ? _e5 : void 0;
    return message;
  }
};
function createBaseReactionsByTargetRequest() {
  return {
    targetCastId: void 0,
    targetUrl: void 0,
    reactionType: void 0,
    pageSize: void 0,
    pageToken: void 0,
    reverse: void 0
  };
}
var ReactionsByTargetRequest = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.targetCastId !== void 0) {
      CastId.encode(message.targetCastId, writer.uint32(10).fork()).ldelim();
    }
    if (message.targetUrl !== void 0) {
      writer.uint32(50).string(message.targetUrl);
    }
    if (message.reactionType !== void 0) {
      writer.uint32(16).int32(message.reactionType);
    }
    if (message.pageSize !== void 0) {
      writer.uint32(24).uint32(message.pageSize);
    }
    if (message.pageToken !== void 0) {
      writer.uint32(34).bytes(message.pageToken);
    }
    if (message.reverse !== void 0) {
      writer.uint32(40).bool(message.reverse);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseReactionsByTargetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.targetCastId = CastId.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }
          message.targetUrl = reader.string();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.reactionType = reader.int32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.pageSize = reader.uint32();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.pageToken = reader.bytes();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.reverse = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      targetCastId: isSet9(object.targetCastId) ? CastId.fromJSON(object.targetCastId) : void 0,
      targetUrl: isSet9(object.targetUrl) ? String(object.targetUrl) : void 0,
      reactionType: isSet9(object.reactionType) ? reactionTypeFromJSON(object.reactionType) : void 0,
      pageSize: isSet9(object.pageSize) ? Number(object.pageSize) : void 0,
      pageToken: isSet9(object.pageToken) ? bytesFromBase647(object.pageToken) : void 0,
      reverse: isSet9(object.reverse) ? Boolean(object.reverse) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.targetCastId !== void 0 && (obj.targetCastId = message.targetCastId ? CastId.toJSON(message.targetCastId) : void 0);
    message.targetUrl !== void 0 && (obj.targetUrl = message.targetUrl);
    message.reactionType !== void 0 && (obj.reactionType = message.reactionType !== void 0 ? reactionTypeToJSON(message.reactionType) : void 0);
    message.pageSize !== void 0 && (obj.pageSize = Math.round(message.pageSize));
    message.pageToken !== void 0 && (obj.pageToken = message.pageToken !== void 0 ? base64FromBytes7(message.pageToken) : void 0);
    message.reverse !== void 0 && (obj.reverse = message.reverse);
    return obj;
  },
  create(base) {
    return ReactionsByTargetRequest.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d, _e5;
    const message = createBaseReactionsByTargetRequest();
    message.targetCastId = object.targetCastId !== void 0 && object.targetCastId !== null ? CastId.fromPartial(object.targetCastId) : void 0;
    message.targetUrl = (_a2 = object.targetUrl) != null ? _a2 : void 0;
    message.reactionType = (_b = object.reactionType) != null ? _b : void 0;
    message.pageSize = (_c = object.pageSize) != null ? _c : void 0;
    message.pageToken = (_d = object.pageToken) != null ? _d : void 0;
    message.reverse = (_e5 = object.reverse) != null ? _e5 : void 0;
    return message;
  }
};
function createBaseUserDataRequest() {
  return { fid: 0, userDataType: 0 };
}
var UserDataRequest = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.userDataType !== 0) {
      writer.uint32(16).int32(message.userDataType);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseUserDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.userDataType = reader.int32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet9(object.fid) ? Number(object.fid) : 0,
      userDataType: isSet9(object.userDataType) ? userDataTypeFromJSON(object.userDataType) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.userDataType !== void 0 && (obj.userDataType = userDataTypeToJSON(message.userDataType));
    return obj;
  },
  create(base) {
    return UserDataRequest.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b;
    const message = createBaseUserDataRequest();
    message.fid = (_a2 = object.fid) != null ? _a2 : 0;
    message.userDataType = (_b = object.userDataType) != null ? _b : 0;
    return message;
  }
};
function createBaseNameRegistryEventRequest() {
  return { name: new Uint8Array() };
}
var NameRegistryEventRequest = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.name.length !== 0) {
      writer.uint32(10).bytes(message.name);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseNameRegistryEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.name = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { name: isSet9(object.name) ? bytesFromBase647(object.name) : new Uint8Array() };
  },
  toJSON(message) {
    const obj = {};
    message.name !== void 0 && (obj.name = base64FromBytes7(message.name !== void 0 ? message.name : new Uint8Array()));
    return obj;
  },
  create(base) {
    return NameRegistryEventRequest.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2;
    const message = createBaseNameRegistryEventRequest();
    message.name = (_a2 = object.name) != null ? _a2 : new Uint8Array();
    return message;
  }
};
function createBaseRentRegistryEventsRequest() {
  return { fid: 0 };
}
var RentRegistryEventsRequest = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseRentRegistryEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber7(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { fid: isSet9(object.fid) ? Number(object.fid) : 0 };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    return obj;
  },
  create(base) {
    return RentRegistryEventsRequest.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2;
    const message = createBaseRentRegistryEventsRequest();
    message.fid = (_a2 = object.fid) != null ? _a2 : 0;
    return message;
  }
};
function createBaseOnChainEventRequest() {
  return { fid: 0, eventType: 0, pageSize: void 0, pageToken: void 0, reverse: void 0 };
}
var OnChainEventRequest = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.eventType !== 0) {
      writer.uint32(16).int32(message.eventType);
    }
    if (message.pageSize !== void 0) {
      writer.uint32(24).uint32(message.pageSize);
    }
    if (message.pageToken !== void 0) {
      writer.uint32(34).bytes(message.pageToken);
    }
    if (message.reverse !== void 0) {
      writer.uint32(40).bool(message.reverse);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseOnChainEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.eventType = reader.int32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.pageSize = reader.uint32();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.pageToken = reader.bytes();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.reverse = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet9(object.fid) ? Number(object.fid) : 0,
      eventType: isSet9(object.eventType) ? onChainEventTypeFromJSON(object.eventType) : 0,
      pageSize: isSet9(object.pageSize) ? Number(object.pageSize) : void 0,
      pageToken: isSet9(object.pageToken) ? bytesFromBase647(object.pageToken) : void 0,
      reverse: isSet9(object.reverse) ? Boolean(object.reverse) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.eventType !== void 0 && (obj.eventType = onChainEventTypeToJSON(message.eventType));
    message.pageSize !== void 0 && (obj.pageSize = Math.round(message.pageSize));
    message.pageToken !== void 0 && (obj.pageToken = message.pageToken !== void 0 ? base64FromBytes7(message.pageToken) : void 0);
    message.reverse !== void 0 && (obj.reverse = message.reverse);
    return obj;
  },
  create(base) {
    return OnChainEventRequest.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d, _e5;
    const message = createBaseOnChainEventRequest();
    message.fid = (_a2 = object.fid) != null ? _a2 : 0;
    message.eventType = (_b = object.eventType) != null ? _b : 0;
    message.pageSize = (_c = object.pageSize) != null ? _c : void 0;
    message.pageToken = (_d = object.pageToken) != null ? _d : void 0;
    message.reverse = (_e5 = object.reverse) != null ? _e5 : void 0;
    return message;
  }
};
function createBaseOnChainEventResponse() {
  return { events: [], nextPageToken: void 0 };
}
var OnChainEventResponse = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    for (const v37 of message.events) {
      OnChainEvent.encode(v37, writer.uint32(10).fork()).ldelim();
    }
    if (message.nextPageToken !== void 0) {
      writer.uint32(18).bytes(message.nextPageToken);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseOnChainEventResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.events.push(OnChainEvent.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.nextPageToken = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      events: Array.isArray(object == null ? void 0 : object.events) ? object.events.map((e57) => OnChainEvent.fromJSON(e57)) : [],
      nextPageToken: isSet9(object.nextPageToken) ? bytesFromBase647(object.nextPageToken) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.events) {
      obj.events = message.events.map((e57) => e57 ? OnChainEvent.toJSON(e57) : void 0);
    } else {
      obj.events = [];
    }
    message.nextPageToken !== void 0 && (obj.nextPageToken = message.nextPageToken !== void 0 ? base64FromBytes7(message.nextPageToken) : void 0);
    return obj;
  },
  create(base) {
    return OnChainEventResponse.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b;
    const message = createBaseOnChainEventResponse();
    message.events = ((_a2 = object.events) == null ? void 0 : _a2.map((e57) => OnChainEvent.fromPartial(e57))) || [];
    message.nextPageToken = (_b = object.nextPageToken) != null ? _b : void 0;
    return message;
  }
};
function createBaseStorageLimitsResponse() {
  return { limits: [], units: 0 };
}
var StorageLimitsResponse = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    for (const v37 of message.limits) {
      StorageLimit.encode(v37, writer.uint32(10).fork()).ldelim();
    }
    if (message.units !== 0) {
      writer.uint32(16).uint32(message.units);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseStorageLimitsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.limits.push(StorageLimit.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag != 16) {
            break;
          }
          message.units = reader.uint32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      limits: Array.isArray(object == null ? void 0 : object.limits) ? object.limits.map((e57) => StorageLimit.fromJSON(e57)) : [],
      units: isSet9(object.units) ? Number(object.units) : 0
    };
  },
  toJSON(message) {
    const obj = {};
    if (message.limits) {
      obj.limits = message.limits.map((e57) => e57 ? StorageLimit.toJSON(e57) : void 0);
    } else {
      obj.limits = [];
    }
    message.units !== void 0 && (obj.units = Math.round(message.units));
    return obj;
  },
  create(base) {
    return StorageLimitsResponse.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b;
    const message = createBaseStorageLimitsResponse();
    message.limits = ((_a2 = object.limits) == null ? void 0 : _a2.map((e57) => StorageLimit.fromPartial(e57))) || [];
    message.units = (_b = object.units) != null ? _b : 0;
    return message;
  }
};
function createBaseStorageLimit() {
  return { storeType: 0, name: "", limit: 0, used: 0, earliestTimestamp: 0, earliestHash: new Uint8Array() };
}
var StorageLimit = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.storeType !== 0) {
      writer.uint32(8).int32(message.storeType);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.limit !== 0) {
      writer.uint32(24).uint64(message.limit);
    }
    if (message.used !== 0) {
      writer.uint32(32).uint64(message.used);
    }
    if (message.earliestTimestamp !== 0) {
      writer.uint32(40).uint64(message.earliestTimestamp);
    }
    if (message.earliestHash.length !== 0) {
      writer.uint32(50).bytes(message.earliestHash);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseStorageLimit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.storeType = reader.int32();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.name = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.limit = longToNumber7(reader.uint64());
          continue;
        case 4:
          if (tag != 32) {
            break;
          }
          message.used = longToNumber7(reader.uint64());
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.earliestTimestamp = longToNumber7(reader.uint64());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }
          message.earliestHash = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      storeType: isSet9(object.storeType) ? storeTypeFromJSON(object.storeType) : 0,
      name: isSet9(object.name) ? String(object.name) : "",
      limit: isSet9(object.limit) ? Number(object.limit) : 0,
      used: isSet9(object.used) ? Number(object.used) : 0,
      earliestTimestamp: isSet9(object.earliestTimestamp) ? Number(object.earliestTimestamp) : 0,
      earliestHash: isSet9(object.earliestHash) ? bytesFromBase647(object.earliestHash) : new Uint8Array()
    };
  },
  toJSON(message) {
    const obj = {};
    message.storeType !== void 0 && (obj.storeType = storeTypeToJSON(message.storeType));
    message.name !== void 0 && (obj.name = message.name);
    message.limit !== void 0 && (obj.limit = Math.round(message.limit));
    message.used !== void 0 && (obj.used = Math.round(message.used));
    message.earliestTimestamp !== void 0 && (obj.earliestTimestamp = Math.round(message.earliestTimestamp));
    message.earliestHash !== void 0 && (obj.earliestHash = base64FromBytes7(
      message.earliestHash !== void 0 ? message.earliestHash : new Uint8Array()
    ));
    return obj;
  },
  create(base) {
    return StorageLimit.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d, _e5, _f;
    const message = createBaseStorageLimit();
    message.storeType = (_a2 = object.storeType) != null ? _a2 : 0;
    message.name = (_b = object.name) != null ? _b : "";
    message.limit = (_c = object.limit) != null ? _c : 0;
    message.used = (_d = object.used) != null ? _d : 0;
    message.earliestTimestamp = (_e5 = object.earliestTimestamp) != null ? _e5 : 0;
    message.earliestHash = (_f = object.earliestHash) != null ? _f : new Uint8Array();
    return message;
  }
};
function createBaseUsernameProofRequest() {
  return { name: new Uint8Array() };
}
var UsernameProofRequest = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.name.length !== 0) {
      writer.uint32(10).bytes(message.name);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseUsernameProofRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.name = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { name: isSet9(object.name) ? bytesFromBase647(object.name) : new Uint8Array() };
  },
  toJSON(message) {
    const obj = {};
    message.name !== void 0 && (obj.name = base64FromBytes7(message.name !== void 0 ? message.name : new Uint8Array()));
    return obj;
  },
  create(base) {
    return UsernameProofRequest.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2;
    const message = createBaseUsernameProofRequest();
    message.name = (_a2 = object.name) != null ? _a2 : new Uint8Array();
    return message;
  }
};
function createBaseUsernameProofsResponse() {
  return { proofs: [] };
}
var UsernameProofsResponse = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    for (const v37 of message.proofs) {
      UserNameProof.encode(v37, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseUsernameProofsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.proofs.push(UserNameProof.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { proofs: Array.isArray(object == null ? void 0 : object.proofs) ? object.proofs.map((e57) => UserNameProof.fromJSON(e57)) : [] };
  },
  toJSON(message) {
    const obj = {};
    if (message.proofs) {
      obj.proofs = message.proofs.map((e57) => e57 ? UserNameProof.toJSON(e57) : void 0);
    } else {
      obj.proofs = [];
    }
    return obj;
  },
  create(base) {
    return UsernameProofsResponse.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2;
    const message = createBaseUsernameProofsResponse();
    message.proofs = ((_a2 = object.proofs) == null ? void 0 : _a2.map((e57) => UserNameProof.fromPartial(e57))) || [];
    return message;
  }
};
function createBaseVerificationRequest() {
  return { fid: 0, address: new Uint8Array() };
}
var VerificationRequest = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.address.length !== 0) {
      writer.uint32(18).bytes(message.address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseVerificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.address = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet9(object.fid) ? Number(object.fid) : 0,
      address: isSet9(object.address) ? bytesFromBase647(object.address) : new Uint8Array()
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.address !== void 0 && (obj.address = base64FromBytes7(message.address !== void 0 ? message.address : new Uint8Array()));
    return obj;
  },
  create(base) {
    return VerificationRequest.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b;
    const message = createBaseVerificationRequest();
    message.fid = (_a2 = object.fid) != null ? _a2 : 0;
    message.address = (_b = object.address) != null ? _b : new Uint8Array();
    return message;
  }
};
function createBaseSignerRequest() {
  return { fid: 0, signer: new Uint8Array() };
}
var SignerRequest = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.signer.length !== 0) {
      writer.uint32(18).bytes(message.signer);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseSignerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.signer = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet9(object.fid) ? Number(object.fid) : 0,
      signer: isSet9(object.signer) ? bytesFromBase647(object.signer) : new Uint8Array()
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.signer !== void 0 && (obj.signer = base64FromBytes7(message.signer !== void 0 ? message.signer : new Uint8Array()));
    return obj;
  },
  create(base) {
    return SignerRequest.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b;
    const message = createBaseSignerRequest();
    message.fid = (_a2 = object.fid) != null ? _a2 : 0;
    message.signer = (_b = object.signer) != null ? _b : new Uint8Array();
    return message;
  }
};
function createBaseLinkRequest() {
  return { fid: 0, linkType: "", targetFid: void 0 };
}
var LinkRequest = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.linkType !== "") {
      writer.uint32(18).string(message.linkType);
    }
    if (message.targetFid !== void 0) {
      writer.uint32(24).uint64(message.targetFid);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseLinkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.linkType = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.targetFid = longToNumber7(reader.uint64());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet9(object.fid) ? Number(object.fid) : 0,
      linkType: isSet9(object.linkType) ? String(object.linkType) : "",
      targetFid: isSet9(object.targetFid) ? Number(object.targetFid) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.linkType !== void 0 && (obj.linkType = message.linkType);
    message.targetFid !== void 0 && (obj.targetFid = Math.round(message.targetFid));
    return obj;
  },
  create(base) {
    return LinkRequest.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c;
    const message = createBaseLinkRequest();
    message.fid = (_a2 = object.fid) != null ? _a2 : 0;
    message.linkType = (_b = object.linkType) != null ? _b : "";
    message.targetFid = (_c = object.targetFid) != null ? _c : void 0;
    return message;
  }
};
function createBaseLinksByFidRequest() {
  return { fid: 0, linkType: void 0, pageSize: void 0, pageToken: void 0, reverse: void 0 };
}
var LinksByFidRequest = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.fid !== 0) {
      writer.uint32(8).uint64(message.fid);
    }
    if (message.linkType !== void 0) {
      writer.uint32(18).string(message.linkType);
    }
    if (message.pageSize !== void 0) {
      writer.uint32(24).uint32(message.pageSize);
    }
    if (message.pageToken !== void 0) {
      writer.uint32(34).bytes(message.pageToken);
    }
    if (message.reverse !== void 0) {
      writer.uint32(40).bool(message.reverse);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseLinksByFidRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.fid = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.linkType = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.pageSize = reader.uint32();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.pageToken = reader.bytes();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.reverse = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      fid: isSet9(object.fid) ? Number(object.fid) : 0,
      linkType: isSet9(object.linkType) ? String(object.linkType) : void 0,
      pageSize: isSet9(object.pageSize) ? Number(object.pageSize) : void 0,
      pageToken: isSet9(object.pageToken) ? bytesFromBase647(object.pageToken) : void 0,
      reverse: isSet9(object.reverse) ? Boolean(object.reverse) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.fid !== void 0 && (obj.fid = Math.round(message.fid));
    message.linkType !== void 0 && (obj.linkType = message.linkType);
    message.pageSize !== void 0 && (obj.pageSize = Math.round(message.pageSize));
    message.pageToken !== void 0 && (obj.pageToken = message.pageToken !== void 0 ? base64FromBytes7(message.pageToken) : void 0);
    message.reverse !== void 0 && (obj.reverse = message.reverse);
    return obj;
  },
  create(base) {
    return LinksByFidRequest.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d, _e5;
    const message = createBaseLinksByFidRequest();
    message.fid = (_a2 = object.fid) != null ? _a2 : 0;
    message.linkType = (_b = object.linkType) != null ? _b : void 0;
    message.pageSize = (_c = object.pageSize) != null ? _c : void 0;
    message.pageToken = (_d = object.pageToken) != null ? _d : void 0;
    message.reverse = (_e5 = object.reverse) != null ? _e5 : void 0;
    return message;
  }
};
function createBaseLinksByTargetRequest() {
  return { targetFid: void 0, linkType: void 0, pageSize: void 0, pageToken: void 0, reverse: void 0 };
}
var LinksByTargetRequest = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.targetFid !== void 0) {
      writer.uint32(8).uint64(message.targetFid);
    }
    if (message.linkType !== void 0) {
      writer.uint32(18).string(message.linkType);
    }
    if (message.pageSize !== void 0) {
      writer.uint32(24).uint32(message.pageSize);
    }
    if (message.pageToken !== void 0) {
      writer.uint32(34).bytes(message.pageToken);
    }
    if (message.reverse !== void 0) {
      writer.uint32(40).bool(message.reverse);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseLinksByTargetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.targetFid = longToNumber7(reader.uint64());
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.linkType = reader.string();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }
          message.pageSize = reader.uint32();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }
          message.pageToken = reader.bytes();
          continue;
        case 5:
          if (tag != 40) {
            break;
          }
          message.reverse = reader.bool();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      targetFid: isSet9(object.targetFid) ? Number(object.targetFid) : void 0,
      linkType: isSet9(object.linkType) ? String(object.linkType) : void 0,
      pageSize: isSet9(object.pageSize) ? Number(object.pageSize) : void 0,
      pageToken: isSet9(object.pageToken) ? bytesFromBase647(object.pageToken) : void 0,
      reverse: isSet9(object.reverse) ? Boolean(object.reverse) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.targetFid !== void 0 && (obj.targetFid = Math.round(message.targetFid));
    message.linkType !== void 0 && (obj.linkType = message.linkType);
    message.pageSize !== void 0 && (obj.pageSize = Math.round(message.pageSize));
    message.pageToken !== void 0 && (obj.pageToken = message.pageToken !== void 0 ? base64FromBytes7(message.pageToken) : void 0);
    message.reverse !== void 0 && (obj.reverse = message.reverse);
    return obj;
  },
  create(base) {
    return LinksByTargetRequest.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2, _b, _c, _d, _e5;
    const message = createBaseLinksByTargetRequest();
    message.targetFid = (_a2 = object.targetFid) != null ? _a2 : void 0;
    message.linkType = (_b = object.linkType) != null ? _b : void 0;
    message.pageSize = (_c = object.pageSize) != null ? _c : void 0;
    message.pageToken = (_d = object.pageToken) != null ? _d : void 0;
    message.reverse = (_e5 = object.reverse) != null ? _e5 : void 0;
    return message;
  }
};
function createBaseIdRegistryEventByAddressRequest() {
  return { address: new Uint8Array() };
}
var IdRegistryEventByAddressRequest = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.address.length !== 0) {
      writer.uint32(10).bytes(message.address);
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseIdRegistryEventByAddressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }
          message.address = reader.bytes();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return { address: isSet9(object.address) ? bytesFromBase647(object.address) : new Uint8Array() };
  },
  toJSON(message) {
    const obj = {};
    message.address !== void 0 && (obj.address = base64FromBytes7(message.address !== void 0 ? message.address : new Uint8Array()));
    return obj;
  },
  create(base) {
    return IdRegistryEventByAddressRequest.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2;
    const message = createBaseIdRegistryEventByAddressRequest();
    message.address = (_a2 = object.address) != null ? _a2 : new Uint8Array();
    return message;
  }
};
function createBaseValidationResponse() {
  return { valid: false, message: void 0 };
}
var ValidationResponse = {
  encode(message, writer = import_minimal9.default.Writer.create()) {
    if (message.valid === true) {
      writer.uint32(8).bool(message.valid);
    }
    if (message.message !== void 0) {
      Message.encode(message.message, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },
  decode(input, length) {
    const reader = input instanceof import_minimal9.default.Reader ? input : import_minimal9.default.Reader.create(input);
    let end = length === void 0 ? reader.len : reader.pos + length;
    const message = createBaseValidationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }
          message.valid = reader.bool();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }
          message.message = Message.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },
  fromJSON(object) {
    return {
      valid: isSet9(object.valid) ? Boolean(object.valid) : false,
      message: isSet9(object.message) ? Message.fromJSON(object.message) : void 0
    };
  },
  toJSON(message) {
    const obj = {};
    message.valid !== void 0 && (obj.valid = message.valid);
    message.message !== void 0 && (obj.message = message.message ? Message.toJSON(message.message) : void 0);
    return obj;
  },
  create(base) {
    return ValidationResponse.fromPartial(base != null ? base : {});
  },
  fromPartial(object) {
    var _a2;
    const message = createBaseValidationResponse();
    message.valid = (_a2 = object.valid) != null ? _a2 : false;
    message.message = object.message !== void 0 && object.message !== null ? Message.fromPartial(object.message) : void 0;
    return message;
  }
};
var tsProtoGlobalThis9 = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();
function bytesFromBase647(b64) {
  if (tsProtoGlobalThis9.Buffer) {
    return Uint8Array.from(tsProtoGlobalThis9.Buffer.from(b64, "base64"));
  } else {
    const bin = tsProtoGlobalThis9.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i57 = 0; i57 < bin.length; ++i57) {
      arr[i57] = bin.charCodeAt(i57);
    }
    return arr;
  }
}
function base64FromBytes7(arr) {
  if (tsProtoGlobalThis9.Buffer) {
    return tsProtoGlobalThis9.Buffer.from(arr).toString("base64");
  } else {
    const bin = [];
    arr.forEach((byte) => {
      bin.push(String.fromCharCode(byte));
    });
    return tsProtoGlobalThis9.btoa(bin.join(""));
  }
}
function longToNumber7(long) {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis9.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}
if (import_minimal9.default.util.Long !== import_long7.default) {
  import_minimal9.default.util.Long = import_long7.default;
  import_minimal9.default.configure();
}
function isSet9(value) {
  return value !== null && value !== void 0;
}

// src/protobufs/typeguards.ts
init_esm_shims();
var isCastAddData = (data) => {
  return data.type === 1 /* CAST_ADD */ && typeof data.castAddBody !== "undefined";
};
var isCastAddMessage = (message) => {
  return message.signatureScheme === 1 /* ED25519 */ && typeof message.data !== "undefined" && isCastAddData(message.data);
};
var isCastRemoveData = (data) => {
  return data.type === 2 /* CAST_REMOVE */ && typeof data.castRemoveBody !== "undefined";
};
var isCastRemoveMessage = (message) => {
  return message.signatureScheme === 1 /* ED25519 */ && typeof message.data !== "undefined" && isCastRemoveData(message.data);
};
var isLinkAddData = (data) => {
  return data.type === 5 /* LINK_ADD */ && typeof data.linkBody !== "undefined";
};
var isLinkAddMessage = (message) => {
  return message.signatureScheme === 1 /* ED25519 */ && typeof message.data !== "undefined" && isLinkAddData(message.data);
};
var isLinkRemoveData = (data) => {
  return data.type === 6 /* LINK_REMOVE */ && typeof data.linkBody !== "undefined";
};
var isLinkRemoveMessage = (message) => {
  return message.signatureScheme === 1 /* ED25519 */ && typeof message.data !== "undefined" && isLinkRemoveData(message.data);
};
var isReactionAddData = (data) => {
  return data.type === 3 /* REACTION_ADD */ && typeof data.reactionBody !== "undefined";
};
var isReactionAddMessage = (message) => {
  return message.signatureScheme === 1 /* ED25519 */ && typeof message.data !== "undefined" && isReactionAddData(message.data);
};
var isReactionRemoveData = (data) => {
  return data.type === 4 /* REACTION_REMOVE */ && typeof data.reactionBody !== "undefined";
};
var isReactionRemoveMessage = (message) => {
  return message.signatureScheme === 1 /* ED25519 */ && typeof message.data !== "undefined" && isReactionRemoveData(message.data);
};
var isVerificationAddEthAddressData = (data) => {
  return data.type === 7 /* VERIFICATION_ADD_ETH_ADDRESS */ && typeof data.verificationAddAddressBody !== "undefined";
};
var isVerificationAddAddressMessage = (message) => {
  return message.signatureScheme === 1 /* ED25519 */ && typeof message.data !== "undefined" && isVerificationAddEthAddressData(message.data);
};
var isVerificationRemoveData = (data) => {
  return data.type === 8 /* VERIFICATION_REMOVE */ && typeof data.verificationRemoveBody !== "undefined";
};
var isVerificationRemoveMessage = (message) => {
  return message.signatureScheme === 1 /* ED25519 */ && typeof message.data !== "undefined" && isVerificationRemoveData(message.data);
};
var isUserDataAddData = (data) => {
  return data.type === 11 /* USER_DATA_ADD */ && typeof data.userDataBody !== "undefined";
};
var isUserDataAddMessage = (message) => {
  return message.signatureScheme === 1 /* ED25519 */ && typeof message.data !== "undefined" && isUserDataAddData(message.data);
};
var isUsernameProofData = (data) => {
  return data.type === 12 /* USERNAME_PROOF */ && typeof data.usernameProofBody !== "undefined";
};
var isUsernameProofMessage = (message) => {
  return message.signatureScheme === 1 /* ED25519 */ && typeof message.data !== "undefined" && isUsernameProofData(message.data);
};
var isFrameActionData = (data) => {
  return data.type === 13 /* FRAME_ACTION */ && typeof data.frameActionBody !== "undefined";
};
var isFrameActionMessage = (message) => {
  return message.signatureScheme === 1 /* ED25519 */ && typeof message.data !== "undefined" && isFrameActionData(message.data);
};
var isSignerOnChainEvent = (event) => {
  return event.type === 1 /* EVENT_TYPE_SIGNER */ && typeof event.signerEventBody !== "undefined";
};
var isSignerMigratedOnChainEvent = (event) => {
  return event.type === 2 /* EVENT_TYPE_SIGNER_MIGRATED */ && typeof event.signerMigratedEventBody !== "undefined";
};
var isIdRegisterOnChainEvent = (event) => {
  return event.type === 3 /* EVENT_TYPE_ID_REGISTER */ && typeof event.idRegisterEventBody !== "undefined";
};
var isStorageRentOnChainEvent = (event) => {
  return event.type === 4 /* EVENT_TYPE_STORAGE_RENT */ && typeof event.storageRentEventBody !== "undefined";
};
var isMergeMessageHubEvent = (event) => {
  return event.type === 1 /* MERGE_MESSAGE */ && typeof event.mergeMessageBody !== "undefined" && typeof event.mergeMessageBody.message !== "undefined";
};
var isRevokeMessageHubEvent = (event) => {
  return event.type === 3 /* REVOKE_MESSAGE */ && typeof event.revokeMessageBody !== "undefined" && typeof event.revokeMessageBody.message !== "undefined";
};
var isPruneMessageHubEvent = (event) => {
  return event.type === 2 /* PRUNE_MESSAGE */ && typeof event.pruneMessageBody !== "undefined" && typeof event.pruneMessageBody.message !== "undefined";
};
var isMergeOnChainHubEvent = (event) => {
  return event.type === 9 /* MERGE_ON_CHAIN_EVENT */ && typeof event.mergeOnChainEventBody !== "undefined" && typeof event.mergeOnChainEventBody.onChainEvent !== "undefined";
};
var isMergeUsernameProofHubEvent = (event) => {
  return event.type === 6 /* MERGE_USERNAME_PROOF */ && typeof event.mergeUsernameProofBody !== "undefined" && (typeof event.mergeUsernameProofBody.usernameProof !== "undefined" || typeof event.mergeUsernameProofBody.deletedUsernameProof !== "undefined");
};

// src/protobufs/types.ts
init_esm_shims();

// src/builders.ts
init_esm_shims();
import { blake3 as blake32 } from "@noble/hashes/blake3";
import { err as err5, ok as ok5 } from "neverthrow";

// src/time.ts
init_esm_shims();
import { err, ok } from "neverthrow";

// src/errors.ts
init_esm_shims();
var isHubError = (e57) => {
  return typeof e57.errCode !== "undefined";
};
var HubError = class extends Error {
  /**
   * @param errCode - the HubError code for this message
   * @param context - a message, another Error, or a HubErrorOpts
   */
  constructor(errCode, context) {
    var _a2;
    let parsedContext;
    if (typeof context === "string") {
      parsedContext = { message: context };
    } else if (context instanceof Error) {
      parsedContext = { cause: context, message: context.message };
    } else {
      parsedContext = context;
    }
    if (!parsedContext.message) {
      parsedContext.message = ((_a2 = parsedContext.cause) == null ? void 0 : _a2.message) || "";
    }
    super(parsedContext.message, { cause: parsedContext.cause });
    /* Hub classification of error types */
    __publicField(this, "errCode");
    /* Indicates if if error message can be presented to the user */
    __publicField(this, "presentable", false);
    this.name = "HubError";
    this.errCode = errCode;
  }
};

// src/time.ts
var FARCASTER_EPOCH = 16094592e5;
var getFarcasterTime = () => {
  return toFarcasterTime(Date.now());
};
var toFarcasterTime = (time) => {
  if (time < FARCASTER_EPOCH) {
    return err(new HubError("bad_request.invalid_param", "time must be after Farcaster epoch (01/01/2022)"));
  }
  const secondsSinceEpoch = Math.round((time - FARCASTER_EPOCH) / 1e3);
  if (secondsSinceEpoch > 2 ** 32 - 1) {
    return err(new HubError("bad_request.invalid_param", "time too far in future"));
  }
  return ok(secondsSinceEpoch);
};
var fromFarcasterTime = (time) => {
  return ok(time * 1e3 + FARCASTER_EPOCH);
};
var extractEventTimestamp = (eventId) => {
  const binaryEventId = eventId.toString(2);
  const SEQUENCE_BITS = 12;
  const binaryTimestamp = binaryEventId.slice(0, binaryEventId.length - SEQUENCE_BITS);
  return parseInt(binaryTimestamp, 2) + FARCASTER_EPOCH;
};

// src/validations.ts
var validations_exports = {};
__export(validations_exports, {
  ALLOWED_CLOCK_SKEW_SECONDS: () => ALLOWED_CLOCK_SKEW_SECONDS,
  EMBEDS_V1_CUTOFF: () => EMBEDS_V1_CUTOFF,
  FNAME_REGEX: () => FNAME_REGEX,
  HEX_REGEX: () => HEX_REGEX,
  USERNAME_MAX_LENGTH: () => USERNAME_MAX_LENGTH,
  createMessageHash: () => createMessageHash,
  signMessageHash: () => signMessageHash2,
  validateCastAddBody: () => validateCastAddBody,
  validateCastId: () => validateCastId,
  validateCastRemoveBody: () => validateCastRemoveBody,
  validateEd25519PublicKey: () => validateEd25519PublicKey,
  validateEmbed: () => validateEmbed,
  validateEnsName: () => validateEnsName,
  validateEthAddress: () => validateEthAddress,
  validateEthBlockHash: () => validateEthBlockHash,
  validateFid: () => validateFid,
  validateFname: () => validateFname,
  validateFrameActionBody: () => validateFrameActionBody,
  validateLinkBody: () => validateLinkBody,
  validateLinkType: () => validateLinkType,
  validateMessage: () => validateMessage,
  validateMessageData: () => validateMessageData,
  validateMessageHash: () => validateMessageHash,
  validateMessageType: () => validateMessageType,
  validateNetwork: () => validateNetwork,
  validateParent: () => validateParent,
  validateReactionBody: () => validateReactionBody,
  validateReactionType: () => validateReactionType,
  validateTarget: () => validateTarget,
  validateUrl: () => validateUrl,
  validateUserDataAddBody: () => validateUserDataAddBody,
  validateUserDataType: () => validateUserDataType,
  validateUsernameProofBody: () => validateUsernameProofBody,
  validateVerificationAddEthAddressBody: () => validateVerificationAddEthAddressBody,
  validateVerificationAddEthAddressSignature: () => validateVerificationAddEthAddressSignature,
  validateVerificationRemoveBody: () => validateVerificationRemoveBody,
  verifySignedMessageHash: () => verifySignedMessageHash
});
init_esm_shims();
import { blake3 } from "@noble/hashes/blake3";
import { err as err4, ok as ok4, Result as Result3 } from "neverthrow";

// src/bytes.ts
init_esm_shims();
import { err as err2, ok as ok2, Result } from "neverthrow";
import { bytesToHex, hexToBytes } from "viem";
var bytesCompare = (a56, b50) => {
  const len = Math.min(a56.length, b50.length);
  for (let i57 = 0; i57 < len; i57++) {
    if (a56[i57] < b50[i57]) {
      return -1;
    } else if (a56[i57] > b50[i57]) {
      return 1;
    }
  }
  if (a56.length < b50.length) {
    return -1;
  } else if (a56.length > b50.length) {
    return 1;
  }
  return 0;
};
var bytesIncrement = (inputBytes) => {
  const bytes = new Uint8Array(inputBytes);
  let i57 = bytes.length - 1;
  while (i57 >= 0) {
    if (bytes[i57] < 255) {
      bytes[i57] = bytes[i57] + 1;
      return ok2(bytes);
    } else {
      bytes[i57] = 0;
    }
    i57 = i57 - 1;
  }
  return ok2(new Uint8Array([1, ...bytes]));
};
var bytesDecrement = (inputBytes) => {
  const bytes = new Uint8Array(inputBytes);
  let i57 = bytes.length - 1;
  while (i57 >= 0) {
    if (bytes[i57] > 0) {
      bytes[i57] = bytes[i57] - 1;
      return ok2(bytes);
    } else {
      if (i57 === 0) {
        return err2(new HubError("bad_request.invalid_param", "Cannot decrement zero"));
      }
      bytes[i57] = 255;
    }
    i57 = i57 - 1;
  }
  return ok2(bytes);
};
var bytesToHexString = (bytes) => {
  return Result.fromThrowable(
    (bytes2) => bytesToHex(bytes2),
    (e57) => new HubError("unknown", e57)
  )(bytes);
};
var hexStringToBytes = (hex) => {
  return Result.fromThrowable(
    (hex2) => hexToBytes(hex2.startsWith("0x") ? hex2 : `0x${hex2}`),
    (e57) => new HubError("unknown", e57)
  )(hex);
};
var bytesToUtf8String = (bytes) => {
  const decoder = new TextDecoder(void 0, { fatal: true });
  return ok2(decoder.decode(bytes));
};
var encoder = new TextEncoder();
var utf8StringToBytes = (utf8) => {
  return ok2(encoder.encode(utf8));
};
var bigIntToBytes = (value) => {
  let hexValue = value.toString(16);
  hexValue = hexValue.length % 2 === 0 ? hexValue : `0${hexValue}`;
  return hexStringToBytes(hexValue);
};
var bytesToBigInt = (bytes) => {
  return bytesToHexString(bytes).map((hexString) => BigInt(hexString));
};
var bytesStartsWith = (haystack, needle) => {
  if (needle.length > haystack.length) {
    return false;
  }
  for (let i57 = 0; i57 < needle.length; i57++) {
    if (haystack[i57] !== needle[i57]) {
      return false;
    }
  }
  return true;
};

// src/crypto/index.ts
init_esm_shims();

// src/crypto/ed25519.ts
var ed25519_exports = {};
__export(ed25519_exports, {
  getPublicKey: () => getPublicKey,
  signMessageHash: () => signMessageHash,
  verifyMessageHashSignature: () => verifyMessageHashSignature
});
init_esm_shims();
import { ed25519 } from "@noble/curves/ed25519";
import { Result as Result2 } from "neverthrow";
var safeGetPublicKey = Result2.fromThrowable(ed25519.getPublicKey, (err10) => new HubError("bad_request", err10));
var safeSign = Result2.fromThrowable(ed25519.sign, (err10) => new HubError("bad_request", err10));
var safeVerify = Result2.fromThrowable(ed25519.verify, (err10) => new HubError("bad_request", err10));
var getPublicKey = async (privateKey) => {
  return safeGetPublicKey(privateKey);
};
var signMessageHash = async (hash, privateKey) => {
  return safeSign(hash, privateKey);
};
var verifyMessageHashSignature = async (signature, hash, publicKey) => {
  return safeVerify(signature, hash, publicKey);
};

// src/crypto/eip712.ts
var eip712_exports = {};
__export(eip712_exports, {
  EIP_712_FARCASTER_DOMAIN: () => EIP_712_FARCASTER_DOMAIN,
  EIP_712_FARCASTER_MESSAGE_DATA: () => EIP_712_FARCASTER_MESSAGE_DATA,
  EIP_712_FARCASTER_VERIFICATION_CLAIM: () => EIP_712_FARCASTER_VERIFICATION_CLAIM,
  EIP_712_FARCASTER_VERIFICATION_CLAIM_CHAIN_IDS: () => EIP_712_FARCASTER_VERIFICATION_CLAIM_CHAIN_IDS,
  EIP_712_USERNAME_DOMAIN: () => EIP_712_USERNAME_DOMAIN,
  EIP_712_USERNAME_PROOF: () => EIP_712_USERNAME_PROOF,
  MESSAGE_DATA_EIP_712_TYPES: () => MESSAGE_DATA_EIP_712_TYPES,
  USERNAME_PROOF_EIP_712_TYPES: () => USERNAME_PROOF_EIP_712_TYPES,
  verifyMessageHashSignature: () => verifyMessageHashSignature2,
  verifyUserNameProofClaim: () => verifyUserNameProofClaim,
  verifyVerificationClaimContractSignature: () => verifyVerificationClaimContractSignature,
  verifyVerificationClaimEOASignature: () => verifyVerificationClaimEOASignature,
  verifyVerificationEthAddressClaimSignature: () => verifyVerificationEthAddressClaimSignature
});
init_esm_shims();
import { bytesToHex as bytesToHex2, verifyTypedData } from "viem";
import { ResultAsync } from "neverthrow";

// src/eth/clients.ts
var clients_exports = {};
__export(clients_exports, {
  defaultL1PublicClient: () => defaultL1PublicClient,
  defaultL1PublicTestClient: () => defaultL1PublicTestClient,
  defaultL2PublicClient: () => defaultL2PublicClient,
  defaultL2PublicTestClient: () => defaultL2PublicTestClient,
  defaultPublicClients: () => defaultPublicClients
});
init_esm_shims();
import { createPublicClient, http } from "viem";
import { mainnet, goerli, optimism, optimismGoerli } from "viem/chains";
var defaultL1PublicClient = createPublicClient({
  chain: mainnet,
  transport: http()
});
var defaultL2PublicClient = createPublicClient({
  chain: optimism,
  transport: http()
});
var defaultL1PublicTestClient = createPublicClient({
  chain: goerli,
  transport: http()
});
var defaultL2PublicTestClient = createPublicClient({
  chain: optimismGoerli,
  transport: http()
});
var defaultPublicClients = {
  [mainnet.id]: defaultL1PublicClient,
  [optimism.id]: defaultL2PublicClient,
  [goerli.id]: defaultL1PublicTestClient,
  [optimismGoerli.id]: defaultL2PublicTestClient
};

// src/eth/chains.ts
var chains_exports = {};
__export(chains_exports, {
  CHAIN_IDS: () => CHAIN_IDS
});
init_esm_shims();
import { mainnet as mainnet2, goerli as goerli2, optimism as optimism2, optimismGoerli as optimismGoerli2 } from "viem/chains";
var CHAIN_IDS = [mainnet2.id, goerli2.id, optimism2.id, optimismGoerli2.id];

// src/crypto/eip712.ts
var EIP_712_FARCASTER_DOMAIN = {
  name: "Farcaster Verify Ethereum Address",
  version: "2.0.0",
  // fixed salt to minimize collisions
  salt: "0xf2d857f4a3edcb9b78b4d503bfe733db1e3f6cdc2b7971ee739626c97e86a558"
};
var EIP_712_FARCASTER_VERIFICATION_CLAIM = [
  {
    name: "fid",
    type: "uint256"
  },
  {
    name: "address",
    type: "address"
  },
  {
    name: "blockHash",
    type: "bytes32"
  },
  {
    name: "network",
    type: "uint8"
  }
];
var EIP_712_FARCASTER_VERIFICATION_CLAIM_CHAIN_IDS = [...CHAIN_IDS, 0];
var EIP_712_FARCASTER_MESSAGE_DATA = [
  {
    name: "hash",
    type: "bytes"
  }
];
var EIP_712_USERNAME_DOMAIN = {
  name: "Farcaster name verification",
  version: "1",
  chainId: 1,
  verifyingContract: "0xe3be01d99baa8db9905b33a3ca391238234b79d1"
  // name registry contract, will be the farcaster ENS CCIP contract later
};
var EIP_712_USERNAME_PROOF = [
  { name: "name", type: "string" },
  { name: "timestamp", type: "uint256" },
  { name: "owner", type: "address" }
];
var USERNAME_PROOF_EIP_712_TYPES = {
  domain: EIP_712_USERNAME_DOMAIN,
  types: { UserNameProof: EIP_712_USERNAME_PROOF }
};
var MESSAGE_DATA_EIP_712_TYPES = {
  domain: EIP_712_FARCASTER_DOMAIN,
  types: { MessageData: EIP_712_FARCASTER_MESSAGE_DATA }
};
var verifyVerificationClaimEOASignature = async (claim, signature, address, chainId) => {
  if (chainId !== 0) {
    return ResultAsync.fromPromise(
      Promise.reject(),
      () => new HubError("bad_request.invalid_param", "Invalid chain ID")
    );
  }
  const valid = await ResultAsync.fromPromise(
    verifyTypedData({
      address: bytesToHex2(address),
      domain: EIP_712_FARCASTER_DOMAIN,
      types: { VerificationClaim: EIP_712_FARCASTER_VERIFICATION_CLAIM },
      primaryType: "VerificationClaim",
      message: claim,
      signature
    }),
    (e57) => new HubError("unknown", e57)
  );
  return valid;
};
var verifyVerificationClaimContractSignature = async (claim, signature, address, chainId, publicClients = defaultPublicClients) => {
  const client = publicClients[chainId];
  if (!client) {
    return ResultAsync.fromPromise(
      Promise.reject(),
      () => new HubError("bad_request.invalid_param", `RPC client not provided for chainId ${chainId}`)
    );
  }
  const valid = await ResultAsync.fromPromise(
    client.verifyTypedData({
      address: bytesToHex2(address),
      domain: { ...EIP_712_FARCASTER_DOMAIN, chainId },
      types: { VerificationClaim: EIP_712_FARCASTER_VERIFICATION_CLAIM },
      primaryType: "VerificationClaim",
      message: claim,
      signature
    }),
    (e57) => new HubError("unavailable.network_failure", e57)
  );
  return valid;
};
var verifyVerificationEthAddressClaimSignature = async (claim, signature, address, verificationType = 0, chainId = 0, publicClients = defaultPublicClients) => {
  if (!EIP_712_FARCASTER_VERIFICATION_CLAIM_CHAIN_IDS.includes(chainId)) {
    return ResultAsync.fromPromise(
      Promise.reject(),
      () => new HubError("bad_request.invalid_param", "Invalid chain ID")
    );
  }
  if (verificationType === 0) {
    return verifyVerificationClaimEOASignature(claim, signature, address, chainId);
  } else if (verificationType === 1) {
    return verifyVerificationClaimContractSignature(claim, signature, address, chainId, publicClients);
  } else {
    return ResultAsync.fromPromise(
      Promise.reject(),
      () => new HubError("bad_request.invalid_param", "Invalid verification type")
    );
  }
};
var verifyUserNameProofClaim = async (nameProof, signature, address) => {
  const valid = await ResultAsync.fromPromise(
    verifyTypedData({
      address: bytesToHex2(address),
      domain: EIP_712_USERNAME_DOMAIN,
      types: { UserNameProof: EIP_712_USERNAME_PROOF },
      primaryType: "UserNameProof",
      message: nameProof,
      signature
    }),
    (e57) => new HubError("unknown", e57)
  );
  return valid;
};
var verifyMessageHashSignature2 = async (hash, signature, address) => {
  const valid = await ResultAsync.fromPromise(
    verifyTypedData({
      address: bytesToHex2(address),
      domain: EIP_712_FARCASTER_DOMAIN,
      types: { MessageData: EIP_712_FARCASTER_MESSAGE_DATA },
      primaryType: "MessageData",
      message: { hash: bytesToHex2(hash) },
      signature
    }),
    (e57) => new HubError("unknown", e57)
  );
  return valid;
};

// src/verifications.ts
init_esm_shims();
import { err as err3, ok as ok3 } from "neverthrow";
var makeVerificationAddressClaim = (fid, ethAddress, network, blockHash) => {
  const ethAddressHex = validateEthAddress(ethAddress).andThen(
    (validatedEthAddress) => bytesToHexString(validatedEthAddress)
  );
  if (ethAddressHex.isErr()) {
    return err3(ethAddressHex.error);
  }
  const blockHashHex = validateEthBlockHash(blockHash).andThen(
    (validatedBlockHash) => bytesToHexString(validatedBlockHash)
  );
  if (blockHashHex.isErr()) {
    return err3(blockHashHex.error);
  }
  return ok3({
    fid: BigInt(fid),
    address: ethAddressHex.value,
    network,
    blockHash: blockHashHex.value
  });
};

// src/validations.ts
import { normalize } from "viem/ens";
var ALLOWED_CLOCK_SKEW_SECONDS = 10 * 60;
var FNAME_REGEX = /^[a-z0-9][a-z0-9-]{0,15}$/;
var HEX_REGEX = /^(0x)?[0-9A-Fa-f]+$/;
var USERNAME_MAX_LENGTH = 20;
var EMBEDS_V1_CUTOFF = 73612800;
var pureJSValidationMethods = {
  ed25519_verify: async (s55, m56, p55) => (await ed25519_exports.verifyMessageHashSignature(s55, m56, p55)).unwrapOr(false),
  ed25519_signMessageHash: async (h53, s55) => (await ed25519_exports.signMessageHash(h53, s55)).unwrapOr(new Uint8Array([])),
  blake3_20: (message) => blake3(message, { dkLen: 20 })
};
var createMessageHash = async (message, hashScheme, validationMethods = pureJSValidationMethods) => {
  if (!message || message.length === 0) {
    return err4(new HubError("bad_request.validation_failure", "hash is missing"));
  }
  if (hashScheme !== 1 /* BLAKE3 */) {
    return err4(new HubError("bad_request.validation_failure", "unsupported hash scheme"));
  }
  return ok4(validationMethods.blake3_20(message));
};
var signMessageHash2 = async (hash, signingKey, validationMethods = pureJSValidationMethods) => {
  if (!hash || hash.length === 0) {
    return err4(new HubError("bad_request.validation_failure", "hash is missing"));
  }
  if (!signingKey || signingKey.length !== 64) {
    return err4(new HubError("bad_request.validation_failure", "signingKey is invalid"));
  }
  return ok4(await validationMethods.ed25519_signMessageHash(hash, signingKey));
};
var verifySignedMessageHash = async (hash, signature, signer, validationMethods = pureJSValidationMethods) => {
  if (!hash || hash.length === 0) {
    return err4(new HubError("bad_request.validation_failure", "hash is missing"));
  }
  if (!signature || signature.length !== 64) {
    return err4(new HubError("bad_request.validation_failure", "signature is invalid"));
  }
  if (!signer || signer.length !== 32) {
    return err4(new HubError("bad_request.validation_failure", "signer is invalid"));
  }
  return ok4(await validationMethods.ed25519_verify(signature, hash, signer));
};
var validateMessageHash = (hash) => {
  if (!hash || hash.length === 0) {
    return err4(new HubError("bad_request.validation_failure", "hash is missing"));
  }
  if (hash.length !== 20) {
    return err4(new HubError("bad_request.validation_failure", "hash must be 20 bytes"));
  }
  return ok4(hash);
};
var validateCastId = (castId) => {
  if (!castId) {
    return err4(new HubError("bad_request.validation_failure", "castId is missing"));
  }
  return Result3.combineWithAllErrors([validateFid(castId.fid), validateMessageHash(castId.hash)]).map(() => castId).mapErr(
    (errs) => new HubError("bad_request.validation_failure", errs.map((e57) => e57.message).join(", "))
  );
};
var validateFid = (fid) => {
  if (typeof fid !== "number" || fid === 0) {
    return err4(new HubError("bad_request.validation_failure", "fid is missing"));
  }
  if (fid < 0) {
    return err4(new HubError("bad_request.validation_failure", "fid must be positive"));
  }
  if (!Number.isInteger(fid)) {
    return err4(new HubError("bad_request.validation_failure", "fid must be an integer"));
  }
  return ok4(fid);
};
var validateEthAddress = (address) => {
  if (!address || address.length === 0) {
    return err4(new HubError("bad_request.validation_failure", "Ethereum address is missing"));
  }
  if (address.length !== 20) {
    return err4(new HubError("bad_request.validation_failure", "Ethereum address must be 20 bytes"));
  }
  return ok4(address);
};
var validateEthBlockHash = (blockHash) => {
  if (!blockHash || blockHash.length === 0) {
    return err4(new HubError("bad_request.validation_failure", "blockHash is missing"));
  }
  if (blockHash.length !== 32) {
    return err4(new HubError("bad_request.validation_failure", "blockHash must be 32 bytes"));
  }
  return ok4(blockHash);
};
var validateEd25519PublicKey = (publicKey) => {
  if (!publicKey || publicKey.length === 0) {
    return err4(new HubError("bad_request.validation_failure", "publicKey is missing"));
  }
  if (publicKey.length !== 32) {
    return err4(new HubError("bad_request.validation_failure", "publicKey must be 32 bytes"));
  }
  return ok4(publicKey);
};
var validateMessage = async (message, validationMethods = pureJSValidationMethods, publicClients = defaultPublicClients) => {
  const data = message.data;
  if (!data) {
    return err4(new HubError("bad_request.validation_failure", "data is missing"));
  }
  const validData = await validateMessageData(data, publicClients);
  if (validData.isErr()) {
    return err4(validData.error);
  }
  const hash = message.hash;
  if (!hash) {
    return err4(new HubError("bad_request.validation_failure", "hash is missing"));
  }
  let computedHash;
  if (message.dataBytes && message.dataBytes.length > 0) {
    if (message.dataBytes.length > 1024) {
      return err4(new HubError("bad_request.validation_failure", "dataBytes > 1024 bytes"));
    }
    computedHash = validationMethods.blake3_20(message.dataBytes);
  } else {
    computedHash = validationMethods.blake3_20(MessageData.encode(data).finish());
  }
  if (message.hashScheme === 1 /* BLAKE3 */) {
    if (bytesCompare(hash, computedHash) !== 0) {
      return err4(new HubError("bad_request.validation_failure", "invalid hash"));
    }
  } else {
    return err4(new HubError("bad_request.validation_failure", "invalid hashScheme"));
  }
  const signature = message.signature;
  if (!signature) {
    return err4(new HubError("bad_request.validation_failure", "signature is missing"));
  }
  const signer = message.signer;
  if (!signer) {
    return err4(new HubError("bad_request.validation_failure", "signer is missing"));
  }
  if (message.signatureScheme === 1 /* ED25519 */) {
    const signatureIsValid = await validationMethods.ed25519_verify(signature, hash, signer);
    if (!signatureIsValid) {
      return err4(new HubError("bad_request.validation_failure", "invalid signature"));
    }
  } else {
    return err4(new HubError("bad_request.validation_failure", "invalid signatureScheme"));
  }
  return ok4(message);
};
var validateMessageData = async (data, publicClients = defaultPublicClients) => {
  const validFid = validateFid(data.fid);
  if (validFid.isErr()) {
    return err4(validFid.error);
  }
  const farcasterTime = getFarcasterTime();
  if (farcasterTime.isErr()) {
    return err4(farcasterTime.error);
  }
  if (data.timestamp - farcasterTime.value > ALLOWED_CLOCK_SKEW_SECONDS) {
    return err4(new HubError("bad_request.validation_failure", "timestamp more than 10 mins in the future"));
  }
  const validNetwork = validateNetwork(data.network);
  if (validNetwork.isErr()) {
    return err4(validNetwork.error);
  }
  const validType = validateMessageType(data.type);
  if (validType.isErr()) {
    return err4(validType.error);
  }
  let bodyResult;
  if (validType.value === 1 /* CAST_ADD */ && !!data.castAddBody) {
    const allowEmbedsDeprecated = data.timestamp < EMBEDS_V1_CUTOFF;
    bodyResult = validateCastAddBody(data.castAddBody, allowEmbedsDeprecated);
  } else if (validType.value === 2 /* CAST_REMOVE */ && !!data.castRemoveBody) {
    bodyResult = validateCastRemoveBody(data.castRemoveBody);
  } else if ((validType.value === 3 /* REACTION_ADD */ || validType.value === 4 /* REACTION_REMOVE */) && !!data.reactionBody) {
    bodyResult = validateReactionBody(data.reactionBody);
  } else if ((validType.value === 5 /* LINK_ADD */ || validType.value === 6 /* LINK_REMOVE */) && !!data.linkBody) {
    bodyResult = validateLinkBody(data.linkBody);
  } else if (validType.value === 11 /* USER_DATA_ADD */ && !!data.userDataBody) {
    bodyResult = validateUserDataAddBody(data.userDataBody);
  } else if (validType.value === 7 /* VERIFICATION_ADD_ETH_ADDRESS */ && !!data.verificationAddAddressBody) {
    bodyResult = await validateVerificationAddEthAddressBody(
      data.verificationAddAddressBody,
      validFid.value,
      validNetwork.value,
      publicClients
    );
  } else if (validType.value === 8 /* VERIFICATION_REMOVE */ && !!data.verificationRemoveBody) {
    bodyResult = validateVerificationRemoveBody(data.verificationRemoveBody);
  } else if (validType.value === 12 /* USERNAME_PROOF */ && !!data.usernameProofBody) {
    bodyResult = validateUsernameProofBody(data.usernameProofBody, data);
  } else if (validType.value === 13 /* FRAME_ACTION */ && !!data.frameActionBody) {
    bodyResult = validateFrameActionBody(data.frameActionBody);
  } else {
    return err4(new HubError("bad_request.invalid_param", "bodyType is invalid"));
  }
  if (bodyResult.isErr()) {
    return err4(bodyResult.error);
  }
  return ok4(data);
};
var validateVerificationAddEthAddressSignature = async (body, fid, network, publicClients = defaultPublicClients) => {
  if (body.claimSignature.length > 256) {
    return err4(new HubError("bad_request.validation_failure", "claimSignature > 256 bytes"));
  }
  const reconstructedClaim = makeVerificationAddressClaim(fid, body.address, network, body.blockHash);
  if (reconstructedClaim.isErr()) {
    return err4(reconstructedClaim.error);
  }
  const verificationResult = await eip712_exports.verifyVerificationEthAddressClaimSignature(
    reconstructedClaim.value,
    body.claimSignature,
    body.address,
    body.verificationType,
    body.chainId,
    publicClients
  );
  if (verificationResult.isErr()) {
    return err4(verificationResult.error);
  }
  if (!verificationResult.value) {
    return err4(new HubError("bad_request.validation_failure", "invalid claimSignature"));
  }
  return ok4(body.claimSignature);
};
var validateUrl = (url) => {
  if (typeof url !== "string") {
    return err4(new HubError("bad_request.validation_failure", "url must be a string"));
  }
  const urlBytesResult = utf8StringToBytes(url);
  if (urlBytesResult.isErr()) {
    return err4(new HubError("bad_request.invalid_param", "url must be encodable as utf8"));
  }
  const urlBytes = urlBytesResult.value;
  if (urlBytes.length < 1) {
    return err4(new HubError("bad_request.invalid_param", "url < 1 byte"));
  }
  if (urlBytes.length > 256) {
    return err4(new HubError("bad_request.invalid_param", "url > 256 bytes"));
  }
  return ok4(url);
};
var validateParent = (parent) => {
  if (typeof parent === "string") {
    return validateUrl(parent);
  } else {
    return validateCastId(parent);
  }
};
var validateEmbed = (embed) => {
  if (embed.url !== void 0) {
    return validateUrl(embed.url).map(() => embed);
  } else if (embed.castId !== void 0) {
    return validateCastId(embed.castId).map(() => embed);
  } else {
    return err4(new HubError("bad_request.validation_failure", "embed must have either url or castId"));
  }
};
var validateCastAddBody = (body, allowEmbedsDeprecated = false) => {
  var _a2;
  const text = body.text;
  if (text === void 0 || text === null) {
    return err4(new HubError("bad_request.validation_failure", "text is missing"));
  }
  const textUtf8BytesResult = utf8StringToBytes(text);
  if (textUtf8BytesResult.isErr()) {
    return err4(new HubError("bad_request.invalid_param", "text must be encodable as utf8"));
  }
  const textBytes = textUtf8BytesResult.value;
  if (textBytes.length > 320) {
    return err4(new HubError("bad_request.validation_failure", "text > 320 bytes"));
  }
  if (body.embeds.length > 2) {
    return err4(new HubError("bad_request.validation_failure", "embeds > 2"));
  }
  if (allowEmbedsDeprecated && body.embedsDeprecated.length > 2) {
    return err4(new HubError("bad_request.validation_failure", "string embeds > 2"));
  }
  if (!allowEmbedsDeprecated && body.embedsDeprecated.length > 0) {
    return err4(new HubError("bad_request.validation_failure", "string embeds have been deprecated"));
  }
  if (body.mentions.length > 10) {
    return err4(new HubError("bad_request.validation_failure", "mentions > 10"));
  }
  if (body.mentions.length !== body.mentionsPositions.length) {
    return err4(new HubError("bad_request.validation_failure", "mentions and mentionsPositions must match"));
  }
  if (body.embeds.length > 0 && body.embedsDeprecated.length > 0) {
    return err4(new HubError("bad_request.validation_failure", "cannot use both embeds and string embeds"));
  }
  if (body.text.length === 0 && body.embeds.length === 0 && body.embedsDeprecated.length === 0 && body.mentions.length === 0) {
    return err4(new HubError("bad_request.validation_failure", "cast is empty"));
  }
  for (let i57 = 0; i57 < body.embeds.length; i57++) {
    const embed = body.embeds[i57];
    if (embed === void 0) {
      return err4(new HubError("bad_request.validation_failure", "embed is missing"));
    }
    const embedIsValid = validateEmbed(embed);
    if (embedIsValid.isErr()) {
      return err4(embedIsValid.error);
    }
  }
  for (let i57 = 0; i57 < body.embedsDeprecated.length; i57++) {
    const embed = body.embedsDeprecated[i57];
    if (embed === void 0) {
      return err4(new HubError("bad_request.validation_failure", "string embed is missing"));
    }
    const embedIsValid = validateUrl(embed);
    if (embedIsValid.isErr()) {
      return err4(embedIsValid.error);
    }
  }
  for (let i57 = 0; i57 < body.mentions.length; i57++) {
    const mention = validateFid(body.mentions[i57]);
    if (mention.isErr()) {
      return err4(mention.error);
    }
    const position = body.mentionsPositions[i57];
    if (typeof position !== "number" || !Number.isInteger(position)) {
      return err4(new HubError("bad_request.validation_failure", "mentionsPositions must be integers"));
    }
    if (position < 0 || position > textBytes.length) {
      return err4(new HubError("bad_request.validation_failure", "mentionsPositions must be a position in text"));
    }
    if (i57 > 0) {
      const prevPosition = body.mentionsPositions[i57 - 1];
      if (position < prevPosition) {
        return err4(
          new HubError("bad_request.validation_failure", "mentionsPositions must be sorted in ascending order")
        );
      }
    }
  }
  if (body.parentCastId !== void 0 && body.parentUrl !== void 0) {
    return err4(new HubError("bad_request.validation_failure", "cannot use both parentUrl and parentCastId"));
  }
  const parent = (_a2 = body.parentCastId) != null ? _a2 : body.parentUrl;
  if (parent !== void 0) {
    const validParent = validateParent(parent);
    if (validParent.isErr()) {
      return err4(validParent.error);
    }
  }
  return ok4(body);
};
var validateCastRemoveBody = (body) => {
  return validateMessageHash(body.targetHash).map(() => body);
};
var validateLinkType = (type) => {
  const typeBuffer = Buffer.from(type);
  if (type.length === 0 || typeBuffer.length > 8) {
    return err4(new HubError("bad_request.validation_failure", "type must be between 1-8 bytes"));
  }
  return ok4(type);
};
var validateReactionType = (type) => {
  if (!Object.values(ReactionType).includes(type)) {
    return err4(new HubError("bad_request.validation_failure", "invalid reaction type"));
  }
  return ok4(type);
};
var validateTarget = (target) => {
  if (typeof target === "string") {
    return validateUrl(target);
  } else if (typeof target === "number") {
    return validateFid(target);
  } else {
    return validateCastId(target);
  }
};
var validateMessageType = (type) => {
  if (!Object.values(MessageType).includes(type)) {
    return err4(new HubError("bad_request.validation_failure", "invalid message type"));
  }
  return ok4(type);
};
var validateNetwork = (network) => {
  if (!Object.values(FarcasterNetwork).includes(network)) {
    return err4(new HubError("bad_request.validation_failure", "invalid network"));
  }
  return ok4(network);
};
var validateLinkBody = (body) => {
  const validatedType = validateLinkType(body.type);
  if (validatedType.isErr()) {
    return err4(validatedType.error);
  }
  const target = body.targetFid;
  if (target === void 0) {
    return err4(new HubError("bad_request.validation_failure", "target is missing"));
  }
  return validateTarget(target).map(() => body);
};
var validateReactionBody = (body) => {
  var _a2;
  const validatedType = validateReactionType(body.type);
  if (validatedType.isErr()) {
    return err4(validatedType.error);
  }
  if (body.targetCastId !== void 0 && body.targetUrl !== void 0) {
    return err4(new HubError("bad_request.validation_failure", "cannot use both targetUrl and targetCastId"));
  }
  const target = (_a2 = body.targetCastId) != null ? _a2 : body.targetUrl;
  if (target === void 0) {
    return err4(new HubError("bad_request.validation_failure", "target is missing"));
  }
  return validateTarget(target).map(() => body);
};
var validateVerificationAddEthAddressBody = async (body, fid, network, publicClients) => {
  const validAddress = validateEthAddress(body.address);
  if (validAddress.isErr()) {
    return err4(validAddress.error);
  }
  const validBlockHash = validateEthBlockHash(body.blockHash);
  if (validBlockHash.isErr()) {
    return err4(validBlockHash.error);
  }
  const validSignature = await validateVerificationAddEthAddressSignature(body, fid, network, publicClients);
  if (validSignature.isErr()) {
    return err4(validSignature.error);
  }
  return ok4(body);
};
var validateVerificationRemoveBody = (body) => {
  switch (body.protocol) {
    case 0 /* ETHEREUM */:
      return validateEthAddress(body.address).map(() => body);
    default:
      return err4(new HubError("bad_request.validation_failure", "invalid verification protocol"));
  }
};
var validateUsernameProofBody = (body, data) => {
  if (body.type !== 2 /* USERNAME_TYPE_ENS_L1 */) {
    return err4(new HubError("bad_request.validation_failure", `invalid username type: ${body.type}`));
  }
  const validateName = validateEnsName(body.name);
  if (validateName.isErr()) {
    return err4(validateName.error);
  }
  if (body.fid !== data.fid) {
    return err4(
      new HubError("bad_request.validation_failure", "fid in username proof does not match fid in message data")
    );
  }
  const proofFarcasterTimestamp = toFarcasterTime(body.timestamp * 1e3);
  if (proofFarcasterTimestamp.isErr()) {
    return err4(proofFarcasterTimestamp.error);
  }
  if (proofFarcasterTimestamp.value !== data.timestamp) {
    return err4(
      new HubError(
        "bad_request.validation_failure",
        "timestamp in username proof does not match timestamp in message data"
      )
    );
  }
  return ok4(body);
};
var validateFrameActionBody = (body) => {
  if (body.buttonIndex > 5) {
    return err4(new HubError("bad_request.validation_failure", "invalid button index"));
  }
  if (validateBytesAsString(body.url, 256, true).isErr()) {
    return err4(new HubError("bad_request.validation_failure", "invalid url"));
  }
  if (validateBytesAsString(body.inputText, 256).isErr()) {
    return err4(new HubError("bad_request.validation_failure", "invalid input text"));
  }
  if (body.castId !== void 0) {
    const result = validateCastId(body.castId);
    if (result.isErr()) {
      return err4(result.error);
    }
  }
  return ok4(body);
};
var validateBytesAsString = (byteArray, maxLength, required = false) => {
  if (required && byteArray.length === 0) {
    return err4(new HubError("bad_request.validation_failure", "value is required"));
  }
  if (byteArray.length > maxLength) {
    return err4(new HubError("bad_request.validation_failure", "value is too long"));
  }
  return ok4(byteArray);
};
var validateUserDataType = (type) => {
  if (!Object.values(UserDataType).includes(type) || type === 0 /* NONE */ || type === 0 /* NONE */) {
    return err4(new HubError("bad_request.validation_failure", "invalid user data type"));
  }
  return ok4(type);
};
var validateUserDataAddBody = (body) => {
  const { type, value } = body;
  const textUtf8BytesResult = utf8StringToBytes(value);
  if (textUtf8BytesResult.isErr()) {
    return err4(new HubError("bad_request.invalid_param", "value cannot be encoded as utf8"));
  }
  const valueBytes = textUtf8BytesResult.value;
  switch (type) {
    case 1 /* PFP */:
      if (valueBytes.length > 256) {
        return err4(new HubError("bad_request.validation_failure", "pfp value > 256"));
      }
      break;
    case 2 /* DISPLAY */:
      if (valueBytes.length > 32) {
        return err4(new HubError("bad_request.validation_failure", "display value > 32"));
      }
      break;
    case 3 /* BIO */:
      if (valueBytes.length > 256) {
        return err4(new HubError("bad_request.validation_failure", "bio value > 256"));
      }
      break;
    case 5 /* URL */:
      if (valueBytes.length > 256) {
        return err4(new HubError("bad_request.validation_failure", "url value > 256"));
      }
      break;
    case 6 /* USERNAME */: {
      if (value !== "") {
        const validatedFname = validateFname(value);
        const validatedEnsName = validateEnsName(value);
        if (validatedFname.isErr() && validatedEnsName.isErr()) {
          return err4(validatedFname.error);
        }
      }
      break;
    }
    default:
      return err4(new HubError("bad_request.validation_failure", "invalid user data type"));
  }
  return ok4(body);
};
var validateFname = (fnameP) => {
  if (fnameP === void 0 || fnameP === null || fnameP === "") {
    return err4(new HubError("bad_request.validation_failure", "fname is missing"));
  }
  let fname;
  if (fnameP instanceof Uint8Array) {
    const fromBytes = bytesToUtf8String(fnameP);
    if (fromBytes.isErr()) {
      return err4(fromBytes.error);
    }
    fname = fromBytes.value;
  } else {
    fname = fnameP;
  }
  if (fname === void 0 || fname === null || fname === "") {
    return err4(new HubError("bad_request.validation_failure", "fname is missing"));
  }
  if (fname.length > 16) {
    return err4(new HubError("bad_request.validation_failure", `fname "${fname}" > 16 characters`));
  }
  const hasValidChars = FNAME_REGEX.test(fname);
  if (hasValidChars === false) {
    return err4(new HubError("bad_request.validation_failure", `fname "${fname}" doesn't match ${FNAME_REGEX}`));
  }
  return ok4(fnameP);
};
var validateEnsName = (ensNameP) => {
  if (ensNameP === void 0 || ensNameP === null || ensNameP === "") {
    return err4(new HubError("bad_request.validation_failure", "ensName is missing"));
  }
  let ensName;
  if (ensNameP instanceof Uint8Array) {
    const fromBytes = bytesToUtf8String(ensNameP);
    if (fromBytes.isErr()) {
      return err4(fromBytes.error);
    }
    ensName = fromBytes.value;
  } else {
    ensName = ensNameP;
  }
  if (ensName === void 0 || ensName === null || ensName === "") {
    return err4(new HubError("bad_request.validation_failure", "ensName is missing"));
  }
  try {
    normalize(ensName);
  } catch (e57) {
    return err4(new HubError("bad_request.validation_failure", `ensName "${ensName}" is not a valid ENS name`));
  }
  if (!ensName.endsWith(".eth")) {
    return err4(new HubError("bad_request.validation_failure", `ensName "${ensName}" doesn't end with .eth`));
  }
  const nameParts = ensName.split(".");
  if (nameParts[0] === void 0 || nameParts.length !== 2) {
    return err4(new HubError("bad_request.validation_failure", `ensName "${ensName}" unsupported subdomain`));
  }
  if (ensName.length > USERNAME_MAX_LENGTH) {
    return err4(new HubError("bad_request.validation_failure", `ensName "${ensName}" > 20 characters`));
  }
  const hasValidChars = FNAME_REGEX.test(nameParts[0]);
  if (!hasValidChars) {
    return err4(new HubError("bad_request.validation_failure", `ensName "${ensName}" doesn't match ${FNAME_REGEX}`));
  }
  return ok4(ensNameP);
};

// src/builders.ts
var makeMessageData = async (bodyOptions, messageType, dataOptions, publicClients = defaultPublicClients) => {
  if (!dataOptions.timestamp) {
    getFarcasterTime().map((timestamp) => {
      dataOptions.timestamp = timestamp;
    });
  }
  const data = MessageData.create({
    ...bodyOptions,
    type: messageType,
    ...dataOptions
  });
  return validateMessageData(data, publicClients);
};
var makeMessage = async (messageData, signer) => {
  const dataBytes = MessageData.encode(messageData).finish();
  const hash = blake32(dataBytes, { dkLen: 20 });
  const signature = await signer.signMessageHash(hash);
  if (signature.isErr())
    return err5(signature.error);
  const signerKey = await signer.getSignerKey();
  if (signerKey.isErr())
    return err5(signerKey.error);
  const message = Message.create({
    data: messageData,
    hash,
    hashScheme: 1 /* BLAKE3 */,
    signature: signature.value,
    signatureScheme: signer.scheme,
    signer: signerKey.value
  });
  return ok5(message);
};
var makeMessageHash = async (messageData) => {
  const dataBytes = MessageData.encode(messageData).finish();
  return ok5(blake32(dataBytes, { dkLen: 20 }));
};
var makeMessageWithSignature = async (messageData, signerOptions) => {
  const dataBytes = MessageData.encode(messageData).finish();
  const hash = blake32(dataBytes, { dkLen: 20 });
  const message = Message.create({
    data: messageData,
    hash,
    hashScheme: 1 /* BLAKE3 */,
    ...signerOptions
  });
  return validateMessage(message);
};
var makeCastAdd = async (body, dataOptions, signer) => {
  const data = await makeCastAddData(body, dataOptions);
  if (data.isErr()) {
    return err5(data.error);
  }
  return makeMessage(data.value, signer);
};
var makeCastRemove = async (body, dataOptions, signer) => {
  const data = await makeCastRemoveData(body, dataOptions);
  if (data.isErr()) {
    return err5(data.error);
  }
  return makeMessage(data.value, signer);
};
var makeCastAddData = async (body, dataOptions) => {
  return makeMessageData({ castAddBody: body }, 1 /* CAST_ADD */, dataOptions);
};
var makeCastRemoveData = (body, dataOptions) => {
  return makeMessageData({ castRemoveBody: body }, 2 /* CAST_REMOVE */, dataOptions);
};
var makeLinkAdd = async (body, dataOptions, signer) => {
  const data = await makeLinkAddData(body, dataOptions);
  if (data.isErr()) {
    return err5(data.error);
  }
  return makeMessage(data.value, signer);
};
var makeLinkRemove = async (body, dataOptions, signer) => {
  const data = await makeLinkRemoveData(body, dataOptions);
  if (data.isErr()) {
    return err5(data.error);
  }
  return makeMessage(data.value, signer);
};
var makeLinkAddData = (body, dataOptions) => {
  return makeMessageData({ linkBody: body }, 5 /* LINK_ADD */, dataOptions);
};
var makeLinkRemoveData = (body, dataOptions) => {
  return makeMessageData({ linkBody: body }, 6 /* LINK_REMOVE */, dataOptions);
};
var makeReactionAdd = async (body, dataOptions, signer) => {
  const data = await makeReactionAddData(body, dataOptions);
  if (data.isErr()) {
    return err5(data.error);
  }
  return makeMessage(data.value, signer);
};
var makeReactionRemove = async (body, dataOptions, signer) => {
  const data = await makeReactionRemoveData(body, dataOptions);
  if (data.isErr()) {
    return err5(data.error);
  }
  return makeMessage(data.value, signer);
};
var makeReactionAddData = (body, dataOptions) => {
  return makeMessageData({ reactionBody: body }, 3 /* REACTION_ADD */, dataOptions);
};
var makeReactionRemoveData = (body, dataOptions) => {
  return makeMessageData({ reactionBody: body }, 4 /* REACTION_REMOVE */, dataOptions);
};
var makeVerificationAddEthAddress = async (body, dataOptions, signer, publicClients = defaultPublicClients) => {
  const data = await makeVerificationAddEthAddressData(body, dataOptions, publicClients);
  if (data.isErr()) {
    return err5(data.error);
  }
  return makeMessage(data.value, signer);
};
var makeVerificationRemove = async (body, dataOptions, signer) => {
  const data = await makeVerificationRemoveData(body, dataOptions);
  if (data.isErr()) {
    return err5(data.error);
  }
  return makeMessage(data.value, signer);
};
var makeVerificationAddEthAddressData = (body, dataOptions, publicClients = defaultPublicClients) => {
  return makeMessageData(
    { verificationAddAddressBody: body },
    7 /* VERIFICATION_ADD_ETH_ADDRESS */,
    dataOptions,
    publicClients
  );
};
var makeVerificationRemoveData = (body, dataOptions) => {
  return makeMessageData({ verificationRemoveBody: body }, 8 /* VERIFICATION_REMOVE */, dataOptions);
};
var makeUserDataAdd = async (body, dataOptions, signer) => {
  const data = await makeUserDataAddData(body, dataOptions);
  if (data.isErr()) {
    return err5(data.error);
  }
  return makeMessage(data.value, signer);
};
var makeUserDataAddData = (body, dataOptions) => {
  return makeMessageData({ userDataBody: body }, 11 /* USER_DATA_ADD */, dataOptions);
};
var makeUsernameProof = async (body, dataOptions, signer) => {
  const data = await makeUsernameProofData(body, dataOptions);
  if (data.isErr()) {
    return err5(data.error);
  }
  return makeMessage(data.value, signer);
};
var makeUsernameProofData = (body, dataOptions) => {
  return makeMessageData({ usernameProofBody: body }, 12 /* USERNAME_PROOF */, dataOptions);
};
var makeFrameAction = async (body, dataOptions, signer) => {
  const data = await makeFrameActionData(body, dataOptions);
  if (data.isErr()) {
    return err5(data.error);
  }
  return makeMessage(data.value, signer);
};
var makeFrameActionData = (body, dataOptions) => {
  return makeMessageData({ frameActionBody: body }, 13 /* FRAME_ACTION */, dataOptions);
};

// src/eth/index.ts
init_esm_shims();

// src/eth/contracts/index.ts
init_esm_shims();

// src/eth/contracts/bundler.ts
init_esm_shims();
var BUNDLER_ADDRESS = "0x00000000FC04c910A0b5feA33b03E0447AD0B0aA";

// src/eth/contracts/idGateway.ts
init_esm_shims();
import { ResultAsync as ResultAsync2 } from "neverthrow";
import { verifyTypedData as verifyTypedData2, bytesToHex as bytesToHex3 } from "viem";
var ID_GATEWAY_ADDRESS = "0x00000000Fc25870C6eD6b6c7E41Fb078b7656f69";
var ID_GATEWAY_EIP_712_DOMAIN = {
  name: "Farcaster IdGateway",
  version: "1",
  chainId: 10,
  verifyingContract: ID_GATEWAY_ADDRESS
};
var ID_GATEWAY_REGISTER_TYPE = [
  { name: "to", type: "address" },
  { name: "recovery", type: "address" },
  { name: "nonce", type: "uint256" },
  { name: "deadline", type: "uint256" }
];
var ID_GATEWAY_EIP_712_TYPES = {
  domain: ID_GATEWAY_EIP_712_DOMAIN,
  types: { Register: ID_GATEWAY_REGISTER_TYPE }
};
var verifyRegister = async (message, signature, address) => {
  const valid = await ResultAsync2.fromPromise(
    verifyTypedData2({
      address: bytesToHex3(address),
      domain: ID_GATEWAY_EIP_712_DOMAIN,
      types: { Register: ID_GATEWAY_REGISTER_TYPE },
      primaryType: "Register",
      message,
      signature
    }),
    (e57) => new HubError("unknown", e57)
  );
  return valid;
};

// src/eth/contracts/idRegistry.ts
init_esm_shims();
import { ResultAsync as ResultAsync3 } from "neverthrow";
import { verifyTypedData as verifyTypedData3, bytesToHex as bytesToHex4 } from "viem";
var ID_REGISTRY_ADDRESS = "0x00000000Fc6c5F01Fc30151999387Bb99A9f489b";
var ID_REGISTRY_EIP_712_DOMAIN = {
  name: "Farcaster IdRegistry",
  version: "1",
  chainId: 10,
  verifyingContract: ID_REGISTRY_ADDRESS
};
var ID_REGISTRY_TRANSFER_TYPE = [
  { name: "fid", type: "uint256" },
  { name: "to", type: "address" },
  { name: "nonce", type: "uint256" },
  { name: "deadline", type: "uint256" }
];
var ID_REGISTRY_TRANSFER_AND_CHANGE_RECOVERY_TYPE = [
  { name: "fid", type: "uint256" },
  { name: "to", type: "address" },
  { name: "recovery", type: "address" },
  { name: "nonce", type: "uint256" },
  { name: "deadline", type: "uint256" }
];
var ID_REGISTRY_CHANGE_RECOVERY_ADDRESS_TYPE = [
  { name: "fid", type: "uint256" },
  { name: "from", type: "address" },
  { name: "to", type: "address" },
  { name: "nonce", type: "uint256" },
  { name: "deadline", type: "uint256" }
];
var ID_REGISTRY_EIP_712_TYPES = {
  domain: ID_REGISTRY_EIP_712_DOMAIN,
  types: {
    Transfer: ID_REGISTRY_TRANSFER_TYPE,
    TransferAndChangeRecovery: ID_REGISTRY_TRANSFER_AND_CHANGE_RECOVERY_TYPE,
    ChangeRecoveryAddress: ID_REGISTRY_CHANGE_RECOVERY_ADDRESS_TYPE
  }
};
var verifyTransfer = async (message, signature, address) => {
  const valid = await ResultAsync3.fromPromise(
    verifyTypedData3({
      address: bytesToHex4(address),
      domain: ID_REGISTRY_EIP_712_DOMAIN,
      types: { Transfer: ID_REGISTRY_TRANSFER_TYPE },
      primaryType: "Transfer",
      message,
      signature
    }),
    (e57) => new HubError("unknown", e57)
  );
  return valid;
};
var verifyTransferAndChangeRecovery = async (message, signature, address) => {
  const valid = await ResultAsync3.fromPromise(
    verifyTypedData3({
      address: bytesToHex4(address),
      domain: ID_REGISTRY_EIP_712_DOMAIN,
      types: { TransferAndChangeRecovery: ID_REGISTRY_TRANSFER_AND_CHANGE_RECOVERY_TYPE },
      primaryType: "TransferAndChangeRecovery",
      message,
      signature
    }),
    (e57) => new HubError("unknown", e57)
  );
  return valid;
};
var verifyChangeRecoveryAddress = async (message, signature, address) => {
  const valid = await ResultAsync3.fromPromise(
    verifyTypedData3({
      address: bytesToHex4(address),
      domain: ID_REGISTRY_EIP_712_DOMAIN,
      types: { ChangeRecoveryAddress: ID_REGISTRY_CHANGE_RECOVERY_ADDRESS_TYPE },
      primaryType: "ChangeRecoveryAddress",
      message,
      signature
    }),
    (e57) => new HubError("unknown", e57)
  );
  return valid;
};

// src/eth/contracts/keyGateway.ts
init_esm_shims();
import { ResultAsync as ResultAsync4 } from "neverthrow";
import { verifyTypedData as verifyTypedData4, bytesToHex as bytesToHex5 } from "viem";
var KEY_GATEWAY_ADDRESS = "0x00000000fC56947c7E7183f8Ca4B62398CaAdf0B";
var KEY_GATEWAY_EIP_712_DOMAIN = {
  name: "Farcaster KeyGateway",
  version: "1",
  chainId: 10,
  verifyingContract: KEY_GATEWAY_ADDRESS
};
var KEY_GATEWAY_ADD_TYPE = [
  { name: "owner", type: "address" },
  { name: "keyType", type: "uint32" },
  { name: "key", type: "bytes" },
  { name: "metadataType", type: "uint8" },
  { name: "metadata", type: "bytes" },
  { name: "nonce", type: "uint256" },
  { name: "deadline", type: "uint256" }
];
var KEY_GATEWAY_EIP_712_TYPES = {
  domain: KEY_GATEWAY_EIP_712_DOMAIN,
  types: { Add: KEY_GATEWAY_ADD_TYPE }
};
var verifyAdd = async (message, signature, address) => {
  const valid = await ResultAsync4.fromPromise(
    verifyTypedData4({
      address: bytesToHex5(address),
      domain: KEY_GATEWAY_EIP_712_DOMAIN,
      types: { Add: KEY_GATEWAY_ADD_TYPE },
      primaryType: "Add",
      message: { ...message, key: bytesToHex5(message.key) },
      signature
    }),
    (e57) => new HubError("unknown", e57)
  );
  return valid;
};

// src/eth/contracts/keyRegistry.ts
init_esm_shims();
import { ResultAsync as ResultAsync5 } from "neverthrow";
import { verifyTypedData as verifyTypedData5, bytesToHex as bytesToHex6 } from "viem";
var KEY_REGISTRY_ADDRESS = "0x00000000fc1237824fb747abde0ff18990e59b7e";
var KEY_REGISTRY_EIP_712_DOMAIN = {
  name: "Farcaster KeyRegistry",
  version: "1",
  chainId: 10,
  verifyingContract: KEY_REGISTRY_ADDRESS
};
var KEY_REGISTRY_REMOVE_TYPE = [
  { name: "owner", type: "address" },
  { name: "key", type: "bytes" },
  { name: "nonce", type: "uint256" },
  { name: "deadline", type: "uint256" }
];
var KEY_REGISTRY_EIP_712_TYPES = {
  domain: KEY_REGISTRY_EIP_712_DOMAIN,
  types: { Remove: KEY_REGISTRY_REMOVE_TYPE }
};
var verifyRemove = async (message, signature, address) => {
  const valid = await ResultAsync5.fromPromise(
    verifyTypedData5({
      address: bytesToHex6(address),
      domain: KEY_REGISTRY_EIP_712_DOMAIN,
      types: { Remove: KEY_REGISTRY_REMOVE_TYPE },
      primaryType: "Remove",
      message: { ...message, key: bytesToHex6(message.key) },
      signature
    }),
    (e57) => new HubError("unknown", e57)
  );
  return valid;
};

// src/eth/contracts/signedKeyRequestValidator.ts
init_esm_shims();
import { ResultAsync as ResultAsync6 } from "neverthrow";
import { verifyTypedData as verifyTypedData6, bytesToHex as bytesToHex7 } from "viem";
var SIGNED_KEY_REQUEST_VALIDATOR_ADDRESS = "0x00000000FC700472606ED4fA22623Acf62c60553";
var SIGNED_KEY_REQUEST_VALIDATOR_EIP_712_DOMAIN = {
  name: "Farcaster SignedKeyRequestValidator",
  version: "1",
  chainId: 10,
  verifyingContract: SIGNED_KEY_REQUEST_VALIDATOR_ADDRESS
};
var SIGNED_KEY_REQUEST_TYPE = [
  { name: "requestFid", type: "uint256" },
  { name: "key", type: "bytes" },
  { name: "deadline", type: "uint256" }
];
var SIGNED_KEY_REQUEST_VALIDATOR_EIP_712_TYPES = {
  domain: SIGNED_KEY_REQUEST_VALIDATOR_EIP_712_DOMAIN,
  types: { SignedKeyRequest: SIGNED_KEY_REQUEST_TYPE }
};
var verifyKeyRequest = async (message, signature, address) => {
  const valid = await ResultAsync6.fromPromise(
    verifyTypedData6({
      address: bytesToHex7(address),
      domain: SIGNED_KEY_REQUEST_VALIDATOR_EIP_712_DOMAIN,
      types: { SignedKeyRequest: SIGNED_KEY_REQUEST_TYPE },
      primaryType: "SignedKeyRequest",
      message: { ...message, key: bytesToHex7(message.key) },
      signature
    }),
    (e57) => new HubError("unknown", e57)
  );
  return valid;
};

// src/eth/contracts/storageRegistry.ts
init_esm_shims();
var STORAGE_REGISTRY_ADDRESS = "0x00000000fcCe7f938e7aE6D3c335bD6a1a7c593D";

// src/eth/contracts/abis/index.ts
init_esm_shims();

// src/eth/contracts/abis/bundler.ts
init_esm_shims();
var bundlerABI = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_idGateway",
        type: "address"
      },
      {
        internalType: "address",
        name: "_keyGateway",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "CallFailed",
    type: "error"
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidSignature",
    type: "error"
  },
  {
    inputs: [],
    name: "SignatureExpired",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidPayment",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidState",
    type: "error"
  },
  {
    inputs: [],
    name: "ExceedsMaximum",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidMetadata",
    type: "error"
  },
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "idGateway",
    outputs: [
      {
        internalType: "contract IIdGateway",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "keyGateway",
    outputs: [
      {
        internalType: "contract IKeyGateway",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "extraStorage",
        type: "uint256"
      }
    ],
    name: "price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address"
          },
          {
            internalType: "address",
            name: "recovery",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "sig",
            type: "bytes"
          }
        ],
        internalType: "struct IBundler.RegistrationParams",
        name: "registerParams",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "uint32",
            name: "keyType",
            type: "uint32"
          },
          {
            internalType: "bytes",
            name: "key",
            type: "bytes"
          },
          {
            internalType: "uint8",
            name: "metadataType",
            type: "uint8"
          },
          {
            internalType: "bytes",
            name: "metadata",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "sig",
            type: "bytes"
          }
        ],
        internalType: "struct IBundler.SignerParams[]",
        name: "signerParams",
        type: "tuple[]"
      },
      {
        internalType: "uint256",
        name: "extraStorage",
        type: "uint256"
      }
    ],
    name: "register",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    stateMutability: "payable",
    type: "receive"
  }
];

// src/eth/contracts/abis/idGateway.ts
init_esm_shims();
var idGatewayABI = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_idRegistry",
        type: "address"
      },
      {
        internalType: "address",
        name: "_storageRegistry",
        type: "address"
      },
      {
        internalType: "address",
        name: "_initialOwner",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "CallFailed",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "currentNonce",
        type: "uint256"
      }
    ],
    name: "InvalidAccountNonce",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidShortString",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidSignature",
    type: "error"
  },
  {
    inputs: [],
    name: "OnlyGuardian",
    type: "error"
  },
  {
    inputs: [],
    name: "SignatureExpired",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidPayment",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "str",
        type: "string"
      }
    ],
    name: "StringTooLong",
    type: "error"
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "Add",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [],
    name: "EIP712DomainChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferStarted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Paused",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "Remove",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldStorageRegistry",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newStorageRegistry",
        type: "address"
      }
    ],
    name: "SetStorageRegistry",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Unpaused",
    type: "event"
  },
  {
    inputs: [],
    name: "REGISTER_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "addGuardian",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "domainSeparatorV4",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "eip712Domain",
    outputs: [
      {
        internalType: "bytes1",
        name: "fields",
        type: "bytes1"
      },
      {
        internalType: "string",
        name: "name",
        type: "string"
      },
      {
        internalType: "string",
        name: "version",
        type: "string"
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "verifyingContract",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32"
      },
      {
        internalType: "uint256[]",
        name: "extensions",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "guardians",
    outputs: [
      {
        internalType: "bool",
        name: "isGuardian",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "structHash",
        type: "bytes32"
      }
    ],
    name: "hashTypedDataV4",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "idRegistry",
    outputs: [
      {
        internalType: "contract IIdRegistry",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      }
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "extraStorage",
        type: "uint256"
      }
    ],
    name: "price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recovery",
        type: "address"
      }
    ],
    name: "register",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recovery",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "extraStorage",
        type: "uint256"
      }
    ],
    name: "register",
    outputs: [
      {
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "overpayment",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "address",
        name: "recovery",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes"
      }
    ],
    name: "registerFor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "address",
        name: "recovery",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes"
      },
      {
        internalType: "uint256",
        name: "extraStorage",
        type: "uint256"
      }
    ],
    name: "registerFor",
    outputs: [
      {
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "overpayment",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "removeGuardian",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_storageRegistry",
        type: "address"
      }
    ],
    name: "setStorageRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "storageRegistry",
    outputs: [
      {
        internalType: "contract IStorageRegistry",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "useNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    stateMutability: "payable",
    type: "receive"
  }
];

// src/eth/contracts/abis/idRegistry.ts
init_esm_shims();
var idRegistryABI = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_migrator",
        type: "address"
      },
      {
        internalType: "address",
        name: "_initialOwner",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "AlreadyMigrated",
    type: "error"
  },
  {
    inputs: [],
    name: "GatewayFrozen",
    type: "error"
  },
  {
    inputs: [],
    name: "HasId",
    type: "error"
  },
  {
    inputs: [],
    name: "HasNoId",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "currentNonce",
        type: "uint256"
      }
    ],
    name: "InvalidAccountNonce",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidShortString",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidSignature",
    type: "error"
  },
  {
    inputs: [],
    name: "OnlyGuardian",
    type: "error"
  },
  {
    inputs: [],
    name: "OnlyMigrator",
    type: "error"
  },
  {
    inputs: [],
    name: "PermissionRevoked",
    type: "error"
  },
  {
    inputs: [],
    name: "SignatureExpired",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "str",
        type: "string"
      }
    ],
    name: "StringTooLong",
    type: "error"
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "Add",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      }
    ],
    name: "AdminReset",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "address",
        name: "recovery",
        type: "address"
      }
    ],
    name: "ChangeRecoveryAddress",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [],
    name: "EIP712DomainChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "idGateway",
        type: "address"
      }
    ],
    name: "FreezeIdGateway",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "migratedAt",
        type: "uint256"
      }
    ],
    name: "Migrated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferStarted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Paused",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }
    ],
    name: "Recover",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "address",
        name: "recovery",
        type: "address"
      }
    ],
    name: "Register",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "Remove",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldCounter",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newCounter",
        type: "uint256"
      }
    ],
    name: "SetIdCounter",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldIdGateway",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newIdGateway",
        type: "address"
      }
    ],
    name: "SetIdGateway",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldMigrator",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newMigrator",
        type: "address"
      }
    ],
    name: "SetMigrator",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256"
      }
    ],
    name: "Transfer",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Unpaused",
    type: "event"
  },
  {
    inputs: [],
    name: "CHANGE_RECOVERY_ADDRESS_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "TRANSFER_AND_CHANGE_RECOVERY_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "TRANSFER_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "addGuardian",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint24",
            name: "fid",
            type: "uint24"
          },
          {
            internalType: "address",
            name: "custody",
            type: "address"
          },
          {
            internalType: "address",
            name: "recovery",
            type: "address"
          }
        ],
        internalType: "struct IIdRegistry.BulkRegisterData[]",
        name: "ids",
        type: "tuple[]"
      }
    ],
    name: "bulkRegisterIds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint24",
            name: "fid",
            type: "uint24"
          },
          {
            internalType: "address",
            name: "custody",
            type: "address"
          }
        ],
        internalType: "struct IIdRegistry.BulkRegisterDefaultRecoveryData[]",
        name: "ids",
        type: "tuple[]"
      },
      {
        internalType: "address",
        name: "recovery",
        type: "address"
      }
    ],
    name: "bulkRegisterIdsWithDefaultRecovery",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint24[]",
        name: "ids",
        type: "uint24[]"
      }
    ],
    name: "bulkResetIds",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recovery",
        type: "address"
      }
    ],
    name: "changeRecoveryAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        internalType: "address",
        name: "recovery",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes"
      }
    ],
    name: "changeRecoveryAddressFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      }
    ],
    name: "custodyOf",
    outputs: [
      {
        internalType: "address",
        name: "custody",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "domainSeparatorV4",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "eip712Domain",
    outputs: [
      {
        internalType: "bytes1",
        name: "fields",
        type: "bytes1"
      },
      {
        internalType: "string",
        name: "name",
        type: "string"
      },
      {
        internalType: "string",
        name: "version",
        type: "string"
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "verifyingContract",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32"
      },
      {
        internalType: "uint256[]",
        name: "extensions",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "freezeIdGateway",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "gatewayFrozen",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "gracePeriod",
    outputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "guardians",
    outputs: [
      {
        internalType: "bool",
        name: "isGuardian",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "structHash",
        type: "bytes32"
      }
    ],
    name: "hashTypedDataV4",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "idCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "idGateway",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      }
    ],
    name: "idOf",
    outputs: [
      {
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "isMigrated",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "migrate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "migratedAt",
    outputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "migrator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      }
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes"
      }
    ],
    name: "recover",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "recoveryDeadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "recoverySig",
        type: "bytes"
      },
      {
        internalType: "uint256",
        name: "toDeadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "toSig",
        type: "bytes"
      }
    ],
    name: "recoverFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      }
    ],
    name: "recoveryOf",
    outputs: [
      {
        internalType: "address",
        name: "recovery",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "address",
        name: "recovery",
        type: "address"
      }
    ],
    name: "register",
    outputs: [
      {
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "removeGuardian",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_counter",
        type: "uint256"
      }
    ],
    name: "setIdCounter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_idGateway",
        type: "address"
      }
    ],
    name: "setIdGateway",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_migrator",
        type: "address"
      }
    ],
    name: "setMigrator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes"
      }
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "address",
        name: "recovery",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes"
      }
    ],
    name: "transferAndChangeRecovery",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "address",
        name: "recovery",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "fromDeadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "fromSig",
        type: "bytes"
      },
      {
        internalType: "uint256",
        name: "toDeadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "toSig",
        type: "bytes"
      }
    ],
    name: "transferAndChangeRecoveryFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "fromDeadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "fromSig",
        type: "bytes"
      },
      {
        internalType: "uint256",
        name: "toDeadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "toSig",
        type: "bytes"
      }
    ],
    name: "transferFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "useNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "custodyAddress",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "digest",
        type: "bytes32"
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes"
      }
    ],
    name: "verifyFidSignature",
    outputs: [
      {
        internalType: "bool",
        name: "isValid",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];

// src/eth/contracts/abis/keyGateway.ts
init_esm_shims();
var keyGatewayABI = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_keyRegistry",
        type: "address"
      },
      {
        internalType: "address",
        name: "_initialOwner",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "currentNonce",
        type: "uint256"
      }
    ],
    name: "InvalidAccountNonce",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidShortString",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidSignature",
    type: "error"
  },
  {
    inputs: [],
    name: "OnlyGuardian",
    type: "error"
  },
  {
    inputs: [],
    name: "SignatureExpired",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidMetadata",
    type: "error"
  },
  {
    inputs: [],
    name: "ExceedsMaximum",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidState",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "str",
        type: "string"
      }
    ],
    name: "StringTooLong",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "Add",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [],
    name: "EIP712DomainChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferStarted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Paused",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "Remove",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Unpaused",
    type: "event"
  },
  {
    inputs: [],
    name: "ADD_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "keyType",
        type: "uint32"
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes"
      },
      {
        internalType: "uint8",
        name: "metadataType",
        type: "uint8"
      },
      {
        internalType: "bytes",
        name: "metadata",
        type: "bytes"
      }
    ],
    name: "add",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fidOwner",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "keyType",
        type: "uint32"
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes"
      },
      {
        internalType: "uint8",
        name: "metadataType",
        type: "uint8"
      },
      {
        internalType: "bytes",
        name: "metadata",
        type: "bytes"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes"
      }
    ],
    name: "addFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "addGuardian",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "domainSeparatorV4",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "eip712Domain",
    outputs: [
      {
        internalType: "bytes1",
        name: "fields",
        type: "bytes1"
      },
      {
        internalType: "string",
        name: "name",
        type: "string"
      },
      {
        internalType: "string",
        name: "version",
        type: "string"
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "verifyingContract",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32"
      },
      {
        internalType: "uint256[]",
        name: "extensions",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "guardians",
    outputs: [
      {
        internalType: "bool",
        name: "isGuardian",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "structHash",
        type: "bytes32"
      }
    ],
    name: "hashTypedDataV4",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "keyRegistry",
    outputs: [
      {
        internalType: "contract IKeyRegistry",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      }
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "removeGuardian",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "useNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
];

// src/eth/contracts/abis/keyRegistry.ts
init_esm_shims();
var keyRegistryABI = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_idRegistry",
        type: "address"
      },
      {
        internalType: "address",
        name: "_migrator",
        type: "address"
      },
      {
        internalType: "address",
        name: "_initialOwner",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_maxKeysPerFid",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "AlreadyMigrated",
    type: "error"
  },
  {
    inputs: [],
    name: "ExceedsMaximum",
    type: "error"
  },
  {
    inputs: [],
    name: "GatewayFrozen",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "currentNonce",
        type: "uint256"
      }
    ],
    name: "InvalidAccountNonce",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidKeyType",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidMaxKeys",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidMetadata",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidMetadataType",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidShortString",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidSignature",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidState",
    type: "error"
  },
  {
    inputs: [],
    name: "OnlyGuardian",
    type: "error"
  },
  {
    inputs: [],
    name: "OnlyMigrator",
    type: "error"
  },
  {
    inputs: [],
    name: "PermissionRevoked",
    type: "error"
  },
  {
    inputs: [],
    name: "SignatureExpired",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "str",
        type: "string"
      }
    ],
    name: "StringTooLong",
    type: "error"
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "keyType",
        type: "uint32"
      },
      {
        internalType: "uint8",
        name: "metadataType",
        type: "uint8"
      }
    ],
    name: "ValidatorNotFound",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "uint32",
        name: "keyType",
        type: "uint32"
      },
      {
        indexed: true,
        internalType: "bytes",
        name: "key",
        type: "bytes"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "keyBytes",
        type: "bytes"
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "metadataType",
        type: "uint8"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "metadata",
        type: "bytes"
      }
    ],
    name: "Add",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "Add",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "bytes",
        name: "key",
        type: "bytes"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "keyBytes",
        type: "bytes"
      }
    ],
    name: "AdminReset",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [],
    name: "EIP712DomainChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "keyGateway",
        type: "address"
      }
    ],
    name: "FreezeKeyGateway",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "migratedAt",
        type: "uint256"
      }
    ],
    name: "Migrated",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferStarted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Paused",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      },
      {
        indexed: true,
        internalType: "bytes",
        name: "key",
        type: "bytes"
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "keyBytes",
        type: "bytes"
      }
    ],
    name: "Remove",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "Remove",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldIdRegistry",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newIdRegistry",
        type: "address"
      }
    ],
    name: "SetIdRegistry",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldKeyGateway",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newKeyGateway",
        type: "address"
      }
    ],
    name: "SetKeyGateway",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldMax",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newMax",
        type: "uint256"
      }
    ],
    name: "SetMaxKeysPerFid",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldMigrator",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newMigrator",
        type: "address"
      }
    ],
    name: "SetMigrator",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint32",
        name: "keyType",
        type: "uint32"
      },
      {
        indexed: false,
        internalType: "uint8",
        name: "metadataType",
        type: "uint8"
      },
      {
        indexed: false,
        internalType: "address",
        name: "oldValidator",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newValidator",
        type: "address"
      }
    ],
    name: "SetValidator",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Unpaused",
    type: "event"
  },
  {
    inputs: [],
    name: "REMOVE_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fidOwner",
        type: "address"
      },
      {
        internalType: "uint32",
        name: "keyType",
        type: "uint32"
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes"
      },
      {
        internalType: "uint8",
        name: "metadataType",
        type: "uint8"
      },
      {
        internalType: "bytes",
        name: "metadata",
        type: "bytes"
      }
    ],
    name: "add",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "addGuardian",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "fid",
            type: "uint256"
          },
          {
            components: [
              {
                internalType: "bytes",
                name: "key",
                type: "bytes"
              },
              {
                internalType: "bytes",
                name: "metadata",
                type: "bytes"
              }
            ],
            internalType: "struct IKeyRegistry.BulkAddKey[]",
            name: "keys",
            type: "tuple[]"
          }
        ],
        internalType: "struct IKeyRegistry.BulkAddData[]",
        name: "items",
        type: "tuple[]"
      }
    ],
    name: "bulkAddKeysForMigration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "fid",
            type: "uint256"
          },
          {
            internalType: "bytes[]",
            name: "keys",
            type: "bytes[]"
          }
        ],
        internalType: "struct IKeyRegistry.BulkResetData[]",
        name: "items",
        type: "tuple[]"
      }
    ],
    name: "bulkResetKeysForMigration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "domainSeparatorV4",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "eip712Domain",
    outputs: [
      {
        internalType: "bytes1",
        name: "fields",
        type: "bytes1"
      },
      {
        internalType: "string",
        name: "name",
        type: "string"
      },
      {
        internalType: "string",
        name: "version",
        type: "string"
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "verifyingContract",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32"
      },
      {
        internalType: "uint256[]",
        name: "extensions",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "freezeKeyGateway",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "gatewayFrozen",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "gracePeriod",
    outputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "guardians",
    outputs: [
      {
        internalType: "bool",
        name: "isGuardian",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "structHash",
        type: "bytes32"
      }
    ],
    name: "hashTypedDataV4",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "idRegistry",
    outputs: [
      {
        internalType: "contract IdRegistryLike",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "isMigrated",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      },
      {
        internalType: "enum IKeyRegistry.KeyState",
        name: "state",
        type: "uint8"
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256"
      }
    ],
    name: "keyAt",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes"
      }
    ],
    name: "keyDataOf",
    outputs: [
      {
        components: [
          {
            internalType: "enum IKeyRegistry.KeyState",
            name: "state",
            type: "uint8"
          },
          {
            internalType: "uint32",
            name: "keyType",
            type: "uint32"
          }
        ],
        internalType: "struct IKeyRegistry.KeyData",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "keyGateway",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes"
      }
    ],
    name: "keys",
    outputs: [
      {
        internalType: "enum IKeyRegistry.KeyState",
        name: "state",
        type: "uint8"
      },
      {
        internalType: "uint32",
        name: "keyType",
        type: "uint32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      },
      {
        internalType: "enum IKeyRegistry.KeyState",
        name: "state",
        type: "uint8"
      }
    ],
    name: "keysOf",
    outputs: [
      {
        internalType: "bytes[]",
        name: "",
        type: "bytes[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      },
      {
        internalType: "enum IKeyRegistry.KeyState",
        name: "state",
        type: "uint8"
      },
      {
        internalType: "uint256",
        name: "startIdx",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "batchSize",
        type: "uint256"
      }
    ],
    name: "keysOf",
    outputs: [
      {
        internalType: "bytes[]",
        name: "page",
        type: "bytes[]"
      },
      {
        internalType: "uint256",
        name: "nextIdx",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "maxKeysPerFid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "migrate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "migratedAt",
    outputs: [
      {
        internalType: "uint40",
        name: "",
        type: "uint40"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "migrator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      }
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes"
      }
    ],
    name: "remove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fidOwner",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes"
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes"
      }
    ],
    name: "removeFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "guardian",
        type: "address"
      }
    ],
    name: "removeGuardian",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_idRegistry",
        type: "address"
      }
    ],
    name: "setIdRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_keyGateway",
        type: "address"
      }
    ],
    name: "setKeyGateway",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_maxKeysPerFid",
        type: "uint256"
      }
    ],
    name: "setMaxKeysPerFid",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_migrator",
        type: "address"
      }
    ],
    name: "setMigrator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "keyType",
        type: "uint32"
      },
      {
        internalType: "uint8",
        name: "metadataType",
        type: "uint8"
      },
      {
        internalType: "contract IMetadataValidator",
        name: "validator",
        type: "address"
      }
    ],
    name: "setValidator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      },
      {
        internalType: "enum IKeyRegistry.KeyState",
        name: "state",
        type: "uint8"
      }
    ],
    name: "totalKeys",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "useNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "keyType",
        type: "uint32"
      },
      {
        internalType: "uint8",
        name: "metadataType",
        type: "uint8"
      }
    ],
    name: "validators",
    outputs: [
      {
        internalType: "contract IMetadataValidator",
        name: "validator",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];

// src/eth/contracts/abis/signedKeyRequestValidator.ts
init_esm_shims();
var signedKeyRequestValidatorABI = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_idRegistry",
        type: "address"
      },
      {
        internalType: "address",
        name: "_initialOwner",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "InvalidShortString",
    type: "error"
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "str",
        type: "string"
      }
    ],
    name: "StringTooLong",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [],
    name: "EIP712DomainChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferStarted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldIdRegistry",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newIdRegistry",
        type: "address"
      }
    ],
    name: "SetIdRegistry",
    type: "event"
  },
  {
    inputs: [],
    name: "METADATA_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "domainSeparatorV4",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "eip712Domain",
    outputs: [
      {
        internalType: "bytes1",
        name: "fields",
        type: "bytes1"
      },
      {
        internalType: "string",
        name: "name",
        type: "string"
      },
      {
        internalType: "string",
        name: "version",
        type: "string"
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "verifyingContract",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32"
      },
      {
        internalType: "uint256[]",
        name: "extensions",
        type: "uint256[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "requestFid",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "requestSigner",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256"
          }
        ],
        internalType: "struct SignedKeyRequestValidator.SignedKeyRequestMetadata",
        name: "metadata",
        type: "tuple"
      }
    ],
    name: "encodeMetadata",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "structHash",
        type: "bytes32"
      }
    ],
    name: "hashTypedDataV4",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "idRegistry",
    outputs: [
      {
        internalType: "contract IdRegistryLike",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_idRegistry",
        type: "address"
      }
    ],
    name: "setIdRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      },
      {
        internalType: "bytes",
        name: "key",
        type: "bytes"
      },
      {
        internalType: "bytes",
        name: "signedKeyRequestBytes",
        type: "bytes"
      }
    ],
    name: "validate",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];

// src/eth/contracts/abis/storageRegistry.ts
init_esm_shims();
var storageRegistryABI = [
  {
    inputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "_priceFeed",
        type: "address"
      },
      {
        internalType: "contract AggregatorV3Interface",
        name: "_uptimeFeed",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_initialUsdUnitPrice",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_initialMaxUnits",
        type: "uint256"
      },
      {
        internalType: "address",
        name: "_initialVault",
        type: "address"
      },
      {
        internalType: "address",
        name: "_initialRoleAdmin",
        type: "address"
      },
      {
        internalType: "address",
        name: "_initialOwner",
        type: "address"
      },
      {
        internalType: "address",
        name: "_initialOperator",
        type: "address"
      },
      {
        internalType: "address",
        name: "_initialTreasurer",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "CallFailed",
    type: "error"
  },
  {
    inputs: [],
    name: "ContractDeprecated",
    type: "error"
  },
  {
    inputs: [],
    name: "ExceedsCapacity",
    type: "error"
  },
  {
    inputs: [],
    name: "GracePeriodNotOver",
    type: "error"
  },
  {
    inputs: [],
    name: "IncompleteRound",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidAddress",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidAmount",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidBatchInput",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidDeprecationTimestamp",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidFixedPrice",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidMaxAnswer",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidMinAnswer",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidPayment",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidPrice",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidRangeInput",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidRoundTimestamp",
    type: "error"
  },
  {
    inputs: [],
    name: "NotOperator",
    type: "error"
  },
  {
    inputs: [],
    name: "NotOwner",
    type: "error"
  },
  {
    inputs: [],
    name: "NotTreasurer",
    type: "error"
  },
  {
    inputs: [],
    name: "PriceOutOfBounds",
    type: "error"
  },
  {
    inputs: [],
    name: "SequencerDown",
    type: "error"
  },
  {
    inputs: [],
    name: "StaleAnswer",
    type: "error"
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Paused",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "payer",
        type: "address"
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "units",
        type: "uint256"
      }
    ],
    name: "Rent",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "previousAdminRole",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "newAdminRole",
        type: "bytes32"
      }
    ],
    name: "RoleAdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      }
    ],
    name: "RoleGranted",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address"
      }
    ],
    name: "RoleRevoked",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldDuration",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newDuration",
        type: "uint256"
      }
    ],
    name: "SetCacheDuration",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldTimestamp",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newTimestamp",
        type: "uint256"
      }
    ],
    name: "SetDeprecationTimestamp",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldPrice",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newPrice",
        type: "uint256"
      }
    ],
    name: "SetFixedEthUsdPrice",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldPeriod",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newPeriod",
        type: "uint256"
      }
    ],
    name: "SetGracePeriod",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldAge",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newAge",
        type: "uint256"
      }
    ],
    name: "SetMaxAge",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldPrice",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newPrice",
        type: "uint256"
      }
    ],
    name: "SetMaxAnswer",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldMax",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newMax",
        type: "uint256"
      }
    ],
    name: "SetMaxUnits",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldPrice",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newPrice",
        type: "uint256"
      }
    ],
    name: "SetMinAnswer",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldPrice",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newPrice",
        type: "uint256"
      }
    ],
    name: "SetPrice",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldFeed",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newFeed",
        type: "address"
      }
    ],
    name: "SetPriceFeed",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldFeed",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newFeed",
        type: "address"
      }
    ],
    name: "SetUptimeFeed",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldVault",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newVault",
        type: "address"
      }
    ],
    name: "SetVault",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "Unpaused",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "Withdraw",
    type: "event"
  },
  {
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "fids",
        type: "uint256[]"
      },
      {
        internalType: "uint256",
        name: "units",
        type: "uint256"
      }
    ],
    name: "batchCredit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "fids",
        type: "uint256[]"
      },
      {
        internalType: "uint256[]",
        name: "units",
        type: "uint256[]"
      }
    ],
    name: "batchRent",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "start",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "end",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "units",
        type: "uint256"
      }
    ],
    name: "continuousCredit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "units",
        type: "uint256"
      }
    ],
    name: "credit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "deprecationTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "ethUsdPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "fixedEthUsdPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      }
    ],
    name: "getRoleAdmin",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256"
      }
    ],
    name: "getRoleMember",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      }
    ],
    name: "getRoleMemberCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "hasRole",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "lastPriceFeedUpdateBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "lastPriceFeedUpdateTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "maxUnits",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "prevEthUsdPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "units",
        type: "uint256"
      }
    ],
    name: "price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "priceFeed",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "priceFeedCacheDuration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "priceFeedMaxAge",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "priceFeedMaxAnswer",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "priceFeedMinAnswer",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "refreshPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "renounceRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fid",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "units",
        type: "uint256"
      }
    ],
    name: "rent",
    outputs: [
      {
        internalType: "uint256",
        name: "overpayment",
        type: "uint256"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [],
    name: "rentedUnits",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "role",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256"
      }
    ],
    name: "setCacheDuration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256"
      }
    ],
    name: "setDeprecationTimestamp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fixedPrice",
        type: "uint256"
      }
    ],
    name: "setFixedEthUsdPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "period",
        type: "uint256"
      }
    ],
    name: "setGracePeriod",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "age",
        type: "uint256"
      }
    ],
    name: "setMaxAge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maxPrice",
        type: "uint256"
      }
    ],
    name: "setMaxAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "max",
        type: "uint256"
      }
    ],
    name: "setMaxUnits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minPrice",
        type: "uint256"
      }
    ],
    name: "setMinAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "usdPrice",
        type: "uint256"
      }
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "feed",
        type: "address"
      }
    ],
    name: "setPriceFeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "feed",
        type: "address"
      }
    ],
    name: "setUptimeFeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vaultAddr",
        type: "address"
      }
    ],
    name: "setVault",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4"
      }
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "unitPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "uptimeFeed",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "uptimeFeedGracePeriod",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "usdUnitPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "vault",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];

// src/factories.ts
init_esm_shims();

// ../../node_modules/@faker-js/faker/dist/esm/index.mjs
init_esm_shims();

// ../../node_modules/@faker-js/faker/dist/esm/chunk-WQ5WD4ZB.mjs
init_esm_shims();
var e = ["####", "###", "##", "#"];
var t = ["{{address.city_prefix}}{{address.city_suffix}}"];
var r = ["\u81FA\u5317", "\u65B0\u5317", "\u6843\u5712", "\u81FA\u4E2D", "\u81FA\u5357", "\u9AD8\u96C4", "\u57FA\u9686", "\u65B0\u7AF9", "\u5609\u7FA9", "\u82D7\u6817", "\u5F70\u5316", "\u5357\u6295", "\u96F2\u6797", "\u5C4F\u6771", "\u5B9C\u862D", "\u82B1\u84EE", "\u81FA\u6771", "\u6F8E\u6E56", "\u91D1\u9580", "\u9023\u6C5F"];
var o = ["\u7E23", "\u5E02"];
var i = ["Taiwan (R.O.C.)"];
var m = ["######"];
var f = ["\u798F\u5EFA\u7701", "\u53F0\u7063\u7701"];
var a = ["\u5317", "\u65B0\u5317", "\u6843", "\u4E2D", "\u5357", "\u9AD8", "\u57FA", "\u7AF9\u5E02", "\u5609\u5E02", "\u7AF9\u7E23", "\u82D7", "\u5F70", "\u6295", "\u96F2", "\u5609\u7E23", "\u5B9C", "\u82B1", "\u6771", "\u6F8E", "\u91D1", "\u99AC"];
var s = ["{{name.last_name}}{{address.street_suffix}}"];
var d = { normal: "{{address.street}}{{address.buildingNumber}}\u865F", full: "{{address.street}}{{address.buildingNumber}}\u865F {{address.secondaryAddress}}" };
var p = ["\u8857", "\u8DEF", "\u5317\u8DEF", "\u5357\u8DEF", "\u6771\u8DEF", "\u897F\u8DEF"];
var y = { building_number: e, city: t, city_prefix: r, city_suffix: o, default_country: i, postcode: m, state: f, state_abbr: a, street: s, street_address: d, street_suffix: p };
var n = y;
var u = ["\u4FCA\u99B3", "\u4FEE\u5091", "\u4FEE\u6F54", "\u5049\u5BB8", "\u5049\u6FA4", "\u5049\u797A", "\u5049\u8AA0", "\u5065\u67CF", "\u5065\u96C4", "\u51F1\u745E", "\u535A\u6587", "\u535A\u6FE4", "\u535A\u8D85", "\u541B\u6D69", "\u54F2\u701A", "\u5609\u61FF", "\u5609\u7199", "\u5929\u5B87", "\u5929\u78CA", "\u5929\u7FCA", "\u5B50\u6DB5", "\u5B50\u8ED2", "\u5B50\u9A2B", "\u5B50\u9ED8", "\u5C55\u9D6C", "\u5CFB\u7199", "\u5EFA\u8F1D", "\u5F18\u6587", "\u5FD7\u5F37", "\u5FD7\u6FA4", "\u601D\u6DFC", "\u601D\u6E90", "\u601D\u8070", "\u601D\u9060", "\u61FF\u8ED2", "\u632F\u5BB6", "\u64CE\u5B87", "\u64CE\u84BC", "\u6587\u535A", "\u6587\u660A", "\u6587\u8ED2", "\u65ED\u582F", "\u660A\u5929", "\u660A\u5F37", "\u660A\u7131", "\u660A\u7136", "\u660E\u54F2", "\u660E\u6770", "\u660E\u8ED2", "\u660E\u8F1D", "\u6649\u9D6C", "\u665F\u777F", "\u667A\u5BB8", "\u667A\u6DF5", "\u667A\u8F1D", "\u66C9\u535A", "\u66C9\u562F", "\u6893\u6668", "\u6977\u745E", "\u69AE\u8ED2", "\u6A02\u99D2", "\u6B63\u8C6A", "\u6D69\u5B87", "\u6D69\u7136", "\u6D69\u8ED2", "\u6FA4\u6D0B", "\u701F\u7136", "\u708E\u5F6C", "\u70AB\u660E", "\u715C\u57CE", "\u715C\u797A", "\u71A0\u5F64", "\u71C1\u5049", "\u71C1\u78CA", "\u71C1\u83EF", "\u71C1\u9716", "\u745E\u9716", "\u747E\u745C", "\u7693\u8ED2", "\u777F\u6DF5", "\u7ACB\u679C", "\u7ACB\u8AA0", "\u7ACB\u8ED2", "\u7ACB\u8F1D", "\u7B11\u611A", "\u7D39\u8F1D", "\u7D39\u9F4A", "\u8000\u5091", "\u8070\u5065", "\u80E4\u7965", "\u81F4\u9060", "\u82D1\u535A", "\u8A9E\u5802", "\u8D8A\u5F6C", "\u8D8A\u6FA4", "\u9060\u822A", "\u91D1\u946B", "\u923A\u8ED2", "\u9326\u7A0B", "\u946B\u78CA", "\u946B\u9D6C", "\u96E8\u6FA4", "\u96EA\u677E", "\u9756\u742A", "\u98A8\u83EF", "\u9D3B\u6FE4", "\u9D3B\u714A", "\u9D6C\u6FE4", "\u9D6C\u714A", "\u9D6C\u98DB", "\u9DB4\u8ED2", "\u9DFA\u6D0B", "\u9ECE\u6615"];
var l = ["\u738B", "\u674E", "\u5F35", "\u5289", "\u9673", "\u694A", "\u9EC3", "\u5433", "\u8D99", "\u9031", "\u5F90", "\u5B6B", "\u99AC", "\u6731", "\u80E1", "\u6797", "\u90ED", "\u4F55", "\u9AD8", "\u7F85", "\u912D", "\u6881", "\u8B1D", "\u5B8B", "\u5510", "\u8A31", "\u9127", "\u99AE", "\u97D3", "\u66F9", "\u66FE", "\u5F6D", "\u856D", "\u8521", "\u6F58", "\u7530", "\u8463", "\u8881", "\u65BC", "\u9918", "\u8449", "\u8523", "\u675C", "\u8607", "\u9B4F", "\u7A0B", "\u5442", "\u4E01", "\u6C88", "\u4EFB", "\u59DA", "\u76E7", "\u5085", "\u9418", "\u59DC", "\u5D14", "\u8B5A", "\u5ED6", "\u7BC4", "\u6C6A", "\u9678", "\u91D1", "\u77F3", "\u6234", "\u8CC8", "\u97CB", "\u590F", "\u90B1", "\u65B9", "\u4FAF", "\u9112", "\u718A", "\u5B5F", "\u79E6", "\u767D", "\u6C5F", "\u95BB", "\u859B", "\u5C39", "\u6BB5", "\u96F7", "\u9ECE", "\u53F2", "\u9F8D", "\u9676", "\u8CC0", "\u9867", "\u6BDB", "\u90DD", "\u9F94", "\u90B5", "\u842C", "\u9322", "\u56B4", "\u8CF4", "\u8983", "\u6D2A", "\u6B66", "\u83AB", "\u5B54"];
var x = ["{{name.first_name}}{{name.last_name}}"];
var D = { first_name: u, last_name: l, name: x };
var _ = D;
var c = ["0#-#######", "02-########", "09##-######"];
var h = { formats: c };
var b = h;
var N = { title: "Chinese (Taiwan)", address: n, name: _, phone_number: b };
var ie = N;

// ../../node_modules/@faker-js/faker/dist/esm/chunk-N54TB7R3.mjs
init_esm_shims();
var e2 = ["{{address.city_prefix}} {{name.firstName}}{{address.city_suffix}}", "{{address.city_prefix}} {{name.firstName}}", "{{name.firstName}}{{address.city_suffix}}", "{{name.lastName}}{{address.city_suffix}}"];
var a2 = ["South Africa"];
var i2 = ["#####", "####"];
var o2 = ["{{name.firstName}} {{address.street_suffix}}", "{{name.lastName}} {{address.street_suffix}}"];
var k = { city: e2, default_country: a2, postcode: i2, street: o2 };
var n2 = k;
var l2 = ["082 ### ####", "084 ### ####", "083 ### ####", "065 ### ####", "082#######", "082 #######"];
var y2 = { formats: l2 };
var t2 = y2;
var u2 = ["Pty Ltd", "Ltd", "CC"];
var S = { suffix: u2 };
var h2 = S;
var s2 = ["co.za", "com", "org.za", "info", "net.za"];
var w = { domain_suffix: s2 };
var m2 = w;
var r2 = ["Amahle", "Ayanda", "Ayize", "Buhle", "Busisiwe", "Duduzile", "Hlengiwe", "Inyoni", "Isisa", "Jabulile", "Khanyisile", "Khethiwe", "Khulekani", "Lerato", "Liyana", "Lukhona", "Mbalienhle", "Mhambi", "Mthunzi", "Nandi", "Ndondoloza", "Nhlakanipho", "Nkosingiphile", "Nofoto", "Nokuthula", "Nolwazi", "Nomvula", "Nonhlanhla", "Nonjabulo", "Nonkululeko", "Nozipho", "Ntokozo", "Ntombizodwa", "Samukelisiwe", "Sibongile", "Sindisiwe", "Sinenhlanhla", "Siphephelo", "Sizakele", "Sizani", "Thabisa", "Thadie", "Thobeka", "Thulisile", "Uluthando", "Ulwazi", "Yibanathi", "Zanele", "Zobuhle"];
var f2 = ["Amahle", "Anele", "Ayanda", "Ayize", "Bafana", "Bangizwe", "Bhekimuzi", "Bhekizizwe", "Bhekumbuso", "Bonginkosi", "Buhle", "Busisiwe", "Duduzile", "Dumisani", "Fanyana", "Funani", "Gatsha", "Hlengiwe", "Inyoni", "Isisa", "Jabulile", "Kagiso", "Kgabu", "Khanyisile", "Khethiwe", "Khulekani", "Langa", "Lerato", "Linda", "Liyana", "Lukhona", "Lungelo", "Lwandle", "Mandla", "Maphikelela", "Mbalienhle", "Mhambi", "Mpilo", "Mpumelelo", "Msizi", "Mthunzi", "Musawenkosi", "Nandi", "Ndleleni", "Ndondoloza", "Nhlakanipho", "Nkanyezi", "Nkosenye", "Nkosingiphile", "Nkosinhle", "Nkosiyabo", "Nofoto", "Nokuthula", "Nolwazi", "Nomvula", "Nonhlanhla", "Nonjabulo", "Nonkululeko", "Nozipho", "Ntokozo", "Ntombizodwa", "Phila", "Philani", "Phiwokwakhe", "Samukelisiwe", "Sanele", "Sfiso", "Shaka", "Sibongile", "Sibusiso", "Sifiso", "Sindisiwe", "Sinenhlanhla", "Siphephelo", "Siphiwe", "Sipho", "Sithembiso", "Siyanda", "Sizakele", "Sizani", "Solomon", "Thabisa", "Thadie", "Thamsanqa", "Thando", "Themba", "Thobeka", "Thulani", "Thulisile", "Uluthando", "Ulwazi", "Velaphi", "Vusumuzi", "Yibanathi", "Zanele", "Zenzele", "Zithulele", "Zobuhle"];
var d2 = ["Bayeni", "Bengu", "Bhembe", "Bhengani", "Bhengu", "Bhuyeni", "Biyela", "Buthelezi", "Cebekhulu", "Cele", "Chiliza", "Delazy", "Dhlomo", "Dingiswayo", "Dlamini", "Dube", "Fuze", "Gabhezi", "Gama", "Gigaba", "Guliwe", "Gumede", "Gwacela", "Gwala", "Hlongwa", "Khawula", "Khumalo", "Khuzwayo", "Kunene", "Lamula", "Lembede", "Luthuli", "Mabhida", "Mabizela", "Maduma", "Magoza", "Malinga", "Maphisa", "Mashinini", "Mavundla", "Mbatha", "Mbende", "Mbuso", "Mehloluhlaza", "Mfeka", "Mfumu", "Mgenge", "Mkhatshwa", "Moseley", "Mqwebu", "Msibi", "Mthembu", "Mthethwa", "Mtolo", "Musi", "Ncusi", "Ndandali", "Ndebele", "Ngcolosi", "Ngema", "Ngubane", "Ngwazi", "Nhleko", "Nomvethe", "Nondlela", "Nonyana", "Nozulu", "Nsele", "Ntanzi", "Ntombela", "Nyanda", "Nzimande", "Radebe", "Seme", "Senzangakhona", "Shezi", "Sibiya", "Sithuli", "Siwele", "Siyaya", "Sokhela", "Sondisa", "Sothole", "Thoyana", "Thumbeza", "Thusi", "Tshabalala", "Vezi", "Vilakazi", "Wosiyane", "Yengwa", "Zondi", "Zondo", "Zubane", "Zuma", "Zungu"];
var p2 = ["Bonginkosi", "Kagiso", "Bhekizizwe", "Bhekumbuso", "Shaka", "Funani", "Kgabu", "Solomon", "Gatsha", "Langa", "Phila", "Msizi", "Nkosiyabo", "Linda", "Mpilo", "Siyanda", "Nkanyezi", "Bafana", "Lwandle", "Sfiso", "Thulani", "Thando", "Sanele", "Anele", "Lungelo", "Dumisani", "Bangizwe", "Fanyana", "Bhekimuzi", "Mandla", "Maphikelela", "Mpumelelo", "Mthunzi", "Philani", "Musawenkosi", "Nkosenye", "Nkosinhle", "Phiwokwakhe", "Sifiso", "Zithulele", "Sithembiso", "Sipho", "Siphiwe", "Sibusiso", "Velaphi", "Thamsanqa", "Vusumuzi", "Themba", "Zenzele", "Ndleleni"];
var M = { female_first_name: r2, first_name: f2, last_name: d2, male_first_name: p2 };
var N2 = M;
var z = ["01# ### #####", "02# ### #####", "03# ### #####", "04# ### #####", "05# ### #####", "0800 ### ###", "0860 ### ###", "01#########", "01# ########"];
var g = { formats: z };
var b2 = g;
var c2 = { title: "Zulu (South Africa)", address: n2, cell_phone: t2, company: h2, internet: m2, name: N2, phone_number: b2 };
var ue = c2;

// ../../node_modules/@faker-js/faker/dist/esm/chunk-CNLXCJ2I.mjs
init_esm_shims();
var e3 = ["###"];
var t3 = ["{{address.city_name}}"];
var o3 = ["\u0410\u0431\u0430\u043A\u0430\u043D", "\u0410\u0431\u0438\u043D\u0441\u043A", "\u0410\u0433\u0430\u0442\u0430", "\u0410\u0433\u0438\u043D\u0441\u043A\u043E\u0435 (\u0417\u0430\u0431\u0430\u0439\u043A.)", "\u0410\u0434\u043B\u0435\u0440", "\u0410\u0434\u044B\u0433\u0435\u0439\u0441\u043A", "\u0410\u0437\u043E\u0432 (\u0420\u043E\u0441\u0442.)", "\u0410\u043B\u0430\u0433\u0438\u0440", "\u0410\u043B\u0430\u043F\u0430\u0435\u0432\u0441\u043A", "\u0410\u043B\u0434\u0430\u043D", "\u0410\u043B\u0435\u043A\u0441\u0430\u043D\u0434\u0440\u043E\u0432", "\u0410\u043B\u0435\u043A\u0441\u0430\u043D\u0434\u0440\u043E\u0432 \u0413\u0430\u0439", "\u0410\u043B\u0435\u043A\u0441\u0430\u043D\u0434\u0440\u043E\u0432\u0441\u043A", "\u0410\u043B\u0435\u043A\u0441\u0430\u043D\u0434\u0440\u043E\u0432\u0441\u043A-\u0421\u0430\u0445\u0430\u043B\u0438\u043D\u0441\u043A\u0438\u0439", "\u0410\u043B\u0435\u043A\u0441\u0438\u043D", "\u0410\u043C\u0434\u0435\u0440\u043C\u0430", "\u0410\u043C\u0443\u0440\u0441\u043A", "\u0410\u043D\u0430\u0434\u044B\u0440\u044C", "\u0410\u043D\u0430\u043F\u0430", "\u0410\u043D\u0433\u0430\u0440\u0441\u043A", "\u0410\u043D\u0434\u0440\u0435\u0430\u043F\u043E\u043B\u044C", "\u0410\u043D\u0438\u0432\u0430", "\u0410\u043F\u0430\u0442\u0438\u0442\u044B", "\u0410\u043F\u0440\u0435\u043B\u0435\u0432\u043A\u0430", "\u0410\u043F\u0448\u0435\u0440\u043E\u043D\u0441\u043A", "\u0410\u0440\u0433\u0430\u044F\u0448", "\u0410\u0440\u0434\u043E\u043D", "\u0410\u0440\u0437\u0430\u043C\u0430\u0441", "\u0410\u0440\u043C\u0430\u0432\u0438\u0440", "\u0410\u0440\u0441\u0435\u043D\u044C\u0435\u0432", "\u0410\u0440\u0442\u0435\u043C", "\u0410\u0440\u0445\u0430\u043D\u0433\u0435\u043B\u044C\u0441\u043A", "\u0410\u0440\u0445\u044B\u0437", "\u0410\u0440\u0448\u0430\u043D (\u0411\u0443\u0440\u044F\u0442.)", "\u0410\u0441\u0431\u0435\u0441\u0442", "\u0410\u0441\u0438\u043D\u043E", "\u0410\u0441\u0442\u0440\u0430\u0445\u0430\u043D\u044C", "\u0410\u0445\u0442\u0443\u0431\u0438\u043D\u0441\u043A", "\u0410\u0447\u0438\u043D\u0441\u043A", "\u0410\u0447\u0445\u043E\u0439 \u041C\u0430\u0440\u0442\u0430\u043D", "\u0410\u0448\u0430", "\u0411\u0430\u0432\u043B\u044B", "\u0411\u0430\u0439\u043A\u0430\u043B\u044C\u0441\u043A", "\u0411\u0430\u043A\u0441\u0430\u043D", "\u0411\u0430\u043B\u0430\u0448\u0438\u0445\u0430", "\u0411\u0430\u043B\u0430\u0448\u043E\u0432", "\u0411\u0430\u043B\u0442\u0438\u0439\u0441\u043A", "\u0411\u0430\u0440\u0433\u0443\u0437\u0438\u043D", "\u0411\u0430\u0440\u043D\u0430\u0443\u043B", "\u0411\u0430\u0442\u0430\u0439\u0441\u043A", "\u0411\u0435\u043B\u0433\u043E\u0440\u043E\u0434", "\u0411\u0435\u043B\u043E\u0433\u043E\u0440\u0441\u043A (\u0410\u043C\u0443\u0440.)", "\u0411\u0435\u043B\u043E\u043A\u0443\u0440\u0438\u0445\u0430", "\u0411\u0435\u043B\u043E\u043C\u043E\u0440\u0441\u043A", "\u0411\u0435\u043B\u043E\u0440\u0435\u0446\u043A", "\u0411\u0435\u043B\u043E\u0440\u0435\u0447\u0435\u043D\u0441\u043A", "\u0411\u0435\u043B\u043E\u044F\u0440\u0441\u043A\u0438\u0439", "\u0411\u0435\u043B\u044B\u0439 \u042F\u0440 (\u0422\u043E\u043C\u0441\u043A.)", "\u0411\u0435\u0440\u0435\u0437\u043D\u0438\u043A\u0438", "\u0411\u0435\u0441\u043B\u0430\u043D", "\u0411\u0438\u0439\u0441\u043A", "\u0411\u0438\u043B\u0438\u0431\u0438\u043D\u043E", "\u0411\u0438\u0440\u043E\u0431\u0438\u0434\u0436\u0430\u043D", "\u0411\u0438\u0440\u0441\u043A", "\u0411\u043B\u0430\u0433\u043E\u0432\u0435\u0449\u0435\u043D\u0441\u043A (\u0410\u043C\u0443\u0440.)", "\u0411\u043E\u0433\u0443\u0447\u0430\u0440", "\u0411\u043E\u0434\u0430\u0439\u0431\u043E", "\u0411\u043E\u043B\u043E\u0433\u043E\u0435", "\u0411\u043E\u043C\u043D\u0430\u043A", "\u0411\u043E\u0440\u0437\u044F", "\u0411\u043E\u0440\u043E\u0432\u0441\u043A", "\u0411\u0440\u0430\u0442\u0441\u043A", "\u0411\u0440\u0435\u0434\u044B", "\u0411\u0440\u043E\u043D\u043D\u0438\u0446\u044B", "\u0411\u0440\u044F\u043D\u0441\u043A", "\u0411\u0443\u0433\u0443\u043B\u044C\u043C\u0430", "\u0411\u0443\u0433\u0443\u0440\u0443\u0441\u043B\u0430\u043D", "\u0411\u0443\u0434\u0435\u043D\u043D\u043E\u0432\u0441\u043A", "\u0411\u0443\u0437\u0443\u043B\u0443\u043A", "\u0411\u0443\u0439\u043D\u0430\u043A\u0441\u043A", "\u0411\u044B\u043A\u043E\u0432\u043E (\u043C\u0435\u0442\u0435\u043E\u0441\u0442.)", "\u0412\u0430\u043B\u0430\u0430\u043C", "\u0412\u0430\u043B\u0434\u0430\u0439", "\u0412\u0435\u0434\u0435\u043D\u043E", "\u0412\u0435\u043B\u0438\u043A\u0438\u0435 \u041B\u0443\u043A\u0438", "\u0412\u0435\u043B\u0438\u043A\u0438\u0439 \u0423\u0441\u0442\u044E\u0433", "\u0412\u0435\u043D\u0434\u0438\u043D\u0433\u0430", "\u0412\u0435\u0440\u0435\u0449\u0430\u0433\u0438\u043D\u043E (\u041F\u0435\u0440\u043C.)", "\u0412\u0435\u0440\u0445\u043D\u0435\u0435 \u041F\u0435\u043D\u0436\u0438\u043D\u043E", "\u0412\u0435\u0440\u0445\u043D\u0438\u0439 \u0411\u0430\u0441\u043A\u0443\u043D\u0447\u0430\u043A", "\u0412\u0435\u0440\u0445\u043D\u0438\u0439 \u0422\u0430\u0433\u0438\u043B", "\u0412\u0435\u0440\u0445\u043D\u0438\u0439 \u0423\u0444\u0430\u043B\u0435\u0439", "\u0412\u0435\u0440\u0445\u043E\u0442\u0443\u0440\u044C\u0435", "\u0412\u0435\u0440\u0445\u043E\u044F\u043D\u0441\u043A", "\u0412\u0438\u0434\u043D\u043E\u0435", "\u0412\u0438\u043B\u044E\u0439\u0441\u043A", "\u0412\u0438\u0442\u0438\u043C", "\u0412\u043B\u0430\u0434\u0438\u0432\u043E\u0441\u0442\u043E\u043A", "\u0412\u043B\u0430\u0434\u0438\u043A\u0430\u0432\u043A\u0430\u0437", "\u0412\u043B\u0430\u0434\u0438\u043C\u0438\u0440", "\u0412\u043D\u0443\u043A\u043E\u0432\u043E (\u043C\u0435\u0442\u0435\u043E\u0441\u0442.)", "\u0412\u043E\u043B\u0433\u043E\u0433\u0440\u0430\u0434", "\u0412\u043E\u043B\u0433\u043E\u0434\u043E\u043D\u0441\u043A", "\u0412\u043E\u043B\u043E\u0433\u0434\u0430", "\u0412\u043E\u043B\u043E\u043A\u043E\u043B\u0430\u043C\u0441\u043A", "\u0412\u043E\u043B\u0445\u043E\u0432", "\u0412\u043E\u0440\u043A\u0443\u0442\u0430", "\u0412\u043E\u0440\u043E\u043D\u0435\u0436", "\u0412\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u0441\u043A", "\u0412\u043E\u0442\u043A\u0438\u043D\u0441\u043A", "\u0412\u0441\u0435\u0432\u043E\u043B\u043E\u0436\u0441\u043A", "\u0412\u0443\u043A\u0442\u044B\u043B", "\u0412\u044B\u0431\u043E\u0440\u0433", "\u0412\u044B\u0442\u0435\u0433\u0440\u0430", "\u0412\u044F\u0437\u044C\u043C\u0430", "\u0413\u0430\u0432\u0440\u0438\u043B\u043E\u0432-\u042F\u043C", "\u0413\u0430\u0433\u0430\u0440\u0438\u043D", "\u0413\u0430\u043B\u0438\u0447", "\u0413\u0430\u0442\u0447\u0438\u043D\u0430", "\u0413\u0434\u043E\u0432", "\u0413\u0435\u043B\u0435\u043D\u0434\u0436\u0438\u043A", "\u0413\u043B\u0430\u0437\u043E\u0432", "\u0413\u043E\u043B\u0438\u0446\u044B\u043D\u043E", "\u0413\u043E\u0440\u043D\u043E-\u0410\u043B\u0442\u0430\u0439\u0441\u043A", "\u0413\u043E\u0440\u043E\u0434\u043E\u0432\u0438\u043A\u043E\u0432\u0441\u043A", "\u0413\u043E\u0440\u044F\u0447\u0438\u0439 \u041A\u043B\u044E\u0447", "\u0413\u043E\u0440\u044F\u0447\u0438\u043D\u0441\u043A", "\u0413\u0440\u0435\u043C\u044F\u0447\u0438\u043D\u0441\u043A (\u0411\u0443\u0440\u044F\u0442.)", "\u0413\u0440\u0435\u043C\u044F\u0447\u0438\u043D\u0441\u043A (\u041F\u0435\u0440\u043C.)", "\u0413\u0440\u043E\u0437\u043D\u044B\u0439", "\u0413\u0443\u0431\u0430\u0445\u0430", "\u0413\u0443\u0431\u043A\u0438\u043D", "\u0413\u0443\u0431\u043A\u0438\u043D\u0441\u043A\u0438\u0439", "\u0413\u0443\u0434\u0435\u0440\u043C\u0435\u0441", "\u0413\u0443\u0441\u044C-\u0425\u0440\u0443\u0441\u0442\u0430\u043B\u044C\u043D\u044B\u0439", "\u0414\u0430\u0433\u043E\u043C\u044B\u0441", "\u0414\u0430\u043B\u043C\u0430\u0442\u043E\u0432\u043E", "\u0414\u0430\u043D\u043A\u043E\u0432", "\u0414\u0432\u0438\u043D\u0441\u043A\u043E\u0439", "\u0414\u0435\u0440\u0431\u0435\u043D\u0442", "\u0414\u0436\u0435\u0439\u0440\u0430\u0445", "\u0414\u0436\u0443\u0431\u0433\u0430", "\u0414\u0437\u0435\u0440\u0436\u0438\u043D\u0441\u043A", "\u0414\u0438\u0432\u043D\u043E\u0433\u043E\u0440\u0441\u043A", "\u0414\u0438\u043A\u0441\u043E\u043D", "\u0414\u043C\u0438\u0442\u0440\u043E\u0432", "\u0414\u043D\u043E", "\u0414\u043E\u0431\u0440\u044F\u043D\u043A\u0430", "\u0414\u043E\u043B\u0438\u043D\u0441\u043A", "\u0414\u043E\u043C\u0431\u0430\u0439", "\u0414\u043E\u043C\u043E\u0434\u0435\u0434\u043E\u0432\u043E", "\u0414\u0443\u0431\u043D\u0430", "\u0414\u0443\u0434\u0438\u043D\u043A\u0430", "\u0415\u0433\u043E\u0440\u044C\u0435\u0432\u0441\u043A", "\u0415\u0439\u0441\u043A", "\u0415\u043A\u0430\u0442\u0435\u0440\u0438\u043D\u0431\u0443\u0440\u0433", "\u0415\u043B\u0430\u0431\u0443\u0433\u0430", "\u0415\u043B\u0430\u0442\u044C\u043C\u0430", "\u0415\u043B\u0435\u0446", "\u0415\u043B\u044C\u043D\u044F", "\u0415\u043D\u0438\u0441\u0435\u0439\u0441\u043A", "\u0415\u0440\u0431\u043E\u0433\u0430\u0447\u0435\u043D", "\u0415\u0440\u0448\u043E\u0432", "\u0415\u0441\u0441\u0435\u043D\u0442\u0443\u043A\u0438", "\u0416\u0435\u043B\u0435\u0437\u043D\u043E\u0433\u043E\u0440\u0441\u043A(\u041A\u0443\u0440\u0441\u043A.)", "\u0416\u0438\u0433\u0430\u043D\u0441\u043A", "\u0416\u0438\u0433\u0443\u043B\u0435\u0432\u0441\u043A", "\u0416\u0443\u043A\u043E\u0432\u0441\u043A\u0438\u0439", "\u0417\u0430\u0431\u0430\u0439\u043A\u0430\u043B\u044C\u0441\u043A", "\u0417\u0430\u0432\u043E\u0434\u043E\u0443\u043A\u043E\u0432\u0441\u043A", "\u0417\u0430\u0432\u044C\u044F\u043B\u0438\u0445\u0430", "\u0417\u0430\u0440\u0430\u0439\u0441\u043A", "\u0417\u0432\u0435\u043D\u0438\u0433\u043E\u0440\u043E\u0434", "\u0417\u0435\u043B\u0435\u043D\u043E\u0433\u043E\u0440\u0441\u043A (\u041B\u0435\u043D\u0438\u043D.)", "\u0417\u0435\u043B\u0435\u043D\u043E\u0433\u0440\u0430\u0434", "\u0417\u043B\u0430\u0442\u043E\u0443\u0441\u0442", "\u0417\u043C\u0435\u0438\u043D\u043E\u0433\u043E\u0440\u0441\u043A", "\u0418\u0432\u0430\u043D\u043E\u0432\u043E", "\u0418\u0432\u0434\u0435\u043B\u044C", "\u0418\u0433\u0430\u0440\u043A\u0430", "\u0418\u0433\u043D\u0430\u0448\u0438\u043D\u043E", "\u0418\u0436\u0435\u0432\u0441\u043A", "\u0418\u0437\u0431\u0435\u0440\u0431\u0430\u0448", "\u0418\u043D\u0442\u0430", "\u0418\u0440\u0431\u0438\u0442", "\u0418\u0440\u043A\u0443\u0442\u0441\u043A", "\u0418\u0441\u0442\u0440\u0430", "\u0418\u0448\u0438\u043C", "\u0419\u043E\u0448\u043A\u0430\u0440-\u041E\u043B\u0430", "\u041A\u0430\u0431\u0430\u043D\u0441\u043A", "\u041A\u0430\u0436\u0438\u043C", "\u041A\u0430\u0437\u0430\u043D\u044C", "\u041A\u0430\u043B\u0430\u0447", "\u041A\u0430\u043B\u0430\u0447-\u043D\u0430-\u0414\u043E\u043D\u0443", "\u041A\u0430\u043B\u0430\u0447\u0438\u043D\u0441\u043A", "\u041A\u0430\u043B\u0435\u0432\u0430\u043B\u0430", "\u041A\u0430\u043B\u0438\u043D\u0438\u043D\u0433\u0440\u0430\u0434", "\u041A\u0430\u043B\u0443\u0433\u0430", "\u041A\u0430\u043B\u044F\u0437\u0438\u043D", "\u041A\u0430\u043C\u0435\u043D\u043D\u043E\u043C\u043E\u0441\u0442\u0441\u043A\u0438\u0439", "\u041A\u0430\u043C\u0435\u043D\u0441\u043A-\u0423\u0440\u0430\u043B\u044C\u0441\u043A\u0438\u0439", "\u041A\u0430\u043C\u0435\u043D\u0441\u043A-\u0428\u0430\u0445\u0442\u0438\u043D\u0441\u043A\u0438\u0439", "\u041A\u0430\u043C\u0435\u043D\u044C-\u043D\u0430-\u041E\u0431\u0438", "\u041A\u0430\u043C\u044B\u0448\u0438\u043D", "\u041A\u0430\u043C\u044B\u0448\u043B\u043E\u0432", "\u041A\u0430\u043D\u0434\u0430\u043B\u0430\u043A\u0448\u0430", "\u041A\u0430\u043D\u0435\u0432\u0441\u043A\u0430\u044F", "\u041A\u0430\u043D\u0441\u043A", "\u041A\u0430\u0440\u0430\u0431\u0443\u0434\u0430\u0445\u043A\u0435\u043D\u0442", "\u041A\u0430\u0440\u0430\u0431\u0443\u043B\u0430\u043A", "\u041A\u0430\u0440\u0430\u0447\u0430\u0435\u0432\u0441\u043A", "\u041A\u0430\u0440\u0433\u0430\u0441\u043E\u043A", "\u041A\u0430\u0440\u0433\u043E\u043F\u043E\u043B\u044C", "\u041A\u0430\u0440\u043F\u0438\u043D\u0441\u043A", "\u041A\u0430\u0440\u0442\u0430\u043B\u044B", "\u041A\u0430\u0441\u0438\u043C\u043E\u0432", "\u041A\u0430\u0441\u043F\u0438\u0439\u0441\u043A", "\u041A\u0430\u0442\u0430\u0432-\u0418\u0432\u0430\u043D\u043E\u0432\u0441\u043A", "\u041A\u0430\u0442\u0430\u0439\u0441\u043A", "\u041A\u0430\u0447\u043A\u0430\u043D\u0430\u0440", "\u041A\u0430\u0448\u0438\u0440\u0430", "\u041A\u0430\u0448\u0445\u0430\u0442\u0430\u0443", "\u041A\u0435\u0434\u0440\u043E\u0432\u044B\u0439", "\u041A\u0435\u0436\u043C\u0430", "\u041A\u0435\u043C\u0435\u0440\u043E\u0432\u043E", "\u041A\u0435\u0442\u0447\u0435\u043D\u0435\u0440\u044B", "\u041A\u0438\u0436\u0438", "\u041A\u0438\u0437\u0435\u043B", "\u041A\u0438\u0437\u0438\u043B\u044E\u0440\u0442", "\u041A\u0438\u0437\u043B\u044F\u0440", "\u041A\u0438\u043C\u0440\u044B", "\u041A\u0438\u043D\u0433\u0438\u0441\u0435\u043F\u043F", "\u041A\u0438\u043D\u0435\u0448\u043C\u0430", "\u041A\u0438\u0440\u0435\u043D\u0441\u043A", "\u041A\u0438\u0440\u0436\u0430\u0447", "\u041A\u0438\u0440\u0438\u0448\u0438", "\u041A\u0438\u0440\u043E\u0432 (\u0412\u044F\u0442\u043A\u0430)", "\u041A\u0438\u0440\u043E\u0432\u043E-\u0427\u0435\u043F\u0435\u0446\u043A", "\u041A\u0438\u0440\u043E\u0432\u0441\u043A (\u041C\u0443\u0440\u043C.)", "\u041A\u0438\u0440\u043E\u0432\u0441\u043A (\u041B\u0435\u043D\u0438\u043D.)", "\u041A\u0438\u0441\u043B\u043E\u0432\u043E\u0434\u0441\u043A", "\u041A\u043B\u0438\u043D", "\u041A\u043E\u0432\u0440\u043E\u0432", "\u041A\u043E\u0433\u0430\u043B\u044B\u043C", "\u041A\u043E\u043B\u043E\u043C\u043D\u0430", "\u041A\u043E\u043B\u043F\u0430\u0448\u0435\u0432\u043E", "\u041A\u043E\u043C\u0441\u043E\u043C\u043E\u043B\u044C\u0441\u043A-\u043D\u0430-\u0410\u043C\u0443\u0440\u0435", "\u041A\u043E\u043D\u0434\u043E\u043F\u043E\u0433\u0430", "\u041A\u043E\u0440\u043E\u043B\u0435\u0432", "\u041A\u043E\u0440\u0441\u0430\u043A\u043E\u0432", "\u041A\u043E\u0441\u0442\u043E\u043C\u0443\u043A\u0448\u0430", "\u041A\u043E\u0441\u0442\u0440\u043E\u043C\u0430", "\u041A\u043E\u0442\u0435\u043B\u044C\u043D\u0438\u0447", "\u041A\u043E\u0442\u043B\u0430\u0441", "\u041A\u043E\u0448-\u0410\u0433\u0430\u0447", "\u041A\u0440\u0430\u0441\u043D\u0430\u044F \u041F\u043E\u043B\u044F\u043D\u0430", "\u041A\u0440\u0430\u0441\u043D\u043E\u0432\u0438\u0448\u0435\u0440\u0441\u043A", "\u041A\u0440\u0430\u0441\u043D\u043E\u0433\u043E\u0440\u0441\u043A (\u041C\u043E\u0441\u043A.)", "\u041A\u0440\u0430\u0441\u043D\u043E\u0434\u0430\u0440", "\u041A\u0440\u0430\u0441\u043D\u043E\u043A\u0430\u043C\u0441\u043A", "\u041A\u0440\u0430\u0441\u043D\u043E\u0441\u0435\u043B\u044C\u043A\u0443\u043F", "\u041A\u0440\u0430\u0441\u043D\u043E\u0442\u0443\u0440\u044C\u0438\u043D\u0441\u043A", "\u041A\u0440\u0430\u0441\u043D\u043E\u0443\u0440\u0430\u043B\u044C\u0441\u043A", "\u041A\u0440\u0430\u0441\u043D\u043E\u0443\u0444\u0438\u043C\u0441\u043A", "\u041A\u0440\u0430\u0441\u043D\u043E\u044F\u0440\u0441\u043A", "\u041A\u0440\u043E\u043F\u043E\u0442\u043A\u0438\u043D (\u041A\u0440\u0430\u0441\u043D\u043E\u0434.)", "\u041A\u0440\u044B\u043C\u0441\u043A", "\u041A\u0443\u0434\u044B\u043C\u043A\u0430\u0440", "\u041A\u0443\u0437\u043D\u0435\u0446\u043A", "\u041A\u0443\u043B\u0443", "\u041A\u0443\u043B\u0443\u043D\u0434\u0430", "\u041A\u0443\u043D\u0433\u0443\u0440", "\u041A\u0443\u0440\u0433\u0430\u043D", "\u041A\u0443\u0440\u0433\u0430\u043D\u0438\u043D\u0441\u043A", "\u041A\u0443\u0440\u0438\u043B\u044C\u0441\u043A", "\u041A\u0443\u0440\u0441\u043A", "\u041A\u0443\u0440\u0442\u0430\u043C\u044B\u0448", "\u041A\u0443\u0440\u0443\u043C\u043A\u0430\u043D", "\u041A\u0443\u0440\u0447\u0430\u0442\u043E\u0432", "\u041A\u0443\u0449\u0435\u0432\u0441\u043A\u0430\u044F", "\u041A\u044B\u0437\u044B\u043B", "\u041A\u044B\u0440\u0435\u043D", "\u041A\u044B\u0448\u0442\u044B\u043C", "\u041A\u044F\u0445\u0442\u0430", "\u041B\u0430\u0431\u0438\u043D\u0441\u043A", "\u041B\u0430\u0431\u044B\u0442\u043D\u0430\u043D\u0433\u0438", "\u041B\u0430\u0433\u0430\u043D\u044C", "\u041B\u0430\u0437\u0430\u0440\u0435\u0432\u0441\u043A\u043E\u0435", "\u041B\u0435\u0441\u043D\u043E\u0439 (\u0421\u0432\u0435\u0440\u0434.)", "\u041B\u0438\u043F\u0435\u0446\u043A", "\u041B\u0438\u0441\u0442\u0432\u044F\u043D\u043A\u0430 (\u0418\u0440\u043A\u0443\u0442.)", "\u041B\u043E\u0434\u0435\u0439\u043D\u043E\u0435 \u041F\u043E\u043B\u0435", "\u041B\u043E\u0442\u043E\u0448\u0438\u043D\u043E", "\u041B\u0443\u0433\u0430", "\u041B\u0443\u0445\u043E\u0432\u0438\u0446\u044B", "\u041B\u044B\u0441\u044C\u0432\u0430", "\u041B\u044C\u0433\u043E\u0432", "\u041B\u044E\u0431\u0430\u043D\u044C", "\u041B\u044E\u0431\u0435\u0440\u0446\u044B", "\u041B\u044F\u043D\u0442\u043E\u0440", "\u041C\u0430\u0433\u0430\u0434\u0430\u043D", "\u041C\u0430\u0433\u0430\u0441", "\u041C\u0430\u0433\u043D\u0438\u0442\u043E\u0433\u043E\u0440\u0441\u043A", "\u041C\u0430\u0439\u043A\u043E\u043F", "\u041C\u0430\u043A\u0430\u0440\u043E\u0432", "\u041C\u0430\u043A\u0443\u0448\u0438\u043D\u043E", "\u041C\u0430\u043B\u0430\u044F \u0412\u0438\u0448\u0435\u0440\u0430", "\u041C\u0430\u043B\u0433\u043E\u0431\u0435\u043A", "\u041C\u0430\u043B\u043E\u044F\u0440\u043E\u0441\u043B\u0430\u0432\u0435\u0446", "\u041C\u0430\u0445\u0430\u0447\u043A\u0430\u043B\u0430", "\u041C\u0435\u0434\u043D\u043E\u0433\u043E\u0440\u0441\u043A", "\u041C\u0435\u0436\u0434\u0443\u0440\u0435\u0447\u0435\u043D\u0441\u043A\u0438\u0439", "\u041C\u0435\u0437\u0435\u043D\u044C", "\u041C\u0435\u043B\u0435\u0443\u0437", "\u041C\u0435\u0440\u0435\u043D\u0433\u0430", "\u041C\u0438\u0430\u0441\u0441", "\u041C\u0438\u043B\u043B\u0435\u0440\u043E\u0432\u043E", "\u041C\u0438\u043D\u0435\u0440\u0430\u043B\u044C\u043D\u044B\u0435 \u0412\u043E\u0434\u044B", "\u041C\u0438\u043D\u0443\u0441\u0438\u043D\u0441\u043A", "\u041C\u0438\u0440\u043D\u044B\u0439", "\u041C\u0438\u0447\u0443\u0440\u0438\u043D\u0441\u043A", "\u041C\u043E\u0436\u0430\u0439\u0441\u043A", "\u041C\u043E\u0436\u0433\u0430", "\u041C\u043E\u0437\u0434\u043E\u043A", "\u041C\u043E\u043A\u0448\u0430\u043D", "\u041C\u043E\u043D\u0447\u0435\u0433\u043E\u0440\u0441\u043A", "\u041C\u043E\u0440\u043E\u0437\u043E\u0432\u0441\u043A", "\u041C\u043E\u0440\u0448\u0430\u043D\u0441\u043A", "\u041C\u043E\u0441\u043A\u0432\u0430", "\u041C\u043E\u0441\u043A\u0432\u0430, \u041C\u0413\u0423", "\u041C\u043E\u0441\u0442\u043E\u0432\u0441\u043A\u043E\u0439", "\u041C\u0443\u0440\u0430\u0432\u043B\u0435\u043D\u043A\u043E", "\u041C\u0443\u0440\u0430\u0448\u0438", "\u041C\u0443\u0440\u043C\u0430\u043D\u0441\u043A", "\u041C\u0443\u0440\u043E\u043C", "\u041C\u0446\u0435\u043D\u0441\u043A", "\u041C\u044B\u0441 \u0428\u043C\u0438\u0434\u0442\u0430", "\u041C\u044B\u0442\u0438\u0449\u0438", "\u041D\u0430\u0431\u0435\u0440\u0435\u0436\u043D\u044B\u0435 \u0427\u0435\u043B\u043D\u044B", "\u041D\u0430\u0434\u044B\u043C", "\u041D\u0430\u0437\u0440\u0430\u043D\u044C", "\u041D\u0430\u043B\u044C\u0447\u0438\u043A", "\u041D\u0430\u0440\u043E-\u0424\u043E\u043C\u0438\u043D\u0441\u043A", "\u041D\u0430\u0440\u0442\u043A\u0430\u043B\u0430", "\u041D\u0430\u0440\u044B\u043C", "\u041D\u0430\u0440\u044C\u044F\u043D-\u041C\u0430\u0440", "\u041D\u0430\u0445\u043E\u0434\u043A\u0430", "\u041D\u0435\u0432\u0435\u043B\u044C\u0441\u043A", "\u041D\u0435\u0432\u0438\u043D\u043D\u043E\u043C\u044B\u0441\u0441\u043A", "\u041D\u0435\u0432\u044C\u044F\u043D\u0441\u043A", "\u041D\u0435\u043F\u043B\u044E\u0435\u0432\u043A\u0430", "\u041D\u0435\u0440\u0447\u0438\u043D\u0441\u043A", "\u041D\u0435\u0444\u0435\u0434\u043E\u0432\u0430", "\u041D\u0435\u0444\u0442\u0435\u0433\u043E\u0440\u0441\u043A (\u0421\u0430\u043C\u0430\u0440.)", "\u041D\u0435\u0444\u0442\u0435\u043A\u0430\u043C\u0441\u043A", "\u041D\u0435\u0444\u0442\u0435\u044E\u0433\u0430\u043D\u0441\u043A", "\u041D\u0438\u0436\u043D\u0435\u0432\u0430\u0440\u0442\u043E\u0432\u0441\u043A", "\u041D\u0438\u0436\u043D\u0435\u043A\u0430\u043C\u0441\u043A", "\u041D\u0438\u0436\u043D\u0435\u0443\u0434\u0438\u043D\u0441\u043A", "\u041D\u0438\u0436\u043D\u0438\u0439 \u041D\u043E\u0432\u0433\u043E\u0440\u043E\u0434", "\u041D\u0438\u0436\u043D\u0438\u0439 \u0422\u0430\u0433\u0438\u043B", "\u041D\u043E\u0432\u0430\u044F \u0418\u0433\u0438\u0440\u043C\u0430", "\u041D\u043E\u0432\u0433\u043E\u0440\u043E\u0434 \u0412\u0435\u043B\u0438\u043A\u0438\u0439", "\u041D\u043E\u0432\u043E\u043A\u0443\u0437\u043D\u0435\u0446\u043A", "\u041D\u043E\u0432\u043E\u043C\u0438\u0447\u0443\u0440\u0438\u043D\u0441\u043A", "\u041D\u043E\u0432\u043E\u043C\u043E\u0441\u043A\u043E\u0432\u0441\u043A", "\u041D\u043E\u0432\u043E\u0440\u043E\u0441\u0441\u0438\u0439\u043A\u0430", "\u041D\u043E\u0432\u043E\u0440\u043E\u0441\u0441\u0438\u0439\u0441\u043A", "\u041D\u043E\u0432\u043E\u0441\u0438\u0431\u0438\u0440\u0441\u043A", "\u041D\u043E\u0432\u043E\u0447\u0435\u0440\u043A\u0430\u0441\u0441\u043A", "\u041D\u043E\u0432\u044B\u0439 \u041E\u0441\u043A\u043E\u043B", "\u041D\u043E\u0432\u044B\u0439 \u0423\u0440\u0435\u043D\u0433\u043E\u0439", "\u041D\u043E\u0433\u0438\u043D\u0441\u043A (\u041C\u043E\u0441\u043A.)", "\u041D\u043E\u0433\u043B\u0438\u043A\u0438", "\u041D\u043E\u0440\u0438\u043B\u044C\u0441\u043A", "\u041D\u043E\u044F\u0431\u0440\u044C\u0441\u043A", "\u041D\u0443\u0440\u043B\u0430\u0442", "\u041D\u044F\u0433\u0430\u043D\u044C", "\u041D\u044F\u0437\u0435\u043F\u0435\u0442\u0440\u043E\u0432\u0441\u043A", "\u041E\u0431\u043D\u0438\u043D\u0441\u043A", "\u041E\u0431\u043E\u044F\u043D\u044C", "\u041E\u0431\u044A\u044F\u0447\u0435\u0432\u043E", "\u041E\u0434\u0438\u043D\u0446\u043E\u0432\u043E", "\u041E\u0437\u0435\u0440\u044B", "\u041E\u0439\u043C\u044F\u043A\u043E\u043D", "\u041E\u043A\u0442\u044F\u0431\u0440\u044C\u0441\u043A\u0438\u0439 (\u0411\u0430\u0448\u043A.)", "\u041E\u043A\u0442\u044F\u0431\u0440\u044C\u0441\u043A\u043E\u0435 (\u0425\u0430\u043D\u0442.)", "\u041E\u043A\u0442\u044F\u0431\u0440\u044C\u0441\u043A\u043E\u0435 (\u0427\u0435\u043B\u044F\u0431.)", "\u041E\u043B\u0435\u043D\u0435\u0433\u043E\u0440\u0441\u043A (\u042F\u043A\u0443\u0442.)", "\u041E\u043B\u0435\u043D\u0435\u043A", "\u041E\u043C\u0441\u043A", "\u041E\u043D\u0435\u0433\u0430", "\u041E\u0440\u0435\u043B", "\u041E\u0440\u0435\u043D\u0431\u0443\u0440\u0433", "\u041E\u0440\u0435\u0445\u043E\u0432\u043E-\u0417\u0443\u0435\u0432\u043E", "\u041E\u0440\u0441\u043A", "\u041E\u0441\u0430", "\u041E\u0441\u0442\u0430\u0448\u043A\u043E\u0432", "\u041E\u0445\u0430", "\u041E\u0445\u043E\u0442\u0441\u043A", "\u041F\u0430\u0432\u043B\u043E\u0432\u0441\u043A\u0430\u044F", "\u041F\u0430\u0432\u043B\u043E\u0432\u0441\u043A\u0438\u0439 \u041F\u043E\u0441\u0430\u0434", "\u041F\u0430\u043B\u0430\u043D\u0430", "\u041F\u0430\u0440\u0442\u0438\u0437\u0430\u043D\u0441\u043A", "\u041F\u0435\u0432\u0435\u043A", "\u041F\u0435\u043D\u0437\u0430", "\u041F\u0435\u0440\u0435\u0441\u043B\u0430\u0432\u043B\u044C-\u0417\u0430\u043B\u0435\u0441\u0441\u043A\u0438\u0439", "\u041F\u0435\u0440\u043C\u044C", "\u041F\u0435\u0442\u0440\u043E\u0437\u0430\u0432\u043E\u0434\u0441\u043A", "\u041F\u0435\u0442\u0440\u043E\u043F\u0430\u0432\u043B\u043E\u0432\u0441\u043A-\u041A\u0430\u043C\u0447\u0430\u0442\u0441\u043A\u0438\u0439", "\u041F\u0435\u0442\u0443\u0445\u043E\u0432\u043E", "\u041F\u0435\u0442\u0443\u0448\u043A\u0438", "\u041F\u0435\u0447\u0435\u043D\u0433\u0430", "\u041F\u0435\u0447\u043E\u0440\u0430", "\u041F\u0438\u043D\u0435\u0433\u0430", "\u041F\u043B\u0435\u0441", "\u041F\u043B\u0435\u0441\u0435\u0446\u043A", "\u041F\u043E\u0434\u043E\u043B\u044C\u0441\u043A", "\u041F\u043E\u0440\u043E\u043D\u0430\u0439\u0441\u043A", "\u041F\u043E\u044F\u0440\u043A\u043E\u0432\u043E", "\u041F\u0440\u0438\u043C\u043E\u0440\u0441\u043A\u043E-\u0410\u0445\u0442\u0430\u0440\u0441\u043A", "\u041F\u0440\u0438\u043E\u0437\u0435\u0440\u0441\u043A", "\u041F\u0440\u043E\u0445\u043B\u0430\u0434\u043D\u044B\u0439", "\u041F\u0441\u0435\u0431\u0430\u0439", "\u041F\u0441\u043A\u043E\u0432", "\u041F\u0443\u0448\u043A\u0438\u043D", "\u041F\u0443\u0448\u043A\u0438\u043D\u043E (\u041C\u043E\u0441\u043A.)", "\u041F\u0443\u0448\u043A\u0438\u043D\u0441\u043A\u0438\u0435 \u0413\u043E\u0440\u044B", "\u041F\u044B\u0448\u043C\u0430", "\u041F\u044F\u0442\u0438\u0433\u043E\u0440\u0441\u043A", "\u0420\u0430\u0434\u0443\u0436\u043D\u044B\u0439", "\u0420\u0430\u043C\u0435\u043D\u0441\u043A\u043E\u0435", "\u0420\u0435\u0431\u0440\u0438\u0445\u0430", "\u0420\u0435\u0432\u0434\u0430 (\u0421\u0432\u0435\u0440\u0434.)", "\u0420\u0436\u0435\u0432", "\u0420\u043E\u0441\u043B\u0430\u0432\u043B\u044C", "\u0420\u043E\u0441\u0441\u043E\u0448\u044C", "\u0420\u043E\u0441\u0442\u043E\u0432", "\u0420\u043E\u0441\u0442\u043E\u0432-\u043D\u0430-\u0414\u043E\u043D\u0443", "\u0420\u0443\u0431\u0446\u043E\u0432\u0441\u043A", "\u0420\u0443\u0437\u0430", "\u0420\u044B\u0431\u0438\u043D\u0441\u043A", "\u0420\u044B\u043B\u044C\u0441\u043A", "\u0420\u044F\u0436\u0441\u043A", "\u0420\u044F\u0437\u0430\u043D\u044C", "\u0421\u0430\u043B\u0430\u0432\u0430\u0442", "\u0421\u0430\u043B\u0435\u0445\u0430\u0440\u0434", "\u0421\u0430\u043B\u044C\u0441\u043A", "\u0421\u0430\u043C\u0430\u0440\u0430", "\u0421\u0430\u043D\u043A\u0442-\u041F\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433", "\u0421\u0430\u0440\u0430\u043D\u0441\u043A", "\u0421\u0430\u0440\u0430\u043F\u0443\u043B", "\u0421\u0430\u0440\u0430\u0442\u043E\u0432", "\u0421\u0430\u0440\u043E\u0432 (\u041C\u043E\u0440\u0434.)", "\u0421\u0430\u0441\u043E\u0432\u043E", "\u0421\u0430\u044F\u043D\u0441\u043A", "\u0421\u0432\u0435\u0442\u043B\u043E\u0433\u043E\u0440\u0441\u043A (\u041A\u0430\u043B\u0438\u043D.)", "\u0421\u0435\u0432\u0435\u0440\u043E-\u041A\u0443\u0440\u0438\u043B\u044C\u0441\u043A", "\u0421\u0435\u0432\u0435\u0440\u043E\u0431\u0430\u0439\u043A\u0430\u043B\u044C\u0441\u043A", "\u0421\u0435\u0432\u0435\u0440\u043E\u0434\u0432\u0438\u043D\u0441\u043A", "\u0421\u0435\u0432\u0435\u0440\u043E\u043C\u043E\u0440\u0441\u043A", "\u0421\u0435\u0432\u0435\u0440\u043E\u0443\u0440\u0430\u043B\u044C\u0441\u043A", "\u0421\u0435\u0439\u043C\u0447\u0430\u043D", "\u0421\u0435\u043C\u043B\u044F\u0447\u0438\u043A\u0438", "\u0421\u0435\u0440\u0430\u0444\u0438\u043C\u043E\u0432\u0438\u0447", "\u0421\u0435\u0440\u0433\u0438\u0435\u0432 \u041F\u043E\u0441\u0430\u0434", "\u0421\u0435\u0440\u0435\u0431\u0440\u044F\u043D\u044B\u0435 \u041F\u0440\u0443\u0434\u044B", "\u0421\u0435\u0440\u0435\u0434\u043D\u0438\u043A\u043E\u0432\u043E", "\u0421\u0435\u0440\u043E\u0432", "\u0421\u0435\u0440\u043F\u0443\u0445\u043E\u0432", "\u0421\u0438\u0431\u0430\u0439", "\u0421\u043A\u043E\u0432\u043E\u0440\u043E\u0434\u0438\u043D\u043E", "\u0421\u043B\u0430\u0432\u0433\u043E\u0440\u043E\u0434", "\u0421\u043B\u0430\u0432\u044F\u043D\u0441\u043A-\u043D\u0430-\u041A\u0443\u0431\u0430\u043D\u0438", "\u0421\u043B\u0430\u0434\u043A\u043E\u0432\u043E", "\u0421\u043B\u044E\u0434\u044F\u043D\u043A\u0430", "\u0421\u043C\u0438\u0440\u043D\u044B\u0445", "\u0421\u043C\u043E\u043B\u0435\u043D\u0441\u043A", "\u0421\u043D\u0435\u0436\u0438\u043D\u0441\u043A", "\u0421\u043D\u0435\u0436\u043D\u043E\u0433\u043E\u0440\u0441\u043A (\u041C\u0443\u0440\u043C.)", "\u0421\u043E\u0431\u043E\u043B\u0435\u0432\u043E", "\u0421\u043E\u0432\u0435\u0442\u0441\u043A\u0438\u0439", "\u0421\u043E\u043B\u0438\u043A\u0430\u043C\u0441\u043A", "\u0421\u043E\u043B\u043D\u0435\u0447\u043D\u043E\u0433\u043E\u0440\u0441\u043A", "\u0421\u043E\u043B\u043E\u0432\u043A\u0438", "\u0421\u043E\u043B\u044C-\u0418\u043B\u0435\u0446\u043A", "\u0421\u043E\u0440\u043E\u0447\u0438\u043D\u0441\u043A", "\u0421\u043E\u0440\u0442\u0430\u0432\u0430\u043B\u0430", "\u0421\u043E\u0441\u043D\u043E\u0432\u044B\u0439 \u0411\u043E\u0440", "\u0421\u043E\u0441\u043D\u043E\u0433\u043E\u0440\u0441\u043A", "\u0421\u043E\u0441\u044C\u0432\u0430 (\u0425\u0430\u043D\u0442.)", "\u0421\u043E\u0447\u0438", "\u0421\u0442\u0430\u0432\u0440\u043E\u043F\u043E\u043B\u044C", "\u0421\u0442\u0430\u0440\u0430\u044F \u0420\u0443\u0441\u0441\u0430", "\u0421\u0442\u0430\u0440\u044B\u0439 \u041E\u0441\u043A\u043E\u043B", "\u0421\u0442\u0435\u0440\u043B\u0438\u0442\u0430\u043C\u0430\u043A", "\u0421\u0442\u0440\u0435\u0436\u0435\u0432\u043E\u0439", "\u0421\u0442\u0443\u043F\u0438\u043D\u043E", "\u0421\u0443\u0437\u0434\u0430\u043B\u044C", "\u0421\u0443\u0437\u0443\u043D", "\u0421\u0443\u043D\u0442\u0430\u0440", "\u0421\u0443\u0440\u0433\u0443\u0442 (\u0425\u0430\u043D\u0442.)", "\u0421\u0443\u0441\u0443\u043C\u0430\u043D", "\u0421\u0443\u0445\u0438\u043D\u0438\u0447\u0438", "\u0421\u044B\u0437\u0440\u0430\u043D\u044C", "\u0421\u044B\u043A\u0442\u044B\u0432\u043A\u0430\u0440", "\u0422\u0430\u0432\u0434\u0430", "\u0422\u0430\u0433\u0430\u043D\u0440\u043E\u0433", "\u0422\u0430\u0439\u0448\u0435\u0442", "\u0422\u0430\u043B\u0434\u043E\u043C", "\u0422\u0430\u043C\u0431\u0435\u0439", "\u0422\u0430\u043C\u0431\u043E\u0432", "\u0422\u0430\u0440\u043A\u043E-\u0421\u0430\u043B\u0435", "\u0422\u0430\u0448\u0442\u0430\u0433\u043E\u043B", "\u0422\u0432\u0435\u0440\u044C", "\u0422\u0435\u0431\u0435\u0440\u0434\u0430", "\u0422\u0435\u043C\u0440\u044E\u043A", "\u0422\u0435\u0440\u0438\u0431\u0435\u0440\u043A\u0430", "\u0422\u0435\u0440\u043D\u0435\u0439", "\u0422\u0435\u0440\u0441\u043A\u043E\u043B", "\u0422\u0438\u043A\u0441\u0438", "\u0422\u0438\u043C\u0430\u0448\u0435\u0432\u0441\u043A", "\u0422\u0438\u0445\u0432\u0438\u043D", "\u0422\u0438\u0445\u043E\u0440\u0435\u0446\u043A", "\u0422\u043E\u0431\u043E\u043B\u044C\u0441\u043A", "\u0422\u043E\u043A\u043C\u0430", "\u0422\u043E\u043A\u0441\u043E\u0432\u043E", "\u0422\u043E\u043B\u044C\u044F\u0442\u0442\u0438", "\u0422\u043E\u043C\u0430\u0440\u0438", "\u0422\u043E\u043C\u043F\u0430", "\u0422\u043E\u043C\u0441\u043A", "\u0422\u043E\u0440\u0436\u043E\u043A", "\u0422\u043E\u0441\u043D\u043E", "\u0422\u043E\u0442\u044C\u043C\u0430", "\u0422\u0440\u043E\u0438\u0446\u043A (\u0427\u0435\u043B\u044F\u0431.)", "\u0422\u0440\u043E\u0438\u0446\u043A (\u041C\u043E\u0441\u043A.)", "\u0422\u0440\u043E\u0438\u0446\u043A\u043E-\u041F\u0435\u0447\u043E\u0440\u0441\u043A", "\u0422\u0443\u0430\u043F\u0441\u0435", "\u0422\u0443\u043B\u0430", "\u0422\u0443\u043B\u043F\u0430\u043D", "\u0422\u0443\u043B\u0443\u043D", "\u0422\u0443\u0440\u0430", "\u0422\u0443\u0440\u0443\u0445\u0430\u043D\u0441\u043A", "\u0422\u0443\u0442\u0430\u0435\u0432", "\u0422\u0443\u0442\u043E\u043D\u0447\u0430\u043D\u044B", "\u0422\u044B\u043C\u043E\u0432\u0441\u043A\u043E\u0435", "\u0422\u044B\u043D\u0434\u0430", "\u0422\u044B\u0440\u043D\u044B\u0430\u0443\u0437", "\u0422\u044E\u043C\u0435\u043D\u044C", "\u0423\u0432\u0430\u0440\u043E\u0432\u043E", "\u0423\u0433\u043B\u0435\u0433\u043E\u0440\u0441\u043A", "\u0423\u0433\u043B\u0438\u0447", "\u0423\u043B\u0430\u043D-\u0423\u0434\u044D", "\u0423\u043B\u044C\u044F\u043D\u043E\u0432\u0441\u043A", "\u0423\u0440\u0430\u0439", "\u0423\u0440\u0435\u043D\u0433\u043E\u0439", "\u0423\u0440\u0443\u0441-\u041C\u0430\u0440\u0442\u0430\u043D", "\u0423\u0440\u044E\u043F\u0438\u043D\u0441\u043A", "\u0423\u0441\u0438\u043D\u0441\u043A", "\u0423\u0441\u043C\u0430\u043D\u044C", "\u0423\u0441\u043E\u043B\u044C\u0435 \u0421\u0438\u0431\u0438\u0440\u0441\u043A\u043E\u0435", "\u0423\u0441\u0441\u0443\u0440\u0438\u0439\u0441\u043A", "\u0423\u0441\u0442\u044C-\u0411\u0430\u0440\u0433\u0443\u0437\u0438\u043D", "\u0423\u0441\u0442\u044C-\u0414\u0436\u0435\u0433\u0443\u0442\u0430", "\u0423\u0441\u0442\u044C-\u0418\u043B\u0438\u043C\u0441\u043A", "\u0423\u0441\u0442\u044C-\u0418\u0448\u0438\u043C", "\u0423\u0441\u0442\u044C-\u041A\u0430\u043B\u043C\u0430\u043D\u043A\u0430", "\u0423\u0441\u0442\u044C-\u041A\u0430\u043C\u0447\u0430\u0442\u0441\u043A", "\u0423\u0441\u0442\u044C-\u041A\u0430\u0442\u0430\u0432", "\u0423\u0441\u0442\u044C-\u041A\u0443\u043B\u043E\u043C", "\u0423\u0441\u0442\u044C-\u041A\u0443\u0442", "\u0423\u0441\u0442\u044C-\u041E\u0440\u0434\u044B\u043D\u0441\u043A\u0438\u0439", "\u0423\u0441\u0442\u044E\u0436\u043D\u0430", "\u0423\u0444\u0430", "\u0423\u0445\u0442\u0430", "\u0423\u0447\u0430\u043B\u044B", "\u0423\u044D\u043B\u0435\u043D", "\u0424\u0430\u0442\u0435\u0436", "\u0425\u0430\u0431\u0430\u0440\u043E\u0432\u0441\u043A", "\u0425\u0430\u043D\u0442\u044B-\u041C\u0430\u043D\u0441\u0438\u0439\u0441\u043A", "\u0425\u0430\u0441\u0430\u0432\u044E\u0440\u0442", "\u0425\u0430\u0441\u0430\u043D", "\u0425\u0430\u0442\u0430\u043D\u0433\u0430", "\u0425\u0438\u043C\u043A\u0438", "\u0425\u043E\u043B\u043C\u043E\u0433\u043E\u0440\u044B", "\u0425\u043E\u043B\u043C\u0441\u043A", "\u0425\u043E\u0441\u0442\u0430", "\u0425\u0443\u0436\u0438\u0440", "\u0426\u0438\u043C\u043B\u044F\u043D\u0441\u043A", "\u0427\u0430\u0439\u043A\u043E\u0432\u0441\u043A\u0438\u0439", "\u0427\u0435\u0431\u0430\u0440\u043A\u0443\u043B\u044C", "\u0427\u0435\u0431\u043E\u043A\u0441\u0430\u0440\u044B", "\u0427\u0435\u0433\u0435\u043C", "\u0427\u0435\u043B\u044E\u0441\u043A\u0438\u043D", "\u0427\u0435\u043B\u044F\u0431\u0438\u043D\u0441\u043A", "\u0427\u0435\u0440\u0435\u043C\u0445\u043E\u0432\u043E", "\u0427\u0435\u0440\u0435\u043F\u043E\u0432\u0435\u0446", "\u0427\u0435\u0440\u043A\u0435\u0441\u0441\u043A", "\u0427\u0435\u0440\u043C\u043E\u0437", "\u0427\u0435\u0440\u043D\u044F\u0445\u043E\u0432\u0441\u043A", "\u0427\u0435\u0440\u0441\u043A\u0438\u0439", "\u0427\u0435\u0440\u0443\u0441\u0442\u0438", "\u0427\u0435\u0445\u043E\u0432", "\u0427\u0438\u043A\u043E\u043B\u0430", "\u0427\u0438\u0442\u0430", "\u0427\u043E\u043A\u0443\u0440\u0434\u0430\u0445", "\u0427\u0443\u043B\u044B\u043C", "\u0427\u0443\u0441\u043E\u0432\u043E\u0439", "\u0428\u0430\u0434\u0440\u0438\u043D\u0441\u043A", "\u0428\u0430\u043B\u0438", "\u0428\u0430\u043C\u0430\u0440\u044B", "\u0428\u0430\u0440\u044C\u044F", "\u0428\u0430\u0442\u043A\u0438", "\u0428\u0430\u0442\u043E\u0439", "\u0428\u0430\u0442\u0443\u0440\u0430", "\u0428\u0430\u0445\u043E\u0432\u0441\u043A\u0430\u044F", "\u0428\u0430\u0445\u0442\u044B", "\u0428\u0435\u043B\u0430\u0433\u043E\u043D\u0446\u044B", "\u0428\u0435\u043B\u0435\u0445\u043E\u0432", "\u0428\u0435\u043D\u043A\u0443\u0440\u0441\u043A", "\u0428\u0435\u0440\u0435\u0433\u0435\u0448", "\u0428\u0435\u0440\u0435\u043C\u0435\u0442\u044C\u0435\u0432\u043E", "\u0428\u0438\u043B\u043A\u0430", "\u0428\u0443\u043C\u0438\u0445\u0430", "\u0428\u0443\u044F", "\u0429\u0435\u043B\u043A\u043E\u0432\u043E", "\u0429\u0435\u043B\u044C\u044F\u044E\u0440", "\u042D\u043B\u0438\u0441\u0442\u0430", "\u042D\u043B\u044C\u0431\u0440\u0443\u0441", "\u042D\u043B\u044C\u0442\u043E\u043D", "\u042D\u043D\u0433\u0435\u043B\u044C\u0441", "\u042E\u0433\u043E\u0440\u0441\u043A", "\u042E\u0436\u043D\u043E-\u041A\u0443\u0440\u0438\u043B\u044C\u0441\u043A", "\u042E\u0436\u043D\u043E-\u0421\u0430\u0445\u0430\u043B\u0438\u043D\u0441\u043A", "\u042E\u0436\u043D\u043E\u0443\u0440\u0430\u043B\u044C\u0441\u043A", "\u042E\u0440\u043E\u0432\u0441\u043A", "\u042E\u0440\u044C\u0435\u0432-\u041F\u043E\u043B\u044C\u0441\u043A\u0438\u0439", "\u042E\u0440\u044C\u0435\u0432\u0435\u0446 (\u0418\u0432\u0430\u043D.)", "\u042E\u0440\u044E\u0437\u0430\u043D\u044C", "\u042F\u043A\u0443\u0442\u0441\u043A", "\u042F\u043A\u0448\u0430", "\u042F\u043B\u0443\u0442\u043E\u0440\u043E\u0432\u0441\u043A", "\u042F\u043C\u0431\u0443\u0440\u0433", "\u042F\u0440-\u0421\u0430\u043B\u0435", "\u042F\u0440\u043E\u0441\u043B\u0430\u0432\u043B\u044C", "\u042F\u0441\u043D\u044B\u0439 (\u041E\u0440\u0435\u043D\u0431.)", "\u042F\u0445\u0440\u043E\u043C\u0430", "\u042F\u0448\u0430\u043B\u0442\u0430", "\u042F\u0448\u043A\u0443\u043B\u044C"];
var r3 = ["\u0410\u0432\u0441\u0442\u0440\u0430\u043B\u0438\u044F", "\u0410\u0432\u0441\u0442\u0440\u0438\u044F", "\u0410\u0437\u0435\u0440\u0431\u0430\u0439\u0434\u0436\u0430\u043D", "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", "\u0410\u043B\u0436\u0438\u0440", "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u043E\u0435 \u0421\u0430\u043C\u043E\u0430 (\u043D\u0435 \u043F\u0440\u0438\u0437\u043D\u0430\u043D\u0430)", "\u0410\u043D\u0433\u0438\u043B\u044C\u044F", "\u0410\u043D\u0433\u043E\u043B\u0430", "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430 (\u043D\u0435 \u043F\u0440\u0438\u0437\u043D\u0430\u043D\u0430)", "\u0410\u043D\u0442\u0438\u0433\u0443\u0430 \u0438 \u0411\u0430\u0440\u0431\u0443\u0434\u0430", "\u0410\u043D\u0442\u0438\u043B\u044C\u0441\u043A\u0438\u0435 \u041E\u0441\u0442\u0440\u043E\u0432\u0430 (\u043D\u0435 \u043F\u0440\u0438\u0437\u043D\u0430\u043D\u0430)", "\u0410\u043E\u043C\u044B\u043D\u044C (\u043D\u0435 \u043F\u0440\u0438\u0437\u043D\u0430\u043D\u0430)", "\u0410\u0440\u0433\u0435\u043D\u0442\u0438\u043D\u0430", "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", "\u0411\u0430\u0433\u0430\u043C\u0441\u043A\u0438\u0435 \u041E\u0441\u0442\u0440\u043E\u0432\u0430", "\u0411\u0430\u043D\u0433\u043B\u0430\u0434\u0435\u0448", "\u0411\u0430\u0440\u0431\u0430\u0434\u043E\u0441", "\u0411\u0430\u0445\u0440\u0435\u0439\u043D", "\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C", "\u0411\u0435\u043B\u0438\u0437", "\u0411\u0435\u043B\u044C\u0433\u0438\u044F", "\u0411\u0435\u043D\u0438\u043D", "\u0411\u043E\u043B\u0433\u0430\u0440\u0438\u044F", "\u0411\u043E\u043B\u0438\u0432\u0438\u044F", "\u0411\u043E\u0441\u043D\u0438\u044F \u0438 \u0413\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430", "\u0411\u043E\u0442\u0441\u0432\u0430\u043D\u0430", "\u0411\u0440\u0430\u0437\u0438\u043B\u0438\u044F", "\u0411\u0440\u0443\u043D\u0435\u0439", "\u0411\u0443\u0440\u043A\u0438\u043D\u0430-\u0424\u0430\u0441\u043E", "\u0411\u0443\u0440\u0443\u043D\u0434\u0438", "\u0411\u0443\u0442\u0430\u043D", "\u0412\u0430\u043D\u0443\u0430\u0442\u0443", "\u0412\u0430\u0442\u0438\u043A\u0430\u043D", "\u0412\u0435\u043B\u0438\u043A\u043E\u0431\u0440\u0438\u0442\u0430\u043D\u0438\u044F", "\u0412\u0435\u043D\u0433\u0440\u0438\u044F", "\u0412\u0435\u043D\u0435\u0441\u0443\u044D\u043B\u0430", "\u0412\u043E\u0441\u0442\u043E\u0447\u043D\u044B\u0439 \u0422\u0438\u043C\u043E\u0440", "\u0412\u044C\u0435\u0442\u043D\u0430\u043C", "\u0413\u0430\u0431\u043E\u043D", "\u0413\u0430\u0438\u0442\u0438", "\u0413\u0430\u0439\u0430\u043D\u0430", "\u0413\u0430\u043C\u0431\u0438\u044F", "\u0413\u0430\u043D\u0430", "\u0413\u0432\u0430\u0434\u0435\u043B\u0443\u043F\u0430 (\u043D\u0435 \u043F\u0440\u0438\u0437\u043D\u0430\u043D\u0430)", "\u0413\u0432\u0430\u0442\u0435\u043C\u0430\u043B\u0430", "\u0413\u0432\u0438\u0430\u043D\u0430 (\u043D\u0435 \u043F\u0440\u0438\u0437\u043D\u0430\u043D\u0430)", "\u0413\u0432\u0438\u043D\u0435\u044F", "\u0413\u0432\u0438\u043D\u0435\u044F-\u0411\u0438\u0441\u0430\u0443", "\u0413\u0435\u0440\u043C\u0430\u043D\u0438\u044F", "\u0413\u043E\u043D\u0434\u0443\u0440\u0430\u0441", "\u0413\u0440\u0435\u043D\u0430\u0434\u0430", "\u0413\u0440\u0435\u0446\u0438\u044F", "\u0413\u0440\u0443\u0437\u0438\u044F", "\u0414\u0430\u043D\u0438\u044F", "\u0414\u0436\u0438\u0431\u0443\u0442\u0438", "\u0414\u043E\u043C\u0438\u043D\u0438\u043A\u0430", "\u0414\u043E\u043C\u0438\u043D\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430", "\u0415\u0433\u0438\u043F\u0435\u0442", "\u0417\u0430\u043C\u0431\u0438\u044F", "\u0417\u0438\u043C\u0431\u0430\u0431\u0432\u0435", "\u0418\u0437\u0440\u0430\u0438\u043B\u044C", "\u0418\u043D\u0434\u0438\u044F", "\u0418\u043D\u0434\u043E\u043D\u0435\u0437\u0438\u044F", "\u0418\u043E\u0440\u0434\u0430\u043D\u0438\u044F", "\u0418\u0440\u0430\u043A", "\u0418\u0440\u0430\u043D", "\u0418\u0440\u043B\u0430\u043D\u0434\u0438\u044F", "\u0418\u0441\u043B\u0430\u043D\u0434\u0438\u044F", "\u0418\u0441\u043F\u0430\u043D\u0438\u044F", "\u0418\u0442\u0430\u043B\u0438\u044F", "\u0419\u0435\u043C\u0435\u043D", "\u041A\u0430\u0431\u043E-\u0412\u0435\u0440\u0434\u0435", "\u041A\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043D", "\u041A\u0430\u043C\u0431\u043E\u0434\u0436\u0430", "\u041A\u0430\u043C\u0435\u0440\u0443\u043D", "\u041A\u0430\u043D\u0430\u0434\u0430", "\u041A\u0430\u0442\u0430\u0440", "\u041A\u0435\u043D\u0438\u044F", "\u041A\u0438\u043F\u0440", "\u041A\u0438\u0440\u0438\u0431\u0430\u0442\u0438", "\u041A\u0438\u0442\u0430\u0439", "\u041A\u043E\u043B\u0443\u043C\u0431\u0438\u044F", "\u041A\u043E\u043C\u043E\u0440\u0441\u043A\u0438\u0435 \u041E\u0441\u0442\u0440\u043E\u0432\u0430", "\u041A\u043E\u043D\u0433\u043E", "\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430", "\u041A\u043E\u0440\u0435\u044F (\u0421\u0435\u0432\u0435\u0440\u043D\u0430\u044F)", "\u041A\u043E\u0440\u0435\u044F (\u042E\u0436\u043D\u0430\u044F)", "\u041A\u043E\u0441\u043E\u0432\u043E", "\u041A\u043E\u0441\u0442\u0430-\u0420\u0438\u043A\u0430", "\u041A\u043E\u0442-\u0434'\u0418\u0432\u0443\u0430\u0440", "\u041A\u0443\u0431\u0430", "\u041A\u0443\u0432\u0435\u0439\u0442", "\u041A\u0443\u043A\u0430 \u043E\u0441\u0442\u0440\u043E\u0432\u0430", "\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u0442\u0430\u043D", "\u041B\u0430\u043E\u0441", "\u041B\u0430\u0442\u0432\u0438\u044F", "\u041B\u0435\u0441\u043E\u0442\u043E", "\u041B\u0438\u0431\u0435\u0440\u0438\u044F", "\u041B\u0438\u0432\u0430\u043D", "\u041B\u0438\u0432\u0438\u044F", "\u041B\u0438\u0442\u0432\u0430", "\u041B\u0438\u0445\u0442\u0435\u043D\u0448\u0442\u0435\u0439\u043D", "\u041B\u044E\u043A\u0441\u0435\u043C\u0431\u0443\u0440\u0433", "\u041C\u0430\u0432\u0440\u0438\u043A\u0438\u0439", "\u041C\u0430\u0432\u0440\u0438\u0442\u0430\u043D\u0438\u044F", "\u041C\u0430\u0434\u0430\u0433\u0430\u0441\u043A\u0430\u0440", "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u044F", "\u041C\u0430\u043B\u0430\u0432\u0438", "\u041C\u0430\u043B\u0430\u0439\u0437\u0438\u044F", "\u041C\u0430\u043B\u0438", "\u041C\u0430\u043B\u044C\u0434\u0438\u0432\u044B", "\u041C\u0430\u043B\u044C\u0442\u0430", "\u041C\u0430\u0440\u0448\u0430\u043B\u043B\u043E\u0432\u044B \u041E\u0441\u0442\u0440\u043E\u0432\u0430", "\u041C\u0435\u043A\u0441\u0438\u043A\u0430", "\u041C\u0438\u043A\u0440\u043E\u043D\u0435\u0437\u0438\u044F", "\u041C\u043E\u0437\u0430\u043C\u0431\u0438\u043A", "\u041C\u043E\u043B\u0434\u043E\u0432\u0430", "\u041C\u043E\u043D\u0430\u043A\u043E", "\u041C\u043E\u043D\u0433\u043E\u043B\u0438\u044F", "\u041C\u0430\u0440\u043E\u043A\u043A\u043E", "\u041C\u044C\u044F\u043D\u043C\u0430", "\u041D\u0430\u043C\u0438\u0431\u0438\u044F", "\u041D\u0430\u0443\u0440\u0443", "\u041D\u0435\u043F\u0430\u043B", "\u041D\u0438\u0433\u0435\u0440", "\u041D\u0438\u0433\u0435\u0440\u0438\u044F", "\u041D\u0438\u0434\u0435\u0440\u043B\u0430\u043D\u0434\u044B", "\u041D\u0438\u043A\u0430\u0440\u0430\u0433\u0443\u0430", "\u041D\u043E\u0432\u0430\u044F \u0417\u0435\u043B\u0430\u043D\u0434\u0438\u044F", "\u041D\u043E\u0440\u0432\u0435\u0433\u0438\u044F", "\u041E\u0431\u044A\u0435\u0434\u0438\u043D\u0435\u043D\u043D\u044B\u0435 \u0410\u0440\u0430\u0431\u0441\u043A\u0438\u0435 \u042D\u043C\u0438\u0440\u0430\u0442\u044B", "\u041E\u043C\u0430\u043D", "\u041F\u0430\u043A\u0438\u0441\u0442\u0430\u043D", "\u041F\u0430\u043B\u0430\u0443", "\u041F\u0430\u043D\u0430\u043C\u0430", "\u041F\u0430\u043F\u0443\u0430 \u2014 \u041D\u043E\u0432\u0430\u044F \u0413\u0432\u0438\u043D\u0435\u044F", "\u041F\u0430\u0440\u0430\u0433\u0432\u0430\u0439", "\u041F\u0435\u0440\u0443", "\u041F\u043E\u043B\u044C\u0448\u0430", "\u041F\u043E\u0440\u0442\u0443\u0433\u0430\u043B\u0438\u044F", "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u043D\u0433\u043E", "\u0420\u043E\u0441\u0441\u0438\u044F", "\u0420\u0443\u0430\u043D\u0434\u0430", "\u0420\u0443\u043C\u044B\u043D\u0438\u044F", "\u0421\u0430\u043B\u044C\u0432\u0430\u0434\u043E\u0440", "\u0421\u0430\u043C\u043E\u0430", "\u0421\u0430\u043D-\u041C\u0430\u0440\u0438\u043D\u043E", "\u0421\u0430\u043D-\u0422\u043E\u043C\u0435 \u0438 \u041F\u0440\u0438\u043D\u0441\u0438\u043F\u0438", "\u0421\u0430\u0443\u0434\u043E\u0432\u0441\u043A\u0430\u044F \u0410\u0440\u0430\u0432\u0438\u044F", "\u0421\u0432\u0430\u0437\u0438\u043B\u0435\u043D\u0434", "\u0421\u0435\u0439\u0448\u0435\u043B\u044C\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430", "\u0421\u0435\u043D\u0435\u0433\u0430\u043B", "\u0421\u0435\u043D\u0442-\u0412\u0438\u043D\u0441\u0435\u043D\u0442 \u0438 \u0413\u0440\u0435\u043D\u0430\u0434\u0438\u043D\u044B", "\u0421\u0435\u043D\u0442-\u041A\u0438\u0442\u0442\u0441 \u0438 \u041D\u0435\u0432\u0438\u0441", "\u0421\u0435\u043D\u0442-\u041B\u044E\u0441\u0438\u044F", "\u0421\u0435\u0440\u0431\u0438\u044F", "\u0421\u0438\u043D\u0433\u0430\u043F\u0443\u0440", "\u0421\u0438\u0440\u0438\u044F", "\u0421\u043B\u043E\u0432\u0430\u043A\u0438\u044F", "\u0421\u043B\u043E\u0432\u0435\u043D\u0438\u044F", "\u0421\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u043D\u044B\u0435 \u0428\u0442\u0430\u0442\u044B \u0410\u043C\u0435\u0440\u0438\u043A\u0438", "\u0421\u043E\u043B\u043E\u043C\u043E\u043D\u043E\u0432\u044B \u041E\u0441\u0442\u0440\u043E\u0432\u0430", "\u0421\u043E\u043C\u0430\u043B\u0438", "\u0421\u0443\u0434\u0430\u043D", "\u0421\u0443\u0440\u0438\u043D\u0430\u043C", "\u0421\u044C\u0435\u0440\u0440\u0430-\u041B\u0435\u043E\u043D\u0435", "\u0422\u0430\u0434\u0436\u0438\u043A\u0438\u0441\u0442\u0430\u043D", "\u0422\u0430\u0438\u043B\u0430\u043D\u0434", "\u0422\u0430\u0439\u0432\u0430\u043D\u044C (\u043D\u0435 \u043F\u0440\u0438\u0437\u043D\u0430\u043D\u0430)", "\u0422\u0430\u043C\u0438\u043B-\u0418\u043B\u0430\u043C (\u043D\u0435 \u043F\u0440\u0438\u0437\u043D\u0430\u043D\u0430)", "\u0422\u0430\u043D\u0437\u0430\u043D\u0438\u044F", "\u0422\u0451\u0440\u043A\u0441 \u0438 \u041A\u0430\u0439\u043A\u043E\u0441 (\u043D\u0435 \u043F\u0440\u0438\u0437\u043D\u0430\u043D\u0430)", "\u0422\u043E\u0433\u043E", "\u0422\u043E\u043A\u0435\u043B\u0430\u0443 (\u043D\u0435 \u043F\u0440\u0438\u0437\u043D\u0430\u043D\u0430)", "\u0422\u043E\u043D\u0433\u0430", "\u0422\u0440\u0438\u043D\u0438\u0434\u0430\u0434 \u0438 \u0422\u043E\u0431\u0430\u0433\u043E", "\u0422\u0443\u0432\u0430\u043B\u0443", "\u0422\u0443\u043D\u0438\u0441", "\u0422\u0443\u0440\u0435\u0446\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0435\u0432\u0435\u0440\u043D\u043E\u0433\u043E \u041A\u0438\u043F\u0440\u0430 (\u043D\u0435 \u043F\u0440\u0438\u0437\u043D\u0430\u043D\u0430)", "\u0422\u0443\u0440\u043A\u043C\u0435\u043D\u0438\u0441\u0442\u0430\u043D", "\u0422\u0443\u0440\u0446\u0438\u044F", "\u0423\u0433\u0430\u043D\u0434\u0430", "\u0423\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u0430\u043D", "\u0423\u043A\u0440\u0430\u0438\u043D\u0430", "\u0423\u0440\u0443\u0433\u0432\u0430\u0439", "\u0424\u0430\u0440\u0435\u0440\u0441\u043A\u0438\u0435 \u041E\u0441\u0442\u0440\u043E\u0432\u0430 (\u043D\u0435 \u043F\u0440\u0438\u0437\u043D\u0430\u043D\u0430)", "\u0424\u0438\u0434\u0436\u0438", "\u0424\u0438\u043B\u0438\u043F\u043F\u0438\u043D\u044B", "\u0424\u0438\u043D\u043B\u044F\u043D\u0434\u0438\u044F", "\u0424\u0440\u0430\u043D\u0446\u0438\u044F", "\u0424\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0430\u044F \u041F\u043E\u043B\u0438\u043D\u0435\u0437\u0438\u044F (\u043D\u0435 \u043F\u0440\u0438\u0437\u043D\u0430\u043D\u0430)", "\u0425\u043E\u0440\u0432\u0430\u0442\u0438\u044F", "\u0426\u0435\u043D\u0442\u0440\u0430\u043B\u044C\u043D\u043E\u0430\u0444\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430", "\u0427\u0430\u0434", "\u0427\u0435\u0440\u043D\u043E\u0433\u043E\u0440\u0438\u044F", "\u0427\u0435\u0445\u0438\u044F", "\u0427\u0438\u043B\u0438", "\u0428\u0432\u0435\u0439\u0446\u0430\u0440\u0438\u044F", "\u0428\u0432\u0435\u0446\u0438\u044F", "\u0428\u0440\u0438-\u041B\u0430\u043D\u043A\u0430", "\u042D\u043A\u0432\u0430\u0434\u043E\u0440", "\u042D\u043A\u0432\u0430\u0442\u043E\u0440\u0438\u0430\u043B\u044C\u043D\u0430\u044F \u0413\u0432\u0438\u043D\u0435\u044F", "\u042D\u0440\u0438\u0442\u0440\u0435\u044F", "\u042D\u0441\u0442\u043E\u043D\u0438\u044F", "\u042D\u0444\u0438\u043E\u043F\u0438\u044F", "\u042E\u0436\u043D\u043E-\u0410\u0444\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430", "\u042F\u043C\u0430\u0439\u043A\u0430", "\u042F\u043F\u043E\u043D\u0438\u044F"];
var m3 = ["\u0420\u043E\u0441\u0441\u0438\u044F"];
var a3 = ["######"];
var i3 = ["\u043A\u0432. ###"];
var n3 = ["\u0410\u043B\u0442\u0430\u0439\u0441\u043A\u0438\u0439 \u043A\u0440\u0430\u0439", "\u0410\u043C\u0443\u0440\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0410\u0440\u0445\u0430\u043D\u0433\u0435\u043B\u044C\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0410\u0441\u0442\u0440\u0430\u0445\u0430\u043D\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0411\u0435\u043B\u0433\u043E\u0440\u043E\u0434\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0411\u0440\u044F\u043D\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0412\u043B\u0430\u0434\u0438\u043C\u0438\u0440\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0412\u043E\u043B\u0433\u043E\u0433\u0440\u0430\u0434\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0412\u043E\u0440\u043E\u043D\u0435\u0436\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0433. \u041C\u043E\u0441\u043A\u0432\u0430", "\u0433. \u0421\u0430\u043D\u043A\u0442 - \u041F\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433", "\u0433. \u0421\u0435\u0432\u0430\u0441\u0442\u043E\u043F\u043E\u043B\u044C", "\u0415\u0432\u0440\u0435\u0439\u0441\u043A\u0430\u044F \u0430\u0432\u0442\u043E\u043D\u043E\u043C\u043D\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0417\u0430\u0431\u0430\u0439\u043A\u0430\u043B\u044C\u0441\u043A\u0438\u0439 \u043A\u0440\u0430\u0439", "\u0418\u0432\u0430\u043D\u043E\u0432\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0418\u0440\u043A\u0443\u0442\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041A\u0430\u0431\u0430\u0440\u0434\u0438\u043D\u043E - \u0411\u0430\u043B\u043A\u0430\u0440\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430", "\u041A\u0430\u043B\u0438\u043D\u0438\u043D\u0433\u0440\u0430\u0434\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041A\u0430\u043B\u0443\u0436\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041A\u0430\u043C\u0447\u0430\u0442\u0441\u043A\u0438\u0439 \u043A\u0440\u0430\u0439", "\u041A\u0430\u0440\u0430\u0447\u0430\u0435\u0432\u043E - \u0427\u0435\u0440\u043A\u0435\u0441\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430", "\u041A\u0435\u043C\u0435\u0440\u043E\u0432\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C - \u041A\u0443\u0437\u0431\u0430\u0441\u0441", "\u041A\u0438\u0440\u043E\u0432\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041A\u043E\u0441\u0442\u0440\u043E\u043C\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041A\u0440\u0430\u0441\u043D\u043E\u0434\u0430\u0440\u0441\u043A\u0438\u0439 \u043A\u0440\u0430\u0439", "\u041A\u0440\u0430\u0441\u043D\u043E\u044F\u0440\u0441\u043A\u0438\u0439 \u043A\u0440\u0430\u0439", "\u041A\u0443\u0440\u0433\u0430\u043D\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041A\u0443\u0440\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041B\u0435\u043D\u0438\u043D\u0433\u0440\u0430\u0434\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041B\u0438\u043F\u0435\u0446\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041C\u0430\u0433\u0430\u0434\u0430\u043D\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041C\u043E\u0441\u043A\u043E\u0432\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041C\u0443\u0440\u043C\u0430\u043D\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041D\u0435\u043D\u0435\u0446\u043A\u0438\u0439 \u0430\u0432\u0442\u043E\u043D\u043E\u043C\u043D\u044B\u0439 \u043E\u043A\u0440\u0443\u0433", "\u041D\u0438\u0436\u0435\u0433\u043E\u0440\u043E\u0434\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041D\u043E\u0432\u0433\u043E\u0440\u043E\u0434\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041D\u043E\u0432\u043E\u0441\u0438\u0431\u0438\u0440\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041E\u043C\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041E\u0440\u0435\u043D\u0431\u0443\u0440\u0433\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041E\u0440\u043B\u043E\u0432\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041F\u0435\u043D\u0437\u0435\u043D\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041F\u0435\u0440\u043C\u0441\u043A\u0438\u0439 \u043A\u0440\u0430\u0439", "\u041F\u0440\u0438\u043C\u043E\u0440\u0441\u043A\u0438\u0439 \u043A\u0440\u0430\u0439", "\u041F\u0441\u043A\u043E\u0432\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0410\u0434\u044B\u0433\u0435\u044F (\u0410\u0434\u044B\u0433\u0435\u044F)", "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0410\u043B\u0442\u0430\u0439", "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0430\u0448\u043A\u043E\u0440\u0442\u043E\u0441\u0442\u0430\u043D", "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0443\u0440\u044F\u0442\u0438\u044F", "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0414\u0430\u0433\u0435\u0441\u0442\u0430\u043D", "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0418\u043D\u0433\u0443\u0448\u0435\u0442\u0438\u044F", "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0430\u043B\u043C\u044B\u043A\u0438\u044F", "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0430\u0440\u0435\u043B\u0438\u044F", "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u043C\u0438", "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0440\u044B\u043C", "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u0440\u0438\u0439 \u042D\u043B", "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u043E\u0440\u0434\u043E\u0432\u0438\u044F", "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0430\u0445\u0430 (\u042F\u043A\u0443\u0442\u0438\u044F)", "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u041E\u0441\u0435\u0442\u0438\u044F - \u0410\u043B\u0430\u043D\u0438\u044F", "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0422\u0430\u0442\u0430\u0440\u0441\u0442\u0430\u043D", "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0422\u044B\u0432\u0430", "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0425\u0430\u043A\u0430\u0441\u0438\u044F", "\u0420\u043E\u0441\u0442\u043E\u0432\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0420\u044F\u0437\u0430\u043D\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0421\u0430\u043C\u0430\u0440\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0421\u0430\u0440\u0430\u0442\u043E\u0432\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0421\u0430\u0445\u0430\u043B\u0438\u043D\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0421\u0432\u0435\u0440\u0434\u043B\u043E\u0432\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0421\u043C\u043E\u043B\u0435\u043D\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0421\u0442\u0430\u0432\u0440\u043E\u043F\u043E\u043B\u044C\u0441\u043A\u0438\u0439 \u043A\u0440\u0430\u0439", "\u0422\u0430\u043C\u0431\u043E\u0432\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0422\u0432\u0435\u0440\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0422\u043E\u043C\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0422\u0443\u043B\u044C\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0422\u044E\u043C\u0435\u043D\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0423\u0434\u043C\u0443\u0440\u0442\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430", "\u0423\u043B\u044C\u044F\u043D\u043E\u0432\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0425\u0430\u0431\u0430\u0440\u043E\u0432\u0441\u043A\u0438\u0439 \u043A\u0440\u0430\u0439", "\u0425\u0430\u043D\u0442\u044B-\u041C\u0430\u043D\u0441\u0438\u0439\u0441\u043A\u0438\u0439 \u0430\u0432\u0442\u043E\u043D\u043E\u043C\u043D\u044B\u0439 \u043E\u043A\u0440\u0443\u0433 - \u042E\u0433\u0440\u0430", "\u0427\u0435\u043B\u044F\u0431\u0438\u043D\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0427\u0435\u0447\u0435\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430", "\u0427\u0443\u0432\u0430\u0448\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430", "\u0427\u0443\u043A\u043E\u0442\u0441\u043A\u0438\u0439 \u0430\u0432\u0442\u043E\u043D\u043E\u043C\u043D\u044B\u0439 \u043E\u043A\u0440\u0443\u0433", "\u042F\u043C\u0430\u043B\u043E-\u043D\u0435\u043D\u0435\u0446\u043A\u0438\u0439 \u0430\u0432\u0442\u043E\u043D\u043E\u043C\u043D\u044B\u0439 \u043E\u043A\u0440\u0443\u0433", "\u042F\u0440\u043E\u0441\u043B\u0430\u0432\u0441\u043A\u0430\u044F \u043E\u0431\u043B\u0430\u0441\u0442\u044C"];
var f3 = ["{{address.street_suffix}} {{address.street_name}}", "{{address.street_name}} {{address.street_suffix}}"];
var p3 = { normal: "{{address.street}}, {{address.buildingNumber}}", full: "{{address.street}}, {{address.buildingNumber}} {{address.secondaryAddress}}" };
var s3 = ["\u0421\u043E\u0432\u0435\u0442\u0441\u043A\u0430\u044F", "\u041C\u043E\u043B\u043E\u0434\u0435\u0436\u043D\u0430\u044F", "\u0426\u0435\u043D\u0442\u0440\u0430\u043B\u044C\u043D\u0430\u044F", "\u0428\u043A\u043E\u043B\u044C\u043D\u0430\u044F", "\u041D\u043E\u0432\u0430\u044F", "\u0421\u0430\u0434\u043E\u0432\u0430\u044F", "\u041B\u0435\u0441\u043D\u0430\u044F", "\u041D\u0430\u0431\u0435\u0440\u0435\u0436\u043D\u0430\u044F", "\u041E\u043A\u0442\u044F\u0431\u0440\u044C\u0441\u043A\u0430\u044F", "\u0417\u0435\u043B\u0435\u043D\u0430\u044F", "\u041A\u043E\u043C\u0441\u043E\u043C\u043E\u043B\u044C\u0441\u043A\u0430\u044F", "\u0417\u0430\u0440\u0435\u0447\u043D\u0430\u044F", "\u041F\u0435\u0440\u0432\u043E\u043C\u0430\u0439\u0441\u043A\u0430\u044F", "\u041F\u043E\u043B\u0435\u0432\u0430\u044F", "\u041B\u0443\u0433\u043E\u0432\u0430\u044F", "\u041F\u0438\u043E\u043D\u0435\u0440\u0441\u043A\u0430\u044F", "\u042E\u0431\u0438\u043B\u0435\u0439\u043D\u0430\u044F", "\u0421\u0435\u0432\u0435\u0440\u043D\u0430\u044F", "\u041F\u0440\u043E\u043B\u0435\u0442\u0430\u0440\u0441\u043A\u0430\u044F", "\u0421\u0442\u0435\u043F\u043D\u0430\u044F", "\u042E\u0436\u043D\u0430\u044F", "\u041A\u043E\u043B\u0445\u043E\u0437\u043D\u0430\u044F", "\u0420\u0430\u0431\u043E\u0447\u0430\u044F", "\u0421\u043E\u043B\u043D\u0435\u0447\u043D\u0430\u044F", "\u0416\u0435\u043B\u0435\u0437\u043D\u043E\u0434\u043E\u0440\u043E\u0436\u043D\u0430\u044F", "\u0412\u043E\u0441\u0442\u043E\u0447\u043D\u0430\u044F", "\u0417\u0430\u0432\u043E\u0434\u0441\u043A\u0430\u044F", "\u041D\u0430\u0433\u043E\u0440\u043D\u0430\u044F", "\u0411\u0435\u0440\u0435\u0433\u043E\u0432\u0430\u044F", "\u041A\u043E\u043E\u043F\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u0430\u044F", "\u041A\u0440\u0430\u0441\u043D\u043E\u0430\u0440\u043C\u0435\u0439\u0441\u043A\u0430\u044F", "\u0421\u043E\u0432\u0445\u043E\u0437\u043D\u0430\u044F", "\u0420\u0435\u0447\u043D\u0430\u044F", "\u0421\u043F\u043E\u0440\u0442\u0438\u0432\u043D\u0430\u044F", "\u041E\u0437\u0435\u0440\u043D\u0430\u044F", "\u0421\u0442\u0440\u043E\u0438\u0442\u0435\u043B\u044C\u043D\u0430\u044F", "\u041F\u0430\u0440\u043A\u043E\u0432\u0430\u044F", "\u041F\u043E\u0434\u0433\u043E\u0440\u043D\u0430\u044F", "\u041F\u043E\u0447\u0442\u043E\u0432\u0430\u044F", "\u041F\u0430\u0440\u0442\u0438\u0437\u0430\u043D\u0441\u043A\u0430\u044F", "\u0412\u043E\u043A\u0437\u0430\u043B\u044C\u043D\u0430\u044F", "\u0414\u043E\u0440\u043E\u0436\u043D\u0430\u044F", "\u0414\u0430\u0447\u043D\u0430\u044F", "\u0417\u0430\u043F\u0430\u0434\u043D\u0430\u044F", "\u041C\u043E\u0441\u043A\u043E\u0432\u0441\u043A\u0430\u044F", "\u041A\u0440\u0430\u0441\u043D\u0430\u044F", "\u0422\u0440\u0443\u0434\u043E\u0432\u0430\u044F", "\u0428\u043E\u0441\u0441\u0435\u0439\u043D\u0430\u044F", "\u041A\u043E\u043C\u043C\u0443\u043D\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F", "\u0421\u043E\u0441\u043D\u043E\u0432\u0430\u044F", "\u041A\u043B\u0443\u0431\u043D\u0430\u044F", "\u0411\u0435\u0440\u0435\u0437\u043E\u0432\u0430\u044F", "\u0411\u043E\u043B\u044C\u043D\u0438\u0447\u043D\u0430\u044F", "\u0418\u043D\u0442\u0435\u0440\u043D\u0430\u0446\u0438\u043E\u043D\u0430\u043B\u044C\u043D\u0430\u044F", "\u0426\u0432\u0435\u0442\u043E\u0447\u043D\u0430\u044F", "\u0422\u0440\u0430\u043A\u0442\u043E\u0432\u0430\u044F", "\u0413\u043E\u0440\u043D\u0430\u044F", "\u0412\u0435\u0441\u0435\u043D\u043D\u044F\u044F", "\u041A\u043E\u043C\u043C\u0443\u043D\u0430\u043B\u044C\u043D\u0430\u044F", "\u041C\u0430\u0439\u0441\u043A\u0430\u044F", "\u041F\u0440\u0438\u0432\u043E\u043A\u0437\u0430\u043B\u044C\u043D\u0430\u044F", "\u0422\u0430\u0435\u0436\u043D\u0430\u044F", "\u0422\u0440\u0430\u043D\u0441\u043F\u043E\u0440\u0442\u043D\u0430\u044F", "\u041E\u0432\u0440\u0430\u0436\u043D\u0430\u044F", "\u0421\u0432\u0435\u0442\u043B\u0430\u044F", "\u0412\u0438\u0448\u043D\u0435\u0432\u0430\u044F", "\u041A\u043B\u044E\u0447\u0435\u0432\u0430\u044F", "\u041F\u0435\u0441\u0447\u0430\u043D\u0430\u044F", "\u041B\u0435\u043D\u0438\u043D\u0433\u0440\u0430\u0434\u0441\u043A\u0430\u044F", "\u041F\u0440\u043E\u0444\u0441\u043E\u044E\u0437\u043D\u0430\u044F", "\u0412\u0435\u0440\u0445\u043D\u044F\u044F", "\u041B\u0435\u043D\u0438\u043D\u0441\u043A\u0430\u044F", "\u041A\u0438\u0440\u043F\u0438\u0447\u043D\u0430\u044F", "\u041C\u043E\u0441\u0442\u043E\u0432\u0430\u044F", "\u0421\u0442\u0430\u043D\u0446\u0438\u043E\u043D\u043D\u0430\u044F", "\u0423\u0440\u0430\u043B\u044C\u0441\u043A\u0430\u044F", "\u041B\u0438\u043D\u0435\u0439\u043D\u0430\u044F", "\u0424\u0430\u0431\u0440\u0438\u0447\u043D\u0430\u044F", "\u041C\u0430\u0433\u0438\u0441\u0442\u0440\u0430\u043B\u044C\u043D\u0430\u044F", "\u0421\u0438\u0431\u0438\u0440\u0441\u043A\u0430\u044F", "\u041A\u0440\u0435\u0441\u0442\u044C\u044F\u043D\u0441\u043A\u0430\u044F", "\u0420\u043E\u0441\u0441\u0438\u0439\u0441\u043A\u0430\u044F", "\u0422\u0438\u0445\u0430\u044F", "\u0428\u0438\u0440\u043E\u043A\u0430\u044F", "\u041D\u0438\u0436\u043D\u044F\u044F", "\u041D\u0430\u0440\u043E\u0434\u043D\u0430\u044F", "\u041F\u0440\u043E\u043C\u044B\u0448\u043B\u0435\u043D\u043D\u0430\u044F", "\u041A\u043E\u043B\u044C\u0446\u0435\u0432\u0430\u044F", "\u0414\u0430\u043B\u044C\u043D\u044F\u044F", "\u0411\u0430\u0437\u0430\u0440\u043D\u0430\u044F", "\u0426\u0435\u043B\u0438\u043D\u043D\u0430\u044F", "\u0420\u043E\u0434\u043D\u0438\u043A\u043E\u0432\u0430\u044F", "\u0420\u0435\u0432\u043E\u043B\u044E\u0446\u0438\u043E\u043D\u043D\u0430\u044F", "\u0421\u043E\u0446\u0438\u0430\u043B\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F", "\u0417\u0432\u0435\u0437\u0434\u043D\u0430\u044F", "\u0421\u0442\u0443\u0434\u0435\u043D\u0447\u0435\u0441\u043A\u0430\u044F", "\u041C\u0438\u0440\u043D\u0430\u044F", "\u041A\u0443\u0431\u0430\u043D\u0441\u043A\u0430\u044F", "\u0413\u0430\u0440\u0430\u0436\u043D\u0430\u044F", "\u0424\u0435\u0441\u0442\u0438\u0432\u0430\u043B\u044C\u043D\u0430\u044F", "\u0413\u0440\u0430\u0436\u0434\u0430\u043D\u0441\u043A\u0430\u044F", "\u041F\u0435\u0441\u043E\u0447\u043D\u0430\u044F", "\u0421\u0438\u0440\u0435\u043D\u0435\u0432\u0430\u044F", "\u0421\u0435\u043B\u044C\u0441\u043A\u0430\u044F", "\u041A\u0443\u0437\u043D\u0435\u0447\u043D\u0430\u044F", "\u041F\u0443\u0448\u043A\u0438\u043D\u0441\u043A\u0430\u044F", "\u041A\u0440\u0430\u0439\u043D\u044F\u044F", "\u0413\u0432\u0430\u0440\u0434\u0435\u0439\u0441\u043A\u0430\u044F", "\u0412\u0435\u0441\u0435\u043B\u0430\u044F", "\u0417\u0430\u0433\u043E\u0440\u043E\u0434\u043D\u0430\u044F", "\u041E\u043B\u0438\u043C\u043F\u0438\u0439\u0441\u043A\u0430\u044F", "\u041F\u0440\u0438\u043E\u0437\u0435\u0440\u043D\u0430\u044F", "\u0420\u044F\u0431\u0438\u043D\u043E\u0432\u0430\u044F", "\u0417\u0430\u043E\u0437\u0435\u0440\u043D\u0430\u044F", "\u0411\u043E\u0440\u043E\u0432\u0430\u044F", "\u0423\u0440\u043E\u0436\u0430\u0439\u043D\u0430\u044F", "\u0422\u043E\u0440\u0433\u043E\u0432\u0430\u044F", "\u0414\u043E\u043D\u0441\u043A\u0430\u044F", "\u041F\u043E\u0433\u0440\u0430\u043D\u0438\u0447\u043D\u0430\u044F", "\u041E\u0433\u043E\u0440\u043E\u0434\u043D\u0430\u044F", "\u041F\u0440\u0438\u0433\u043E\u0440\u043E\u0434\u043D\u0430\u044F", "\u0421\u0442\u0430\u0434\u0438\u043E\u043D\u043D\u0430\u044F", "\u0412\u0438\u043D\u043E\u0433\u0440\u0430\u0434\u043D\u0430\u044F", "\u041A\u0438\u0435\u0432\u0441\u043A\u0430\u044F", "\u0418\u043D\u0434\u0443\u0441\u0442\u0440\u0438\u0430\u043B\u044C\u043D\u0430\u044F", "\u041A\u0440\u0430\u0441\u043D\u043E\u0433\u0432\u0430\u0440\u0434\u0435\u0439\u0441\u043A\u0430\u044F", "\u0412\u043E\u043B\u0436\u0441\u043A\u0430\u044F", "\u0421\u0432\u043E\u0431\u043E\u0434\u043D\u0430\u044F", "\u041A\u0435\u0434\u0440\u043E\u0432\u0430\u044F", "\u041F\u043E\u0434\u043B\u0435\u0441\u043D\u0430\u044F", "\u041F\u043E\u043B\u044F\u0440\u043D\u0430\u044F", "\u0420\u0430\u0437\u0434\u043E\u043B\u044C\u043D\u0430\u044F", "\u041A\u0430\u0440\u044C\u0435\u0440\u043D\u0430\u044F", "\u041C\u0435\u043B\u044C\u043D\u0438\u0447\u043D\u0430\u044F", "\u0423\u043A\u0440\u0430\u0438\u043D\u0441\u043A\u0430\u044F", "\u0428\u0430\u0445\u0442\u0435\u0440\u0441\u043A\u0430\u044F", "\u0417\u0430\u043F\u0440\u0443\u0434\u043D\u0430\u044F", "\u042D\u043B\u0435\u0432\u0430\u0442\u043E\u0440\u043D\u0430\u044F", "\u0422\u0435\u0430\u0442\u0440\u0430\u043B\u044C\u043D\u0430\u044F", "\u0413\u0435\u043E\u043B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0430\u044F", "\u0411\u043E\u043B\u043E\u0442\u043D\u0430\u044F", "\u041F\u0440\u0438\u0434\u043E\u0440\u043E\u0436\u043D\u0430\u044F", "\u041A\u043B\u0435\u043D\u043E\u0432\u0430\u044F", "\u041A\u0430\u0437\u0430\u0447\u044C\u044F", "\u041C\u0430\u043B\u0430\u044F", "\u041C\u043E\u0440\u0441\u043A\u0430\u044F", "\u0412\u043E\u043B\u0433\u043E\u0433\u0440\u0430\u0434\u0441\u043A\u0430\u044F", "\u0421\u0440\u0435\u0434\u043D\u044F\u044F", "\u0411\u0435\u0437\u044B\u043C\u044F\u043D\u043D\u0430\u044F", "\u041A\u0440\u0430\u0441\u043D\u043E\u0444\u043B\u043E\u0442\u0441\u043A\u0430\u044F", "\u0411\u0440\u0430\u0442\u0441\u043A\u0430\u044F", "\u0422\u0435\u043D\u0438\u0441\u0442\u0430\u044F", "\u0423\u0447\u0438\u0442\u0435\u043B\u044C\u0441\u043A\u0430\u044F", "\u041A\u0430\u0432\u043A\u0430\u0437\u0441\u043A\u0430\u044F", "\u041A\u043E\u0440\u043E\u0442\u043A\u0430\u044F", "\u0414\u0435\u043F\u043E\u0432\u0441\u043A\u0430\u044F", "\u0410\u043C\u0443\u0440\u0441\u043A\u0430\u044F", "\u0421\u0435\u043D\u043D\u0430\u044F", "\u041F\u043E\u0441\u0435\u043B\u043A\u043E\u0432\u0430\u044F", "\u041F\u0440\u0443\u0434\u043E\u0432\u0430\u044F", "\u0414\u0435\u043F\u0443\u0442\u0430\u0442\u0441\u043A\u0430\u044F", "\u0410\u0432\u0438\u0430\u0446\u0438\u043E\u043D\u043D\u0430\u044F", "\u0410\u044D\u0440\u043E\u0434\u0440\u043E\u043C\u043D\u0430\u044F", "\u0411\u043E\u043B\u044C\u0448\u0430\u044F", "\u041F\u0440\u0438\u043C\u043E\u0440\u0441\u043A\u0430\u044F", "\u0410\u043B\u0442\u0430\u0439\u0441\u043A\u0430\u044F", "\u0422\u043E\u043F\u043E\u043B\u0438\u043D\u0430\u044F", "\u0420\u043E\u0441\u0442\u043E\u0432\u0441\u043A\u0430\u044F", "\u0422\u0440\u0430\u043A\u0442\u043E\u0440\u043D\u0430\u044F", "\u041C\u0435\u043B\u0438\u043E\u0440\u0430\u0442\u0438\u0432\u043D\u0430\u044F", "\u041E\u043B\u044C\u0445\u043E\u0432\u0430\u044F", "\u0421\u043B\u0430\u0432\u044F\u043D\u0441\u043A\u0430\u044F", "\u0420\u0430\u0434\u0443\u0436\u043D\u0430\u044F", "\u041A\u0440\u0430\u0441\u043D\u043E\u0434\u0430\u0440\u0441\u043A\u0430\u044F", "\u0421\u0442\u0430\u0445\u0430\u043D\u043E\u0432\u0441\u043A\u0430\u044F", "\u042F\u0440\u043E\u0441\u043B\u0430\u0432\u0441\u043A\u0430\u044F", "\u041A\u043E\u043B\u043B\u0435\u043A\u0442\u0438\u0432\u043D\u0430\u044F", "\u0410\u043D\u0433\u0430\u0440\u0441\u043A\u0430\u044F", "\u041B\u043E\u043A\u043E\u043C\u043E\u0442\u0438\u0432\u043D\u0430\u044F", "\u042F\u0433\u043E\u0434\u043D\u0430\u044F", "\u0421\u043C\u043E\u043B\u0435\u043D\u0441\u043A\u0430\u044F", "\u0422\u0435\u043F\u043B\u0438\u0447\u043D\u0430\u044F", "\u0412\u043E\u0434\u043E\u043F\u0440\u043E\u0432\u043E\u0434\u043D\u0430\u044F", "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F", "\u041E\u0441\u0435\u043D\u043D\u044F\u044F", "\u0411\u0430\u0439\u043A\u0430\u043B\u044C\u0441\u043A\u0430\u044F", "\u0421\u0430\u0440\u0430\u0442\u043E\u0432\u0441\u043A\u0430\u044F", "\u041A\u0430\u0437\u0430\u043D\u0441\u043A\u0430\u044F", "\u0412\u043E\u0440\u043E\u043D\u0435\u0436\u0441\u043A\u0430\u044F", "\u0411\u0440\u044F\u043D\u0441\u043A\u0430\u044F", "\u041F\u0440\u043E\u0438\u0437\u0432\u043E\u0434\u0441\u0442\u0432\u0435\u043D\u043D\u0430\u044F", "\u0422\u0435\u0445\u043D\u0438\u0447\u0435\u0441\u043A\u0430\u044F", "\u0415\u043D\u0438\u0441\u0435\u0439\u0441\u043A\u0430\u044F", "\u0421\u0435\u0432\u0430\u0441\u0442\u043E\u043F\u043E\u043B\u044C\u0441\u043A\u0430\u044F", "\u041E\u043A\u0440\u0443\u0436\u043D\u0430\u044F", "\u041E\u0440\u043B\u043E\u0432\u0441\u043A\u0430\u044F", "\u0425\u0443\u0442\u043E\u0440\u0441\u043A\u0430\u044F", "\u0422\u0443\u043F\u0438\u043A\u043E\u0432\u0430\u044F", "\u041A\u0430\u0448\u0442\u0430\u043D\u043E\u0432\u0430\u044F", "\u041E\u043C\u0441\u043A\u0430\u044F", "\u041F\u0440\u0438\u0432\u043E\u043B\u044C\u043D\u0430\u044F", "\u041A\u0443\u0440\u043E\u0440\u0442\u043D\u0430\u044F", "\u0418\u0432\u0430\u043D\u043E\u0432\u0441\u043A\u0430\u044F", "\u0412\u044B\u0433\u043E\u043D\u043D\u0430\u044F", "\u041A\u0440\u044B\u043C\u0441\u043A\u0430\u044F", "\u041F\u0443\u0442\u0435\u0439\u0441\u043A\u0430\u044F", "\u041F\u0440\u043E\u0435\u0437\u0436\u0430\u044F", "\u041A\u0440\u0430\u0441\u043D\u043E\u0437\u043D\u0430\u043C\u0435\u043D\u043D\u0430\u044F", "\u041E\u0434\u0435\u0441\u0441\u043A\u0430\u044F", "\u041B\u043E\u0433\u043E\u0432\u0430\u044F", "\u0412\u044B\u0441\u043E\u043A\u0430\u044F", "\u042F\u0441\u043D\u0430\u044F", "\u041F\u043E\u0440\u0442\u043E\u0432\u0430\u044F", "\u0421\u043D\u0435\u0436\u043D\u0430\u044F", "\u0421\u0430\u043D\u0430\u0442\u043E\u0440\u043D\u0430\u044F", "\u0421\u043E\u044E\u0437\u043D\u0430\u044F", "\u0423\u043B\u044C\u044F\u043D\u043E\u0432\u0441\u043A\u0430\u044F", "\u0421\u0430\u0445\u0430\u043B\u0438\u043D\u0441\u043A\u0430\u044F", "\u0413\u043E\u0440\u043D\u044F\u0446\u043A\u0430\u044F", "\u041F\u0440\u0438\u0431\u0440\u0435\u0436\u043D\u0430\u044F", "\u0420\u044B\u0431\u0430\u0446\u043A\u0430\u044F", "\u041F\u043E\u043B\u0442\u0430\u0432\u0441\u043A\u0430\u044F", "\u0422\u0430\u043C\u0431\u043E\u0432\u0441\u043A\u0430\u044F", "\u041A\u0440\u0430\u0441\u043D\u043E\u044F\u0440\u0441\u043A\u0430\u044F", "\u041D\u043E\u0432\u043E\u0441\u0435\u043B\u044C\u0441\u043A\u0430\u044F", "\u041F\u0440\u043E\u0442\u043E\u0447\u043D\u0430\u044F", "\u0427\u0435\u0440\u043D\u043E\u043C\u043E\u0440\u0441\u043A\u0430\u044F", "\u041C\u0438\u043D\u0441\u043A\u0430\u044F", "\u0413\u043B\u0430\u0432\u043D\u0430\u044F", "\u0412\u043E\u043B\u044C\u043D\u0430\u044F", "\u0425\u0432\u043E\u0439\u043D\u0430\u044F", "\u041A\u043E\u0441\u043C\u0438\u0447\u0435\u0441\u043A\u0430\u044F", "\u041C\u043E\u0445\u043E\u0432\u0430\u044F", "\u041A\u0443\u0440\u0441\u043A\u0430\u044F", "\u041A\u0443\u0440\u0433\u0430\u043D\u043D\u0430\u044F", "\u0423\u0433\u043B\u043E\u0432\u0430\u044F", "\u041A\u0430\u043C\u0441\u043A\u0430\u044F", "\u0418\u043D\u0436\u0435\u043D\u0435\u0440\u043D\u0430\u044F", "\u041B\u0435\u0441\u043E\u0437\u0430\u0432\u043E\u0434\u0441\u043A\u0430\u044F", "\u0410\u0441\u0442\u0440\u0430\u0445\u0430\u043D\u0441\u043A\u0430\u044F", "\u0411\u0435\u043B\u043E\u0440\u0443\u0441\u0441\u043A\u0430\u044F", "\u0417\u0430\u043E\u0432\u0440\u0430\u0436\u043D\u0430\u044F", "\u0410\u0437\u043E\u0432\u0441\u043A\u0430\u044F", "\u0420\u0443\u0447\u0435\u0439\u043D\u0430\u044F", "\u0412\u043E\u043B\u043E\u0447\u0430\u0435\u0432\u0441\u043A\u0430\u044F", "\u0421\u0442\u0430\u0432\u0440\u043E\u043F\u043E\u043B\u044C\u0441\u043A\u0430\u044F", "\u0421\u043B\u043E\u0431\u043E\u0434\u0441\u043A\u0430\u044F", "\u0422\u0443\u043B\u044C\u0441\u043A\u0430\u044F", "\u0425\u0430\u0440\u044C\u043A\u043E\u0432\u0441\u043A\u0430\u044F", "\u041F\u0435\u0442\u0440\u043E\u0432\u0441\u043A\u0430\u044F", "\u0412\u043B\u0430\u0434\u0438\u043C\u0438\u0440\u0441\u043A\u0430\u044F", "\u0412\u044B\u0441\u043E\u043A\u043E\u0432\u043E\u043B\u044C\u0442\u043D\u0430\u044F", "\u041B\u0430\u0437\u0443\u0440\u043D\u0430\u044F", "\u041F\u043E\u043A\u0440\u043E\u0432\u0441\u043A\u0430\u044F", "\u041D\u043E\u0432\u0433\u043E\u0440\u043E\u0434\u0441\u043A\u0430\u044F", "\u041B\u0435\u043D\u0441\u043A\u0430\u044F", "\u0421\u043F\u043B\u0430\u0432\u043D\u0430\u044F", "\u0423\u0434\u0430\u0440\u043D\u0430\u044F", "\u041A\u0430\u043B\u0443\u0436\u0441\u043A\u0430\u044F", "\u041F\u0440\u0443\u0434\u043D\u0430\u044F", "\u041A\u0440\u0430\u0441\u043D\u043E\u043F\u0430\u0440\u0442\u0438\u0437\u0430\u043D\u0441\u043A\u0430\u044F", "\u041E\u0440\u0435\u0445\u043E\u0432\u0430\u044F", "\u0422\u0430\u043C\u0430\u043D\u0441\u043A\u0430\u044F", "\u0418\u0440\u043A\u0443\u0442\u0441\u043A\u0430\u044F", "\u041E\u0442\u0440\u0430\u0434\u043D\u0430\u044F", "\u0411\u043E\u043B\u044C\u0448\u0435\u0432\u0438\u0441\u0442\u0441\u043A\u0430\u044F", "\u0422\u0440\u043E\u0438\u0446\u043A\u0430\u044F", "\u041B\u0435\u0441\u0445\u043E\u0437\u043D\u0430\u044F", "\u0412\u0430\u0441\u0438\u043B\u044C\u043A\u043E\u0432\u0430\u044F", "\u041C\u0435\u0445\u0430\u043D\u0438\u0447\u0435\u0441\u043A\u0430\u044F", "\u041F\u0443\u0442\u0435\u0432\u0430\u044F", "\u041A\u0443\u0437\u043D\u0435\u0446\u043A\u0430\u044F", "\u0424\u0438\u0437\u043A\u0443\u043B\u044C\u0442\u0443\u0440\u043D\u0430\u044F", "\u0427\u0435\u0440\u0435\u043C\u0443\u0445\u043E\u0432\u0430\u044F", "\u0424\u043B\u043E\u0442\u0441\u043A\u0430\u044F", "\u0423\u0433\u043E\u043B\u044C\u043D\u0430\u044F", "\u041F\u0440\u043E\u0441\u0442\u043E\u0440\u043D\u0430\u044F", "\u041F\u043E\u043F\u0435\u0440\u0435\u0447\u043D\u0430\u044F", "\u0413\u043E\u0440\u043E\u0434\u0441\u043A\u0430\u044F", "\u0410\u0431\u0440\u0438\u043A\u043E\u0441\u043E\u0432\u0430\u044F", "\u0411\u0443\u043B\u044C\u0432\u0430\u0440\u043D\u0430\u044F", "\u041F\u0440\u043E\u0445\u043B\u0430\u0434\u043D\u0430\u044F", "\u0422\u043E\u043C\u0441\u043A\u0430\u044F", "\u042D\u043D\u0435\u0440\u0433\u0435\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F", "\u041B\u0438\u0442\u0435\u0439\u043D\u0430\u044F", "\u041C\u0435\u0434\u0438\u0446\u0438\u043D\u0441\u043A\u0430\u044F", "\u0417\u0430\u043B\u0438\u0432\u043D\u0430\u044F", "\u0411\u0440\u0438\u0433\u0430\u0434\u043D\u0430\u044F", "\u0414\u0435\u0442\u0441\u043A\u0430\u044F", "\u0417\u0430\u043F\u043E\u0440\u043E\u0436\u0441\u043A\u0430\u044F", "\u0414\u0430\u043B\u044C\u043D\u0435\u0432\u043E\u0441\u0442\u043E\u0447\u043D\u0430\u044F", "\u0411\u0430\u043B\u0442\u0438\u0439\u0441\u043A\u0430\u044F", "\u0424\u0435\u0432\u0440\u0430\u043B\u044C\u0441\u043A\u0430\u044F", "\u041B\u0443\u043D\u043D\u0430\u044F", "\u0412\u044B\u0441\u043E\u0442\u043D\u0430\u044F", "\u0420\u044F\u0437\u0430\u043D\u0441\u043A\u0430\u044F", "\u041C\u0430\u043B\u0438\u043D\u043E\u0432\u0430\u044F"];
var d3 = ["\u0430\u043B\u043B\u0435\u044F", "\u0430\u043B.", "\u043D\u0430\u0431\u0435\u0440\u0435\u0436\u043D\u0430\u044F", "\u043D\u0430\u0431.", "\u043F\u043B\u043E\u0449\u0430\u0434\u044C", "\u043F\u043B.", "\u0443\u043B\u0438\u0446\u0430", "\u0443\u043B."];
var W = { building_number: e3, city: t3, city_name: o3, country: r3, default_country: m3, postcode: a3, secondary_address: i3, state: n3, street: f3, street_address: p3, street_name: s3, street_suffix: d3 };
var l3 = W;
var u3 = ["\u043A\u0440\u0430\u0441\u043D\u044B\u0439", "\u0437\u0435\u043B\u0435\u043D\u044B\u0439", "\u0441\u0438\u043D\u0438\u0439", "\u0436\u0435\u043B\u0442\u044B\u0439", "\u0431\u0430\u0433\u0440\u043E\u0432\u044B\u0439", "\u043C\u044F\u0442\u043D\u044B\u0439", "\u0437\u0435\u043B\u0435\u043D\u043E\u0432\u0430\u0442\u043E-\u0433\u043E\u043B\u0443\u0431\u043E\u0439", "\u0431\u0435\u043B\u044B\u0439", "\u0447\u0435\u0440\u043D\u044B\u0439", "\u043E\u0440\u0430\u043D\u0436\u0435\u0432\u044B\u0439", "\u0440\u043E\u0437\u043E\u0432\u044B\u0439", "\u0441\u0435\u0440\u044B\u0439", "\u043A\u0440\u0430\u0441\u043D\u043E-\u043A\u043E\u0440\u0438\u0447\u043D\u0435\u0432\u044B\u0439", "\u0444\u0438\u043E\u043B\u0435\u0442\u043E\u0432\u044B\u0439", "\u0431\u0438\u0440\u044E\u0437\u043E\u0432\u044B\u0439", "\u0436\u0435\u043B\u0442\u043E-\u043A\u043E\u0440\u0438\u0447\u043D\u0435\u0432\u044B\u0439", "\u043D\u0435\u0431\u0435\u0441\u043D\u043E \u0433\u043E\u043B\u0443\u0431\u043E\u0439", "\u043E\u0440\u0430\u043D\u0436\u0435\u0432\u043E-\u0440\u043E\u0437\u043E\u0432\u044B\u0439", "\u0442\u0435\u043C\u043D\u043E-\u0444\u0438\u043E\u043B\u0435\u0442\u043E\u0432\u044B\u0439", "\u043E\u0440\u0445\u0438\u0434\u043D\u044B\u0439", "\u043E\u043B\u0438\u0432\u043A\u043E\u0432\u044B\u0439", "\u043F\u0443\u0440\u043F\u0443\u0440\u043D\u044B\u0439", "\u043B\u0438\u043C\u043E\u043D\u043D\u044B\u0439", "\u043A\u0440\u0435\u043C\u043E\u0432\u044B\u0439", "\u0441\u0438\u043D\u0435-\u0444\u0438\u043E\u043B\u0435\u0442\u043E\u0432\u044B\u0439", "\u0437\u043E\u043B\u043E\u0442\u043E\u0439", "\u043A\u0440\u0430\u0441\u043D\u043E-\u043F\u0443\u0440\u043F\u0443\u0440\u043D\u044B\u0439", "\u0433\u043E\u043B\u0443\u0431\u043E\u0439", "\u043B\u0430\u0437\u0443\u0440\u043D\u044B\u0439", "\u043B\u0438\u043B\u043E\u0432\u044B\u0439", "\u0441\u0435\u0440\u0435\u0431\u0440\u044F\u043D\u044B\u0439"];
var Y = { human: u3 };
var _2 = Y;
var x2 = ["\u041A\u043D\u0438\u0433\u0438", "\u0424\u0438\u043B\u044C\u043C\u044B", "\u043C\u0443\u0437\u044B\u043A\u0430", "\u0438\u0433\u0440\u044B", "\u042D\u043B\u0435\u043A\u0442\u0440\u043E\u043D\u0438\u043A\u0430", "\u043A\u043E\u043C\u043F\u044C\u044E\u0442\u0435\u0440\u044B", "\u0414\u043E\u043C", "\u0441\u0430\u0434\u0438\u043D\u0441\u0442\u0440\u0443\u043C\u0435\u043D\u0442", "\u0411\u0430\u043A\u0430\u043B\u0435\u044F", "\u0437\u0434\u043E\u0440\u043E\u0432\u044C\u0435", "\u043A\u0440\u0430\u0441\u043E\u0442\u0430", "\u0418\u0433\u0440\u0443\u0448\u043A\u0438", "\u0434\u0435\u0442\u0441\u043A\u043E\u0435", "\u0434\u043B\u044F \u043C\u0430\u043B\u044B\u0448\u0435\u0439", "\u041E\u0434\u0435\u0436\u0434\u0430", "\u043E\u0431\u0443\u0432\u044C", "\u0443\u043A\u0440\u0430\u0448\u0435\u043D\u0438\u044F", "\u0421\u043F\u043E\u0440\u0442", "\u0442\u0443\u0440\u0438\u0437\u043C", "\u0410\u0432\u0442\u043E\u043C\u043E\u0431\u0438\u043B\u044C\u043D\u043E\u0435", "\u0413\u0430\u043B\u0430\u043D\u0442\u0435\u0440\u0435\u044F", "\u041C\u0435\u0445\u0430", "\u041F\u0440\u044F\u0436\u0430", "\u043F\u0440\u043E\u043C\u044B\u0448\u043B\u0435\u043D\u043D\u043E\u0435"];
var c3 = { adjective: ["\u041C\u0430\u043B\u0435\u043D\u044C\u043A\u0438\u0439", "\u042D\u0440\u0433\u043E\u043D\u043E\u043C\u0438\u0447\u043D\u044B\u0439", "\u0413\u0440\u0443\u0431\u044B\u0439", "\u0418\u043D\u0442\u0435\u043B\u043B\u0435\u043A\u0442\u0443\u0430\u043B\u044C\u043D\u044B\u0439", "\u0412\u0435\u043B\u0438\u043A\u043E\u043B\u0435\u043F\u043D\u044B\u0439", "\u041D\u0435\u0432\u0435\u0440\u043E\u044F\u0442\u043D\u044B\u0439", "\u0421\u0432\u043E\u0431\u043E\u0434\u043D\u044B\u0439", "\u0411\u043E\u043B\u044C\u0448\u043E\u0439", "\u0424\u0430\u043D\u0442\u0430\u0441\u0442\u0438\u0447\u0435\u0441\u043A\u0438\u0439", "\u041F\u0440\u0430\u043A\u0442\u0438\u0447\u043D\u044B\u0439", "\u041B\u043E\u0441\u043D\u044F\u0449\u0438\u0439\u0441\u044F", "\u041F\u043E\u0442\u0440\u044F\u0441\u0430\u044E\u0449\u0438\u0439"], material: ["\u0421\u0442\u0430\u043B\u044C\u043D\u043E\u0439", "\u0414\u0435\u0440\u0435\u0432\u044F\u043D\u043D\u044B\u0439", "\u0411\u0435\u0442\u043E\u043D\u043D\u044B\u0439", "\u041F\u043B\u0430\u0441\u0442\u0438\u043A\u043E\u0432\u044B\u0439", "\u0425\u043B\u043E\u043F\u043A\u043E\u0432\u044B\u0439", "\u0413\u0440\u0430\u043D\u0438\u0442\u043D\u044B\u0439", "\u041A\u043E\u0436\u0430\u043D\u043D\u044B\u0439", "\u041D\u0435\u043E\u0434\u0438\u043C\u043E\u0432\u044B\u0439", "\u041C\u0435\u0445\u043E\u0432\u043E\u0439", "\u041D\u0430\u0442\u0443\u0440\u0430\u043B\u044C\u043D\u044B\u0439", "\u0420\u0435\u0437\u0438\u043D\u043E\u0432\u044B\u0439"], product: ["\u0421\u0442\u0443\u043B", "\u0410\u0432\u0442\u043E\u043C\u043E\u0431\u0438\u043B\u044C", "\u041A\u043E\u043C\u043F\u044C\u044E\u0442\u0435\u0440", "\u0411\u0435\u0440\u0435\u0442", "\u041A\u0443\u043B\u043E\u043D", "\u0421\u0442\u043E\u043B", "\u0421\u0432\u0438\u0442\u0435\u0440", "\u0420\u0435\u043C\u0435\u043D\u044C", "\u041D\u043E\u0436\u043D\u0438\u0446\u044B", "\u041D\u043E\u0441\u043A\u0438", "\u041C\u0430\u0439\u043A\u0430", "\u041A\u0435\u043F\u043A\u0430", "\u041A\u0443\u0440\u0442\u043A\u0430", "\u041F\u043B\u0430\u0449", "\u0421\u0430\u0431\u043E", "\u0428\u0430\u0440\u0444", "\u041A\u043B\u0430\u0442\u0447", "\u041A\u043E\u0448\u0435\u043B\u0435\u043A", "\u041F\u043E\u0440\u0442\u043C\u043E\u043D\u0435", "\u0411\u043E\u0442\u0438\u043D\u043E\u043A"] };
var Z = { department: x2, product_name: c3 };
var b3 = Z;
var y3 = ["{{company.prefix}} {{name.female_first_name}}", "{{company.prefix}} {{name.male_first_name}}", "{{company.prefix}} {{name.male_last_name}}", "{{company.prefix}} {{company.suffix}}{{company.suffix}}", "{{company.prefix}} {{company.suffix}}{{company.suffix}}{{company.suffix}}", "{{company.prefix}} {{address.city_name}}{{company.suffix}}", "{{company.prefix}} {{address.city_name}}{{company.suffix}}{{company.suffix}}", "{{company.prefix}} {{address.city_name}}{{company.suffix}}{{company.suffix}}{{company.suffix}}"];
var v = ["AO", "\u0413\u0423\u041F", "\u0417\u0410\u041E", "\u0418\u041F", "\u041C\u0423\u041F", "\u041D\u041A\u041E", "\u041E\u041F", "\u041E\u041E\u041E", "\u041E\u0410\u041E", "\u041F\u0410\u041E", "\u0422\u0421\u0416", "\u0424\u0413\u0423\u041F"];
var D2 = ["\u0413\u0440\u0443\u043F\u043F", "\u0418\u043D\u043A\u043E\u0440\u043F\u043E\u0440\u044D\u0439\u0442\u0435\u0434", "\u041B\u0438\u043C\u0438\u0442\u0435\u0434", "\u041F\u0440\u043E\u043C", "\u0420\u0443\u0441", "\u0421\u0438\u0441\u0442\u0435\u043C\u0441", "\u0421\u0431\u044B\u0442", "\u0421\u043D\u0430\u0431", "\u0422\u043E\u0440\u0433", "\u0422\u0440\u0435\u0439\u0434"];
var $ = { name_patterns: y3, prefix: v, suffix: D2 };
var S2 = $;
var h3 = { wide: ["\u044F\u043D\u0432\u0430\u0440\u044C", "\u0444\u0435\u0432\u0440\u0430\u043B\u044C", "\u043C\u0430\u0440\u0442", "\u0430\u043F\u0440\u0435\u043B\u044C", "\u043C\u0430\u0439", "\u0438\u044E\u043D\u044C", "\u0438\u044E\u043B\u044C", "\u0430\u0432\u0433\u0443\u0441\u0442", "\u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044C", "\u043E\u043A\u0442\u044F\u0431\u0440\u044C", "\u043D\u043E\u044F\u0431\u0440\u044C", "\u0434\u0435\u043A\u0430\u0431\u0440\u044C"], wide_context: ["\u044F\u043D\u0432\u0430\u0440\u044F", "\u0444\u0435\u0432\u0440\u0430\u043B\u044F", "\u043C\u0430\u0440\u0442\u0430", "\u0430\u043F\u0440\u0435\u043B\u044F", "\u043C\u0430\u044F", "\u0438\u044E\u043D\u044F", "\u0438\u044E\u043B\u044F", "\u0430\u0432\u0433\u0443\u0441\u0442\u0430", "\u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044F", "\u043E\u043A\u0442\u044F\u0431\u0440\u044F", "\u043D\u043E\u044F\u0431\u0440\u044F", "\u0434\u0435\u043A\u0430\u0431\u0440\u044F"], abbr: ["\u044F\u043D\u0432.", "\u0444\u0435\u0432\u0440.", "\u043C\u0430\u0440\u0442", "\u0430\u043F\u0440.", "\u043C\u0430\u0439", "\u0438\u044E\u043D\u044C", "\u0438\u044E\u043B\u044C", "\u0430\u0432\u0433.", "\u0441\u0435\u043D\u0442.", "\u043E\u043A\u0442.", "\u043D\u043E\u044F\u0431.", "\u0434\u0435\u043A."], abbr_context: ["\u044F\u043D\u0432.", "\u0444\u0435\u0432\u0440.", "\u043C\u0430\u0440\u0442\u0430", "\u0430\u043F\u0440.", "\u043C\u0430\u044F", "\u0438\u044E\u043D\u044F", "\u0438\u044E\u043B\u044F", "\u0430\u0432\u0433.", "\u0441\u0435\u043D\u0442.", "\u043E\u043A\u0442.", "\u043D\u043E\u044F\u0431.", "\u0434\u0435\u043A."] };
var j = { wide: ["\u0412\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435", "\u041F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A", "\u0412\u0442\u043E\u0440\u043D\u0438\u043A", "\u0421\u0440\u0435\u0434\u0430", "\u0427\u0435\u0442\u0432\u0435\u0440\u0433", "\u041F\u044F\u0442\u043D\u0438\u0446\u0430", "\u0421\u0443\u0431\u0431\u043E\u0442\u0430"], wide_context: ["\u0432\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435", "\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A", "\u0432\u0442\u043E\u0440\u043D\u0438\u043A", "\u0441\u0440\u0435\u0434\u0430", "\u0447\u0435\u0442\u0432\u0435\u0440\u0433", "\u043F\u044F\u0442\u043D\u0438\u0446\u0430", "\u0441\u0443\u0431\u0431\u043E\u0442\u0430"], abbr: ["\u0412\u0441", "\u041F\u043D", "\u0412\u0442", "\u0421\u0440", "\u0427\u0442", "\u041F\u0442", "\u0421\u0431"], abbr_context: ["\u0432\u0441", "\u043F\u043D", "\u0432\u0442", "\u0441\u0440", "\u0447\u0442", "\u043F\u0442", "\u0441\u0431"] };
var ee = { month: h3, weekday: j };
var g2 = ee;
var C = ["\u0411\u0418\u041E\u0421", "\u0413\u0431", "\u0418\u0418", "\u041E\u0421", "\u041E\u0417\u0423", "\u041F\u041E", "\u0421\u0423\u0411\u0414", "\u0425\u0417", "\u042D\u0412\u041C", "HTTP", "SDD", "CSS", "SSL", "AGP", "FTP", "PCI", "ADP", "RSS", "XML", "EXE", "COM", "\u041D\u041C\u0416\u0414", "\u041F\u0417\u0423", "SMTP", "SMS", "USB", "PNG", "SAS", "JSON", "XSS"];
var P = ["\u0432\u0441\u043F\u043E\u043C\u043E\u0433\u0430\u0442\u0435\u043B\u044C\u043D\u044B\u0439", "\u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0439", "\u0432\u043D\u0443\u0442\u0440\u0435\u043D\u043D\u0438\u0439", "\u0446\u0438\u0444\u0440\u043E\u0432\u043E\u0439", "\u0441\u0432\u043E\u0431\u043E\u0434\u043D\u043E-\u0440\u0430\u0441\u043F\u0440\u043E\u0441\u0442\u0440\u043E\u043D\u044F\u0435\u043C\u044B\u0439", "\u0432\u0438\u0440\u0442\u0443\u0430\u043B\u044C\u043D\u044B\u0439", "\u043A\u0440\u043E\u0441\u0441-\u043F\u043B\u0430\u0442\u0444\u043E\u0440\u043C\u0435\u043D\u043D\u044B\u0439", "\u0438\u0437\u043B\u0438\u0448\u043D\u0438\u0439", "\u043E\u043D\u043B\u0430\u0439\u043D", "\u0441\u0435\u043D\u0441\u043E\u0440\u043D\u044B\u0439", "\u043C\u043D\u043E\u0433\u043E\u0431\u0430\u0439\u0442\u043D\u044B\u0439", "\u0431\u0435\u0441\u043F\u0440\u043E\u0432\u043E\u0434\u043D\u043E\u0439", "1080-\u043F\u0438\u043A\u0441\u0435\u043B\u044C\u043D\u044B\u0439", "\u043D\u0435\u0439\u0440\u043E\u043D\u043D\u044B\u0439", "\u043E\u043F\u0442\u0438\u0447\u0435\u0441\u043A\u0438\u0439", "\u0442\u0432\u0435\u0440\u0434\u043E\u0442\u0435\u043B\u044C\u043D\u044B\u0439", "\u043C\u043E\u0431\u0438\u043B\u044C\u043D\u044B\u0439"];
var N3 = ["\u0440\u0435\u0437\u0435\u0440\u0432\u043D\u043E\u0435 \u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435", "\u043E\u0431\u0445\u043E\u0434", "\u0430\u0440\u0445\u0438\u0432\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435", "\u0432\u0437\u043B\u043E\u043C", "\u0448\u0438\u0444\u0440\u043E\u0432\u0430\u043D\u0438\u0435", "\u043F\u0435\u0440\u0435\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435", "\u0441\u0436\u0430\u0442\u0438\u0435", "\u0441\u043A\u0430\u0447\u0438\u0432\u0430\u043D\u0438\u0435", "\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435", "\u043D\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044F", "\u0438\u043D\u0434\u0435\u043A\u0441\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435", "\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435", "\u0433\u0435\u043D\u0435\u0440\u0430\u0446\u0438\u044F", "\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435 \u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u0430", "\u0432\u044B\u0447\u0438\u0441\u043B\u0435\u043D\u0438\u0435", "\u0441\u0438\u043D\u0442\u0435\u0437", "\u043F\u0435\u0440\u0435\u0434\u0430\u0447\u0430", "\u043F\u0440\u043E\u0433\u0440\u0430\u043C\u043C\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435", "\u0440\u0430\u0437\u0431\u043E\u0440"];
var w2 = ["\u0434\u0440\u0430\u0439\u0432\u0435\u0440", "\u043F\u0440\u043E\u0442\u043E\u043A\u043E\u043B", "\u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0438\u0442\u0435\u043B\u044C", "\u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441", "\u043C\u0438\u043A\u0440\u043E\u0447\u0438\u043F", "\u043A\u043E\u0434", "\u043F\u0430\u0440\u0441\u0435\u0440", "\u0441\u043E\u043A\u0435\u0442", "\u043A\u043E\u0440\u0442\u0435\u0436", "\u043F\u043E\u0440\u0442", "\u043A\u043B\u044E\u0447", "\u043C\u0430\u0441\u0441\u0438\u0432", "\u043E\u0431\u044A\u0435\u043A\u0442", "\u0441\u0435\u043D\u0441\u043E\u0440", "\u0431\u0440\u0430\u043D\u0434\u043C\u0430\u0443\u044D\u0440", "\u0432\u0438\u043D\u0447\u0435\u0441\u0442\u0435\u0440", "\u043F\u0438\u043A\u0441\u0435\u043B\u044C", "\u043C\u0435\u0445\u0430\u043D\u0438\u0437\u043C \u0441\u0438\u0433\u043D\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u0438", "\u043F\u043E\u0433\u043B\u043E\u0442\u0438\u0442\u0435\u043B\u044C", "\u043C\u043E\u043D\u0438\u0442\u043E\u0440", "\u043F\u0440\u043E\u0434\u0443\u043A\u0442", "\u043F\u0435\u0440\u0435\u0434\u0430\u0442\u0447\u0438\u043A", "\u0431\u043B\u043E\u043A \u0440\u0430\u0437\u0432\u0435\u0434\u0435\u043D\u0438\u044F", "\u043A\u0430\u043D\u0430\u043B", "\u043A\u043E\u043D\u0434\u0435\u043D\u0441\u0430\u0442\u043E\u0440", "\u043E\u043F\u0435\u0440\u0430\u0442\u043E\u0440"];
var A = ["\u0427\u0442\u043E\u0431\u044B {{verb}} {{noun}}, \u043C\u044B \u043C\u043E\u0436\u0435\u043C \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C {{abbreviation}} {{noun}} \u0447\u0435\u0440\u0435\u0437 {{adjective}} {{abbreviation}} {{noun}}!", "\u041D\u0435\u043E\u0431\u0445\u043E\u0434\u0438\u043C\u043E {{verb}} {{adjective}} {{abbreviation}} {{noun}}!", "\u041F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 {{verb}} {{abbreviation}} {{noun}}, \u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E \u044D\u0442\u043E \u043F\u043E\u0437\u0432\u043E\u043B\u0438\u0442 {{verb}} {{adjective}} {{noun}}!", "\u0412\u044B \u043D\u0435 \u043C\u043E\u0436\u0435\u0442\u0435 {{verb}} {{noun}}, \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044F {{ingverb}} \u0438\u043B\u0438 {{ingverb}}!", "\u0418\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0439\u0442\u0435 {{adjective}} {{abbreviation}} {{noun}}, \u0434\u043B\u044F \u0442\u043E\u0433\u043E \u0447\u0442\u043E\u0431\u044B {{verb}} {{adjective}} {{noun}}!", "{{abbreviation}} {{noun}} \u043D\u0435\u0434\u043E\u0441\u0442\u0443\u043F\u0435\u043D, \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044F {{verb}} {{adjective}} {{noun}}, \u0447\u0442\u043E\u0431\u044B \u043C\u044B \u043C\u043E\u0433\u043B\u0438 {{verb}} {{abbreviation}} {{noun}}!", "{{ingverb}} \u043D\u0435 \u0440\u0430\u0431\u043E\u0442\u0430\u0435\u0442, \u043F\u043E\u043F\u0440\u043E\u0431\u0443\u0439\u0442\u0435 {{verb}} {{adjective}} {{abbreviation}} {{noun}}!", "\u042F \u043F\u043B\u0430\u043D\u0438\u0440\u0443\u044E {{verb}} {{adjective}} {{abbreviation}} {{noun}}, \u044D\u0442\u043E \u0434\u043E\u043B\u0436\u043D\u043E \u043F\u043E\u043C\u043E\u0447\u044C {{verb}} {{abbreviation}} {{noun}}!"];
var L = ["\u0441\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C", "\u043E\u0431\u043E\u0439\u0442\u0438", "\u0432\u0437\u043B\u043E\u043C\u0430\u0442\u044C", "\u043F\u0435\u0440\u0435\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0438\u0442\u044C", "\u0441\u0436\u0430\u0442\u044C", "\u0437\u0430\u0448\u0438\u0444\u0440\u043E\u0432\u0430\u0442\u044C", "\u0438\u043C\u043F\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C", "\u044D\u043A\u0441\u043F\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C", "\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C", "\u043D\u0430\u0432\u0438\u0433\u0438\u0440\u043E\u0432\u0430\u0442\u044C", "\u0438\u043D\u0434\u0435\u043A\u0441\u0438\u0440\u043E\u0432\u0430\u0442\u044C", "\u0441\u043E\u0435\u0434\u0438\u043D\u0438\u0442\u044C", "\u0433\u0435\u043D\u0435\u0440\u0438\u0440\u043E\u0432\u0430\u0442\u044C", "\u0440\u0430\u0441\u043F\u0430\u0440\u0441\u0438\u0442\u044C", "\u043A\u0432\u0430\u043D\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043E\u0432\u0430\u0442\u044C", "\u0432\u044B\u0447\u0438\u0441\u043B\u0438\u0442\u044C", "\u0441\u0438\u043D\u0442\u0435\u0437\u0438\u0440\u043E\u0432\u0430\u0442\u044C", "\u0432\u0432\u0435\u0441\u0442\u0438", "\u043F\u0435\u0440\u0435\u0434\u0430\u0442\u044C", "\u0437\u0430\u043F\u0440\u043E\u0433\u0440\u0430\u043C\u043C\u0438\u0440\u043E\u0432\u0430\u0442\u044C", "\u043F\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C", "\u0440\u0430\u0437\u043E\u0431\u0440\u0430\u0442\u044C"];
var te = { abbreviation: C, adjective: P, ingverb: N3, noun: w2, phrase: A, verb: L };
var k2 = te;
var M2 = ["biz", "club", "com", "edo", "info", "host", "moscow", "net", "org", "online", "press", "pro", "ru", "rus", "space", "store", "su", "tech", "\u043C\u043E\u0441\u043A\u0432\u0430", "\u043E\u043D\u043B\u0430\u0439\u043D", "\u0440\u0444", "\u0441\u0430\u0439\u0442"];
var T = ["yandex.ru", "ya.ru", "mail.ru", "gmail.com", "yahoo.com", "hotmail.com"];
var oe = { domain_suffix: M2, free_email: T };
var H = oe;
var I = ["\u0430", "\u0430\u0434\u043C\u0438\u043D\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043D\u044B\u0445", "\u0430\u043A\u0442\u0438\u0432\u0438\u0437\u0430\u0446\u0438\u0438", "\u0430\u043A\u0442\u0438\u0432\u043D\u043E\u0441\u0442\u0438", "\u0430\u043A\u0442\u0438\u0432\u043E\u043C", "\u0430\u043A\u0442\u0443\u0430\u043B\u044C\u043D\u043E\u0441\u0442\u044C", "\u0430\u043D\u0430\u043B\u0438\u0437\u0430", "\u0431\u0430\u0437\u044B", "\u0431\u043E\u0433\u0430\u0442\u044B\u0439", "\u0432", "\u0432\u0430\u0436\u043D\u0443\u044E", "\u0432\u0430\u0436\u043D\u044B\u0435", "\u0432\u043B\u0435\u0447\u0451\u0442", "\u0432\u043D\u0435\u0434\u0440\u0435\u043D\u0438\u044F", "\u0432\u043E\u0437\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044F", "\u0432\u0441\u0435\u0433\u043E", "\u0432\u044B\u0431\u0440\u0430\u043D\u043D\u044B\u0439", "\u0432\u044B\u0437\u044B\u0432\u0430\u0435\u0442", "\u0432\u044B\u043F\u043E\u043B\u043D\u044F\u0442\u044C", "\u0432\u044B\u0441\u043E\u043A\u043E\u0442\u0435\u0445\u043D\u043E\u043B\u043E\u0433\u0438\u0447\u043D\u0430\u044F", "\u0432\u044B\u0441\u0448\u0435\u0433\u043E", "\u0433\u0440\u0430\u0436\u0434\u0430\u043D\u0441\u043A\u043E\u0433\u043E", "\u0434\u0430\u043B\u044C\u043D\u0435\u0439\u0448\u0435\u0435", "\u0434\u0430\u043B\u044C\u043D\u0435\u0439\u0448\u0438\u0445", "\u0434\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u043E\u0439", "\u0434\u0435\u044F\u0442\u0435\u043B\u044C\u043D\u043E\u0441\u0442\u0438", "\u0434\u043B\u044F", "\u0434\u0440\u0443\u0433\u043E\u0439", "\u0436\u0435", "\u0437\u0430", "\u0437\u0430\u0431\u044B\u0432\u0430\u0442\u044C", "\u0437\u0430\u0432\u0438\u0441\u0438\u0442", "\u0437\u0430\u0434\u0430\u043D\u0438\u044F", "\u0437\u0430\u0434\u0430\u0447", "\u0437\u0430\u0434\u0430\u0447\u0430", "\u0437\u0430\u043D\u0438\u043C\u0430\u0435\u043C\u044B\u0445", "\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435", "\u0437\u043D\u0430\u0447\u0438\u043C\u043E\u0441\u0442\u044C", "\u0437\u043D\u0430\u0447\u0438\u0442\u0435\u043B\u044C\u043D\u043E\u0439", "\u0438", "\u0438\u0433\u0440\u0430\u0435\u0442", "\u0438\u0434\u0435\u0439\u043D\u044B\u0435", "\u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0439", "\u0438\u043D\u043D\u043E\u0432\u0430\u0446\u0438\u043E\u043D\u043D\u044B\u0439", "\u0438\u043D\u0442\u0435\u0440\u0435\u0441\u043D\u044B\u0439", "\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E-\u043F\u0440\u043E\u043F\u043E\u0433\u0430\u043D\u0434\u0438\u0441\u0442\u0441\u043A\u043E\u0435", "\u043A\u0430\u0434\u0440\u043E\u0432", "\u043A\u0430\u0434\u0440\u043E\u0432\u043E\u0439", "\u043A\u0430\u0447\u0435\u0441\u0442\u0432\u0430", "\u043A\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043D\u043D\u043E", "\u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043D\u043D\u044B\u0439", "\u043A\u043E\u043D\u0441\u0443\u043B\u044C\u0442\u0430\u0446\u0438\u044F", "\u043A\u043E\u043D\u0446\u0435\u043F\u0446\u0438\u044F", "\u043A\u0440\u0443\u0433\u0443", "\u043A\u0443\u0440\u0441", "\u043C\u0430\u0441\u0441\u043E\u0432\u043E\u0433\u043E", "\u043C\u0430\u0442\u0435\u0440\u0438\u0430\u043B\u044C\u043D\u043E-\u0442\u0435\u0445\u043D\u0438\u0447\u0435\u0441\u043A\u043E\u0439", "\u043C\u0435\u0441\u0442\u043E", "\u043C\u0438\u0440\u0430", "\u043C\u043E\u0434\u0435\u043B\u0438", "\u043C\u043E\u0434\u0435\u043B\u044C", "\u043C\u043E\u0434\u0435\u0440\u043D\u0438\u0437\u0430\u0446\u0438\u0438", "\u043D\u0430", "\u043D\u0430\u043C\u0435\u0447\u0435\u043D\u043D\u044B\u0445", "\u043D\u0430\u043C\u0438", "\u043D\u0430\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0439", "\u043D\u0430\u043F\u0440\u044F\u043C\u0443\u044E", "\u043D\u0430\u0441", "\u043D\u0430\u0441\u0442\u043E\u043B\u044C\u043A\u043E", "\u043D\u0430\u0441\u0443\u0449\u043D\u044B\u043C", "\u043D\u0430\u0446\u0438\u043E\u043D\u0430\u043B\u044C\u043D\u044B\u0439", "\u043D\u0430\u0447\u0430\u043B\u043E", "\u043D\u0430\u0448\u0435\u0439", "\u043D\u0435", "\u043D\u043E\u0432\u0430\u044F", "\u043D\u043E\u0432\u044B\u0445", "\u043E\u0431\u0435\u0441\u043F\u0435\u0447\u0435\u043D\u0438\u0435", "\u043E\u0431\u0435\u0441\u043F\u0435\u0447\u0438\u0432\u0430\u0435\u0442", "\u043E\u0431\u0440\u0430\u0437\u043E\u043C", "\u043E\u0431\u0443\u0441\u043B\u0430\u0432\u043B\u0438\u0432\u0430\u0435\u0442", "\u043E\u0431\u0443\u0447\u0435\u043D\u0438\u044F", "\u043E\u0431\u0449\u0435\u0441\u0442\u0432\u0430", "\u043E\u0431\u0449\u0435\u0441\u0442\u0432\u0435\u043D\u043D\u043E\u0439", "\u043E\u0431\u0449\u0435\u0441\u0442\u0432\u043E\u043C", "\u043E\u0434\u043D\u0430\u043A\u043E", "\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u044F", "\u043E\u043F\u044B\u0442", "\u043E\u0440\u0433\u0430\u043D\u0438\u0437\u0430\u0446\u0438\u0438", "\u043E\u0440\u0433\u0430\u043D\u0438\u0437\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439", "\u043E\u0441\u043E\u0431\u0435\u043D\u043D\u043E\u0441\u0442\u0438", "\u043E\u0442", "\u043E\u0442\u043C\u0435\u0442\u0438\u0442\u044C", "\u043E\u0442\u043D\u043E\u0448\u0435\u043D\u0438\u0438", "\u043E\u0446\u0435\u043D\u0438\u0442\u044C", "\u043E\u0447\u0435\u0432\u0438\u0434\u043D\u0430", "\u043F\u043B\u0430\u043D\u043E\u0432\u044B\u0445", "\u043F\u043E", "\u043F\u043E\u0432\u0441\u0435\u0434\u043D\u0435\u0432\u043D\u0430\u044F", "\u043F\u043E\u0432\u0441\u0435\u0434\u043D\u0435\u0432\u043D\u043E\u0439", "\u043F\u043E\u0432\u044B\u0448\u0435\u043D\u0438\u0435", "\u043F\u043E\u0432\u044B\u0448\u0435\u043D\u0438\u044E", "\u043F\u043E\u0434\u0433\u043E\u0442\u043E\u0432\u043A\u0435", "\u043F\u043E\u0437\u0432\u043E\u043B\u044F\u0435\u0442", "\u043F\u043E\u0437\u0438\u0446\u0438\u0438", "\u043F\u043E\u043A\u0430\u0437\u044B\u0432\u0430\u0435\u0442", "\u043F\u043E\u043D\u0438\u043C\u0430\u043D\u0438\u0435", "\u043F\u043E\u0440\u044F\u0434\u043A\u0430", "\u043F\u043E\u0441\u043B\u0435\u0434\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u043D\u043E\u0433\u043E", "\u043F\u043E\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u043D\u044B\u0445", "\u043F\u043E\u0441\u0442\u043E\u044F\u043D\u043D\u043E\u0435", "\u043F\u043E\u0441\u0442\u043E\u044F\u043D\u043D\u044B\u0439", "\u043F\u043E\u0442\u0440\u0435\u0431\u043D\u043E\u0441\u0442\u044F\u043C", "\u043F\u043E\u044D\u0442\u0430\u043F\u043D\u043E\u0433\u043E", "\u043F\u0440\u0430\u0432\u0438\u0442\u0435\u043B\u044C\u0441\u0442\u0432\u043E\u043C", "\u043F\u0440\u0430\u043A\u0442\u0438\u043A\u0430", "\u043F\u0440\u0435\u0434\u043B\u043E\u0436\u0435\u043D\u0438\u0439", "\u043F\u0440\u0435\u0434\u043F\u043E\u0441\u044B\u043B\u043A\u0438", "\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u044F\u0435\u0442", "\u043F\u0440\u0435\u0436\u0434\u0435", "\u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u043C\u044B\u0445", "\u043F\u0440\u0438\u043D\u0446\u0438\u043F\u043E\u0432", "\u043F\u0440\u043E\u0431\u043B\u0435\u043C", "\u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0438", "\u043F\u0440\u043E\u0433\u0440\u0435\u0441\u0441\u0430", "\u043F\u0440\u043E\u0433\u0440\u0435\u0441\u0441\u0438\u0432\u043D\u043E\u0433\u043E", "\u043F\u0440\u043E\u0435\u043A\u0442", "\u043F\u0440\u043E\u0444\u0435\u0441\u0441\u0438\u043E\u043D\u0430\u043B\u044C\u043D\u043E\u0433\u043E", "\u043F\u0440\u043E\u0446\u0435\u0441\u0441", "\u043F\u0443\u0442\u044C", "\u0440\u0430\u0431\u043E\u0442\u044B", "\u0440\u0430\u0432\u043D\u044B\u043C", "\u0440\u0430\u0437\u0432\u0438\u0442\u0438\u044F", "\u0440\u0430\u0437\u043B\u0438\u0447\u043D\u044B\u0445", "\u0440\u0430\u0437\u043D\u043E\u043E\u0431\u0440\u0430\u0437\u043D\u044B\u0439", "\u0440\u0430\u0437\u0440\u0430\u0431\u043E\u0442\u043A\u0435", "\u0440\u0430\u043C\u043A\u0438", "\u0440\u0435\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u044F", "\u0440\u0435\u0441\u0443\u0440\u0441\u043E\u0441\u0431\u0435\u0440\u0435\u0433\u0430\u044E\u0449\u0438\u0445", "\u0440\u043E\u043B\u044C", "\u0440\u043E\u0441\u0442", "\u0441", "\u0441\u0438\u0441\u0442\u0435\u043C\u0443", "\u0441\u0438\u0441\u0442\u0435\u043C\u044B", "\u0441\u043B\u0435\u0434\u0443\u0435\u0442", "\u0441\u043B\u043E\u0436\u0438\u0432\u0448\u0430\u044F\u0441\u044F", "\u0441\u043E\u0431\u043E\u0439", "\u0441\u043E\u0432\u0440\u0435\u043C\u0435\u043D\u043D\u043E\u0433\u043E", "\u0441\u043E\u0437\u0434\u0430\u0451\u0442", "\u0441\u043E\u0437\u0434\u0430\u043D\u0438\u0435", "\u0441\u043E\u0437\u043D\u0430\u043D\u0438\u044F", "\u0441\u043E\u043C\u043D\u0435\u043D\u0438\u0439", "\u0441\u043E\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F", "\u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044E\u0449\u0435\u0439", "\u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044E\u0449\u0438\u0445", "\u0441\u043E\u0446\u0438\u0430\u043B\u044C\u043D\u043E-\u043E\u0440\u0438\u0435\u043D\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0439", "\u0441\u043E\u0446\u0438\u0430\u043B\u044C\u043D\u043E-\u044D\u043A\u043E\u043D\u043E\u043C\u0438\u0447\u0435\u0441\u043A\u043E\u0435", "\u0441\u043F\u0435\u0446\u0438\u0430\u043B\u0438\u0441\u0442\u043E\u0432", "\u0441\u043F\u043E\u0441\u043E\u0431\u0441\u0442\u0432\u0443\u0435\u0442", "\u0441\u0442\u0435\u043F\u0435\u043D\u0438", "\u0441\u0442\u043E\u0440\u043E\u043D\u044B", "\u0441\u0442\u0440\u0443\u043A\u0442\u0443\u0440\u0430", "\u0441\u0442\u0440\u0443\u043A\u0442\u0443\u0440\u044B", "\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044E\u0449\u0438\u0439", "\u0441\u0443\u0449\u043D\u043E\u0441\u0442\u0438", "\u0441\u0444\u0435\u0440\u0430", "\u0442\u0430\u043A\u0436\u0435", "\u0442\u0430\u043A\u0438\u043C", "\u0442\u0435\u0445\u043D\u043E\u043B\u043E\u0433\u0438\u0439", "\u0442\u0440\u0435\u0431\u0443\u0435\u0442", "\u0443\u043A\u0440\u0435\u043F\u043B\u0435\u043D\u0438\u044F", "\u0443\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435", "\u0443\u0440\u043E\u0432\u043D\u044F", "\u0443\u0441\u043B\u043E\u0432\u0438\u0439", "\u0443\u0442\u043E\u0447\u043D\u0435\u043D\u0438\u044F", "\u0443\u0447\u0430\u0441\u0442\u0438\u044F", "\u0443\u0447\u0430\u0441\u0442\u043D\u0438\u043A\u0430\u043C\u0438", "\u0444\u0438\u043D\u0430\u043D\u0441\u043E\u0432\u044B\u0445", "\u0444\u043E\u0440\u043C", "\u0444\u043E\u0440\u043C\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0438", "\u0444\u043E\u0440\u043C\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044E", "\u0444\u043E\u0440\u043C\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F", "\u0446\u0435\u043B\u0435\u0441\u043E\u043E\u0431\u0440\u0430\u0437\u043D\u043E\u0441\u0442\u0438", "\u0447\u0442\u043E", "\u0448\u0430\u0433\u043E\u0432", "\u0448\u0438\u0440\u043E\u043A\u0438\u043C", "\u0448\u0438\u0440\u043E\u043A\u043E\u043C\u0443", "\u044D\u043A\u043E\u043D\u043E\u043C\u0438\u0447\u0435\u0441\u043A\u043E\u0439", "\u044D\u043A\u0441\u043F\u0435\u0440\u0438\u043C\u0435\u043D\u0442", "\u044D\u0442\u0438\u0445"];
var re = { words: I };
var O = re;
var X = ["\u0410\u0433\u0430\u0442\u0430", "\u0410\u0433\u0430\u0444\u044C\u044F", "\u0410\u043A\u0443\u043B\u0438\u043D\u0430", "\u0410\u043B\u0435\u0432\u0442\u0438\u043D\u0430", "\u0410\u043B\u0435\u043A\u0441\u0430\u043D\u0434\u0440\u0430", "\u0410\u043B\u0438\u043D\u0430", "\u0410\u043B\u043B\u0430", "\u0410\u043D\u0430\u0441\u0442\u0430\u0441\u0438\u044F", "\u0410\u043D\u0433\u0435\u043B\u0438\u043D\u0430", "\u0410\u043D\u0436\u0435\u043B\u0430", "\u0410\u043D\u0436\u0435\u043B\u0438\u043A\u0430", "\u0410\u043D\u043D\u0430", "\u0410\u043D\u0442\u043E\u043D\u0438\u043D\u0430", "\u0412\u0430\u043B\u0435\u043D\u0442\u0438\u043D\u0430", "\u0412\u0430\u043B\u0435\u0440\u0438\u044F", "\u0412\u0430\u0440\u0432\u0430\u0440\u0430", "\u0412\u0430\u0441\u0438\u043B\u0438\u0441\u0430", "\u0412\u0435\u0440\u0430", "\u0412\u0435\u0440\u043E\u043D\u0438\u043A\u0430", "\u0412\u0438\u043A\u0442\u043E\u0440\u0438\u044F", "\u0413\u0430\u043B\u0438\u043D\u0430", "\u0413\u043B\u0430\u0444\u0438\u0440\u0430", "\u0414\u0430\u0440\u044C\u044F", "\u0415\u0432\u0433\u0435\u043D\u0438\u044F", "\u0415\u0432\u0434\u043E\u043A\u0438\u044F", "\u0415\u0432\u043F\u0440\u0430\u043A\u0441\u0438\u044F", "\u0415\u0432\u0444\u0440\u043E\u0441\u0438\u043D\u0438\u044F", "\u0415\u043A\u0430\u0442\u0435\u0440\u0438\u043D\u0430", "\u0415\u043B\u0435\u043D\u0430", "\u0415\u043B\u0438\u0437\u0430\u0432\u0435\u0442\u0430", "\u0416\u0430\u043D\u043D\u0430", "\u0417\u0438\u043D\u0430\u0438\u0434\u0430", "\u0417\u043E\u044F", "\u0418\u0432\u0430\u043D\u043D\u0430", "\u0418\u0440\u0430\u0438\u0434\u0430", "\u0418\u0440\u0438\u043D\u0430", "\u0418\u044F", "\u041A\u0438\u0440\u0430", "\u041A\u043B\u0430\u0432\u0434\u0438\u044F", "\u041A\u0441\u0435\u043D\u0438\u044F", "\u041B\u0430\u0440\u0438\u0441\u0430", "\u041B\u0438\u0434\u0438\u044F", "\u041B\u043E\u0440\u0430", "\u041B\u0443\u043A\u0438\u044F", "\u041B\u044E\u0431\u043E\u0432\u044C", "\u041B\u044E\u0434\u043C\u0438\u043B\u0430", "\u041C\u0430\u0439\u044F", "\u041C\u0430\u0440\u0433\u0430\u0440\u0438\u0442\u0430", "\u041C\u0430\u0440\u0438\u043D\u0430", "\u041C\u0430\u0440\u0438\u044F", "\u041C\u0430\u0440\u0444\u0430", "\u041C\u0438\u043B\u0438\u0446\u0430", "\u041D\u0430\u0434\u0435\u0436\u0434\u0430", "\u041D\u0430\u0438\u043D\u0430", "\u041D\u0430\u0442\u0430\u043B\u044C\u044F", "\u041D\u0438\u043D\u0430", "\u041D\u0438\u043D\u0435\u043B\u044C", "\u041D\u043E\u043D\u043D\u0430", "\u041E\u043A\u0441\u0430\u043D\u0430", "\u041E\u043A\u0442\u044F\u0431\u0440\u0438\u043D\u0430", "\u041E\u043B\u0438\u043C\u043F\u0438\u0430\u0434\u0430", "\u041E\u043B\u044C\u0433\u0430", "\u041F\u0435\u043B\u0430\u0433\u0435\u044F", "\u041F\u043E\u043B\u0438\u043D\u0430", "\u041F\u0440\u0430\u0441\u043A\u043E\u0432\u044C\u044F", "\u0420\u0430\u0438\u0441\u0430", "\u0420\u0435\u0433\u0438\u043D\u0430", "\u0421\u0432\u0435\u0442\u043B\u0430\u043D\u0430", "\u0421\u0438\u043D\u043A\u043B\u0438\u0442\u0438\u043A\u0438\u044F", "\u0421\u043E\u0444\u0438\u044F", "\u0422\u0430\u0438\u0441\u0438\u044F", "\u0422\u0430\u043C\u0430\u0440\u0430", "\u0422\u0430\u0442\u044C\u044F\u043D\u0430", "\u0423\u043B\u044C\u044F\u043D\u0430", "\u0424\u0430\u0438\u043D\u0430", "\u0424\u0435\u0432\u0440\u043E\u043D\u0438\u044F", "\u0424\u0451\u043A\u043B\u0430", "\u042D\u043B\u0435\u043E\u043D\u043E\u0440\u0430", "\u042D\u043C\u0438\u043B\u0438\u044F", "\u042E\u043B\u0438\u044F"];
var E = ["\u0421\u043C\u0438\u0440\u043D\u043E\u0432\u0430", "\u0418\u0432\u0430\u043D\u043E\u0432\u0430", "\u041A\u0443\u0437\u043D\u0435\u0446\u043E\u0432\u0430", "\u041F\u043E\u043F\u043E\u0432\u0430", "\u0421\u043E\u043A\u043E\u043B\u043E\u0432\u0430", "\u041B\u0435\u0431\u0435\u0434\u0435\u0432\u0430", "\u041A\u043E\u0437\u043B\u043E\u0432\u0430", "\u041D\u043E\u0432\u0438\u043A\u043E\u0432\u0430", "\u041C\u043E\u0440\u043E\u0437\u043E\u0432\u0430", "\u041F\u0435\u0442\u0440\u043E\u0432\u0430", "\u0412\u043E\u043B\u043A\u043E\u0432\u0430", "\u0421\u043E\u043B\u043E\u0432\u044C\u0435\u0432\u0430", "\u0412\u0430\u0441\u0438\u043B\u044C\u0435\u0432\u0430", "\u0417\u0430\u0439\u0446\u0435\u0432\u0430", "\u041F\u0430\u0432\u043B\u043E\u0432\u0430", "\u0421\u0435\u043C\u0435\u043D\u043E\u0432\u0430", "\u0413\u043E\u043B\u0443\u0431\u0435\u0432\u0430", "\u0412\u0438\u043D\u043E\u0433\u0440\u0430\u0434\u043E\u0432\u0430", "\u0411\u043E\u0433\u0434\u0430\u043D\u043E\u0432\u0430", "\u0412\u043E\u0440\u043E\u0431\u044C\u0435\u0432\u0430", "\u0424\u0435\u0434\u043E\u0440\u043E\u0432\u0430", "\u041C\u0438\u0445\u0430\u0439\u043B\u043E\u0432\u0430", "\u0411\u0435\u043B\u044F\u0435\u0432\u0430", "\u0422\u0430\u0440\u0430\u0441\u043E\u0432\u0430", "\u0411\u0435\u043B\u043E\u0432\u0430", "\u041A\u043E\u043C\u0430\u0440\u043E\u0432\u0430", "\u041E\u0440\u043B\u043E\u0432\u0430", "\u041A\u0438\u0441\u0435\u043B\u0435\u0432\u0430", "\u041C\u0430\u043A\u0430\u0440\u043E\u0432\u0430", "\u0410\u043D\u0434\u0440\u0435\u0435\u0432\u0430", "\u041A\u043E\u0432\u0430\u043B\u0435\u0432\u0430", "\u0418\u043B\u044C\u0438\u043D\u0430", "\u0413\u0443\u0441\u0435\u0432\u0430", "\u0422\u0438\u0442\u043E\u0432\u0430", "\u041A\u0443\u0437\u044C\u043C\u0438\u043D\u0430", "\u041A\u0443\u0434\u0440\u044F\u0432\u0446\u0435\u0432\u0430", "\u0411\u0430\u0440\u0430\u043D\u043E\u0432\u0430", "\u041A\u0443\u043B\u0438\u043A\u043E\u0432\u0430", "\u0410\u043B\u0435\u043A\u0441\u0435\u0435\u0432\u0430", "\u0421\u0442\u0435\u043F\u0430\u043D\u043E\u0432\u0430", "\u042F\u043A\u043E\u0432\u043B\u0435\u0432\u0430", "\u0421\u043E\u0440\u043E\u043A\u0438\u043D\u0430", "\u0421\u0435\u0440\u0433\u0435\u0435\u0432\u0430", "\u0420\u043E\u043C\u0430\u043D\u043E\u0432\u0430", "\u0417\u0430\u0445\u0430\u0440\u043E\u0432\u0430", "\u0411\u043E\u0440\u0438\u0441\u043E\u0432\u0430", "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0430", "\u0413\u0435\u0440\u0430\u0441\u0438\u043C\u043E\u0432\u0430", "\u041F\u043E\u043D\u043E\u043C\u0430\u0440\u0435\u0432\u0430", "\u0413\u0440\u0438\u0433\u043E\u0440\u044C\u0435\u0432\u0430", "\u041B\u0430\u0437\u0430\u0440\u0435\u0432\u0430", "\u041C\u0435\u0434\u0432\u0435\u0434\u0435\u0432\u0430", "\u0415\u0440\u0448\u043E\u0432\u0430", "\u041D\u0438\u043A\u0438\u0442\u0438\u043D\u0430", "\u0421\u043E\u0431\u043E\u043B\u0435\u0432\u0430", "\u0420\u044F\u0431\u043E\u0432\u0430", "\u041F\u043E\u043B\u044F\u043A\u043E\u0432\u0430", "\u0426\u0432\u0435\u0442\u043A\u043E\u0432\u0430", "\u0414\u0430\u043D\u0438\u043B\u043E\u0432\u0430", "\u0416\u0443\u043A\u043E\u0432\u0430", "\u0424\u0440\u043E\u043B\u043E\u0432\u0430", "\u0416\u0443\u0440\u0430\u0432\u043B\u0435\u0432\u0430", "\u041D\u0438\u043A\u043E\u043B\u0430\u0435\u0432\u0430", "\u041A\u0440\u044B\u043B\u043E\u0432\u0430", "\u041C\u0430\u043A\u0441\u0438\u043C\u043E\u0432\u0430", "\u0421\u0438\u0434\u043E\u0440\u043E\u0432\u0430", "\u041E\u0441\u0438\u043F\u043E\u0432\u0430", "\u0411\u0435\u043B\u043E\u0443\u0441\u043E\u0432\u0430", "\u0424\u0435\u0434\u043E\u0442\u043E\u0432\u0430", "\u0414\u043E\u0440\u043E\u0444\u0435\u0435\u0432\u0430", "\u0415\u0433\u043E\u0440\u043E\u0432\u0430", "\u041C\u0430\u0442\u0432\u0435\u0435\u0432\u0430", "\u0411\u043E\u0431\u0440\u043E\u0432\u0430", "\u0414\u043C\u0438\u0442\u0440\u0438\u0435\u0432\u0430", "\u041A\u0430\u043B\u0438\u043D\u0438\u043D\u0430", "\u0410\u043D\u0438\u0441\u0438\u043C\u043E\u0432\u0430", "\u041F\u0435\u0442\u0443\u0445\u043E\u0432\u0430", "\u0410\u043D\u0442\u043E\u043D\u043E\u0432\u0430", "\u0422\u0438\u043C\u043E\u0444\u0435\u0435\u0432\u0430", "\u041D\u0438\u043A\u0438\u0444\u043E\u0440\u043E\u0432\u0430", "\u0412\u0435\u0441\u0435\u043B\u043E\u0432\u0430", "\u0424\u0438\u043B\u0438\u043F\u043F\u043E\u0432\u0430", "\u041C\u0430\u0440\u043A\u043E\u0432\u0430", "\u0411\u043E\u043B\u044C\u0448\u0430\u043A\u043E\u0432\u0430", "\u0421\u0443\u0445\u0430\u043D\u043E\u0432\u0430", "\u041C\u0438\u0440\u043E\u043D\u043E\u0432\u0430", "\u0428\u0438\u0440\u044F\u0435\u0432\u0430", "\u0410\u043B\u0435\u043A\u0441\u0430\u043D\u0434\u0440\u043E\u0432\u0430", "\u041A\u043E\u043D\u043E\u0432\u0430\u043B\u043E\u0432\u0430", "\u0428\u0435\u0441\u0442\u0430\u043A\u043E\u0432\u0430", "\u041A\u0430\u0437\u0430\u043A\u043E\u0432\u0430", "\u0415\u0444\u0438\u043C\u043E\u0432\u0430", "\u0414\u0435\u043D\u0438\u0441\u043E\u0432\u0430", "\u0413\u0440\u043E\u043C\u043E\u0432\u0430", "\u0424\u043E\u043C\u0438\u043D\u0430", "\u0414\u0430\u0432\u044B\u0434\u043E\u0432\u0430", "\u041C\u0435\u043B\u044C\u043D\u0438\u043A\u043E\u0432\u0430", "\u0429\u0435\u0440\u0431\u0430\u043A\u043E\u0432\u0430", "\u0411\u043B\u0438\u043D\u043E\u0432\u0430", "\u041A\u043E\u043B\u0435\u0441\u043D\u0438\u043A\u043E\u0432\u0430", "\u041A\u0430\u0440\u043F\u043E\u0432\u0430", "\u0410\u0444\u0430\u043D\u0430\u0441\u044C\u0435\u0432\u0430", "\u0412\u043B\u0430\u0441\u043E\u0432\u0430", "\u041C\u0430\u0441\u043B\u043E\u0432\u0430", "\u0418\u0441\u0430\u043A\u043E\u0432\u0430", "\u0422\u0438\u0445\u043E\u043D\u043E\u0432\u0430", "\u0410\u043A\u0441\u0435\u043D\u043E\u0432\u0430", "\u0413\u0430\u0432\u0440\u0438\u043B\u043E\u0432\u0430", "\u0420\u043E\u0434\u0438\u043E\u043D\u043E\u0432\u0430", "\u041A\u043E\u0442\u043E\u0432\u0430", "\u0413\u043E\u0440\u0431\u0443\u043D\u043E\u0432\u0430", "\u041A\u0443\u0434\u0440\u044F\u0448\u043E\u0432\u0430", "\u0411\u044B\u043A\u043E\u0432\u0430", "\u0417\u0443\u0435\u0432\u0430", "\u0422\u0440\u0435\u0442\u044C\u044F\u043A\u043E\u0432\u0430", "\u0421\u0430\u0432\u0435\u043B\u044C\u0435\u0432\u0430", "\u041F\u0430\u043D\u043E\u0432\u0430", "\u0420\u044B\u0431\u0430\u043A\u043E\u0432\u0430", "\u0421\u0443\u0432\u043E\u0440\u043E\u0432\u0430", "\u0410\u0431\u0440\u0430\u043C\u043E\u0432\u0430", "\u0412\u043E\u0440\u043E\u043D\u043E\u0432\u0430", "\u041C\u0443\u0445\u0438\u043D\u0430", "\u0410\u0440\u0445\u0438\u043F\u043E\u0432\u0430", "\u0422\u0440\u043E\u0444\u0438\u043C\u043E\u0432\u0430", "\u041C\u0430\u0440\u0442\u044B\u043D\u043E\u0432\u0430", "\u0415\u043C\u0435\u043B\u044C\u044F\u043D\u043E\u0432\u0430", "\u0413\u043E\u0440\u0448\u043A\u043E\u0432\u0430", "\u0427\u0435\u0440\u043D\u043E\u0432\u0430", "\u041E\u0432\u0447\u0438\u043D\u043D\u0438\u043A\u043E\u0432\u0430", "\u0421\u0435\u043B\u0435\u0437\u043D\u0435\u0432\u0430", "\u041F\u0430\u043D\u0444\u0438\u043B\u043E\u0432\u0430", "\u041A\u043E\u043F\u044B\u043B\u043E\u0432\u0430", "\u041C\u0438\u0445\u0435\u0435\u0432\u0430", "\u0413\u0430\u043B\u043A\u0438\u043D\u0430", "\u041D\u0430\u0437\u0430\u0440\u043E\u0432\u0430", "\u041B\u043E\u0431\u0430\u043D\u043E\u0432\u0430", "\u041B\u0443\u043A\u0438\u043D\u0430", "\u0411\u0435\u043B\u044F\u043A\u043E\u0432\u0430", "\u041F\u043E\u0442\u0430\u043F\u043E\u0432\u0430", "\u041D\u0435\u043A\u0440\u0430\u0441\u043E\u0432\u0430", "\u0425\u043E\u0445\u043B\u043E\u0432\u0430", "\u0416\u0434\u0430\u043D\u043E\u0432\u0430", "\u041D\u0430\u0443\u043C\u043E\u0432\u0430", "\u0428\u0438\u043B\u043E\u0432\u0430", "\u0412\u043E\u0440\u043E\u043D\u0446\u043E\u0432\u0430", "\u0415\u0440\u043C\u0430\u043A\u043E\u0432\u0430", "\u0414\u0440\u043E\u0437\u0434\u043E\u0432\u0430", "\u0418\u0433\u043D\u0430\u0442\u044C\u0435\u0432\u0430", "\u0421\u0430\u0432\u0438\u043D\u0430", "\u041B\u043E\u0433\u0438\u043D\u043E\u0432\u0430", "\u0421\u0430\u0444\u043E\u043D\u043E\u0432\u0430", "\u041A\u0430\u043F\u0443\u0441\u0442\u0438\u043D\u0430", "\u041A\u0438\u0440\u0438\u043B\u043B\u043E\u0432\u0430", "\u041C\u043E\u0438\u0441\u0435\u0435\u0432\u0430", "\u0415\u043B\u0438\u0441\u0435\u0435\u0432\u0430", "\u041A\u043E\u0448\u0435\u043B\u0435\u0432\u0430", "\u041A\u043E\u0441\u0442\u0438\u043D\u0430", "\u0413\u043E\u0440\u0431\u0430\u0447\u0435\u0432\u0430", "\u041E\u0440\u0435\u0445\u043E\u0432\u0430", "\u0415\u0444\u0440\u0435\u043C\u043E\u0432\u0430", "\u0418\u0441\u0430\u0435\u0432\u0430", "\u0415\u0432\u0434\u043E\u043A\u0438\u043C\u043E\u0432\u0430", "\u041A\u0430\u043B\u0430\u0448\u043D\u0438\u043A\u043E\u0432\u0430", "\u041A\u0430\u0431\u0430\u043D\u043E\u0432\u0430", "\u041D\u043E\u0441\u043A\u043E\u0432\u0430", "\u042E\u0434\u0438\u043D\u0430", "\u041A\u0443\u043B\u0430\u0433\u0438\u043D\u0430", "\u041B\u0430\u043F\u0438\u043D\u0430", "\u041F\u0440\u043E\u0445\u043E\u0440\u043E\u0432\u0430", "\u041D\u0435\u0441\u0442\u0435\u0440\u043E\u0432\u0430", "\u0425\u0430\u0440\u0438\u0442\u043E\u043D\u043E\u0432\u0430", "\u0410\u0433\u0430\u0444\u043E\u043D\u043E\u0432\u0430", "\u041C\u0443\u0440\u0430\u0432\u044C\u0435\u0432\u0430", "\u041B\u0430\u0440\u0438\u043E\u043D\u043E\u0432\u0430", "\u0424\u0435\u0434\u043E\u0441\u0435\u0435\u0432\u0430", "\u0417\u0438\u043C\u0438\u043D\u0430", "\u041F\u0430\u0445\u043E\u043C\u043E\u0432\u0430", "\u0428\u0443\u0431\u0438\u043D\u0430", "\u0418\u0433\u043D\u0430\u0442\u043E\u0432\u0430", "\u0424\u0438\u043B\u0430\u0442\u043E\u0432\u0430", "\u041A\u0440\u044E\u043A\u043E\u0432\u0430", "\u0420\u043E\u0433\u043E\u0432\u0430", "\u041A\u0443\u043B\u0430\u043A\u043E\u0432\u0430", "\u0422\u0435\u0440\u0435\u043D\u0442\u044C\u0435\u0432\u0430", "\u041C\u043E\u043B\u0447\u0430\u043D\u043E\u0432\u0430", "\u0412\u043B\u0430\u0434\u0438\u043C\u0438\u0440\u043E\u0432\u0430", "\u0410\u0440\u0442\u0435\u043C\u044C\u0435\u0432\u0430", "\u0413\u0443\u0440\u044C\u0435\u0432\u0430", "\u0417\u0438\u043D\u043E\u0432\u044C\u0435\u0432\u0430", "\u0413\u0440\u0438\u0448\u0438\u043D\u0430", "\u041A\u043E\u043D\u043E\u043D\u043E\u0432\u0430", "\u0414\u0435\u043C\u0435\u043D\u0442\u044C\u0435\u0432\u0430", "\u0421\u0438\u0442\u043D\u0438\u043A\u043E\u0432\u0430", "\u0421\u0438\u043C\u043E\u043D\u043E\u0432\u0430", "\u041C\u0438\u0448\u0438\u043D\u0430", "\u0424\u0430\u0434\u0435\u0435\u0432\u0430", "\u041A\u043E\u043C\u0438\u0441\u0441\u0430\u0440\u043E\u0432\u0430", "\u041C\u0430\u043C\u043E\u043D\u0442\u043E\u0432\u0430", "\u041D\u043E\u0441\u043E\u0432\u0430", "\u0413\u0443\u043B\u044F\u0435\u0432\u0430", "\u0428\u0430\u0440\u043E\u0432\u0430", "\u0423\u0441\u0442\u0438\u043D\u043E\u0432\u0430", "\u0412\u0438\u0448\u043D\u044F\u043A\u043E\u0432\u0430", "\u0415\u0432\u0441\u0435\u0435\u0432\u0430", "\u041B\u0430\u0432\u0440\u0435\u043D\u0442\u044C\u0435\u0432\u0430", "\u0411\u0440\u0430\u0433\u0438\u043D\u0430", "\u041A\u043E\u043D\u0441\u0442\u0430\u043D\u0442\u0438\u043D\u043E\u0432\u0430", "\u041A\u043E\u0440\u043D\u0438\u043B\u043E\u0432\u0430", "\u0410\u0432\u0434\u0435\u0435\u0432\u0430", "\u0417\u044B\u043A\u043E\u0432\u0430", "\u0411\u0438\u0440\u044E\u043A\u043E\u0432\u0430", "\u0428\u0430\u0440\u0430\u043F\u043E\u0432\u0430", "\u041D\u0438\u043A\u043E\u043D\u043E\u0432\u0430", "\u0429\u0443\u043A\u0438\u043D\u0430", "\u0414\u044C\u044F\u0447\u043A\u043E\u0432\u0430", "\u041E\u0434\u0438\u043D\u0446\u043E\u0432\u0430", "\u0421\u0430\u0437\u043E\u043D\u043E\u0432\u0430", "\u042F\u043A\u0443\u0448\u0435\u0432\u0430", "\u041A\u0440\u0430\u0441\u0438\u043B\u044C\u043D\u0438\u043A\u043E\u0432\u0430", "\u0413\u043E\u0440\u0434\u0435\u0435\u0432\u0430", "\u0421\u0430\u043C\u043E\u0439\u043B\u043E\u0432\u0430", "\u041A\u043D\u044F\u0437\u0435\u0432\u0430", "\u0411\u0435\u0441\u043F\u0430\u043B\u043E\u0432\u0430", "\u0423\u0432\u0430\u0440\u043E\u0432\u0430", "\u0428\u0430\u0448\u043A\u043E\u0432\u0430", "\u0411\u043E\u0431\u044B\u043B\u0435\u0432\u0430", "\u0414\u043E\u0440\u043E\u043D\u0438\u043D\u0430", "\u0411\u0435\u043B\u043E\u0437\u0435\u0440\u043E\u0432\u0430", "\u0420\u043E\u0436\u043A\u043E\u0432\u0430", "\u0421\u0430\u043C\u0441\u043E\u043D\u043E\u0432\u0430", "\u041C\u044F\u0441\u043D\u0438\u043A\u043E\u0432\u0430", "\u041B\u0438\u0445\u0430\u0447\u0435\u0432\u0430", "\u0411\u0443\u0440\u043E\u0432\u0430", "\u0421\u044B\u0441\u043E\u0435\u0432\u0430", "\u0424\u043E\u043C\u0438\u0447\u0435\u0432\u0430", "\u0420\u0443\u0441\u0430\u043A\u043E\u0432\u0430", "\u0421\u0442\u0440\u0435\u043B\u043A\u043E\u0432\u0430", "\u0413\u0443\u0449\u0438\u043D\u0430", "\u0422\u0435\u0442\u0435\u0440\u0438\u043D\u0430", "\u041A\u043E\u043B\u043E\u0431\u043E\u0432\u0430", "\u0421\u0443\u0431\u0431\u043E\u0442\u0438\u043D\u0430", "\u0424\u043E\u043A\u0438\u043D\u0430", "\u0411\u043B\u043E\u0445\u0438\u043D\u0430", "\u0421\u0435\u043B\u0438\u0432\u0435\u0440\u0441\u0442\u043E\u0432\u0430", "\u041F\u0435\u0441\u0442\u043E\u0432\u0430", "\u041A\u043E\u043D\u0434\u0440\u0430\u0442\u044C\u0435\u0432\u0430", "\u0421\u0438\u043B\u0438\u043D\u0430", "\u041C\u0435\u0440\u043A\u0443\u0448\u0435\u0432\u0430", "\u041B\u044B\u0442\u043A\u0438\u043D\u0430", "\u0422\u0443\u0440\u043E\u0432\u0430"];
var G = ["\u0410\u043B\u0435\u043A\u0441\u0430\u043D\u0434\u0440\u043E\u0432\u043D\u0430", "\u0410\u043D\u0434\u0440\u0435\u0435\u0432\u043D\u0430", "\u0410\u0440\u0445\u0438\u043F\u043E\u0432\u043D\u0430", "\u0410\u043B\u0435\u043A\u0441\u0435\u0435\u0432\u043D\u0430", "\u0410\u043D\u0442\u043E\u043D\u043E\u0432\u043D\u0430", "\u0410\u0441\u043A\u043E\u043B\u044C\u0434\u043E\u0432\u043D\u0430", "\u0410\u043B\u044C\u0431\u0435\u0440\u0442\u043E\u0432\u043D\u0430", "\u0410\u0440\u043A\u0430\u0434\u044C\u0435\u0432\u043D\u0430", "\u0410\u0444\u0430\u043D\u0430\u0441\u044C\u0435\u0432\u043D\u0430", "\u0410\u043D\u0430\u0442\u043E\u043B\u044C\u0435\u0432\u043D\u0430", "\u0410\u0440\u0442\u0435\u043C\u043E\u0432\u043D\u0430", "\u0411\u043E\u0433\u0434\u0430\u043D\u043E\u0432\u043D\u0430", "\u0411\u043E\u043B\u0435\u0441\u043B\u0430\u0432\u043E\u0432\u043D\u0430", "\u0411\u043E\u0440\u0438\u0441\u043E\u0432\u043D\u0430", "\u0412\u0430\u0434\u0438\u043C\u043E\u0432\u043D\u0430", "\u0412\u0430\u0441\u0438\u043B\u044C\u0435\u0432\u043D\u0430", "\u0412\u043B\u0430\u0434\u0438\u043C\u0438\u0440\u043E\u0432\u043D\u0430", "\u0412\u0430\u043B\u0435\u043D\u0442\u0438\u043D\u043E\u0432\u043D\u0430", "\u0412\u0435\u043D\u0438\u0430\u043C\u0438\u043D\u043E\u0432\u043D\u0430", "\u0412\u043B\u0430\u0434\u0438\u0441\u043B\u0430\u0432\u043E\u0432\u043D\u0430", "\u0412\u0430\u043B\u0435\u0440\u0438\u0435\u0432\u043D\u0430", "\u0412\u0438\u043A\u0442\u043E\u0440\u043E\u0432\u043D\u0430", "\u0412\u044F\u0447\u0435\u0441\u043B\u0430\u0432\u043E\u0432\u043D\u0430", "\u0413\u0435\u043D\u043D\u0430\u0434\u0438\u0435\u0432\u043D\u0430", "\u0413\u0435\u043E\u0440\u0433\u0438\u0435\u0432\u043D\u0430", "\u0413\u0435\u043D\u043D\u0430\u0434\u044C\u0435\u0432\u043D\u0430", "\u0413\u0440\u0438\u0433\u043E\u0440\u044C\u0435\u0432\u043D\u0430", "\u0414\u0430\u043D\u0438\u043B\u043E\u0432\u043D\u0430", "\u0414\u043C\u0438\u0442\u0440\u0438\u0435\u0432\u043D\u0430", "\u0415\u0432\u0433\u0435\u043D\u044C\u0435\u0432\u043D\u0430", "\u0415\u0433\u043E\u0440\u043E\u0432\u043D\u0430", "\u0415\u0444\u0438\u043C\u043E\u0432\u043D\u0430", "\u0416\u0434\u0430\u043D\u043E\u0432\u043D\u0430", "\u0417\u0430\u0445\u0430\u0440\u043E\u0432\u043D\u0430", "\u0418\u0432\u0430\u043D\u043E\u0432\u043D\u0430", "\u0418\u0433\u043E\u0440\u0435\u0432\u043D\u0430", "\u0418\u043B\u044C\u0438\u043D\u0438\u0447\u043D\u0430", "\u041A\u0438\u0440\u0438\u043B\u043B\u043E\u0432\u043D\u0430", "\u041A\u0443\u0437\u044C\u043C\u0438\u043D\u0438\u0447\u043D\u0430", "\u041A\u043E\u043D\u0441\u0442\u0430\u043D\u0442\u0438\u043D\u043E\u0432\u043D\u0430", "\u041B\u0435\u043E\u043D\u0438\u0434\u043E\u0432\u043D\u0430", "\u041B\u0435\u043E\u043D\u043E\u0432\u043D\u0430", "\u041B\u044C\u0432\u043E\u0432\u043D\u0430", "\u041C\u0430\u043A\u0430\u0440\u043E\u0432\u043D\u0430", "\u041C\u0430\u0442\u0432\u0435\u0435\u0432\u043D\u0430", "\u041C\u0438\u0445\u0430\u0439\u043B\u043E\u0432\u043D\u0430", "\u041C\u0430\u043A\u0441\u0438\u043C\u043E\u0432\u043D\u0430", "\u041C\u0438\u0440\u043E\u043D\u043E\u0432\u043D\u0430", "\u041D\u0430\u0442\u0430\u043D\u043E\u0432\u043D\u0430", "\u041D\u0438\u043A\u0438\u0444\u043E\u0440\u043E\u0432\u043D\u0430", "\u041D\u0438\u043B\u043E\u0432\u043D\u0430", "\u041D\u0430\u0443\u043C\u043E\u0432\u043D\u0430", "\u041D\u0438\u043A\u043E\u043B\u0430\u0435\u0432\u043D\u0430", "\u041E\u043B\u0435\u0433\u043E\u0432\u043D\u0430", "\u041E\u0441\u043A\u0430\u0440\u043E\u0432\u043D\u0430", "\u041F\u0430\u0432\u043B\u043E\u0432\u043D\u0430", "\u041F\u0435\u0442\u0440\u043E\u0432\u043D\u0430", "\u0420\u043E\u0431\u0435\u0440\u0442\u043E\u0432\u043D\u0430", "\u0420\u0443\u0431\u0435\u043D\u043E\u0432\u043D\u0430", "\u0420\u0443\u0441\u043B\u0430\u043D\u043E\u0432\u043D\u0430", "\u0420\u043E\u043C\u0430\u043D\u043E\u0432\u043D\u0430", "\u0420\u0443\u0434\u043E\u043B\u044C\u0444\u043E\u0432\u043D\u0430", "\u0421\u0432\u044F\u0442\u043E\u0441\u043B\u0430\u0432\u043E\u0432\u043D\u0430", "\u0421\u0435\u0440\u0433\u0435\u0435\u0432\u043D\u0430", "\u0421\u0442\u0435\u043F\u0430\u043D\u043E\u0432\u043D\u0430", "\u0421\u0435\u043C\u0435\u043D\u043E\u0432\u043D\u0430", "\u0421\u0442\u0430\u043D\u0438\u0441\u043B\u0430\u0432\u043E\u0432\u043D\u0430", "\u0422\u0430\u0440\u0430\u0441\u043E\u0432\u043D\u0430", "\u0422\u0438\u043C\u043E\u0444\u0435\u0435\u0432\u043D\u0430", "\u0422\u0438\u043C\u0443\u0440\u043E\u0432\u043D\u0430", "\u0424\u0435\u0434\u043E\u0440\u043E\u0432\u043D\u0430", "\u0424\u0435\u043B\u0438\u043A\u0441\u043E\u0432\u043D\u0430", "\u0424\u0438\u043B\u0438\u043F\u043F\u043E\u0432\u043D\u0430", "\u0425\u0430\u0440\u0438\u0442\u043E\u043D\u043E\u0432\u043D\u0430", "\u042D\u0434\u0443\u0430\u0440\u0434\u043E\u0432\u043D\u0430", "\u042D\u043B\u044C\u0434\u0430\u0440\u043E\u0432\u043D\u0430", "\u042E\u043B\u044C\u0435\u0432\u043D\u0430", "\u042E\u0440\u044C\u0435\u0432\u043D\u0430", "\u042F\u043A\u043E\u0432\u043B\u0435\u0432\u043D\u0430"];
var R = ["\u0410\u0432\u0433\u0443\u0441\u0442", "\u0410\u0432\u0434\u0435\u0439", "\u0410\u0432\u0435\u0440\u043A\u0438\u0439", "\u0410\u0432\u0435\u0440\u044C\u044F\u043D", "\u0410\u0432\u043A\u0441\u0435\u043D\u0442\u0438\u0439", "\u0410\u0432\u0442\u043E\u043D\u043E\u043C", "\u0410\u0433\u0430\u043F", "\u0410\u0433\u0430\u0444\u043E\u043D", "\u0410\u0433\u0433\u0435\u0439", "\u0410\u0434\u0430\u043C", "\u0410\u0434\u0440\u0438\u0430\u043D", "\u0410\u0437\u0430\u0440\u0438\u0439", "\u0410\u043A\u0438\u043C", "\u0410\u043B\u0435\u043A\u0441\u0430\u043D\u0434\u0440", "\u0410\u043B\u0435\u043A\u0441\u0435\u0439", "\u0410\u043C\u0432\u0440\u043E\u0441\u0438\u0439", "\u0410\u043C\u043E\u0441", "\u0410\u043D\u0430\u043D\u0438\u0439", "\u0410\u043D\u0430\u0442\u043E\u043B\u0438\u0439", "\u0410\u043D\u0434\u0440\u0435\u0439", "\u0410\u043D\u0434\u0440\u043E\u043D", "\u0410\u043D\u0434\u0440\u043E\u043D\u0438\u043A", "\u0410\u043D\u0438\u043A\u0435\u0439", "\u0410\u043D\u0438\u043A\u0438\u0442\u0430", "\u0410\u043D\u0438\u0441\u0438\u043C", "\u0410\u043D\u0442\u0438\u043F", "\u0410\u043D\u0442\u043E\u043D\u0438\u043D", "\u0410\u043F\u043E\u043B\u043B\u0438\u043D\u0430\u0440\u0438\u0439", "\u0410\u043F\u043E\u043B\u043B\u043E\u043D", "\u0410\u0440\u0435\u0444\u0438\u0439", "\u0410\u0440\u0438\u0441\u0442\u0430\u0440\u0445", "\u0410\u0440\u043A\u0430\u0434\u0438\u0439", "\u0410\u0440\u0441\u0435\u043D\u0438\u0439", "\u0410\u0440\u0442\u0435\u043C\u0438\u0439", "\u0410\u0440\u0442\u0435\u043C", "\u0410\u0440\u0445\u0438\u043F", "\u0410\u0441\u043A\u043E\u043B\u044C\u0434", "\u0410\u0444\u0430\u043D\u0430\u0441\u0438\u0439", "\u0410\u0444\u0438\u043D\u043E\u0433\u0435\u043D", "\u0411\u0430\u0436\u0435\u043D", "\u0411\u043E\u0433\u0434\u0430\u043D", "\u0411\u043E\u043B\u0435\u0441\u043B\u0430\u0432", "\u0411\u043E\u0440\u0438\u0441", "\u0411\u043E\u0440\u0438\u0441\u043B\u0430\u0432", "\u0411\u043E\u044F\u043D", "\u0411\u0440\u043E\u043D\u0438\u0441\u043B\u0430\u0432", "\u0411\u0443\u0434\u0438\u043C\u0438\u0440", "\u0412\u0430\u0434\u0438\u043C", "\u0412\u0430\u043B\u0435\u043D\u0442\u0438\u043D", "\u0412\u0430\u043B\u0435\u0440\u0438\u0439", "\u0412\u0430\u043B\u0435\u0440\u044C\u044F\u043D", "\u0412\u0430\u0440\u043B\u0430\u0430\u043C", "\u0412\u0430\u0440\u0444\u043E\u043B\u043E\u043C\u0435\u0439", "\u0412\u0430\u0441\u0438\u043B\u0438\u0439", "\u0412\u0430\u0446\u043B\u0430\u0432", "\u0412\u0435\u043B\u0438\u043C\u0438\u0440", "\u0412\u0435\u043D\u0435\u0434\u0438\u043A\u0442", "\u0412\u0435\u043D\u0438\u0430\u043C\u0438\u043D", "\u0412\u0438\u043A\u0435\u043D\u0442\u0438\u0439", "\u0412\u0438\u043A\u0442\u043E\u0440", "\u0412\u0438\u043A\u0442\u043E\u0440\u0438\u043D", "\u0412\u0438\u0441\u0441\u0430\u0440\u0438\u043E\u043D", "\u0412\u0438\u0442\u0430\u043B\u0438\u0439", "\u0412\u043B\u0430\u0434\u0438\u043B\u0435\u043D", "\u0412\u043B\u0430\u0434\u043B\u0435\u043D", "\u0412\u043B\u0430\u0434\u0438\u043C\u0438\u0440", "\u0412\u043B\u0430\u0434\u0438\u0441\u043B\u0430\u0432", "\u0412\u043B\u0430\u0441", "\u0412\u0441\u0435\u0432\u043E\u043B\u043E\u0434", "\u0412\u0441\u0435\u043C\u0438\u043B", "\u0412\u0441\u0435\u0441\u043B\u0430\u0432", "\u0412\u044B\u0448\u0435\u0441\u043B\u0430\u0432", "\u0412\u044F\u0447\u0435\u0441\u043B\u0430\u0432", "\u0413\u0430\u0432\u0440\u0438\u043B\u0430", "\u0413\u0430\u043B\u0430\u043A\u0442\u0438\u043E\u043D", "\u0413\u0435\u0434\u0435\u043E\u043D", "\u0413\u0435\u043D\u043D\u0430\u0434\u0438\u0439", "\u0413\u0435\u043E\u0440\u0433\u0438\u0439", "\u0413\u0435\u0440\u0430\u0441\u0438\u043C", "\u0413\u0435\u0440\u043C\u0430\u043D", "\u0413\u043B\u0435\u0431", "\u0413\u043E\u0440\u0434\u0435\u0439", "\u0413\u043E\u0441\u0442\u043E\u043C\u044B\u0441\u043B", "\u0413\u0440\u0435\u043C\u0438\u0441\u043B\u0430\u0432", "\u0413\u0440\u0438\u0433\u043E\u0440\u0438\u0439", "\u0413\u0443\u0440\u0438\u0439", "\u0414\u0430\u0432\u044B\u0434", "\u0414\u0430\u043D\u0438\u043B\u0430", "\u0414\u0435\u043C\u0435\u043D\u0442\u0438\u0439", "\u0414\u0435\u043C\u0438\u0434", "\u0414\u0435\u043C\u044C\u044F\u043D", "\u0414\u0435\u043D\u0438\u0441", "\u0414\u043C\u0438\u0442\u0440\u0438\u0439", "\u0414\u043E\u0431\u0440\u043E\u043C\u044B\u0441\u043B", "\u0414\u043E\u0431\u0440\u043E\u0441\u043B\u0430\u0432", "\u0414\u043E\u0440\u043E\u0444\u0435\u0439", "\u0415\u0432\u0433\u0435\u043D\u0438\u0439", "\u0415\u0432\u0433\u0440\u0430\u0444", "\u0415\u0432\u0434\u043E\u043A\u0438\u043C", "\u0415\u0432\u043B\u0430\u043C\u043F\u0438\u0439", "\u0415\u0432\u0441\u0435\u0439", "\u0415\u0432\u0441\u0442\u0430\u0444\u0438\u0439", "\u0415\u0432\u0441\u0442\u0438\u0433\u043D\u0435\u0439", "\u0415\u0433\u043E\u0440", "\u0415\u043B\u0438\u0437\u0430\u0440", "\u0415\u043B\u0438\u0441\u0435\u0439", "\u0415\u043C\u0435\u043B\u044C\u044F\u043D", "\u0415\u043F\u0438\u0444\u0430\u043D", "\u0415\u0440\u0435\u043C\u0435\u0439", "\u0415\u0440\u043C\u0438\u043B", "\u0415\u0440\u043C\u043E\u043B\u0430\u0439", "\u0415\u0440\u043E\u0444\u0435\u0439", "\u0415\u0444\u0438\u043C", "\u0415\u0444\u0440\u0435\u043C", "\u0417\u0430\u0445\u0430\u0440", "\u0417\u0438\u043D\u043E\u0432\u0438\u0439", "\u0417\u043E\u0441\u0438\u043C\u0430", "\u0418\u0432\u0430\u043D", "\u0418\u0433\u043D\u0430\u0442\u0438\u0439", "\u0418\u0433\u043E\u0440\u044C", "\u0418\u0437\u043C\u0430\u0438\u043B", "\u0418\u0437\u043E\u0442", "\u0418\u0437\u044F\u0441\u043B\u0430\u0432", "\u0418\u043B\u0430\u0440\u0438\u043E\u043D", "\u0418\u043B\u044C\u044F", "\u0418\u043D\u043D\u043E\u043A\u0435\u043D\u0442\u0438\u0439", "\u0418\u043E\u0441\u0438\u0444", "\u0418\u043F\u0430\u0442", "\u0418\u043F\u0430\u0442\u0438\u0439", "\u0418\u043F\u043F\u043E\u043B\u0438\u0442", "\u0418\u0440\u0430\u043A\u043B\u0438\u0439", "\u0418\u0441\u0430\u0439", "\u0418\u0441\u0438\u0434\u043E\u0440", "\u041A\u0430\u0437\u0438\u043C\u0438\u0440", "\u041A\u0430\u043B\u043B\u0438\u0441\u0442\u0440\u0430\u0442", "\u041A\u0430\u043F\u0438\u0442\u043E\u043D", "\u041A\u0430\u0440\u043B", "\u041A\u0430\u0440\u043F", "\u041A\u0430\u0441\u044C\u044F\u043D", "\u041A\u0438\u043C", "\u041A\u0438\u0440", "\u041A\u0438\u0440\u0438\u043B\u043B", "\u041A\u043B\u0430\u0432\u0434\u0438\u0439", "\u041A\u043B\u0438\u043C\u0435\u043D\u0442", "\u041A\u043E\u043D\u0434\u0440\u0430\u0442", "\u041A\u043E\u043D\u0434\u0440\u0430\u0442\u0438\u0439", "\u041A\u043E\u043D\u043E\u043D", "\u041A\u043E\u043D\u0441\u0442\u0430\u043D\u0442\u0438\u043D", "\u041A\u043E\u0440\u043D\u0438\u043B", "\u041A\u0443\u0437\u044C\u043C\u0430", "\u041A\u0443\u043F\u0440\u0438\u044F\u043D", "\u041B\u0430\u0432\u0440", "\u041B\u0430\u0432\u0440\u0435\u043D\u0442\u0438\u0439", "\u041B\u0430\u0434\u0438\u043C\u0438\u0440", "\u041B\u0430\u0434\u0438\u0441\u043B\u0430\u0432", "\u041B\u0430\u0437\u0430\u0440\u044C", "\u041B\u0435\u0432", "\u041B\u0435\u043E\u043D", "\u041B\u0435\u043E\u043D\u0438\u0434", "\u041B\u0435\u043E\u043D\u0442\u0438\u0439", "\u041B\u043E\u043D\u0433\u0438\u043D", "\u041B\u0443\u043A\u0430", "\u041B\u0443\u043A\u044C\u044F\u043D", "\u041B\u0443\u0447\u0435\u0437\u0430\u0440", "\u041B\u044E\u0431\u0438\u043C", "\u041B\u044E\u0431\u043E\u043C\u0438\u0440", "\u041B\u044E\u0431\u043E\u0441\u043C\u044B\u0441\u043B", "\u041C\u0430\u043A\u0430\u0440", "\u041C\u0430\u043A\u0441\u0438\u043C", "\u041C\u0430\u043A\u0441\u0438\u043C\u0438\u043B\u044C\u044F\u043D", "\u041C\u0430\u0440\u0438\u0430\u043D", "\u041C\u0430\u0440\u043A", "\u041C\u0430\u0440\u0442\u044B\u043D", "\u041C\u0430\u0440\u0442\u044C\u044F\u043D", "\u041C\u0430\u0442\u0432\u0435\u0439", "\u041C\u0435\u0444\u043E\u0434\u0438\u0439", "\u041C\u0435\u0447\u0438\u0441\u043B\u0430\u0432", "\u041C\u0438\u043B\u0430\u043D", "\u041C\u0438\u043B\u0435\u043D", "\u041C\u0438\u043B\u0438\u0439", "\u041C\u0438\u043B\u043E\u0432\u0430\u043D", "\u041C\u0438\u043D\u0430", "\u041C\u0438\u0440", "\u041C\u0438\u0440\u043E\u043D", "\u041C\u0438\u0440\u043E\u0441\u043B\u0430\u0432", "\u041C\u0438\u0442\u043E\u0444\u0430\u043D", "\u041C\u0438\u0445\u0430\u0438\u043B", "\u041C\u0438\u0445\u0435\u0439", "\u041C\u043E\u0434\u0435\u0441\u0442", "\u041C\u043E\u0438\u0441\u0435\u0439", "\u041C\u043E\u043A\u0435\u0439", "\u041C\u0441\u0442\u0438\u0441\u043B\u0430\u0432", "\u041D\u0430\u0437\u0430\u0440", "\u041D\u0430\u0440\u043A\u0438\u0441", "\u041D\u0430\u0442\u0430\u043D", "\u041D\u0430\u0443\u043C", "\u041D\u0435\u0441\u0442\u043E\u0440", "\u041D\u0438\u043A\u0430\u043D\u0434\u0440", "\u041D\u0438\u043A\u0430\u043D\u043E\u0440", "\u041D\u0438\u043A\u0438\u0442\u0430", "\u041D\u0438\u043A\u0438\u0444\u043E\u0440", "\u041D\u0438\u043A\u043E\u0434\u0438\u043C", "\u041D\u0438\u043A\u043E\u043B\u0430\u0439", "\u041D\u0438\u043A\u043E\u043D", "\u041D\u0438\u0444\u043E\u043D\u0442", "\u041E\u043B\u0435\u0433", "\u041E\u043B\u0438\u043C\u043F\u0438\u0439", "\u041E\u043D\u0443\u0444\u0440\u0438\u0439", "\u041E\u0440\u0435\u0441\u0442", "\u041E\u0441\u0438\u043F", "\u041E\u0441\u0442\u0430\u043F", "\u041E\u0441\u0442\u0440\u043E\u043C\u0438\u0440", "\u041F\u0430\u0432\u0435\u043B", "\u041F\u0430\u043D\u043A\u0440\u0430\u0442\u0438\u0439", "\u041F\u0430\u043D\u043A\u0440\u0430\u0442", "\u041F\u0430\u043D\u0442\u0435\u043B\u0435\u0439\u043C\u043E\u043D", "\u041F\u0430\u043D\u0444\u0438\u043B", "\u041F\u0430\u0440\u0430\u043C\u043E\u043D", "\u041F\u0430\u0440\u0444\u0435\u043D", "\u041F\u0430\u0445\u043E\u043C", "\u041F\u0435\u0442\u0440", "\u041F\u0438\u043C\u0435\u043D", "\u041F\u043B\u0430\u0442\u043E\u043D", "\u041F\u043E\u043B\u0438\u043A\u0430\u0440\u043F", "\u041F\u043E\u0440\u0444\u0438\u0440\u0438\u0439", "\u041F\u043E\u0442\u0430\u043F", "\u041F\u0440\u043E\u0432", "\u041F\u0440\u043E\u043A\u043B", "\u041F\u0440\u043E\u043A\u043E\u0444\u0438\u0439", "\u041F\u0440\u043E\u0445\u043E\u0440", "\u0420\u0430\u0434\u0438\u043C", "\u0420\u0430\u0434\u0438\u0441\u043B\u0430\u0432", "\u0420\u0430\u0434\u043E\u0432\u0430\u043D", "\u0420\u0430\u0442\u0438\u0431\u043E\u0440", "\u0420\u0430\u0442\u043C\u0438\u0440", "\u0420\u043E\u0434\u0438\u043E\u043D", "\u0420\u043E\u043C\u0430\u043D", "\u0420\u043E\u0441\u0442\u0438\u0441\u043B\u0430\u0432", "\u0420\u0443\u0431\u0435\u043D", "\u0420\u0443\u0441\u043B\u0430\u043D", "\u0420\u044E\u0440\u0438\u043A", "\u0421\u0430\u0432\u0432\u0430", "\u0421\u0430\u0432\u0432\u0430\u0442\u0438\u0439", "\u0421\u0430\u0432\u0435\u043B\u0438\u0439", "\u0421\u0430\u043C\u0441\u043E\u043D", "\u0421\u0430\u043C\u0443\u0438\u043B", "\u0421\u0432\u0435\u0442\u043E\u0437\u0430\u0440", "\u0421\u0432\u044F\u0442\u043E\u043F\u043E\u043B\u043A", "\u0421\u0432\u044F\u0442\u043E\u0441\u043B\u0430\u0432", "\u0421\u0435\u0432\u0430\u0441\u0442\u044C\u044F\u043D", "\u0421\u0435\u043B\u0438\u0432\u0430\u043D", "\u0421\u0435\u043B\u0438\u0432\u0435\u0440\u0441\u0442", "\u0421\u0435\u043C\u0435\u043D", "\u0421\u0435\u0440\u0430\u0444\u0438\u043C", "\u0421\u0435\u0440\u0433\u0435\u0439", "\u0421\u0438\u0433\u0438\u0437\u043C\u0443\u043D\u0434", "\u0421\u0438\u0434\u043E\u0440", "\u0421\u0438\u043B\u0430", "\u0421\u0438\u043B\u0430\u043D\u0442\u0438\u0439", "\u0421\u0438\u043B\u044C\u0432\u0435\u0441\u0442\u0440", "\u0421\u0438\u043C\u043E\u043D", "\u0421\u043E\u043A\u0440\u0430\u0442", "\u0421\u043E\u043B\u043E\u043C\u043E\u043D", "\u0421\u043E\u0444\u043E\u043D", "\u0421\u043E\u0444\u0440\u043E\u043D", "\u0421\u043F\u0430\u0440\u0442\u0430\u043A", "\u0421\u043F\u0438\u0440\u0438\u0434\u043E\u043D", "\u0421\u0442\u0430\u043D\u0438\u043C\u0438\u0440", "\u0421\u0442\u0430\u043D\u0438\u0441\u043B\u0430\u0432", "\u0421\u0442\u0435\u043F\u0430\u043D", "\u0421\u0442\u043E\u044F\u043D", "\u0422\u0430\u0440\u0430\u0441", "\u0422\u0432\u0435\u0440\u0434\u0438\u0441\u043B\u0430\u0432", "\u0422\u0432\u043E\u0440\u0438\u043C\u0438\u0440", "\u0422\u0435\u0440\u0435\u043D\u0442\u0438\u0439", "\u0422\u0438\u043C\u043E\u0444\u0435\u0439", "\u0422\u0438\u043C\u0443\u0440", "\u0422\u0438\u0442", "\u0422\u0438\u0445\u043E\u043D", "\u0422\u0440\u0438\u0444\u043E\u043D", "\u0422\u0440\u043E\u0444\u0438\u043C", "\u0423\u043B\u044C\u044F\u043D", "\u0423\u0441\u0442\u0438\u043D", "\u0424\u0430\u0434\u0435\u0439", "\u0424\u0435\u0434\u043E\u0440", "\u0424\u0435\u0434\u043E\u0441\u0438\u0439", "\u0424\u0435\u0434\u043E\u0442", "\u0424\u0435\u043B\u0438\u043A\u0441", "\u0424\u0435\u043E\u043A\u0442\u0438\u0441\u0442", "\u0424\u0435\u043E\u0444\u0430\u043D", "\u0424\u0435\u0440\u0430\u043F\u043E\u043D\u0442", "\u0424\u0438\u043B\u0430\u0440\u0435\u0442", "\u0424\u0438\u043B\u0438\u043C\u043E\u043D", "\u0424\u0438\u043B\u0438\u043F\u043F", "\u0424\u0438\u0440\u0441", "\u0424\u043B\u043E\u0440\u0435\u043D\u0442\u0438\u043D", "\u0424\u043E\u043A\u0430", "\u0424\u043E\u043C\u0430", "\u0424\u043E\u0440\u0442\u0443\u043D\u0430\u0442", "\u0424\u043E\u0442\u0438\u0439", "\u0424\u0440\u043E\u043B", "\u0425\u0430\u0440\u0438\u0442\u043E\u043D", "\u0425\u0430\u0440\u043B\u0430\u043C\u043F\u0438\u0439", "\u0425\u0440\u0438\u0441\u0442\u043E\u0444\u043E\u0440", "\u0427\u0435\u0441\u043B\u0430\u0432", "\u042D\u0434\u0443\u0430\u0440\u0434", "\u042D\u043C\u043C\u0430\u043D\u0443\u0438\u043B", "\u042D\u043C\u0438\u043B\u044C", "\u042D\u0440\u0430\u0441\u0442", "\u042D\u0440\u043D\u0435\u0441\u0442", "\u042D\u0440\u043D\u0441\u0442", "\u042E\u0432\u0435\u043D\u0430\u043B\u0438\u0439", "\u042E\u043B\u0438\u0430\u043D", "\u042E\u043B\u0438\u0439", "\u042E\u0440\u0438\u0439", "\u042F\u043A\u043E\u0432", "\u042F\u043D", "\u042F\u043A\u0443\u0431", "\u042F\u043D\u0443\u0430\u0440\u0438\u0439", "\u042F\u0440\u043E\u043F\u043E\u043B\u043A", "\u042F\u0440\u043E\u0441\u043B\u0430\u0432"];
var z2 = ["\u0421\u043C\u0438\u0440\u043D\u043E\u0432", "\u0418\u0432\u0430\u043D\u043E\u0432", "\u041A\u0443\u0437\u043D\u0435\u0446\u043E\u0432", "\u041F\u043E\u043F\u043E\u0432", "\u0421\u043E\u043A\u043E\u043B\u043E\u0432", "\u041B\u0435\u0431\u0435\u0434\u0435\u0432", "\u041A\u043E\u0437\u043B\u043E\u0432", "\u041D\u043E\u0432\u0438\u043A\u043E\u0432", "\u041C\u043E\u0440\u043E\u0437\u043E\u0432", "\u041F\u0435\u0442\u0440\u043E\u0432", "\u0412\u043E\u043B\u043A\u043E\u0432", "\u0421\u043E\u043B\u043E\u0432\u044C\u0435\u0432", "\u0412\u0430\u0441\u0438\u043B\u044C\u0435\u0432", "\u0417\u0430\u0439\u0446\u0435\u0432", "\u041F\u0430\u0432\u043B\u043E\u0432", "\u0421\u0435\u043C\u0435\u043D\u043E\u0432", "\u0413\u043E\u043B\u0443\u0431\u0435\u0432", "\u0412\u0438\u043D\u043E\u0433\u0440\u0430\u0434\u043E\u0432", "\u0411\u043E\u0433\u0434\u0430\u043D\u043E\u0432", "\u0412\u043E\u0440\u043E\u0431\u044C\u0435\u0432", "\u0424\u0435\u0434\u043E\u0440\u043E\u0432", "\u041C\u0438\u0445\u0430\u0439\u043B\u043E\u0432", "\u0411\u0435\u043B\u044F\u0435\u0432", "\u0422\u0430\u0440\u0430\u0441\u043E\u0432", "\u0411\u0435\u043B\u043E\u0432", "\u041A\u043E\u043C\u0430\u0440\u043E\u0432", "\u041E\u0440\u043B\u043E\u0432", "\u041A\u0438\u0441\u0435\u043B\u0435\u0432", "\u041C\u0430\u043A\u0430\u0440\u043E\u0432", "\u0410\u043D\u0434\u0440\u0435\u0435\u0432", "\u041A\u043E\u0432\u0430\u043B\u0435\u0432", "\u0418\u043B\u044C\u0438\u043D", "\u0413\u0443\u0441\u0435\u0432", "\u0422\u0438\u0442\u043E\u0432", "\u041A\u0443\u0437\u044C\u043C\u0438\u043D", "\u041A\u0443\u0434\u0440\u044F\u0432\u0446\u0435\u0432", "\u0411\u0430\u0440\u0430\u043D\u043E\u0432", "\u041A\u0443\u043B\u0438\u043A\u043E\u0432", "\u0410\u043B\u0435\u043A\u0441\u0435\u0435\u0432", "\u0421\u0442\u0435\u043F\u0430\u043D\u043E\u0432", "\u042F\u043A\u043E\u0432\u043B\u0435\u0432", "\u0421\u043E\u0440\u043E\u043A\u0438\u043D", "\u0421\u0435\u0440\u0433\u0435\u0435\u0432", "\u0420\u043E\u043C\u0430\u043D\u043E\u0432", "\u0417\u0430\u0445\u0430\u0440\u043E\u0432", "\u0411\u043E\u0440\u0438\u0441\u043E\u0432", "\u041A\u043E\u0440\u043E\u043B\u0435\u0432", "\u0413\u0435\u0440\u0430\u0441\u0438\u043C\u043E\u0432", "\u041F\u043E\u043D\u043E\u043C\u0430\u0440\u0435\u0432", "\u0413\u0440\u0438\u0433\u043E\u0440\u044C\u0435\u0432", "\u041B\u0430\u0437\u0430\u0440\u0435\u0432", "\u041C\u0435\u0434\u0432\u0435\u0434\u0435\u0432", "\u0415\u0440\u0448\u043E\u0432", "\u041D\u0438\u043A\u0438\u0442\u0438\u043D", "\u0421\u043E\u0431\u043E\u043B\u0435\u0432", "\u0420\u044F\u0431\u043E\u0432", "\u041F\u043E\u043B\u044F\u043A\u043E\u0432", "\u0426\u0432\u0435\u0442\u043A\u043E\u0432", "\u0414\u0430\u043D\u0438\u043B\u043E\u0432", "\u0416\u0443\u043A\u043E\u0432", "\u0424\u0440\u043E\u043B\u043E\u0432", "\u0416\u0443\u0440\u0430\u0432\u043B\u0435\u0432", "\u041D\u0438\u043A\u043E\u043B\u0430\u0435\u0432", "\u041A\u0440\u044B\u043B\u043E\u0432", "\u041C\u0430\u043A\u0441\u0438\u043C\u043E\u0432", "\u0421\u0438\u0434\u043E\u0440\u043E\u0432", "\u041E\u0441\u0438\u043F\u043E\u0432", "\u0411\u0435\u043B\u043E\u0443\u0441\u043E\u0432", "\u0424\u0435\u0434\u043E\u0442\u043E\u0432", "\u0414\u043E\u0440\u043E\u0444\u0435\u0435\u0432", "\u0415\u0433\u043E\u0440\u043E\u0432", "\u041C\u0430\u0442\u0432\u0435\u0435\u0432", "\u0411\u043E\u0431\u0440\u043E\u0432", "\u0414\u043C\u0438\u0442\u0440\u0438\u0435\u0432", "\u041A\u0430\u043B\u0438\u043D\u0438\u043D", "\u0410\u043D\u0438\u0441\u0438\u043C\u043E\u0432", "\u041F\u0435\u0442\u0443\u0445\u043E\u0432", "\u0410\u043D\u0442\u043E\u043D\u043E\u0432", "\u0422\u0438\u043C\u043E\u0444\u0435\u0435\u0432", "\u041D\u0438\u043A\u0438\u0444\u043E\u0440\u043E\u0432", "\u0412\u0435\u0441\u0435\u043B\u043E\u0432", "\u0424\u0438\u043B\u0438\u043F\u043F\u043E\u0432", "\u041C\u0430\u0440\u043A\u043E\u0432", "\u0411\u043E\u043B\u044C\u0448\u0430\u043A\u043E\u0432", "\u0421\u0443\u0445\u0430\u043D\u043E\u0432", "\u041C\u0438\u0440\u043E\u043D\u043E\u0432", "\u0428\u0438\u0440\u044F\u0435\u0432", "\u0410\u043B\u0435\u043A\u0441\u0430\u043D\u0434\u0440\u043E\u0432", "\u041A\u043E\u043D\u043E\u0432\u0430\u043B\u043E\u0432", "\u0428\u0435\u0441\u0442\u0430\u043A\u043E\u0432", "\u041A\u0430\u0437\u0430\u043A\u043E\u0432", "\u0415\u0444\u0438\u043C\u043E\u0432", "\u0414\u0435\u043D\u0438\u0441\u043E\u0432", "\u0413\u0440\u043E\u043C\u043E\u0432", "\u0424\u043E\u043C\u0438\u043D", "\u0414\u0430\u0432\u044B\u0434\u043E\u0432", "\u041C\u0435\u043B\u044C\u043D\u0438\u043A\u043E\u0432", "\u0429\u0435\u0440\u0431\u0430\u043A\u043E\u0432", "\u0411\u043B\u0438\u043D\u043E\u0432", "\u041A\u043E\u043B\u0435\u0441\u043D\u0438\u043A\u043E\u0432", "\u041A\u0430\u0440\u043F\u043E\u0432", "\u0410\u0444\u0430\u043D\u0430\u0441\u044C\u0435\u0432", "\u0412\u043B\u0430\u0441\u043E\u0432", "\u041C\u0430\u0441\u043B\u043E\u0432", "\u0418\u0441\u0430\u043A\u043E\u0432", "\u0422\u0438\u0445\u043E\u043D\u043E\u0432", "\u0410\u043A\u0441\u0435\u043D\u043E\u0432", "\u0413\u0430\u0432\u0440\u0438\u043B\u043E\u0432", "\u0420\u043E\u0434\u0438\u043E\u043D\u043E\u0432", "\u041A\u043E\u0442\u043E\u0432", "\u0413\u043E\u0440\u0431\u0443\u043D\u043E\u0432", "\u041A\u0443\u0434\u0440\u044F\u0448\u043E\u0432", "\u0411\u044B\u043A\u043E\u0432", "\u0417\u0443\u0435\u0432", "\u0422\u0440\u0435\u0442\u044C\u044F\u043A\u043E\u0432", "\u0421\u0430\u0432\u0435\u043B\u044C\u0435\u0432", "\u041F\u0430\u043D\u043E\u0432", "\u0420\u044B\u0431\u0430\u043A\u043E\u0432", "\u0421\u0443\u0432\u043E\u0440\u043E\u0432", "\u0410\u0431\u0440\u0430\u043C\u043E\u0432", "\u0412\u043E\u0440\u043E\u043D\u043E\u0432", "\u041C\u0443\u0445\u0438\u043D", "\u0410\u0440\u0445\u0438\u043F\u043E\u0432", "\u0422\u0440\u043E\u0444\u0438\u043C\u043E\u0432", "\u041C\u0430\u0440\u0442\u044B\u043D\u043E\u0432", "\u0415\u043C\u0435\u043B\u044C\u044F\u043D\u043E\u0432", "\u0413\u043E\u0440\u0448\u043A\u043E\u0432", "\u0427\u0435\u0440\u043D\u043E\u0432", "\u041E\u0432\u0447\u0438\u043D\u043D\u0438\u043A\u043E\u0432", "\u0421\u0435\u043B\u0435\u0437\u043D\u0435\u0432", "\u041F\u0430\u043D\u0444\u0438\u043B\u043E\u0432", "\u041A\u043E\u043F\u044B\u043B\u043E\u0432", "\u041C\u0438\u0445\u0435\u0435\u0432", "\u0413\u0430\u043B\u043A\u0438\u043D", "\u041D\u0430\u0437\u0430\u0440\u043E\u0432", "\u041B\u043E\u0431\u0430\u043D\u043E\u0432", "\u041B\u0443\u043A\u0438\u043D", "\u0411\u0435\u043B\u044F\u043A\u043E\u0432", "\u041F\u043E\u0442\u0430\u043F\u043E\u0432", "\u041D\u0435\u043A\u0440\u0430\u0441\u043E\u0432", "\u0425\u043E\u0445\u043B\u043E\u0432", "\u0416\u0434\u0430\u043D\u043E\u0432", "\u041D\u0430\u0443\u043C\u043E\u0432", "\u0428\u0438\u043B\u043E\u0432", "\u0412\u043E\u0440\u043E\u043D\u0446\u043E\u0432", "\u0415\u0440\u043C\u0430\u043A\u043E\u0432", "\u0414\u0440\u043E\u0437\u0434\u043E\u0432", "\u0418\u0433\u043D\u0430\u0442\u044C\u0435\u0432", "\u0421\u0430\u0432\u0438\u043D", "\u041B\u043E\u0433\u0438\u043D\u043E\u0432", "\u0421\u0430\u0444\u043E\u043D\u043E\u0432", "\u041A\u0430\u043F\u0443\u0441\u0442\u0438\u043D", "\u041A\u0438\u0440\u0438\u043B\u043B\u043E\u0432", "\u041C\u043E\u0438\u0441\u0435\u0435\u0432", "\u0415\u043B\u0438\u0441\u0435\u0435\u0432", "\u041A\u043E\u0448\u0435\u043B\u0435\u0432", "\u041A\u043E\u0441\u0442\u0438\u043D", "\u0413\u043E\u0440\u0431\u0430\u0447\u0435\u0432", "\u041E\u0440\u0435\u0445\u043E\u0432", "\u0415\u0444\u0440\u0435\u043C\u043E\u0432", "\u0418\u0441\u0430\u0435\u0432", "\u0415\u0432\u0434\u043E\u043A\u0438\u043C\u043E\u0432", "\u041A\u0430\u043B\u0430\u0448\u043D\u0438\u043A\u043E\u0432", "\u041A\u0430\u0431\u0430\u043D\u043E\u0432", "\u041D\u043E\u0441\u043A\u043E\u0432", "\u042E\u0434\u0438\u043D", "\u041A\u0443\u043B\u0430\u0433\u0438\u043D", "\u041B\u0430\u043F\u0438\u043D", "\u041F\u0440\u043E\u0445\u043E\u0440\u043E\u0432", "\u041D\u0435\u0441\u0442\u0435\u0440\u043E\u0432", "\u0425\u0430\u0440\u0438\u0442\u043E\u043D\u043E\u0432", "\u0410\u0433\u0430\u0444\u043E\u043D\u043E\u0432", "\u041C\u0443\u0440\u0430\u0432\u044C\u0435\u0432", "\u041B\u0430\u0440\u0438\u043E\u043D\u043E\u0432", "\u0424\u0435\u0434\u043E\u0441\u0435\u0435\u0432", "\u0417\u0438\u043C\u0438\u043D", "\u041F\u0430\u0445\u043E\u043C\u043E\u0432", "\u0428\u0443\u0431\u0438\u043D", "\u0418\u0433\u043D\u0430\u0442\u043E\u0432", "\u0424\u0438\u043B\u0430\u0442\u043E\u0432", "\u041A\u0440\u044E\u043A\u043E\u0432", "\u0420\u043E\u0433\u043E\u0432", "\u041A\u0443\u043B\u0430\u043A\u043E\u0432", "\u0422\u0435\u0440\u0435\u043D\u0442\u044C\u0435\u0432", "\u041C\u043E\u043B\u0447\u0430\u043D\u043E\u0432", "\u0412\u043B\u0430\u0434\u0438\u043C\u0438\u0440\u043E\u0432", "\u0410\u0440\u0442\u0435\u043C\u044C\u0435\u0432", "\u0413\u0443\u0440\u044C\u0435\u0432", "\u0417\u0438\u043D\u043E\u0432\u044C\u0435\u0432", "\u0413\u0440\u0438\u0448\u0438\u043D", "\u041A\u043E\u043D\u043E\u043D\u043E\u0432", "\u0414\u0435\u043C\u0435\u043D\u0442\u044C\u0435\u0432", "\u0421\u0438\u0442\u043D\u0438\u043A\u043E\u0432", "\u0421\u0438\u043C\u043E\u043D\u043E\u0432", "\u041C\u0438\u0448\u0438\u043D", "\u0424\u0430\u0434\u0435\u0435\u0432", "\u041A\u043E\u043C\u0438\u0441\u0441\u0430\u0440\u043E\u0432", "\u041C\u0430\u043C\u043E\u043D\u0442\u043E\u0432", "\u041D\u043E\u0441\u043E\u0432", "\u0413\u0443\u043B\u044F\u0435\u0432", "\u0428\u0430\u0440\u043E\u0432", "\u0423\u0441\u0442\u0438\u043D\u043E\u0432", "\u0412\u0438\u0448\u043D\u044F\u043A\u043E\u0432", "\u0415\u0432\u0441\u0435\u0435\u0432", "\u041B\u0430\u0432\u0440\u0435\u043D\u0442\u044C\u0435\u0432", "\u0411\u0440\u0430\u0433\u0438\u043D", "\u041A\u043E\u043D\u0441\u0442\u0430\u043D\u0442\u0438\u043D\u043E\u0432", "\u041A\u043E\u0440\u043D\u0438\u043B\u043E\u0432", "\u0410\u0432\u0434\u0435\u0435\u0432", "\u0417\u044B\u043A\u043E\u0432", "\u0411\u0438\u0440\u044E\u043A\u043E\u0432", "\u0428\u0430\u0440\u0430\u043F\u043E\u0432", "\u041D\u0438\u043A\u043E\u043D\u043E\u0432", "\u0429\u0443\u043A\u0438\u043D", "\u0414\u044C\u044F\u0447\u043A\u043E\u0432", "\u041E\u0434\u0438\u043D\u0446\u043E\u0432", "\u0421\u0430\u0437\u043E\u043D\u043E\u0432", "\u042F\u043A\u0443\u0448\u0435\u0432", "\u041A\u0440\u0430\u0441\u0438\u043B\u044C\u043D\u0438\u043A\u043E\u0432", "\u0413\u043E\u0440\u0434\u0435\u0435\u0432", "\u0421\u0430\u043C\u043E\u0439\u043B\u043E\u0432", "\u041A\u043D\u044F\u0437\u0435\u0432", "\u0411\u0435\u0441\u043F\u0430\u043B\u043E\u0432", "\u0423\u0432\u0430\u0440\u043E\u0432", "\u0428\u0430\u0448\u043A\u043E\u0432", "\u0411\u043E\u0431\u044B\u043B\u0435\u0432", "\u0414\u043E\u0440\u043E\u043D\u0438\u043D", "\u0411\u0435\u043B\u043E\u0437\u0435\u0440\u043E\u0432", "\u0420\u043E\u0436\u043A\u043E\u0432", "\u0421\u0430\u043C\u0441\u043E\u043D\u043E\u0432", "\u041C\u044F\u0441\u043D\u0438\u043A\u043E\u0432", "\u041B\u0438\u0445\u0430\u0447\u0435\u0432", "\u0411\u0443\u0440\u043E\u0432", "\u0421\u044B\u0441\u043E\u0435\u0432", "\u0424\u043E\u043C\u0438\u0447\u0435\u0432", "\u0420\u0443\u0441\u0430\u043A\u043E\u0432", "\u0421\u0442\u0440\u0435\u043B\u043A\u043E\u0432", "\u0413\u0443\u0449\u0438\u043D", "\u0422\u0435\u0442\u0435\u0440\u0438\u043D", "\u041A\u043E\u043B\u043E\u0431\u043E\u0432", "\u0421\u0443\u0431\u0431\u043E\u0442\u0438\u043D", "\u0424\u043E\u043A\u0438\u043D", "\u0411\u043B\u043E\u0445\u0438\u043D", "\u0421\u0435\u043B\u0438\u0432\u0435\u0440\u0441\u0442\u043E\u0432", "\u041F\u0435\u0441\u0442\u043E\u0432", "\u041A\u043E\u043D\u0434\u0440\u0430\u0442\u044C\u0435\u0432", "\u0421\u0438\u043B\u0438\u043D", "\u041C\u0435\u0440\u043A\u0443\u0448\u0435\u0432", "\u041B\u044B\u0442\u043A\u0438\u043D", "\u0422\u0443\u0440\u043E\u0432"];
var B = ["\u0410\u0430\u0440\u043E\u043D\u043E\u0432\u0438\u0447", "\u0410\u0431\u0440\u0430\u043C\u043E\u0432\u0438\u0447", "\u0410\u0432\u0433\u0443\u0441\u0442\u043E\u0432\u0438\u0447", "\u0410\u0432\u0434\u0435\u0435\u0432\u0438\u0447", "\u0410\u0432\u0435\u0440\u044C\u044F\u043D\u043E\u0432\u0438\u0447", "\u0410\u0434\u0430\u043C\u043E\u0432\u0438\u0447", "\u0410\u0434\u0440\u0438\u0430\u043D\u043E\u0432\u0438\u0447", "\u0410\u043A\u0441\u0451\u043D\u043E\u0432\u0438\u0447", "\u0410\u043B\u0435\u043A\u0441\u0430\u043D\u0434\u0440\u043E\u0432\u0438\u0447", "\u0410\u043B\u0435\u043A\u0441\u0435\u0435\u0432\u0438\u0447", "\u0410\u043D\u0430\u0442\u043E\u043B\u044C\u0435\u0432\u0438\u0447", "\u0410\u043D\u0434\u0440\u0435\u0435\u0432\u0438\u0447", "\u0410\u043D\u0438\u0441\u0438\u043C\u043E\u0432\u0438\u0447", "\u0410\u043D\u0442\u0438\u043F\u043E\u0432\u0438\u0447", "\u0410\u043D\u0442\u043E\u043D\u043E\u0432\u0438\u0447", "\u0410\u043D\u0443\u0444\u0440\u0438\u0435\u0432\u0438\u0447", "\u0410\u0440\u0441\u0435\u043D\u043E\u0432\u0438\u0447", "\u0410\u0440\u0441\u0435\u043D\u044C\u0435\u0432\u0438\u0447", "\u0410\u0440\u0442\u0451\u043C\u043E\u0432\u0438\u0447", "\u0410\u0440\u0442\u0435\u043C\u044C\u0435\u0432\u0438\u0447", "\u0410\u0440\u0442\u0443\u0440\u043E\u0432\u0438\u0447", "\u0410\u0440\u0445\u0438\u043F\u043E\u0432\u0438\u0447", "\u0410\u0444\u0430\u043D\u0430\u0441\u044C\u0435\u0432\u0438\u0447", "\u0411\u0435\u043D\u0435\u0434\u0438\u043A\u0442\u043E\u0432\u0438\u0447", "\u0411\u043E\u0433\u0434\u0430\u043D\u043E\u0432\u0438\u0447", "\u0411\u043E\u0440\u0438\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447", "\u0411\u043E\u0440\u0438\u0441\u043E\u0432\u0438\u0447", "\u0411\u0440\u043E\u043D\u0438\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447", "\u0412\u0430\u043B\u0435\u043D\u0442\u0438\u043D\u043E\u0432\u0438\u0447", "\u0412\u0430\u043B\u0435\u0440\u0438\u0430\u043D\u043E\u0432\u0438\u0447", "\u0412\u0430\u043B\u0435\u0440\u044C\u0435\u0432\u0438\u0447", "\u0412\u0430\u043B\u0435\u0440\u044C\u044F\u043D\u043E\u0432\u0438\u0447", "\u0412\u0430\u0441\u0438\u043B\u044C\u0435\u0432\u0438\u0447", "\u0412\u0435\u043D\u0435\u0434\u0438\u043A\u0442\u043E\u0432\u0438\u0447", "\u0412\u0438\u043A\u0435\u043D\u0442\u044C\u0435\u0432\u0438\u0447", "\u0412\u0438\u043A\u0442\u043E\u0440\u043E\u0432\u0438\u0447", "\u0412\u0438\u043B\u0435\u043D\u043E\u0432\u0438\u0447", "\u0412\u0438\u043B\u043E\u0440\u043E\u0432\u0438\u0447", "\u0412\u0438\u0442\u0430\u043B\u044C\u0435\u0432\u0438\u0447", "\u0412\u043B\u0430\u0434\u0438\u043B\u0435\u043D\u043E\u0432\u0438\u0447", "\u0412\u043B\u0430\u0434\u0438\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447", "\u0412\u043B\u0430\u0434\u043B\u0435\u043D\u043E\u0432\u0438\u0447", "\u0412\u043B\u0430\u0441\u043E\u0432\u0438\u0447", "\u0412\u0441\u0435\u0432\u043E\u043B\u043E\u0434\u043E\u0432\u0438\u0447", "\u0412\u044F\u0447\u0435\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447", "\u0413\u0430\u0432\u0440\u0438\u0438\u043B\u043E\u0432\u0438\u0447", "\u0413\u0430\u0432\u0440\u0438\u043B\u043E\u0432\u0438\u0447", "\u0413\u0435\u043D\u043D\u0430\u0434\u0438\u0435\u0432\u0438\u0447", "\u0413\u0435\u043E\u0440\u0433\u0438\u0435\u0432\u0438\u0447", "\u0413\u0435\u0440\u0430\u0441\u0438\u043C\u043E\u0432\u0438\u0447", "\u0413\u0435\u0440\u043C\u0430\u043D\u043E\u0432\u0438\u0447", "\u0413\u0435\u0440\u0442\u0440\u0443\u0434\u043E\u0432\u0438\u0447", "\u0413\u043B\u0435\u0431\u043E\u0432\u0438\u0447", "\u0413\u043E\u0440\u0434\u0435\u0435\u0432\u0438\u0447", "\u0413\u0440\u0438\u0433\u043E\u0440\u044C\u0435\u0432\u0438\u0447", "\u0413\u0443\u0440\u044C\u0435\u0432\u0438\u0447", "\u0414\u0430\u0432\u0438\u0434\u043E\u0432\u0438\u0447", "\u0414\u0430\u0432\u044B\u0434\u043E\u0432\u0438\u0447", "\u0414\u0430\u043D\u0438\u0438\u043B\u043E\u0432\u0438\u0447", "\u0414\u0430\u043D\u0438\u043B\u043E\u0432\u0438\u0447", "\u0414\u0435\u043C\u0438\u0434\u043E\u0432\u0438\u0447", "\u0414\u0435\u043C\u044C\u044F\u043D\u043E\u0432\u0438\u0447", "\u0414\u0435\u043D\u0438\u0441\u043E\u0432\u0438\u0447", "\u0414\u0438\u043C\u0438\u0442\u0440\u0438\u0435\u0432\u0438\u0447", "\u0414\u043C\u0438\u0442\u0440\u0438\u0435\u0432\u0438\u0447", "\u0414\u043E\u0440\u043E\u0444\u0435\u0435\u0432\u0438\u0447", "\u0415\u0432\u0441\u0435\u0435\u0432\u0438\u0447", "\u0415\u0432\u0441\u0442\u0438\u0433\u043D\u0435\u0435\u0432\u0438\u0447", "\u0415\u0433\u043E\u0440\u043E\u0432\u0438\u0447", "\u0415\u043B\u0438\u0437\u0430\u0440\u043E\u0432\u0438\u0447", "\u0415\u043B\u0438\u0441\u0435\u0435\u0432\u0438\u0447", "\u0415\u0440\u0435\u043C\u0435\u0435\u0432\u0438\u0447", "\u0415\u0440\u043C\u0438\u043B\u043E\u0432\u0438\u0447", "\u0415\u0440\u043C\u043E\u043B\u0430\u0435\u0432\u0438\u0447", "\u0415\u0440\u043E\u0444\u0435\u0435\u0432\u0438\u0447", "\u0415\u0444\u0438\u043C\u043E\u0432\u0438\u0447", "\u0415\u0444\u0438\u043C\u044C\u0435\u0432\u0438\u0447", "\u0415\u0444\u0440\u0435\u043C\u043E\u0432\u0438\u0447", "\u0415\u0444\u0441\u0442\u0430\u0444\u044C\u0435\u0432\u0438\u0447", "\u0416\u0430\u043D\u043E\u0432\u0438\u0447", "\u0416\u043E\u0440\u0435\u0441\u043E\u0432\u0438\u0447", "\u0417\u0430\u0445\u0430\u0440\u044C\u0435\u0432\u0438\u0447", "\u0417\u0438\u043D\u043E\u0432\u044C\u0435\u0432\u0438\u0447", "\u0418\u0433\u043D\u0430\u0442\u043E\u0432\u0438\u0447", "\u0418\u0433\u043D\u0430\u0442\u044C\u0435\u0432\u0438\u0447", "\u0418\u0433\u043E\u0440\u0435\u0432\u0438\u0447", "\u0418\u0437\u043C\u0430\u0438\u043B\u043E\u0432\u0438\u0447", "\u0418\u0437\u043E\u0442\u043E\u0432\u0438\u0447", "\u0418\u043B\u0430\u0440\u0438\u043E\u043D\u043E\u0432\u0438\u0447", "\u0418\u043B\u044C\u0438\u0447", "\u0418\u043B\u044C\u044F\u0441\u043E\u0432\u0438\u0447", "\u0418\u043E\u0441\u0438\u043F\u043E\u0432\u0438\u0447", "\u0418\u043E\u0441\u0438\u0444\u043E\u0432\u0438\u0447", "\u0418\u0441\u0438\u0434\u043E\u0440\u043E\u0432\u0438\u0447", "\u041C\u0430\u0440\u0441\u043E\u0432\u0438\u0447", "\u041C\u0430\u0442\u0432\u0435\u0435\u0432\u0438\u0447", "\u0422\u0430\u0440\u0430\u0441\u043E\u0432\u0438\u0447", "\u0422\u0435\u0439\u043C\u0443\u0440\u0430\u0437\u043E\u0432\u0438\u0447", "\u0422\u0435\u0440\u0435\u043D\u0442\u044C\u0435\u0432\u0438\u0447", "\u0422\u0438\u043C\u0443\u0440\u043E\u0432\u0438\u0447", "\u0422\u0438\u0445\u043E\u043D\u043E\u0432\u0438\u0447", "\u0422\u0440\u0438\u0444\u043E\u043D\u043E\u0432\u0438\u0447", "\u0422\u0440\u043E\u0444\u0438\u043C\u043E\u0432\u0438\u0447", "\u0423\u0441\u0442\u0438\u043D\u043E\u0432\u0438\u0447", "\u0424\u0430\u0434\u0435\u0435\u0432\u0438\u0447", "\u0424\u0451\u0434\u043E\u0440\u043E\u0432\u0438\u0447", "\u0424\u0435\u0434\u043E\u0441\u0435\u0435\u0432\u0438\u0447", "\u0424\u0435\u0434\u043E\u0441\u044C\u0435\u0432\u0438\u0447", "\u0424\u0435\u0434\u043E\u0442\u043E\u0432\u0438\u0447", "\u0424\u0435\u043B\u0438\u043A\u0441\u043E\u0432\u0438\u0447", "\u0424\u0435\u043E\u0434\u043E\u0441\u044C\u0435\u0432\u0438\u0447", "\u0424\u0435\u043E\u043A\u0442\u0438\u0441\u0442\u043E\u0432\u0438\u0447", "\u0424\u0435\u043E\u0444\u0430\u043D\u043E\u0432\u0438\u0447", "\u0424\u0438\u043B\u0430\u0442\u043E\u0432\u0438\u0447", "\u0424\u0438\u043B\u0438\u043C\u043E\u043D\u043E\u0432\u0438\u0447", "\u0424\u0438\u043B\u0438\u043F\u043F\u043E\u0432\u0438\u0447", "\u0424\u043E\u043A\u0438\u0447", "\u0424\u043E\u043C\u0438\u0447", "\u0424\u0440\u043E\u043B\u043E\u0432\u0438\u0447", "\u0425\u0430\u0440\u0438\u0442\u043E\u043D\u043E\u0432\u0438\u0447", "\u0425\u0430\u0440\u043B\u0430\u043C\u043E\u0432\u0438\u0447", "\u0425\u0430\u0440\u043B\u0430\u043C\u043F\u043E\u0432\u0438\u0447", "\u0425\u0430\u0440\u043B\u0430\u043C\u043F\u044C\u0435\u0432\u0438\u0447", "\u0427\u0435\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447", "\u042D\u0434\u0433\u0430\u0440\u0434\u043E\u0432\u0438\u0447", "\u042D\u0434\u0433\u0430\u0440\u043E\u0432\u0438\u0447", "\u042D\u0434\u0443\u0430\u0440\u0434\u043E\u0432\u0438\u0447", "\u042E\u043B\u0438\u0430\u043D\u043E\u0432\u0438\u0447", "\u042E\u043B\u044C\u0435\u0432\u0438\u0447", "\u042F\u043A\u043E\u0432\u043B\u0435\u0432\u0438\u0447", "\u042F\u043A\u0443\u0431\u043E\u0432\u0438\u0447", "\u042F\u0440\u043E\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447"];
var F = ["{{name.male_first_name}} {{name.male_last_name}}", "{{name.male_last_name}} {{name.male_first_name}}", "{{name.male_first_name}} {{name.male_middle_name}} {{name.male_last_name}}", "{{name.male_last_name}} {{name.male_first_name}} {{name.male_middle_name}}", "{{name.female_first_name}} {{name.female_last_name}}", "{{name.female_last_name}} {{name.female_first_name}}", "{{name.female_first_name}} {{name.female_middle_name}} {{name.female_last_name}}", "{{name.female_last_name}} {{name.female_first_name}} {{name.female_middle_name}}"];
var J = [];
var U = [];
var q = { descriptor: ["\u0412\u0435\u0434\u0443\u0449\u0438\u0439", "\u0413\u0435\u043D\u0435\u0440\u0430\u043B\u044C\u043D\u044B\u0439", "\u0413\u043B\u0430\u0432\u043D\u044B\u0439", "\u0413\u043B\u043E\u0431\u0430\u043B\u044C\u043D\u044B\u0439", "\u041C\u0435\u0436\u0434\u0443\u043D\u0430\u0440\u043E\u0434\u043D\u044B\u0439", "\u041D\u0430\u0446\u0438\u043E\u043D\u0430\u043B\u044C\u043D\u044B\u0439", "\u041E\u0431\u043B\u0430\u0441\u0442\u043D\u043E\u0439", "\u0420\u0430\u0439\u043E\u043D\u043D\u044B\u0439", "\u0420\u0435\u0433\u0438\u043E\u043D\u0430\u043B\u044C\u043D\u044B\u0439", "\u0426\u0435\u043D\u0442\u0440\u0430\u043B\u044C\u043D\u044B\u0439"], level: ["\u0438\u043D\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u043E\u043D\u043D\u044B\u0439", "\u043B\u043E\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043A\u0438\u0439", "\u043C\u0430\u0440\u043A\u0435\u0442\u0438\u043D\u0433\u043E\u0432\u044B\u0439", "\u043E\u043F\u0442\u0438\u043C\u0438\u0437\u0430\u0446\u0438\u043E\u043D\u043D\u044B\u0439", "\u0441\u0442\u0440\u0430\u0445\u043E\u0432\u043E\u0439", "\u0444\u0443\u043D\u043A\u0446\u0438\u043E\u043D\u0430\u043B\u044C\u043D\u044B\u0439", "\u043A\u043E\u043C\u043C\u0443\u043D\u0438\u043A\u0430\u0446\u0438\u043E\u043D\u043D\u044B\u0439", "\u043E\u043F\u0435\u0440\u0430\u0446\u0438\u043E\u043D\u043D\u044B\u0439"], job: ["\u0430\u0433\u0435\u043D\u0442", "\u0430\u0434\u043C\u0438\u043D\u0438\u0441\u0442\u0440\u0430\u0442\u043E\u0440", "\u0430\u043D\u0430\u043B\u0438\u0442\u0438\u043A", "\u0430\u0440\u0445\u0438\u0442\u0435\u043A\u0442\u043E\u0440", "\u0434\u0438\u0437\u0430\u0439\u043D\u0435\u0440", "\u0438\u043D\u0436\u0435\u043D\u0435\u0440", "\u043A\u043E\u043D\u0441\u0443\u043B\u044C\u0442\u0430\u043D\u0442", "\u043A\u043E\u043E\u0440\u0434\u0438\u043D\u0430\u0442\u043E\u0440", "\u043C\u0435\u043D\u0435\u0434\u0436\u0435\u0440", "\u043F\u043B\u0430\u043D\u0438\u0440\u043E\u0432\u0449\u0438\u043A", "\u043F\u043E\u043C\u043E\u0449\u043D\u0438\u043A", "\u0440\u0430\u0437\u0440\u0430\u0431\u043E\u0442\u0447\u0438\u043A", "\u0440\u0443\u043A\u043E\u0432\u043E\u0434\u0438\u0442\u0435\u043B\u044C", "\u0441\u043E\u0442\u0440\u0443\u0434\u043D\u0438\u043A", "\u0441\u043F\u0435\u0446\u0438\u0430\u043B\u0438\u0441\u0442", "\u0442\u0435\u0445\u043D\u0438\u043A"] };
var me = { female_first_name: X, female_last_name: E, female_middle_name: G, male_first_name: R, male_last_name: z2, male_middle_name: B, name: F, prefix: J, suffix: U, title: q };
var K = me;
var Q = ["(9##)###-##-##"];
var ae = { formats: Q };
var V = ae;
var ie2 = { title: "Russian", separator: " \u0438 ", address: l3, color: _2, commerce: b3, company: S2, date: g2, hacker: k2, internet: H, lorem: O, name: K, phone_number: V };
var $t = ie2;

// ../../node_modules/@faker-js/faker/dist/esm/chunk-2ARF2KYP.mjs
init_esm_shims();
var a4 = ["#", "##", "###"];
var o4 = ["{{address.city_name}}"];
var e4 = ["B\xE1novce nad Bebravou", "Bansk\xE1 Bystrica", "Bansk\xE1 \u0160tiavnica", "Bardejov", "Bratislava I", "Bratislava II", "Bratislava III", "Bratislava IV", "Bratislava V", "Brezno", "Byt\u010Da", "\u010Cadca", "Detva", "Doln\xFD Kub\xEDn", "Dunajsk\xE1 Streda", "Galanta", "Gelnica", "Hlohovec", "Humenn\xE9", "Ilava", "Ke\u017Emarok", "Kom\xE1rno", "Ko\u0161ice I", "Ko\u0161ice II", "Ko\u0161ice III", "Ko\u0161ice IV", "Ko\u0161ice-okolie", "Krupina", "Kysuck\xE9 Nov\xE9 Mesto", "Levice", "Levo\u010Da", "Liptovsk\xFD Mikul\xE1\u0161", "Lu\u010Denec", "Malacky", "Martin", "Medzilaborce", "Michalovce", "Myjava", "N\xE1mestovo", "Nitra", "Nov\xE9 Mesto n.V\xE1hom", "Nov\xE9 Z\xE1mky", "Partiz\xE1nske", "Pezinok", "Pie\u0161\u0165any", "Polt\xE1r", "Poprad", "Pova\u017Esk\xE1 Bystrica", "Pre\u0161ov", "Prievidza", "P\xFAchov", "Rev\xFAca", "Rimavsk\xE1 Sobota", "Ro\u017E\u0148ava", "Ru\u017Eomberok", "Sabinov", "\u0160a\u013Ea", "Senec", "Senica", "Skalica", "Snina", "Sobrance", "Spi\u0161sk\xE1 Nov\xE1 Ves", "Star\xE1 \u013Dubov\u0148a", "Stropkov", "Svidn\xEDk", "Topo\u013E\u010Dany", "Trebi\u0161ov", "Tren\u010D\xEDn", "Trnava", "Tur\u010Dianske Teplice", "Tvrdo\u0161\xEDn", "Ve\u013Ek\xFD Krt\xED\u0161", "Vranov nad Top\u013Eou", "\u017Darnovica", "\u017Diar nad Hronom", "\u017Dilina", "Zlat\xE9 Moravce", "Zvolen"];
var i4 = ["North", "East", "West", "South", "New", "Lake", "Port"];
var r4 = ["town", "ton", "land", "ville", "berg", "burgh", "borough", "bury", "view", "port", "mouth", "stad", "furt", "chester", "fort", "haven", "side", "shire"];
var n4 = ["Afganistan", "Afg\xE1nsky islamsk\xFD \u0161t\xE1t", "Alb\xE1nsko", "Alb\xE1nska republika", "Al\u017E\xEDrsko", "Al\u017E\xEDrska demokratick\xE1 \u013Eudov\xE1 republika", "Andorra", "Andorrsk\xE9 knie\u017Eatsvo", "Angola", "Angolsk\xE1 republika", "Antigua a Barbuda", "Argent\xEDna", "Argent\xEDnska republika", "Arm\xE9nsko", "Arm\xE9nska republika", "Austr\xE1lia", "Austr\xE1lsky zv\xE4z", "Azerbajd\u017Ean", "Azerbajd\u017Eansk\xE1 republika", "Bahamy", "Bahamsk\xE9 spolo\u010Denstvo", "Bahrajn", "Bahrajnsk\xE9 kr\xE1\u013Eovstvo", "Banglad\xE9\u0161", "Banglad\xE9\u0161ska \u013Eudov\xE1 republika", "Barbados", "Belgicko", "Belgick\xE9 kr\xE1\u013Eovstvo", "Belize", "Benin", "Beninsk\xE1 republika", "Bhut\xE1n", "Bhut\xE1nske kr\xE1\u013Eovstvo", "Bielorusko", "Bielorusk\xE1 republika", "Bol\xEDvia", "Bol\xEDvijsk\xE1 republika", "Bosna a Hercegovina", "Republika Bosny a Hercegoviny", "Botswana", "Botswansk\xE1 republika", "Braz\xEDlia", "Braz\xEDlska federat\xEDvna republika", "Brunej", "Brunejsk\xFD sultan\xE1t", "Bulharsko", "Bulharsk\xE1 republika", "Burkina Faso", "Burundi", "Burundsk\xE1 republika", "Cyprus", "Cypersk\xE1 republika", "\u010Cad", "Republika \u010Cad", "\u010Cesko", "\u010Cesk\xE1 republika", "\u010C\xEDna", "\u010C\xEDnska \u013Eudov\xE1 republika", "D\xE1nsko", "D\xE1nsko kr\xE1\u013Eovstvo", "Dominika", "Spolo\u010Denstvo Dominika", "Dominik\xE1nska republika", "D\u017Eibutsko", "D\u017Eibutsk\xE1 republika", "Egypt", "Egyptsk\xE1 arabsk\xE1 republika", "Ekv\xE1dor", "Ekv\xE1dorsk\xE1 republika", "Eritrea", "Eritrejsk\xFD \u0161t\xE1t", "Est\xF3nsko", "Est\xF3nska republika", "Eti\xF3pia", "Eti\xF3pska federat\xEDvna demokratick\xE1 republika", "Fid\u017Ei", "Republika ostrovy Fid\u017Ei", "Filip\xEDny", "Filip\xEDnska republika", "F\xEDnsko", "F\xEDnska republika", "Franc\xFAzsko", "Franc\xFAzska republika", "Gabon", "Gabonsk\xE1 republika", "Gambia", "Gambijsk\xE1 republika", "Ghana", "Ghansk\xE1 republika", "Gr\xE9cko", "Hel\xE9nska republika", "Grenada", "Gruz\xEDnsko", "Guatemala", "Guatemalsk\xE1 republika", "Guinea", "Guinejsk\xE1 republika", "Guinea-Bissau", "Republika Guinea-Bissau", "Guayana", "Guayansk\xE1 republika", "Haiti", "Republika Haiti", "Holandsko", "Holandsk\xE9 kr\xE1\u013Eovstvo", "Honduras", "Hondurask\xE1 republika", "Chile", "\u010C\xEDlska republika", "Chorv\xE1tsko", "Chorv\xE1tska republika", "India", "Indick\xE1 republika", "Indon\xE9zia", "Indon\xE9zska republika", "Irak", "Irack\xE1 republika", "Ir\xE1n", "Ir\xE1nska islamsk\xE1 republika", "Island", "Islandsk\xE1 republika", "Izrael", "\u0160t\xE1t Izrael", "\xCDrsko", "\xCDrska republika", "Jamajka", "Japonsko", "Jemen", "Jemensk\xE1 republika", "Jord\xE1nsko", "Jord\xE1nske h\xE1\u0161imovsk\xE9 kr\xE1\u013Eovstvo", "Ju\u017En\xE1 Afrika", "Juhoafrick\xE1 republika", "Kambod\u017Ea", "Kambod\u017Esk\xE9 kr\xE1\u013Eovstvo", "Kamerun", "Kamerunsk\xE1 republika", "Kanada", "Kapverdy", "Kapverdsk\xE1 republika", "Katar", "\u0160t\xE1t Katar", "Kazachstan", "Kaza\u0161sk\xE1 republika", "Ke\u0148a", "Kensk\xE1 republika", "Kirgizsko", "Kirgizsk\xE1 republika", "Kiribati", "Kiribatsk\xE1 republika", "Kolumbia", "Kolumbijsk\xE1 republika", "Komory", "Komorsk\xE1 \xFAnia", "Kongo", "Kon\u017Esk\xE1 demokratick\xE1 republika", 'Kongo ("Brazzaville")', "Kon\u017Esk\xE1 republika", 'K\xF3rea ("Ju\u017En\xE1")', "K\xF3rejsk\xE1 republika", 'K\xF3rea ("Severn\xE1")', "K\xF3rejsk\xE1 \u013Eudovodemokratick\xE1 republika", "Kostarika", "Kostarick\xE1 republika", "Kuba", "Kub\xE1nska republika", "Kuvajt", "Kuvajtsk\xFD \u0161t\xE1t", "Laos", "Laosk\xE1 \u013Eudovodemokratick\xE1 republika", "Lesotho", "Lesothsk\xE9 kr\xE1\u013Eovstvo", "Libanon", "Libanonsk\xE1 republika", "Lib\xE9ria", "Lib\xE9rijsk\xE1 republika", "L\xEDbya", "L\xEDbyjsk\xE1 arabsk\xE1 \u013Eudov\xE1 socialistick\xE1 d\u017Eam\xE1h\xEDrija", "Lichten\u0161tajnsko", "Lichten\u0161tajnsk\xE9 knie\u017Eatstvo", "Litva", "Litovsk\xE1 republika", "Loty\u0161sko", "Loty\u0161sk\xE1 republika", "Luxembursko", "Luxembursk\xE9 ve\u013Ekovojvodstvo", "Maced\xF3nsko", "Maced\xF3nska republika", "Madagaskar", "Madagaskarsk\xE1 republika", "Ma\u010Farsko", "Ma\u010Farsk\xE1 republika", "Malajzia", "Malawi", "Malawijsk\xE1 republika", "Maldivy", "Maldivsk\xE1 republika", "Mali", "Malijsk\xE1 republika", "Malta", "Maroko", "Marock\xE9 kr\xE1\u013Eovstvo", "Marshallove ostrovy", "Republika Marshallov\xFDch ostrovy", "Maurit\xE1nia", "Maurit\xE1nska islamsk\xE1 republika", "Maur\xEDcius", "Maur\xEDcijsk\xE1 republika", "Mexiko", "Spojen\xE9 \u0161t\xE1ty mexick\xE9", "Mikron\xE9zia", "Mikron\xE9zske federat\xEDvne \u0161t\xE1ty", "Mjanmarsko", "Mjanmarsk\xFD zv\xE4z", "Moldavsko", "Moldavsk\xE1 republika", "Monako", "Monack\xE9 knie\u017Eatstvo", "Mongolsko", "Mozambik", "Mozambick\xE1 republika", "Nam\xEDbia", "Nam\xEDbijsk\xE1 republika", "Nauru", "Naursk\xE1 republika", "Nemecko", "Nemeck\xE1 spolkov\xE1 republika", "Nep\xE1l", "Nep\xE1lske kr\xE1\u013Eovstvo", "Niger", "Nigersk\xE1 republika", "Nig\xE9ria", "Nig\xE9rijsk\xE1 federat\xEDvna republika", "Nikaragua", "Nikaragujsk\xE1 republika", "Nov\xFD Z\xE9land", "N\xF3rsko", "N\xF3rske kr\xE1\u013Eovstvo", "Om\xE1n", "Om\xE1nsky sultan\xE1t", "Pakistan", "Pakistansk\xE1 islamsk\xE1 republika", "Palau", "Palausk\xE1 republika", "Panama", "Panamsk\xE1 republika", "Papua-Nov\xE1 Guinea", "Nez\xE1visl\xFD \u0161t\xE1t Papua-Nov\xE1 Guinea", "Paraguaj", "Paraguajsk\xE1 republika", "Peru", "Peru\xE1nska republika", "Pobre\u017Eie Slonoviny", "Republika Pobre\u017Eie Slonoviny", "Po\u013Esko", "Po\u013Esk\xE1 republika", "Portugalsko", "Portugalsk\xE1 republika", "Rak\xFAsko", "Rak\xFAska republika", "Rovn\xEDkov\xE1 Guinea", "Republika Rovn\xEDkov\xE1 Guinea", "Rumunsko", "Rusko", "Rusk\xE1 feder\xE1cia", "Rwanda", "Rwandsk\xE1 republika", "Salv\xE1dor", "Salv\xE1dorsk\xE1 republika", "Samoa", "Nez\xE1visl\xFD \u0161t\xE1t Samoa", "San Mar\xEDno", "Sanmar\xEDnska republika", "Saudsk\xE1 Ar\xE1bia", "Kr\xE1\u013Eovstvo Saudskej Ar\xE1bie", "Senegal", "Senegalsk\xE1 republika", "Seychely", "Seychelsk\xE1 republika", "Sierra Leone", "Republika Sierra Leone", "Singapur", "Singapurska republika", "Slovensko", "Slovensk\xE1 republika", "Slovinsko", "Slovinsk\xE1 republika", "Som\xE1lsko", "Som\xE1lska demokratick\xE1 republika", "Spojen\xE9 arabsk\xE9 emir\xE1ty", "Spojen\xE9 \u0161t\xE1ty americk\xE9", "Srbsko a \u010Cierna Hora", "Sr\xED Lanka", "Demokratick\xE1 socialistick\xE1 republika Sr\xED Lanka", "Stredoafrick\xE1 republika", "Sud\xE1n", "Sud\xE1nska republika", "Surinam", "Surinamsk\xE1 republika", "Svazijsko", "Svazijsk\xE9 kr\xE1\u013Eovstvo", "Sv\xE4t\xE1 Lucia", "Sv\xE4t\xFD Kri\u0161tof a Nevis", "Feder\xE1cia Sv\xE4t\xFD Kri\u0161tof a Nevis", "Sv. Tom\xE1\u0161 a Princov Ostrov", "Demokratick\xE1 republika Sv\xE4t\xFD Tom\xE1\u0161 a Princov Ostrov", "Sv. Vincent a Grenad\xEDny", "Sv\xE4t\xFD Vincent a Grenad\xEDny", "S\xFDria", "S\xFDrska arabsk\xE1 republika", "\u0160alam\xFAnove ostrovy", "\u0160panielsko", "\u0160panielske kr\xE1\u013Eovstvo", "\u0160vaj\u010Diarsko", "\u0160vaj\u010Diarska konfeder\xE1cia", "\u0160v\xE9dsko", "\u0160v\xE9dske kr\xE1\u013Eovstvo", "Tad\u017Eikistan", "Tad\u017Eick\xE1 republika", "Taliansko", "Talianska republika", "Tanz\xE1nia", "Tanz\xE1nijsk\xE1 zjednoten\xE1 republika", "Thajsko", "Thajsk\xE9 kr\xE1\u013Eovstvo", "Togo", "To\u017Esk\xE1 republika", "Tonga", "Ton\u017Esk\xE9 kr\xE1\u013Eovstvo", "Trinidad a Tobago", "Republika Trinidad a Tobago", "Tunisko", "Tunisk\xE1 republika", "Turecko", "Tureck\xE1 republika", "Turkm\xE9nsko", "Tuvalu", "Uganda", "Ugandsk\xE1 republika", "Ukrajina", "Uruguaj", "Uruguajsk\xE1 v\xFDchodn\xE1 republika", "Uzbekistan", "Vanuatu", "Vanuatsk\xE1 republika", "Vatik\xE1n", "Sv\xE4t\xE1 Stolica", "Ve\u013Ek\xE1 Brit\xE1nia", "Spojen\xE9 kr\xE1\u013Eovstvo Ve\u013Ekej Brit\xE1nie a Severn\xE9ho \xCDrska", "Venezuela", "Venezuelsk\xE1 bol\xEDvarovsk\xE1 republika", "Vietnam", "Vietnamsk\xE1 socialistick\xE1 republika", "V\xFDchodn\xFD Timor", "Demokratick\xE1 republika V\xFDchodn\xFD Timor", "Zambia", "Zambijsk\xE1 republika", "Zimbabwe", "Zimbabwianska republika"];
var t4 = ["Slovensko"];
var k3 = ["#####", "### ##", "## ###"];
var s4 = ["Apt. ###", "Suite ###"];
var l4 = [];
var v2 = [];
var u4 = ["{{address.street_name}}"];
var d4 = { normal: "{{address.street}} {{address.buildingNumber}}", full: "{{address.street}} {{address.buildingNumber}} {{address.secondaryAddress}}" };
var m4 = ["Ad\xE1miho", "Ahoj", "Alb\xEDna Brunovsk\xE9ho", "Albrechtova", "Alejov\xE1", "Ale\u0161ova", "Alibernetov\xE1", "Al\u017Ebet\xEDnska", "Al\u017Ebety Gwerkovej", "Ambroseho", "Ambru\u0161ova", "Americk\xE1", "Americk\xE9 n\xE1mestie", "Andreja Mr\xE1za", "Andreja Pl\xE1vku", "Andrusovova", "Anensk\xE1", "Antolsk\xE1", "Astronomick\xE1", "Astrov\xE1", "Azalkov\xE1", "Azovsk\xE1", "Babu\u0161kova", "Bachova", "Bajkalsk\xE1", "Bajzova", "Banc\xEDkovej", "Ban\xEDcka", "Ban\xEDkova", "Banskobystrick\xE1", "Ban\u0161elova", "Bardejovsk\xE1", "Bart\xF3kova", "Barto\u0148ova", "Barto\u0161kova", "Ba\u0161tov\xE1", "Bazov\xE1", "Ba\u017Eantia", "Beblav\xE9ho", "Beckovsk\xE1", "Bed\u013Eov\xE1", "Bel\xE1nikov\xE1", "Belehradsk\xE1", "Belinsk\xE9ho", "Belopotock\xE9ho", "Be\u0148adick\xE1", "Benc\xFArova", "Benediktiho", "Beniakova", "Bernol\xE1kova", "Beskydsk\xE1", "Betliarska", "Bezru\u010Dova", "Biela", "Bielkova", "Bj\xF6rnsonova", "Blagoevova", "Blatnick\xE1", "Blument\xE1lska", "Blysk\xE1\u010Dov\xE1", "Bo\u010Dn\xE1", "Bohrova", "Boh\xFA\u0148ova", "Bojnick\xE1", "Borod\xE1\u010Dova", "Borsk\xE1", "Bos\xE1kova", "Botanick\xE1", "Bottova", "Bo\u017Eeny N\u011Bmcovej", "B\xF4rik", "Brad\xE1\u010Dova", "Bradlianska", "Bran\u010Dsk\xE1", "Bratsk\xE1", "Brestov\xE1", "Brezovsk\xE1", "Brie\u017Eky", "Brnianska", "Brodn\xE1", "Brodsk\xE1", "Brosky\u0148ov\xE1", "B\u0159eclavsk\xE1", "Budat\xEDnska", "B\xFAdkova  cesta", "Budovate\u013Esk\xE1", "Budy\u0161\xEDnska", "Bukov\xE1", "Bukure\u0161tsk\xE1", "Bulharsk\xE1", "Bul\xEDkova", "Bystr\xE9ho", "Bzov\xEDcka", "Cablkova", "Cesta na \u010Cerven\xFD most", "Cesta na Senec", "Cikkerova", "Cintor\xEDnska", "Cintulova", "Cukrov\xE1", "Cyrilova", "\u010Cajakova", "\u010Cajkovsk\xE9ho", "\u010Caklovsk\xE1", "\u010Calovsk\xE1", "\u010Capajevova", "\u010Capkova", "\u010C\xE1rskeho", "\u010Cavojsk\xE9ho", "\u010Ce\u010Dinov\xE1", "\u010Celakovsk\xE9ho", "\u010Cere\u0161\u0148ov\xE1", "\u010Cerny\u0161evsk\xE9ho", "\u010Cerve\u0148ova", "\u010Cesk\xE1", "\u010Ceskoslovensk\xFDch par", "\u010Cipk\xE1rska", "\u010Cmel\xEDkova", "\u010Cme\u013Eovec", "\u010Culenova", "Daliborovo n\xE1mestie", "Dankovsk\xE9ho", "Dargovsk\xE1", "\u010Eatelinov\xE1", "Daxnerovo n\xE1mestie", "Dev\xEDnska cesta", "Dlh\xE9 diely I.", "Dlh\xE9 diely II.", "Dlh\xE9 diely III.", "Dobrovi\u010Dova", "Dobrovsk\xE9ho", "Dob\u0161insk\xE9ho", "Dohnalova", "Dohn\xE1nyho", "Dole\u017Ealova", "Doln\xE1", "Dolnozemsk\xE1 cesta", "Domk\xE1rska", "Domov\xE9 role", "Donnerova", "Donovalova", "Dostojevsk\xE9ho rad", "Dr. Vladim\xEDra Clemen", "Dreven\xE1", "Drie\u0148ov\xE1", "Drot\xE1rska cesta", "Dru\u017Eicov\xE1", "Dru\u017Estevn\xE1", "Dubnick\xE1", "Dubov\xE1", "D\xFAbravsk\xE1 cesta", "Dudova", "Dulovo n\xE1mestie", "Dunajsk\xE1", "Dvo\u0159\xE1kovo n\xE1bre\u017Eie", "Edisonova", "Einsteinova", "Elektr\xE1rensk\xE1", "Exn\xE1rova", "F. Kostku", "Fadruszova", "Fajnorovo n\xE1bre\u017Eie", "F\xE1ndlyho", "Farebn\xE1", "Farsk\xE1", "Farsk\xE9ho", "Fazu\u013Eov\xE1", "Fedinova", "Ferien\u010D\xEDkova", "Fialkov\xE9 \xFAdolie", "Fibichova", "Fili\xE1lne n\xE1dra\u017Eie", "Fl\xF6glova", "Flori\xE1nske n\xE1mestie", "Fra\u0148a Kr\xE1\u013Ea", "Francisciho", "Franc\xFAzskych partiz\xE1", "Franti\u0161k\xE1nska", "Franti\u0161k\xE1nske n\xE1mest", "Furdekova", "Gab\u010D\xEDkova", "Gagarinova", "Gajova", "Galaktick\xE1", "Galandova", "Gallova", "Galvaniho", "Ga\u0161par\xEDkova", "Ga\u0161tanov\xE1", "Gavlovi\u010Dova", "Gemersk\xE1", "Gercenova", "Gessayova", "Gettingov\xE1", "Godrova", "Gogo\u013Eova", "Gol\xE1\u0148ova", "Gondova", "Goralsk\xE1", "Gorazdova", "Gork\xE9ho", "Gregorovej", "Gr\xF6sslingova", "Gruz\xEDnska", "Gunduli\u010Dova", "Gusevova", "Haanova", "Habursk\xE1", "Hala\u0161ova", "H\xE1lkova", "H\xE1lova", "Hamuliakova", "Han\xE1cka", "Handlovsk\xE1", "Hany Meli\u010Dkovej", "Harmaneck\xE1", "Hasi\u010Dsk\xE1", "Hattalova", "Havl\xED\u010Dkova", "Havrania", "Haydnova", "Herlianska", "Heydukova", "Hlav\xE1\u010Dikova", "Hlavat\xE9ho", "Hlavn\xE9 n\xE1mestie", "Hlbok\xE1 cesta", "Hlivov\xE1", "Hlu\u010D\xEDnska", "Hod\xE1lova", "Hod\u017Eovo n\xE1mestie", "Holekova", "Hol\xED\u010Dska", "Holl\xE9ho", "Holubyho", "Hontianska", "Hor\xE1rska", "Horn\xE9 \u017Didiny", "Horsk\xE1", "Hrad", "Hradn\xE9 \xFAdolie", "Hrachov\xE1", "Hrani\u010Dn\xE1", "Hrebendova", "Hr\xEDbov\xE1", "Hri\u0148ovsk\xE1", "Hrob\xE1kova", "Hrob\xE1rska", "Hrobo\u0148ova", "Hudecova", "Humensk\xE9 n\xE1mestie", "Hummelova", "Hurbanovo n\xE1mestie", "Hviezdoslavovo n\xE1mes", "H\xFDro\u0161ova", "Chalupkova", "Chemick\xE1", "Chlumeck\xE9ho", "Chorv\xE1tska", "I\u013Eju\u0161inova", "Ilkovi\u010Dova", "Inoveck\xE1", "Iskern\xEDkov\xE1", "Ivana Horv\xE1tha", "Iv\xE1nska cesta", "J.C.Hronsk\xE9ho", "Jablo\u0148ov\xE1", "Jadrov\xE1", "Jakabova", "Jakubovo n\xE1mestie", "Jamnick\xE9ho", "J\xE1na Stanislava", "Jan\xE1\u010Dkova", "Jan\u010Dova", "Jan\xEDkove role", "Jankolova", "J\xE1no\u0161\xEDkova", "J\xE1no\u0161kova", "Janotova", "J\xE1nska", "Jant\xE1rov\xE1 cesta", "Jarabinkov\xE1", "Jarn\xE1", "Jaroslavova", "Jaro\u0161ova", "Jase\u0148ov\xE1", "Jasn\xE1", "Jasovsk\xE1", "Jastrabia", "Ja\u0161\xEDkova", "Javorinsk\xE1", "Javorov\xE1", "Jazdeck\xE1", "Jedl\xEDkova", "J\xE9g\xE9ho", "Jela\u010Di\u010Dova", "Jelenia", "Jesenn\xE1", "Jesensk\xE9ho", "Jir\xE1skova", "Jiskrova", "Jozefsk\xE1", "Jun\xE1cka", "Jungmannova", "Jurigovo n\xE1mestie", "Jurovsk\xE9ho", "Jursk\xE1", "Justi\u010Dn\xE1", "K lomu", "K \u017Deleznej studienke", "Kalin\u010Diakova", "Kamen\xE1rska", "Kamenn\xE9 n\xE1mestie", "Kapicova", "Kapitulsk\xE1", "Kapitulsk\xFD dvor", "Kapuc\xEDnska", "Kapu\u0161ianska", "Karad\u017Ei\u010Dova", "Karlovesk\xE1", "Karlovesk\xE9 rameno", "Karpatsk\xE1", "Ka\u0161m\xEDrska", "Ka\u0161tielska", "Kaukazsk\xE1", "Kempelenova", "Ke\u017Emarsk\xE9 n\xE1mestie", "Kladnianska", "Klarisk\xE1", "Kl\xE1\u0161torsk\xE1", "Klatovsk\xE1", "Klemensova", "Klincov\xE1", "Klobu\u010Dn\xEDcka", "Kloko\u010Dova", "K\u013Eukat\xE1", "Kme\u0165ovo n\xE1mestie", "Koce\u013Eova", "Ko\u010D\xE1nkova", "Koh\xFAtova", "Kol\xE1rska", "Kol\xEDskova", "Koll\xE1rovo n\xE1mestie", "Kolm\xE1", "Kom\xE1r\u0148ansk\xE1", "Kom\xE1rnick\xE1", "Komensk\xE9ho n\xE1mestie", "Komin\xE1rska", "Komonicov\xE1", "Konopn\xE1", "Konvalinkov\xE1", "Konventn\xE1", "Kopanice", "Kop\u010Dianska", "Kopern\xEDkova", "Korabinsk\xE9ho", "Koreni\u010Dova", "Kostliv\xE9ho", "Kostoln\xE1", "Ko\u0161ick\xE1", "Kov\xE1\u010Dska", "Kovorobotn\xEDcka", "Kozia", "Koziarka", "Kozmonautick\xE1", "Krajn\xE1", "Krakovsk\xE1", "Kr\xE1\u013Eovsk\xE9 \xFAdolie", "Krasinsk\xE9ho", "Kraskova", "Kr\xE1sna", "Kr\xE1snohorsk\xE1", "Krasovsk\xE9ho", "Kr\xE1tka", "Kr\u010Dm\xE9ryho", "Kremnick\xE1", "Kres\xE1nkova", "Kriv\xE1", "Kri\u017Ekova", "Kr\xED\u017Ena", "Krmanova", "Krompa\u0161sk\xE1", "Krupinsk\xE1", "Krupkova", "Kub\xE1niho", "Kub\xEDnska", "Kuklovsk\xE1", "Kuku\u010D\xEDnova", "Kukuri\u010Dn\xE1", "Kul\xED\u0161kova", "Kult\xFArna", "Kupeck\xE9ho", "K\xFApe\u013En\xE1", "Kutl\xEDkova", "Kutuzovova", "Kuzm\xE1nyho", "Kva\u010Dalova", "Kvetn\xE1", "K\xFD\u010Dersk\xE9ho", "Kyjevsk\xE1", "Kysuck\xE1", "Laboreck\xE1", "Lackova", "Ladislava S\xE1ru", "\u013Dadov\xE1", "Lachova", "\u013Daliov\xE1", "Lama\u010Dsk\xE1 cesta", "Lamansk\xE9ho", "Landererova", "Langsfeldova", "\u013Danov\xE1", "Laskomersk\xE9ho", "Lau\u010Dekova", "Laurinsk\xE1", "Lazaretsk\xE1", "Legersk\xE9ho", "Legion\xE1rska", "Lehock\xE9ho", "Lenardova", "Lermontovova", "Lesn\xE1", "Le\u0161kova", "Leteck\xE1", "Letisko M.R.\u0160tef\xE1nik", "Letn\xE1", "Lev\xE1rska", "Levick\xE1", "Levo\u010Dsk\xE1", "Lidick\xE1", "Lietavsk\xE1", "Lichardova", "Lipov\xE1", "Lipovinov\xE1", "Liptovsk\xE1", "Listov\xE1", "L\xED\u0161\u010Die nivy", "L\xED\u0161\u010Die \xFAdolie", "Litovsk\xE1", "Lodn\xE1", "Lombardiniho", "Lomonosovova", "Lopen\xEDcka", "Lovinsk\xE9ho", "\u013Dubietovsk\xE1", "\u013Dubinsk\xE1", "\u013Dub\u013Eansk\xE1", "\u013Dubochnianska", "\u013Dubovnianska", "L\xFA\u010Dna", "\u013Dudov\xE9 n\xE1mestie", "\u013Dudov\xEDta Fullu", "Luha\u010Dovick\xE1", "Lu\u017Eick\xE1", "Lu\u017En\xE1", "L\xFDcejn\xE1", "Lykovcov\xE1", "M. Hella", "Magnetov\xE1", "Macharova", "Majakovsk\xE9ho", "Majern\xEDkova", "M\xE1jkova", "M\xE1jov\xE1", "Makovick\xE9ho", "Mal\xE1", "Mal\xE9 p\xE1lenisko", "Malinov\xE1", "Mal\xFD Dra\u017Ediak", "Mal\xFD trh", "Mamateyova", "M\xE1nesovo n\xE1mestie", "Mari\xE1nska", "Marie Curie-Sklodows", "M\xE1rie Medve\u010Fovej", "Markova", "Mar\xF3tyho", "Mart\xE1kovej", "Martin\u010Dekova", "Martinengova", "Martinsk\xE1", "Mateja Bela", "Matejkova", "Mati\u010Dn\xE1", "Mat\xFA\u0161ova", "Meden\xE1", "Medzierka", "Medzilaboreck\xE1", "Merlotov\xE1", "Mesa\u010Dn\xE1", "Mestsk\xE1", "Meteorov\xE1", "Metodova", "Mickiewiczova", "Mierov\xE1", "Michalsk\xE1", "Mikov\xEDniho", "Mikul\xE1\u0161ska", "Mileti\u010Dova", "Mi\u0161\xEDkova", "Mliek\xE1rensk\xE1", "Mlynarovi\u010Dova", "Mlynsk\xE1 dolina", "Mlynsk\xE9 luhy", "Mlynsk\xE9 nivy", "Mlyny", "Modransk\xE1", "Mojm\xEDrova", "Mokr\xE1\u0148 z\xE1hon", "Mokroh\xE1jska cesta", "Moldavsk\xE1", "Molecova", "Moravsk\xE1", "Moskovsk\xE1", "Most SNP", "Mostov\xE1", "Mo\u0161ovsk\xE9ho", "Mot\xFDlia", "Moyzesova", "Mozartova", "Mraziarensk\xE1", "Mudro\u0148ova", "Muchovo n\xE1mestie", "Murga\u0161ova", "Mu\u0161k\xE1tov\xE1", "Mu\u0161tov\xE1", "M\xFAzejn\xE1", "Myjavsk\xE1", "M\xFDtna", "Na Bar\xE1nku", "Na Brezin\xE1ch", "Na Hrebienku", "Na Kalv\xE1rii", "Na Kamp\xE1rke", "Na kopci", "Na kri\u017Eovatk\xE1ch", "Na l\xE1noch", "Na pa\u0161i", "Na piesku", "Na Rivi\xE9re", "Na Sitine", "Na Slav\xEDne", "Na str\xE1ni", "Na \u0160tyridsiatku", "Na \xFAvrati", "Na v\u0155\u0161ku", "Na v\xFDsln\xED", "N\xE1b\u011Blkova", "N\xE1bre\u017Eie arm. gen. L", "N\xE1bre\u017En\xE1", "Nad Dunajom", "Nad lomom", "Nad l\xFA\u010Dkami", "Nad ostrovom", "Nad Siho\u0165ou", "N\xE1mestie 1. m\xE1ja", "N\xE1mestie Alexandra D", "N\xE1mestie Biely kr\xED\u017E", "N\xE1mestie Hrani\u010Diarov", "N\xE1mestie J\xE1na Pavla", "N\xE1mestie \u013Dudov\xEDta \u0160t", "N\xE1mestie Martina Ben", "N\xE1m. M.R.\u0160tef\xE1nika", "N\xE1mestie slobody", "N\xE1mestie SNP", "N\xE1mestie sv. Franti\u0161", "Narcisov\xE1", "Nedbalova", "Nekrasovova", "Neronetov\xE1", "Nerudova", "Nev\xE4dzov\xE1", "Nez\xE1budkov\xE1", "Ni\u0165ov\xE1", "Nitrianska", "N\xED\u017Einn\xE1", "Nobelova", "Nobelovo n\xE1mestie", "Nov\xE1", "Nov\xE1 Ro\u017E\u0148avsk\xE1", "Novack\xE9ho", "Nov\xE9 p\xE1lenisko", "Nov\xE9 z\xE1hrady I", "Nov\xE9 z\xE1hrady II", "Nov\xE9 z\xE1hrady III", "Nov\xE9 z\xE1hrady IV", "Nov\xE9 z\xE1hrady V", "Nov\xE9 z\xE1hrady VI", "Nov\xE9 z\xE1hrady VII", "Novin\xE1rska", "Novobansk\xE1", "Novohradsk\xE1", "Novosvetsk\xE1", "Obe\u017En\xE1", "Obchodn\xE1", "O\u010Dovsk\xE1", "Odboj\xE1rov", "Odbor\xE1rska", "Odbor\xE1rske n\xE1mestie", "Ohnicov\xE1", "Ok\xE1nikova", "Okru\u017En\xE1", "Olbrachtova", "Olejk\xE1rska", "Ondavsk\xE1", "Ondrejovova", "Oravsk\xE1", "Orechov\xE1 cesta", "Orechov\xFD rad", "Orie\u0161kov\xE1", "Ormisova", "Osadn\xE1", "Ostravsk\xE1", "Ostredkov\xE1", "Osusk\xE9ho", "Osvetov\xE1", "Otonelsk\xE1", "Ovru\u010Dsk\xE1", "Ovsi\u0161tsk\xE9 n\xE1mestie", "Paj\u0161t\xFAnska", "Palack\xE9ho", "Pal\xE1rikova", "P\xE1lavsk\xE1", "Palis\xE1dy", "Palkovi\u010Dova", "Panensk\xE1", "Pank\xFAchova", "Pan\xF3nska cesta", "Pansk\xE1", "Pap\xE1nkovo n\xE1mestie", "Papra\u010Fov\xE1", "P\xE1ri\u010Dkova", "Parkov\xE1", "Partiz\xE1nska", "Pasienky", "Paul\xEDnyho", "Pavlovi\u010Dova", "Pavlovova", "Pavlovsk\xE1", "Pa\u017Eick\xE9ho", "Pa\u017E\xEDtkov\xE1", "Pe\u010Dnianska", "Perneck\xE1", "Pestovate\u013Esk\xE1", "Petersk\xE1", "Petzvalova", "Pezinsk\xE1", "Pieso\u010Dn\xE1", "Pie\u0161\u0165ansk\xE1", "Pifflova", "Pil\xE1rikova", "Pionierska", "Pivo\u0148kov\xE1", "Planckova", "Plan\xE9t", "Pl\xE1ten\xEDcka", "Pluhov\xE1", "Plyn\xE1rensk\xE1", "Plzensk\xE1", "Pobre\u017En\xE1", "Pod B\xF4rikom", "Pod Kalv\xE1riou", "Pod lesom", "Pod Rovnicami", "Pod vinicami", "Podhorsk\xE9ho", "Podjavorinskej", "Podlu\u010Dinsk\xE9ho", "Podnikov\xE1", "Podtatransk\xE9ho", "Pohronsk\xE1", "Pol\xE1rna", "Poloreck\xE9ho", "Po\u013En\xE1", "Po\u013Esk\xE1", "Poludn\xEDkov\xE1", "Porubsk\xE9ho", "Po\u0161tov\xE1", "Pova\u017Esk\xE1", "Povrazn\xEDcka", "Pra\u017Esk\xE1", "Predstani\u010Dn\xE9 n\xE1mesti", "Prepo\u0161tsk\xE1", "Pre\u0161ernova", "Pre\u0161ovsk\xE1", "Pri Bielom kr\xED\u017Ei", "Pri dvore", "Pri Dynamitke", "Pri Hab\xE1nskom mlyne", "Pri hradnej studni", "Pri se\u010Di", "Pri Starej Prach\xE1rni", "Pri Starom h\xE1ji", "Pri Starom M\xFDte", "Pri strelnici", "Pri Suchom mlyne", "Pri zvonici", "Pribinova", "Pribi\u0161ova", "Pribylinsk\xE1", "Prie\u010Dna", "Priekopy", "Priemyseln\xE1", "Prievozsk\xE1", "Pr\xEDkopova", "Primaci\xE1lne n\xE1mestie", "Pr\xEDstav", "Pr\xEDstavn\xE1", "Prokofievova", "Prokopa Ve\u013Ek\xE9ho", "Prokopova", "Pr\xFAdov\xE1", "Prvosienkov\xE1", "P\xFApavov\xE1", "Pust\xE1", "Pu\u0161kinova", "Ra\u010Dianska", "Ra\u010Dianske m\xFDto", "Radarov\xE1", "R\xE1diov\xE1", "Radlinsk\xE9ho", "Radni\u010Dn\xE1", "Radni\u010Dn\xE9 n\xE1mestie", "Radvansk\xE1", "Rajsk\xE1", "Raketov\xE1", "R\xE1kosov\xE1", "Rastislavova", "R\xE1zusovo n\xE1bre\u017Eie", "Repn\xE1", "Re\u0161etkova", "Revolu\u010Dn\xE1", "R\xE9vov\xE1", "Rev\xFAcka", "Rezedov\xE1", "Riazansk\xE1", "Ribayov\xE1", "Rie\u010Dna", "Rigeleho", "R\xEDzlingov\xE1", "Riznerova", "Robotn\xEDcka", "Romanova", "R\xF6ntgenova", "Rosn\xE1", "Rovn\xE1", "Rovniankova", "Rovn\xEDkov\xE1", "Rozmar\xEDnov\xE1", "Ro\u017E\u0148avsk\xE1", "Rubinsteinova", "Rudnayovo n\xE1mestie", "Ruman\u010Dekov\xE1", "Rusovsk\xE1 cesta", "Ru\u017Ei\u010Dkov\xE1", "Ru\u017Einovsk\xE1", "Ru\u017Eombersk\xE1", "Ru\u017Eov\xE1 dolina", "Ryb\xE1rska br\xE1na", "Rybn\xE9 n\xE1mestie", "R\xFDdzikov\xE1", "Sabinovsk\xE1", "Sad Janka Kr\xE1\u013Ea", "Sadov\xE1", "Sartorisova", "Sasinkova", "Seber\xEDniho", "Se\u010Dovsk\xE1", "Sedl\xE1rska", "Sedmokr\xE1skov\xE1", "Segnerova", "Sekulsk\xE1", "Semianova", "Senick\xE1", "Senn\xE1", "Schillerova", "Schody pri starej vo", "Sib\xEDrska", "Sienkiewiczova", "Silv\xE1nska", "Sinokvetn\xE1", "Skalick\xE1 cesta", "Skaln\xE1", "Sklen\xE1rova", "Sklen\xE1rska", "Sl\xE1dkovi\u010Dova", "Sladov\xE1", "Sl\xE1vi\u010Die \xFAdolie", "Slav\xEDn", "Slep\xE1", "Slia\u010Dska", "Sliezska", "Slivkov\xE1", "Slne\u010Dn\xE1", "Slovansk\xE1", "Slovinsk\xE1", "Slovnaftsk\xE1", "Slowack\xE9ho", "Smetanova", "Smikova", "Smolenick\xE1", "Smoln\xEDcka", "Smre\u010Dianska", "Soferove schody", "Soch\xE1\u0148ova", "Sokolsk\xE1", "Solivarsk\xE1", "Solo\u0161nick\xE1", "Somolick\xE9ho", "Sosnov\xE1", "Spi\u0161sk\xE1", "Spojn\xE1", "Spolo\u010Densk\xE1", "Sputnikov\xE1", "Sreznevsk\xE9ho", "Srn\u010Dia", "Stachanovsk\xE1", "St\xE1licov\xE1", "Stani\u010Dn\xE1", "Star\xE1 \u010Cernicov\xE1", "Star\xE1 Iv\xE1nska cesta", "Star\xE1 Prievozsk\xE1", "Star\xE1 Vajnorsk\xE1", "Star\xE1 vin\xE1rska", "Star\xE9 Grunty", "Star\xE9 ihrisko", "Star\xE9 z\xE1hrady", "Starhradsk\xE1", "Staroh\xE1jska", "Staromestsk\xE1", "Starotursk\xFD chodn\xEDk", "Stavite\u013Esk\xE1", "Stodolova", "Stoklasov\xE1", "Strakova", "Str\xE1\u017Enick\xE1", "Str\xE1\u017Eny dom", "Stre\u010Dnianska", "Stredn\xE1", "Streleck\xE1", "Strm\xE1 cesta", "Strojn\xEDcka", "Stropkovsk\xE1", "Strukov\xE1", "Studen\xE1", "Stuhov\xE1", "S\xFAbe\u017En\xE1", "S\xFAhvezdn\xE1", "Such\xE9 m\xFDto", "Suchohradsk\xE1", "S\xFAkenn\xEDcka", "S\xFA\u013Eovsk\xE1", "Sumbalova", "S\xFAmra\u010Dn\xE1", "S\xFA\u0165a\u017En\xE1", "Sv\xE4t\xE9ho Vincenta", "Sv\xE4toplukova", "Sv\xE4tovojte\u0161sk\xE1", "Svetl\xE1", "Sv\xEDbov\xE1", "Svidn\xEDcka", "Svoradova", "Svr\u010Dia", "Syslia", "\u0160af\xE1rikovo n\xE1mestie", "\u0160afr\xE1nov\xE1", "\u0160ag\xE1tova", "\u0160alviov\xE1", "\u0160ancov\xE1", "\u0160\xE1ndorova", "\u0160ari\u0161sk\xE1", "\u0160\xE1\u0161ovsk\xE1", "\u0160a\u0161t\xEDnska", "\u0160ev\u010Denkova", "\u0160intavsk\xE1", "\u0160\xEDpkov\xE1", "\u0160karniclova", "\u0160kolsk\xE1", "\u0160kovr\xE1n\u010Dia", "\u0160kult\xE9tyho", "\u0160olt\xE9sovej", "\u0160pieszova", "\u0160pit\xE1lska", "\u0160portov\xE1", "\u0160rob\xE1rovo n\xE1mestie", "\u0160\u0165astn\xE1", "\u0160tedr\xE1", "\u0160tef\xE1nikova", "\u0160tefanovi\u010Dova", "\u0160tefunkova", "\u0160tetinova", "\u0160tiavnick\xE1", "\u0160t\xFArova", "\u0160tyndlova", "\u0160ulekova", "\u0160umavsk\xE1", "\u0160u\u0148avcova", "\u0160ustekova", "\u0160vabinsk\xE9ho", "Tabakov\xE1", "Tablicova", "T\xE1borsk\xE1", "Tajovsk\xE9ho", "Tallerova", "Teheln\xE1", "Technick\xE1", "Tekovsk\xE1", "Telocvi\u010Dn\xE1", "Temat\xEDnska", "Teplick\xE1", "Terchovsk\xE1", "Teslova", "Tetmayerova", "Thurzova", "Tich\xE1", "Tilgnerova", "Timravina", "Tobruck\xE1", "Tokaj\xEDcka", "Tolst\xE9ho", "Tom\xE1nkova", "Tom\xE1\u0161ikova", "Topo\u013E\u010Dianska", "Topo\u013Eov\xE1", "Tov\xE1rensk\xE1", "Trebi\u0161ovsk\xE1", "Tren\u010Dianska", "Tresko\u0148ova", "Trnavsk\xE1 cesta", "Trnavsk\xE9 m\xFDto", "T\u0155\u0148ov\xE1", "Trojdomy", "Tu\u010Dkova", "Tupolevova", "Turb\xEDnova", "Tur\u010Dianska", "Turnianska", "Tvaro\u017Ekova", "Tylova", "Tyr\u0161ovo n\xE1bre\u017Eie", "\xDAdern\xEDcka", "\xDAdoln\xE1", "Uhorkov\xE1", "Ukrajinsk\xE1", "Ulica 29. augusta", "Ulica Imricha Karva\u0161", "Ulica Jozefa Kr\xF3nera", "Ulica Viktora Tegelh", "\xDAprkova", "\xDAradn\xEDcka", "Ur\xE1nov\xE1", "Urb\xE1nkova", "Urs\xEDnyho", "Ur\u0161ul\xEDnska", "\xDAzka", "V z\xE1hrad\xE1ch", "Vajansk\xE9ho n\xE1bre\u017Eie", "Vajnorsk\xE1", "Vala\u0161sk\xE1", "Valch\xE1rska", "Vansovej", "V\xE1penn\xE1", "Var\xEDnska", "Var\u0161avsk\xE1", "Vavilovova", "Vavr\xEDnova", "Vazovova", "V\u010Del\xE1rska", "Velehradsk\xE1", "Veltl\xEDnska", "Vent\xFArska", "Vetern\xE1", "Veternicov\xE1", "Vetvov\xE1", "Viedensk\xE1 cesta", "Vietnamsk\xE1", "V\xEDg\u013Ea\u0161sk\xE1", "Vihorlatsk\xE1", "Viktor\xEDnova", "Vilov\xE1", "Vincenta Hlo\u017En\xEDka", "V\xEDnna", "Vlasteneck\xE9 n\xE1mestie", "Vl\u010Dkova", "Vodn\xFD vrch", "Votrubova", "Vr\xE1be\u013Esk\xE1", "Vrakunsk\xE1 cesta", "Vranovsk\xE1", "Vretenov\xE1", "Vrchn\xE1", "Vr\xFAtock\xE1", "Vyhliadka", "Vyhnianska cesta", "Vysok\xE1", "Vy\u0161ehradsk\xE1", "Vy\u0161n\xE1", "Wattova", "Wilsonova", "Wolkrova", "Za Kas\xE1r\u0148ou", "Za sokolov\u0148ou", "Za Stanicou", "Za tehel\u0148ou", "Z\xE1borsk\xE9ho", "Zadunajsk\xE1 cesta", "Z\xE1hor\xE1cka", "Z\xE1hradn\xEDcka", "Z\xE1hrebsk\xE1", "Z\xE1lu\u017Eick\xE1", "Z\xE1mock\xE1", "Z\xE1mock\xE9 schody", "Z\xE1mo\u010Dn\xEDcka", "Z\xE1padn\xE1", "Z\xE1padn\xFD rad", "Z\xE1poro\u017Esk\xE1", "Z\xE1ti\u0161ie", "Z\xE1vodn\xEDkova", "Zelen\xE1", "Zelin\xE1rska", "Zimn\xE1", "Zlat\xE9 piesky", "Zlat\xE9 schody", "Znievska", "Zohorsk\xE1", "Zochova", "Zrinsk\xE9ho", "Zvolensk\xE1", "\u017Dab\xED majer", "\u017Dabotova", "\u017Dehrianska", "\u017Delezn\xE1", "\u017Delezni\u010Diarska", "\u017Dellova", "\u017Diarska", "\u017Didovsk\xE1", "\u017Dilinsk\xE1", "\u017Divnostensk\xE1", "\u017Di\u017Ekova", "\u017Dupn\xE9 n\xE1mestie"];
var G2 = { building_number: a4, city: o4, city_name: e4, city_prefix: i4, city_suffix: r4, country: n4, default_country: t4, postcode: k3, secondary_address: s4, state: l4, state_abbr: v2, street: u4, street_address: d4, street_name: m4 };
var c4 = G2;
var p4 = ["Adaptive", "Advanced", "Ameliorated", "Assimilated", "Automated", "Balanced", "Business-focused", "Centralized", "Cloned", "Compatible", "Configurable", "Cross-group", "Cross-platform", "Customer-focused", "Customizable", "Decentralized", "De-engineered", "Devolved", "Digitized", "Distributed", "Diverse", "Down-sized", "Enhanced", "Enterprise-wide", "Ergonomic", "Exclusive", "Expanded", "Extended", "Face to face", "Focused", "Front-line", "Fully-configurable", "Function-based", "Fundamental", "Future-proofed", "Grass-roots", "Horizontal", "Implemented", "Innovative", "Integrated", "Intuitive", "Inverse", "Managed", "Mandatory", "Monitored", "Multi-channelled", "Multi-lateral", "Multi-layered", "Multi-tiered", "Networked", "Object-based", "Open-architected", "Open-source", "Operative", "Optimized", "Optional", "Organic", "Organized", "Persevering", "Persistent", "Phased", "Polarised", "Pre-emptive", "Proactive", "Profit-focused", "Profound", "Programmable", "Progressive", "Public-key", "Quality-focused", "Reactive", "Realigned", "Re-contextualized", "Re-engineered", "Reduced", "Reverse-engineered", "Right-sized", "Robust", "Seamless", "Secured", "Self-enabling", "Sharable", "Stand-alone", "Streamlined", "Switchable", "Synchronised", "Synergistic", "Synergized", "Team-oriented", "Total", "Triple-buffered", "Universal", "Up-sized", "Upgradable", "User-centric", "User-friendly", "Versatile", "Virtual", "Visionary", "Vision-oriented"];
var b4 = ["clicks-and-mortar", "value-added", "vertical", "proactive", "robust", "revolutionary", "scalable", "leading-edge", "innovative", "intuitive", "strategic", "e-business", "mission-critical", "sticky", "one-to-one", "24/7", "end-to-end", "global", "B2B", "B2C", "granular", "frictionless", "virtual", "viral", "dynamic", "24/365", "best-of-breed", "killer", "magnetic", "bleeding-edge", "web-enabled", "interactive", "dot-com", "sexy", "back-end", "real-time", "efficient", "front-end", "distributed", "seamless", "extensible", "turn-key", "world-class", "open-source", "cross-platform", "cross-media", "synergistic", "bricks-and-clicks", "out-of-the-box", "enterprise", "integrated", "impactful", "wireless", "transparent", "next-generation", "cutting-edge", "user-centric", "visionary", "customized", "ubiquitous", "plug-and-play", "collaborative", "compelling", "holistic", "rich", "synergies", "web-readiness", "paradigms", "markets", "partnerships", "infrastructures", "platforms", "initiatives", "channels", "eyeballs", "communities", "ROI", "solutions", "e-tailers", "e-services", "action-items", "portals", "niches", "technologies", "content", "vortals", "supply-chains", "convergence", "relationships", "architectures", "interfaces", "e-markets", "e-commerce", "systems", "bandwidth", "infomediaries", "models", "mindshare", "deliverables", "users", "schemas", "networks", "applications", "metrics", "functionalities", "experiences", "web services", "methodologies"];
var h4 = ["implement", "utilize", "integrate", "streamline", "optimize", "evolve", "transform", "embrace", "enable", "orchestrate", "leverage", "reinvent", "aggregate", "architect", "enhance", "incentivize", "morph", "empower", "envisioneer", "monetize", "harness", "facilitate", "seize", "disintermediate", "synergize", "strategize", "deploy", "brand", "grow", "target", "syndicate", "synthesize", "deliver", "mesh", "incubate", "engage", "maximize", "benchmark", "expedite", "reintermediate", "whiteboard", "visualize", "repurpose", "innovate", "scale", "unleash", "drive", "extend", "engineer", "revolutionize", "generate", "exploit", "transition", "e-enable", "iterate", "cultivate", "matrix", "productize", "redefine", "recontextualize"];
var f4 = ["24 hour", "24/7", "3rd generation", "4th generation", "5th generation", "6th generation", "actuating", "analyzing", "asymmetric", "asynchronous", "attitude-oriented", "background", "bandwidth-monitored", "bi-directional", "bifurcated", "bottom-line", "clear-thinking", "client-driven", "client-server", "coherent", "cohesive", "composite", "context-sensitive", "contextually-based", "content-based", "dedicated", "demand-driven", "didactic", "directional", "discrete", "disintermediate", "dynamic", "eco-centric", "empowering", "encompassing", "even-keeled", "executive", "explicit", "exuding", "fault-tolerant", "foreground", "fresh-thinking", "full-range", "global", "grid-enabled", "heuristic", "high-level", "holistic", "homogeneous", "human-resource", "hybrid", "impactful", "incremental", "intangible", "interactive", "intermediate", "leading edge", "local", "logistical", "maximized", "methodical", "mission-critical", "mobile", "modular", "motivating", "multimedia", "multi-state", "multi-tasking", "national", "needs-based", "neutral", "next generation", "non-volatile", "object-oriented", "optimal", "optimizing", "radical", "real-time", "reciprocal", "regional", "responsive", "scalable", "secondary", "solution-oriented", "stable", "static", "systematic", "systemic", "system-worthy", "tangible", "tertiary", "transitional", "uniform", "upward-trending", "user-facing", "value-added", "web-enabled", "well-modulated", "zero administration", "zero defect", "zero tolerance"];
var S3 = ["{{name.last_name}} {{company.suffix}}", "{{name.male_last_name}} a {{name.male_last_name}} {{company.suffix}}"];
var y4 = ["ability", "access", "adapter", "algorithm", "alliance", "analyzer", "application", "approach", "architecture", "archive", "artificial intelligence", "array", "attitude", "benchmark", "budgetary management", "capability", "capacity", "challenge", "circuit", "collaboration", "complexity", "concept", "conglomeration", "contingency", "core", "customer loyalty", "database", "data-warehouse", "definition", "emulation", "encoding", "encryption", "extranet", "firmware", "flexibility", "focus group", "forecast", "frame", "framework", "function", "functionalities", "Graphic Interface", "groupware", "Graphical User Interface", "hardware", "help-desk", "hierarchy", "hub", "implementation", "info-mediaries", "infrastructure", "initiative", "installation", "instruction set", "interface", "internet solution", "intranet", "knowledge user", "knowledge base", "local area network", "leverage", "matrices", "matrix", "methodology", "middleware", "migration", "model", "moderator", "monitoring", "moratorium", "neural-net", "open architecture", "open system", "orchestration", "paradigm", "parallelism", "policy", "portal", "pricing structure", "process improvement", "product", "productivity", "project", "projection", "protocol", "secured line", "service-desk", "software", "solution", "standardization", "strategy", "structure", "success", "superstructure", "support", "synergy", "system engine", "task-force", "throughput", "time-frame", "toolset", "utilisation", "website", "workforce"];
var g3 = ["s.r.o.", "a.s.", "v.o.s."];
var F2 = { adjective: p4, bs_noun: b4, bs_verb: h4, descriptor: f4, name_patterns: S3, noun: y4, suffix: g3 };
var M3 = F2;
var K2 = ["sk", "com", "net", "eu", "org"];
var B2 = ["gmail.com", "zoznam.sk", "azet.sk"];
var O2 = { domain_suffix: K2, free_email: B2 };
var P2 = O2;
var z3 = ["alias", "consequatur", "aut", "perferendis", "sit", "voluptatem", "accusantium", "doloremque", "aperiam", "eaque", "ipsa", "quae", "ab", "illo", "inventore", "veritatis", "et", "quasi", "architecto", "beatae", "vitae", "dicta", "sunt", "explicabo", "aspernatur", "odit", "fugit", "sed", "quia", "consequuntur", "magni", "dolores", "eos", "qui", "ratione", "sequi", "nesciunt", "neque", "dolorem", "ipsum", "dolor", "amet", "consectetur", "adipisci", "velit", "non", "numquam", "eius", "modi", "tempora", "incidunt", "ut", "labore", "dolore", "magnam", "aliquam", "quaerat", "enim", "ad", "minima", "veniam", "quis", "nostrum", "exercitationem", "ullam", "corporis", "nemo", "ipsam", "voluptas", "suscipit", "laboriosam", "nisi", "aliquid", "ex", "ea", "commodi", "autem", "vel", "eum", "iure", "reprehenderit", "in", "voluptate", "esse", "quam", "nihil", "molestiae", "iusto", "odio", "dignissimos", "ducimus", "blanditiis", "praesentium", "laudantium", "totam", "rem", "voluptatum", "deleniti", "atque", "corrupti", "quos", "quas", "molestias", "excepturi", "sint", "occaecati", "cupiditate", "provident", "perspiciatis", "unde", "omnis", "iste", "natus", "error", "similique", "culpa", "officia", "deserunt", "mollitia", "animi", "id", "est", "laborum", "dolorum", "fuga", "harum", "quidem", "rerum", "facilis", "expedita", "distinctio", "nam", "libero", "tempore", "cum", "soluta", "nobis", "eligendi", "optio", "cumque", "impedit", "quo", "porro", "quisquam", "minus", "quod", "maxime", "placeat", "facere", "possimus", "assumenda", "repellendus", "temporibus", "quibusdam", "illum", "fugiat", "nulla", "pariatur", "at", "vero", "accusamus", "officiis", "debitis", "necessitatibus", "saepe", "eveniet", "voluptates", "repudiandae", "recusandae", "itaque", "earum", "hic", "tenetur", "a", "sapiente", "delectus", "reiciendis", "voluptatibus", "maiores", "doloribus", "asperiores", "repellat"];
var C2 = { words: z3 };
var j2 = C2;
var D3 = ["Alexandra", "Karina", "Daniela", "Andrea", "Ant\xF3nia", "Bohuslava", "D\xE1\u0161a", "Malv\xEDna", "Krist\xEDna", "Nata\u0161a", "Bohdana", "Drahom\xEDra", "S\xE1ra", "Zora", "Tamara", "Ema", "Tatiana", "Erika", "Veronika", "Ag\xE1ta", "Dorota", "Vanda", "Zoja", "Gabriela", "Perla", "Ida", "Liana", "Miloslava", "Vlasta", "L\xEDvia", "Eleon\xF3ra", "Etela", "Romana", "Zlatica", "Ane\u017Eka", "Bohumila", "Franti\u0161ka", "Angela", "Matilda", "Svetlana", "\u013Dubica", "Alena", "So\u0148a", "Vieroslava", "Zita", "Miroslava", "Irena", "Milena", "Estera", "Just\xEDna", "Dana", "Danica", "Jela", "Jaroslava", "Jarmila", "Lea", "Anast\xE1zia", "Galina", "Lesana", "Herm\xEDna", "Monika", "Ingrida", "Vikt\xF3ria", "Bla\u017Eena", "\u017Dofia", "Sofia", "Gizela", "Viola", "Gertr\xFAda", "Zina", "J\xFAlia", "Juliana", "\u017Delm\xEDra", "Ela", "Vanesa", "Iveta", "Vilma", "Petronela", "\u017Daneta", "X\xE9nia", "Karol\xEDna", "Lenka", "Laura", "Stanislava", "Margar\xE9ta", "Dobroslava", "Blanka", "Val\xE9ria", "Paul\xEDna", "Sid\xF3nia", "Adri\xE1na", "Be\xE1ta", "Petra", "Mel\xE1nia", "Diana", "Berta", "Patr\xEDcia", "Lujza", "Am\xE1lia", "Milota", "Nina", "Margita", "Kamila", "Du\u0161ana", "Magdal\xE9na", "O\u013Ega", "Anna", "Hana", "Bo\u017Eena", "Marta", "Libu\u0161a", "Bo\u017Eidara", "Dominika", "Hortenzia", "Jozef\xEDna", "\u0160tef\xE1nia", "\u013Dubom\xEDra", "Zuzana", "Darina", "Marcela", "Milica", "Elena", "Helena", "L\xFDdia", "Anabela", "Jana", "Silvia", "Nikola", "Ru\u017Eena", "Nora", "Drahoslava", "Linda", "Melinda", "Rebeka", "Roz\xE1lia", "Reg\xEDna", "Alica", "Marianna", "Miriama", "Martina", "M\xE1ria", "Jolana", "\u013Dudomila", "\u013Dudmila", "Olympia", "Eug\xE9nia", "\u013Duboslava", "Zdenka", "Edita", "Michaela", "Stela", "Viera", "Nat\xE1lia", "Eli\u0161ka", "Brigita", "Valent\xEDna", "Ter\xE9zia", "Vladim\xEDra", "Hedviga", "Ur\u0161u\u013Ea", "Alojza", "Kvetoslava", "Sab\xEDna", "Dobromila", "Kl\xE1ra", "Simona", "Aur\xE9lia", "Denisa", "Ren\xE1ta", "Irma", "Agnesa", "Klaudia", "Al\u017Ebeta", "Elv\xEDra", "Cec\xEDlia", "Em\xEDlia", "Katar\xEDna", "Henrieta", "Bibi\xE1na", "Barbora", "Mar\xEDna", "Izabela", "Hilda", "Ot\xEDlia", "Lucia", "Branislava", "Bronislava", "Ivica", "Alb\xEDna", "Korn\xE9lia", "Sl\xE1va", "Sl\xE1vka", "Judita", "Dagmara", "Adela", "Nade\u017Eda", "Eva", "Filom\xE9na", "Ivana", "Milada"];
var V2 = ["Antalov\xE1", "Babkov\xE1", "Bahnov\xE1", "Bal\xE1\u017Eov\xE1", "Baranov\xE1", "Barankov\xE1", "Bartovi\u010Dov\xE1", "Barto\u0161ov\xE1", "Ba\u010Dov\xE1", "Bernol\xE1kov\xE1", "Be\u0148ov\xE1", "Bicekov\xE1", "Bielikov\xE1", "Blahov\xE1", "Bondrov\xE1", "Bos\xE1kov\xE1", "Bo\u0161kov\xE1", "Brezinov\xE1", "Bukovsk\xE1", "Chalupkov\xE1", "Chud\xEDkov\xE1", "Cibulov\xE1", "Cibulkov\xE1", "Cyprichov\xE1", "C\xEDgerov\xE1", "Dankov\xE1", "Da\u0148kov\xE1", "Da\u0148ov\xE1", "Debn\xE1rov\xE1", "Dejov\xE1", "Dek\xFD\u0161ov\xE1", "Dole\u017Ealov\xE1", "Do\u010Dolomansk\xE1", "Droppov\xE1", "Dubovsk\xE1", "Dudekov\xE1", "Dulov\xE1", "Dullov\xE1", "Dus\xEDkov\xE1", "Dvon\u010Dov\xE1", "Dzurjaninov\xE1", "D\xE1vidov\xE1", "Fabianov\xE1", "Fabi\xE1nov\xE1", "Fajnorov\xE1", "Farka\u0161ovsk\xE1", "Ficov\xE1", "Filcov\xE1", "Filipov\xE1", "Finkov\xE1", "Ftorekov\xE1", "Ga\u0161parov\xE1", "Ga\u0161parovi\u010Dov\xE1", "Gocn\xEDkov\xE1", "Gregorov\xE1", "Gregu\u0161ov\xE1", "Grzn\xE1rov\xE1", "Habl\xE1kov\xE1", "Hab\u0161udov\xE1", "Haldov\xE1", "Halu\u0161kov\xE1", "Hal\xE1kov\xE1", "Hankov\xE1", "Hanzalov\xE1", "Ha\u0161\u010D\xE1kov\xE1", "Heretikov\xE1", "He\u010Dkov\xE1", "Hlav\xE1\u010Dekov\xE1", "Hlinkov\xE1", "Holubov\xE1", "Holubyov\xE1", "Hossov\xE1", "Hozov\xE1", "Hra\u0161kov\xE1", "Hricov\xE1", "Hrmov\xE1", "Hru\u0161ovsk\xE1", "Hubov\xE1", "Ihna\u010D\xE1kov\xE1", "Jane\u010Dekov\xE1", "Jano\u0161kov\xE1", "Janto\u0161ovi\u010Dov\xE1", "Jan\xEDkov\xE1", "Jan\u010Dekov\xE1", "Jed\u013Eovsk\xE1", "Jendekov\xE1", "Jonatov\xE1", "Jurinov\xE1", "Jurkovi\u010Dov\xE1", "Jur\xEDkov\xE1", "J\xE1no\u0161\xEDkov\xE1", "Kafendov\xE1", "Kalisk\xE1", "Karulov\xE1", "Ken\xED\u017Eov\xE1", "Klapkov\xE1", "Kme\u0165ov\xE1", "Koles\xE1rov\xE1", "Koll\xE1rov\xE1", "Kolnikov\xE1", "Koln\xEDkov\xE1", "Kol\xE1rov\xE1", "Korecov\xE1", "Kostkaov\xE1", "Kostrecov\xE1", "Kov\xE1\u010Dov\xE1", "Kov\xE1\u010Dikov\xE1", "Kozov\xE1", "Ko\u010Di\u0161ov\xE1", "Kraj\xED\u010Dekov\xE1", "Kraj\u010Dov\xE1", "Kraj\u010Dovi\u010Dov\xE1", "Kraj\u010D\xEDrov\xE1", "Kr\xE1likov\xE1", "Kr\xFApov\xE1", "Kub\xEDkov\xE1", "Kyse\u013Eov\xE1", "K\xE1llayov\xE1", "Labudov\xE1", "Lep\u0161\xEDkov\xE1", "Lipt\xE1kov\xE1", "Lisick\xE1", "Lubinov\xE1", "Luk\xE1\u010Dov\xE1", "Lupt\xE1kov\xE1", "L\xED\u0161kov\xE1", "Madejov\xE1", "Majesk\xE1", "Malachovsk\xE1", "Mal\xED\u0161ekov\xE1", "Mamojkov\xE1", "Marcinkov\xE1", "Mari\xE1nov\xE1", "Masarykov\xE1", "Maslov\xE1", "Matia\u0161kov\xE1", "Medve\u010Fov\xE1", "Melcerov\xE1", "Me\u010Diarov\xE1", "Michal\xEDkov\xE1", "Mihalikov\xE1", "Mih\xE1lov\xE1", "Mih\xE1likov\xE1", "Miklo\u0161kov\xE1", "Mikul\xEDkov\xE1", "Miku\u0161ov\xE1", "Mik\xFA\u0161ov\xE1", "Milotov\xE1", "Min\xE1\u010Dov\xE1", "Mi\u0161\xEDkov\xE1", "Moj\u017Ei\u0161ov\xE1", "Mokro\u0161ov\xE1", "Morov\xE1", "Morav\u010D\xEDkov\xE1", "Mydlov\xE1", "Nemcov\xE1", "Nov\xE1kov\xE1", "Ob\u0161utov\xE1", "Ondru\u0161ov\xE1", "Ot\u010Den\xE1\u0161ov\xE1", "Paukov\xE1", "Pavlikovsk\xE1", "Pav\xFAkov\xE1", "Pa\u0161ekov\xE1", "Pa\u0161kov\xE1", "Pelik\xE1nov\xE1", "Petrovick\xE1", "Petru\u0161kov\xE1", "Pe\u0161kov\xE1", "Plchov\xE1", "Plekanecov\xE1", "Podhradsk\xE1", "Podkonick\xE1", "Poliakov\xE1", "Pup\xE1kov\xE1", "Rakov\xE1", "Repisk\xE1", "Roman\u010D\xEDkov\xE1", "Rusov\xE1", "Ru\u017Ei\u010Dkov\xE1", "Rybn\xED\u010Dekov\xE1", "Ryb\xE1rov\xE1", "Ryb\xE1rikov\xE1", "Samsonov\xE1", "Sedliakov\xE1", "Senkov\xE1", "Sklenkov\xE1", "Skokanov\xE1", "Skuteck\xE1", "Sla\u0161\u0165anov\xE1", "Slobodov\xE1", "Slobodn\xEDkov\xE1", "Slotov\xE1", "Slov\xE1kov\xE1", "Smrekov\xE1", "Stodolov\xE1", "Strakov\xE1", "Strniskov\xE1", "Svrb\xEDkov\xE1", "S\xE1melov\xE1", "S\xFDkorov\xE1", "Tatarov\xE1", "Tatarkov\xE1", "Tat\xE1rov\xE1", "Tat\xE1rkaov\xE1", "Thomkov\xE1", "Tome\u010Dekov\xE1", "Tomkov\xE1", "Trubenov\xE1", "Tur\u010Dokov\xE1", "Uramov\xE1", "Urbl\xEDkov\xE1", "Vajc\xEDkov\xE1", "Vajdov\xE1", "Valachov\xE1", "Valachovi\u010Dov\xE1", "Valentov\xE1", "Valu\u0161kov\xE1", "Vanekov\xE1", "Veselov\xE1", "Vicenov\xE1", "Vi\u0161\u0148ovsk\xE1", "Vlachov\xE1", "Vojtekov\xE1", "Vydaren\xE1", "Zajacov\xE1", "Zimov\xE1", "Zimkov\xE1", "Z\xE1borsk\xE1", "Z\xFAbrikov\xE1", "\u010Capkovi\u010Dov\xE1", "\u010Caplovi\u010Dov\xE1", "\u010Carnogursk\xE1", "\u010Ciern\xE1", "\u010Cobrdov\xE1", "\u010Ea\u010Fov\xE1", "\u010Euricov\xE1", "\u010Euri\u0161ov\xE1", "\u0160idlov\xE1", "\u0160imonovi\u010Dov\xE1", "\u0160kriniarov\xE1", "\u0160kult\xE9tyov\xE1", "\u0160majdov\xE1", "\u0160olt\xE9sov\xE1", "\u0160olt\xFDsov\xE1", "\u0160tefanov\xE1", "\u0160tefankov\xE1", "\u0160ulcov\xE1", "\u0160urkov\xE1", "\u0160vehlov\xE1", "\u0160\u0165astn\xE1"];
var H2 = ["Drahoslav", "Sever\xEDn", "Alexej", "Ernest", "Rastislav", "Radovan", "Dobroslav", "Dalibor", "Vincent", "Milo\u0161", "Timotej", "Gejza", "Bohu\u0161", "Alfonz", "Ga\u0161par", "Emil", "Erik", "Bla\u017Eej", "Zdenko", "Dezider", "Arp\xE1d", "Valent\xEDn", "Pravoslav", "Jarom\xEDr", "Roman", "Matej", "Frederik", "Viktor", "Alexander", "Radom\xEDr", "Alb\xEDn", "Bohumil", "Kazim\xEDr", "Fridrich", "Radoslav", "Tom\xE1\u0161", "Alan", "Branislav", "Bruno", "Gregor", "Vlastimil", "Boleslav", "Eduard", "Jozef", "V\xED\u0165azoslav", "Blahoslav", "Be\u0148adik", "Adri\xE1n", "Gabriel", "Mari\xE1n", "Emanuel", "Miroslav", "Benjam\xEDn", "Hugo", "Richard", "Izidor", "Zolt\xE1n", "Albert", "Igor", "J\xFAlius", "Ale\u0161", "Fedor", "Rudolf", "Val\xE9r", "Marcel", "Erv\xEDn", "Slavom\xEDr", "Vojtech", "Juraj", "Marek", "Jaroslav", "\u017Digmund", "Flori\xE1n", "Roland", "Pankr\xE1c", "Serv\xE1c", "Bonif\xE1c", "Svetoz\xE1r", "Bernard", "J\xFAlia", "Urban", "Du\u0161an", "Viliam", "Ferdinand", "Norbert", "R\xF3bert", "Medard", "Zlatko", "Anton", "Vasil", "V\xEDt", "Adolf", "Vratislav", "Alfr\xE9d", "Alojz", "J\xE1n", "Tade\xE1\u0161", "Ladislav", "Peter", "Pavol", "Miloslav", "Prokop", "Cyril", "Metod", "Patrik", "Oliver", "Ivan", "Kamil", "Henrich", "Drahom\xEDr", "Bohuslav", "I\u013Eja", "Daniel", "Vladim\xEDr", "Jakub", "Kri\u0161tof", "Ign\xE1c", "Gust\xE1v", "Jergu\u0161", "Dominik", "Oskar", "Vavrinec", "\u013Dubom\xEDr", "Mojm\xEDr", "Leonard", "Tichom\xEDr", "Filip", "Bartolomej", "\u013Dudov\xEDt", "Samuel", "August\xEDn", "Belo", "Oleg", "Bystr\xEDk", "Ctibor", "\u013Dudomil", "Kon\u0161tant\xEDn", "\u013Duboslav", "Mat\xFA\u0161", "M\xF3ric", "\u013Dubo\u0161", "\u013Dubor", "Vladislav", "Cypri\xE1n", "V\xE1clav", "Michal", "Jarol\xEDm", "Arnold", "Levoslav", "Franti\u0161ek", "Dion\xFDz", "Maximili\xE1n", "Koloman", "Boris", "Luk\xE1\u0161", "Kristi\xE1n", "Vendel\xEDn", "Sergej", "Aurel", "Demeter", "Denis", "Hubert", "Karol", "Imrich", "Ren\xE9", "Bohum\xEDr", "Teodor", "Tibor", "Maro\u0161", "Martin", "Sv\xE4topluk", "Stanislav", "Leopold", "Eugen", "F\xE9lix", "Klement", "Kornel", "Milan", "Vratko", "Ondrej", "Andrej", "Edmund", "Oldrich", "Oto", "Mikul\xE1\u0161", "Ambr\xF3z", "Rad\xFAz", "Bohdan", "Adam", "\u0160tefan", "D\xE1vid", "Silvester"];
var R2 = ["Antal", "Babka", "Bahna", "Bahno", "Bal\xE1\u017E", "Baran", "Baranka", "Bartovi\u010D", "Barto\u0161", "Ba\u010Da", "Bernol\xE1k", "Be\u0148o", "Bicek", "Bielik", "Blaho", "Bondra", "Bos\xE1k", "Bo\u0161ka", "Brezina", "Bukovsk\xFD", "Chalupka", "Chud\xEDk", "Cibula", "Cibulka", "Cibu\u013Ea", "Cyprich", "C\xEDger", "Danko", "Da\u0148ko", "Da\u0148o", "Debn\xE1r", "Dej", "Dek\xFD\u0161", "Dole\u017Eal", "Do\u010Dolomansk\xFD", "Droppa", "Dubovsk\xFD", "Dudek", "Dula", "Dulla", "Dus\xEDk", "Dvon\u010D", "Dzurjanin", "D\xE1vid", "Fabian", "Fabi\xE1n", "Fajnor", "Farka\u0161ovsk\xFD", "Fico", "Filc", "Filip", "Finka", "Ftorek", "Ga\u0161par", "Ga\u0161parovi\u010D", "Gocn\xEDk", "Gregor", "Gregu\u0161", "Grzn\xE1r", "Habl\xE1k", "Hab\u0161uda", "Halda", "Halu\u0161ka", "Hal\xE1k", "Hanko", "Hanzal", "Ha\u0161\u010D\xE1k", "Heretik", "He\u010Dko", "Hlav\xE1\u010Dek", "Hlinka", "Holub", "Holuby", "Hossa", "Hoza", "Hra\u0161ko", "Hric", "Hrmo", "Hru\u0161ovsk\xFD", "Huba", "Ihna\u010D\xE1k", "Jane\u010Dek", "Jano\u0161ka", "Janto\u0161ovi\u010D", "Jan\xEDk", "Jan\u010Dek", "Jed\u013Eovsk\xFD", "Jendek", "Jonata", "Jurina", "Jurkovi\u010D", "Jur\xEDk", "J\xE1no\u0161\xEDk", "Kafenda", "Kalisk\xFD", "Karul", "Ken\xED\u017E", "Klapka", "Kme\u0165", "Koles\xE1r", "Koll\xE1r", "Kolnik", "Koln\xEDk", "Kol\xE1r", "Korec", "Kostka", "Kostrec", "Kov\xE1\u010D", "Kov\xE1\u010Dik", "Koza", "Ko\u010Di\u0161", "Kraj\xED\u010Dek", "Kraj\u010Di", "Kraj\u010Do", "Kraj\u010Dovi\u010D", "Kraj\u010D\xEDr", "Kr\xE1lik", "Kr\xFApa", "Kub\xEDk", "Kyse\u013E", "K\xE1llay", "Labuda", "Lep\u0161\xEDk", "Lipt\xE1k", "Lisick\xFD", "Lubina", "Luk\xE1\u010D", "Lupt\xE1k", "L\xED\u0161ka", "Madej", "Majesk\xFD", "Malachovsk\xFD", "Mal\xED\u0161ek", "Mamojka", "Marcinko", "Mari\xE1n", "Masaryk", "Maslo", "Matia\u0161ko", "Medve\u010F", "Melcer", "Me\u010Diar", "Michal\xEDk", "Mihalik", "Mih\xE1l", "Mih\xE1lik", "Miklo\u0161ko", "Mikul\xEDk", "Miku\u0161", "Mik\xFA\u0161", "Milota", "Min\xE1\u010D", "Mi\u0161\xEDk", "Moj\u017Ei\u0161", "Mokro\u0161", "Mora", "Morav\u010D\xEDk", "Mydlo", "Nemec", "Nitra", "Nov\xE1k", "Ob\u0161ut", "Ondru\u0161", "Ot\u010Den\xE1\u0161", "Pauko", "Pavlikovsk\xFD", "Pav\xFAk", "Pa\u0161ek", "Pa\u0161ka", "Pa\u0161ko", "Pelik\xE1n", "Petrovick\xFD", "Petru\u0161ka", "Pe\u0161ko", "Plch", "Plekanec", "Podhradsk\xFD", "Podkonick\xFD", "Poliak", "Pup\xE1k", "Rak", "Repisk\xFD", "Roman\u010D\xEDk", "Rus", "Ru\u017Ei\u010Dka", "Rybn\xED\u010Dek", "Ryb\xE1r", "Ryb\xE1rik", "Samson", "Sedliak", "Senko", "Sklenka", "Skokan", "Skuteck\xFD", "Sla\u0161\u0165an", "Sloboda", "Slobodn\xEDk", "Slota", "Slov\xE1k", "Smrek", "Stodola", "Straka", "Strnisko", "Svrb\xEDk", "S\xE1mel", "S\xFDkora", "Tatar", "Tatarka", "Tat\xE1r", "Tat\xE1rka", "Thomka", "Tome\u010Dek", "Tomka", "Tomko", "Truben", "Tur\u010Dok", "Uram", "Urbl\xEDk", "Vajc\xEDk", "Vajda", "Valach", "Valachovi\u010D", "Valent", "Valu\u0161ka", "Vanek", "Vesel", "Vicen", "Vi\u0161\u0148ovsk\xFD", "Vlach", "Vojtek", "Vydaren\xFD", "Zajac", "Zima", "Zimka", "Z\xE1borsk\xFD", "Z\xFAbrik", "\u010Capkovi\u010D", "\u010Caplovi\u010D", "\u010Carnogursk\xFD", "\u010Cierny", "\u010Cobrda", "\u010Ea\u010Fo", "\u010Eurica", "\u010Euri\u0161", "\u0160idlo", "\u0160imonovi\u010D", "\u0160kriniar", "\u0160kult\xE9ty", "\u0160majda", "\u0160olt\xE9s", "\u0160olt\xFDs", "\u0160tefan", "\u0160tefanka", "\u0160ulc", "\u0160urka", "\u0160vehla", "\u0160\u0165astn\xFD"];
var N4 = ["{{name.prefix}} {{name.male_first_name}} {{name.male_last_name}}", "{{name.prefix}} {{name.female_first_name}} {{name.female_last_name}}", "{{name.male_first_name}} {{name.male_last_name}} {{name.suffix}}", "{{name.female_first_name}} {{name.female_last_name}} {{name.suffix}}", "{{name.male_first_name}} {{name.male_last_name}}", "{{name.female_first_name}} {{name.female_last_name}}"];
var L2 = ["Ing.", "Mgr.", "JUDr.", "MUDr."];
var T2 = ["Phd."];
var A2 = { descriptor: ["Lead", "Senior", "Direct", "Corporate", "Dynamic", "Future", "Product", "National", "Regional", "District", "Central", "Global", "Customer", "Investor", "International", "Legacy", "Forward", "Internal", "Human", "Chief", "Principal"], level: ["Solutions", "Program", "Brand", "Security", "Research", "Marketing", "Directives", "Implementation", "Integration", "Functionality", "Response", "Paradigm", "Tactics", "Identity", "Markets", "Group", "Division", "Applications", "Optimization", "Operations", "Infrastructure", "Intranet", "Communications", "Web", "Branding", "Quality", "Assurance", "Mobility", "Accounts", "Data", "Creative", "Configuration", "Accountability", "Interactions", "Factors", "Usability", "Metrics"], job: ["Supervisor", "Associate", "Executive", "Liaison", "Officer", "Manager", "Engineer", "Specialist", "Director", "Coordinator", "Administrator", "Architect", "Analyst", "Designer", "Planner", "Orchestrator", "Technician", "Developer", "Producer", "Consultant", "Assistant", "Facilitator", "Agent", "Representative", "Strategist"] };
var _3 = { female_first_name: D3, female_last_name: V2, male_first_name: H2, male_last_name: R2, name: N4, prefix: L2, suffix: T2, title: A2 };
var J2 = _3;
var x3 = ["09## ### ###", "0## #### ####", "0# #### ####", "+421 ### ### ###"];
var Z2 = { formats: x3 };
var I2 = Z2;
var w3 = { title: "Slovakian", address: c4, company: M3, internet: P2, lorem: j2, name: J2, phone_number: I2 };
var ho = w3;

// ../../node_modules/@faker-js/faker/dist/esm/chunk-WJNWABYE.mjs
init_esm_shims();
var a5 = ["###", "##", "#"];
var e5 = ["{{address.city_prefix}}{{address.city_suffix}}"];
var n5 = ["S\xF6der", "Norr", "V\xE4st", "\xD6ster", "Aling", "Ar", "Av", "Bo", "Br", "B\xE5", "Ek", "En", "Esk", "Fal", "G\xE4v", "G\xF6te", "Ha", "Helsing", "Karl", "Krist", "Kram", "Kung", "K\xF6", "Lyck", "Ny"];
var r5 = ["stad", "land", "s\xE5s", "\xE5s", "holm", "tuna", "sta", "berg", "l\xF6v", "borg", "mora", "hamn", "fors", "k\xF6ping", "by", "hult", "torp", "fred", "vik"];
var i5 = ["s V\xE4g", "s Gata"];
var t5 = ["Ryssland", "Kanada", "Kina", "USA", "Brasilien", "Australien", "Indien", "Argentina", "Kazakstan", "Algeriet", "DR Kongo", "Danmark", "F\xE4r\xF6arna", "Gr\xF6nland", "Saudiarabien", "Mexiko", "Indonesien", "Sudan", "Libyen", "Iran", "Mongoliet", "Peru", "Tchad", "Niger", "Angola", "Mali", "Sydafrika", "Colombia", "Etiopien", "Bolivia", "Mauretanien", "Egypten", "Tanzania", "Nigeria", "Venezuela", "Namibia", "Pakistan", "Mo\xE7ambique", "Turkiet", "Chile", "Zambia", "Marocko", "V\xE4stsahara", "Burma", "Afghanistan", "Somalia", "Centralafrikanska republiken", "Sydsudan", "Ukraina", "Botswana", "Madagaskar", "Kenya", "Frankrike", "Franska Guyana", "Jemen", "Thailand", "Spanien", "Turkmenistan", "Kamerun", "Papua Nya Guinea", "Sverige", "Uzbekistan", "Irak", "Paraguay", "Zimbabwe", "Japan", "Tyskland", "Kongo", "Finland", "Malaysia", "Vietnam", "Norge", "Svalbard", "Jan Mayen", "Elfenbenskusten", "Polen", "Italien", "Filippinerna", "Ecuador", "Burkina Faso", "Nya Zeeland", "Gabon", "Guinea", "Storbritannien", "Ghana", "Rum\xE4nien", "Laos", "Uganda", "Guyana", "Oman", "Vitryssland", "Kirgizistan", "Senegal", "Syrien", "Kambodja", "Uruguay", "Tunisien", "Surinam", "Nepal", "Bangladesh", "Tadzjikistan", "Grekland", "Nicaragua", "Eritrea", "Nordkorea", "Malawi", "Benin", "Honduras", "Liberia", "Bulgarien", "Kuba", "Guatemala", "Island", "Sydkorea", "Ungern", "Portugal", "Jordanien", "Serbien", "Azerbajdzjan", "\xD6sterrike", "F\xF6renade Arabemiraten", "Tjeckien", "Panama", "Sierra Leone", "Irland", "Georgien", "Sri Lanka", "Litauen", "Lettland", "Togo", "Kroatien", "Bosnien och Hercegovina", "Costa Rica", "Slovakien", "Dominikanska republiken", "Bhutan", "Estland", "Nederl\xE4nderna", "Schweiz", "Guinea-Bissau", "Taiwan", "Moldavien", "Belgien", "Lesotho", "Armenien", "Albanien", "Salomon\xF6arna", "Ekvatorialguinea", "Burundi", "Haiti", "Rwanda", "Makedonien", "Djibouti", "Belize", "Israel", "El Salvador", "Slovenien", "Fiji", "Kuwait", "Swaziland", "Timor-Leste", "Montenegro", "Bahamas", "Vanuatu", "Qatar", "Gambia", "Jamaica", "Kosovo", "Libanon", "Cypern", "Brunei", "Trinidad och Tobago", "Kap Verde", "Samoa", "Luxemburg", "Komorerna", "Mauritius", "S\xE3o Tom\xE9 och Pr\xEDncipe", "Kiribati", "Dominica", "Tonga", "Mikronesiens federerade stater", "Singapore", "Bahrain", "Saint Lucia", "Andorra", "Palau", "Seychellerna", "Antigua och Barbuda", "Barbados", "Saint Vincent och Grenadinerna", "Grenada", "Malta", "Maldiverna", "Saint Kitts och Nevis", "Marshall\xF6arna", "Liechtenstein", "San Marino", "Tuvalu", "Nauru", "Monaco", "Vatikanstaten"];
var o5 = ["Sverige"];
var s5 = ["#####"];
var l5 = ["Lgh. ###", "Hus ###"];
var m5 = ["Blekinge", "Dalarna", "Gotland", "G\xE4vleborg", "G\xF6teborg", "Halland", "J\xE4mtland", "J\xF6nk\xF6ping", "Kalmar", "Kronoberg", "Norrbotten", "Skaraborg", "Sk\xE5ne", "Stockholm", "S\xF6dermanland", "Uppsala", "V\xE4rmland", "V\xE4sterbotten", "V\xE4sternorrland", "V\xE4stmanland", "\xC4lvsborg", "\xD6rebro", "\xD6sterg\xF6tland"];
var d5 = ["{{address.street_name}}{{address.street_suffix}}", "{{address.street_prefix}} {{address.street_name}}{{address.street_suffix}}", "{{name.first_name}}{{address.common_street_suffix}}", "{{name.last_name}}{{address.common_street_suffix}}"];
var u5 = { normal: "{{address.street}} {{address.buildingNumber}}", full: "{{address.street}} {{address.buildingNumber}} {{address.secondaryAddress}}" };
var f5 = ["Bj\xF6rk", "J\xE4rnv\xE4gs", "Ring", "Skol", "Skogs", "Ny", "Gran", "Idrotts", "Stor", "Kyrk", "Industri", "Park", "Strand", "Tr\xE4dg\xE5rd", "\xC4ngs", "Kyrko", "Villa", "Ek", "Kvarn", "Stations", "Back", "Furu", "Gen", "Fabriks", "\xC5ker", "B\xE4ck", "Asp"];
var p5 = ["V\xE4stra", "\xD6stra", "Norra", "S\xF6dra", "\xD6vre", "Undre"];
var g4 = ["v\xE4gen", "gatan", "gr\xE4nden", "g\xE4rdet", "all\xE9n"];
var w4 = { building_number: a5, city: e5, city_prefix: n5, city_suffix: r5, common_street_suffix: i5, country: t5, default_country: o5, postcode: s5, secondary_address: l5, state: m5, street: d5, street_address: u5, street_name: f5, street_prefix: p5, street_suffix: g4 };
var k4 = w4;
var b5 = [56, 62, 59];
var c5 = ["{{cell_phone.common_cell_prefix}}-###-####"];
var z4 = { common_cell_prefix: b5, formats: c5 };
var S4 = z4;
var x4 = ["vit", "silver", "gr\xE5", "svart", "r\xF6d", "gr\xF6n", "bl\xE5", "gul", "lila", "indigo", "guld", "brun", "rosa", "purpur", "korall"];
var q2 = { human: x4 };
var A3 = q2;
var h5 = ["B\xF6cker", "Filmer", "Musik", "Spel", "Elektronik", "Datorer", "Hem", "Tr\xE4dg\xE5rd", "Verktyg", "Livsmedel", "H\xE4lsa", "Sk\xF6nhet", "Leksaker", "Kl\xE4dsel", "Skor", "Smycken", "Sport"];
var v3 = { adjective: ["Liten", "Ergonomisk", "Robust", "Intelligent", "S\xF6t", "Otrolig", "Fantastisk", "Praktisk", "Slimmad", "Grym"], material: ["St\xE5l", "Metall", "Tr\xE4", "Betong", "Plast", "Bomull", "Granit", "Gummi", "Latex"], product: ["Stol", "Bil", "Dator", "Handskar", "Byxor", "Skjorta", "Bord", "Skor", "Hatt"] };
var W2 = { department: h5, product_name: v3 };
var M4 = W2;
var L3 = ["{{name.last_name}} {{company.suffix}}", "{{name.last_name}}-{{name.last_name}}", "{{name.last_name}}, {{name.last_name}} {{company.suffix}}"];
var y5 = ["Gruppen", "AB", "HB", "Group", "Investment", "Kommanditbolag", "Aktiebolag"];
var Z3 = { name_patterns: L3, suffix: y5 };
var _4 = Z3;
var B3 = { wide: ["januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december"], abbr: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "aug", "sep", "okt", "nov", "dec"] };
var K3 = { wide: ["s\xF6ndag", "m\xE5ndag", "tisdag", "onsdag", "torsdag", "fredag", "l\xF6rdag"], abbr: ["s\xF6n", "m\xE5n", "tis", "ons", "tor", "fre", "l\xF6r"] };
var Y2 = { month: B3, weekday: K3 };
var E2 = Y2;
var J3 = ["se", "nu", "info", "com", "org"];
var Q2 = { domain_suffix: J3 };
var G3 = Q2;
var D4 = ["Anna", "Eva", "Maria", "Karin", "Sara", "Kristina", "Lena", "Emma", "Kerstin", "Marie", "Malin", "Ingrid", "Jenny", "Hanna", "Linda", "Annika", "Susanne", "Elin", "Monica", "Birgitta", "Sofia", "Johanna", "Inger", "Carina", "Elisabeth", "Julia", "Ulla", "Katarina", "Linn\xE9a", "Emelie", "Ida", "Helena", "Camilla", "\xC5sa", "Anette", "Sandra", "Gunilla", "Anita", "Maja", "Marianne", "Margareta", "Amanda", "Anneli", "Therese", "Ann", "Josefin", "Cecilia", "Jessica", "Helen", "Lisa", "Matilda", "Caroline", "Alice", "Frida", "Ulrika", "Elsa", "Barbro", "Siv", "Rebecca", "Madeleine", "Klara", "Ebba", "Sofie", "Isabelle", "Agneta", "Gun", "Wilma", "Lina", "Berit", "Pia", "Ella", "Ellen", "Yvonne", "Louise", "Astrid", "Moa", "Olivia", "Nathalie", "Mona", "Agnes", "Emilia", "Alexandra", "Alva", "Britt", "Erika", "Viktoria", "Ann-Christin", "Felicia", "Ann-Marie", "Sonja", "Britt-Marie", "Pernilla", "Lovisa", "Charlotte", "Linn", "Gunnel", "Nina", "Mikaela", "Karolina", "Lisbeth"];
var H3 = ["Anna", "Eva", "Maria", "Karin", "Sara", "Kristina", "Lena", "Emma", "Kerstin", "Marie", "Malin", "Ingrid", "Jenny", "Hanna", "Linda", "Annika", "Susanne", "Elin", "Monica", "Birgitta", "Sofia", "Johanna", "Inger", "Carina", "Elisabeth", "Julia", "Ulla", "Katarina", "Linn\xE9a", "Emelie", "Ida", "Helena", "Camilla", "\xC5sa", "Anette", "Sandra", "Gunilla", "Anita", "Maja", "Marianne", "Margareta", "Amanda", "Anneli", "Therese", "Ann", "Josefin", "Cecilia", "Jessica", "Helen", "Lisa", "Matilda", "Caroline", "Alice", "Frida", "Ulrika", "Elsa", "Barbro", "Siv", "Rebecca", "Madeleine", "Klara", "Ebba", "Sofie", "Isabelle", "Agneta", "Gun", "Wilma", "Lina", "Berit", "Pia", "Ella", "Ellen", "Yvonne", "Louise", "Astrid", "Moa", "Olivia", "Nathalie", "Mona", "Agnes", "Emilia", "Alexandra", "Alva", "Britt", "Erika", "Viktoria", "Ann-Christin", "Felicia", "Ann-Marie", "Sonja", "Britt-Marie", "Pernilla", "Lovisa", "Charlotte", "Linn", "Gunnel", "Nina", "Mikaela", "Karolina", "Lisbeth", "Lars", "Mikael", "Anders", "Johan", "Erik", "Per", "Peter", "Karl", "Thomas", "Jan", "Daniel", "Fredrik", "Andreas", "Hans", "Stefan", "Mohamed", "Mats", "Marcus", "Mattias", "Magnus", "Jonas", "Oskar", "Alexander", "Niklas", "Bengt", "Martin", "Bo", "Nils", "Viktor", "Patrik", "Bj\xF6rn", "David", "Leif", "Filip", "Henrik", "Joakim", "Emil", "Christer", "Ulf", "Sven", "Simon", "Christoffer", "Anton", "Gustav", "Robert", "Christian", "William", "Tommy", "Kjell", "Lucas", "Rickard", "H\xE5kan", "Adam", "G\xF6ran", "Jakob", "Jonathan", "Rolf", "Lennart", "Robin", "Sebastian", "Elias", "Tobias", "John", "Stig", "Axel", "Linus", "Oliver", "Kent", "Hugo", "Isak", "Roger", "Jesper", "Claes", "Albin", "Ludvig", "J\xF6rgen", "Rasmus", "Max", "Ali", "Jimmy", "Kenneth", "Joel", "Gunnar", "Dennis", "Josef", "Johnny", "Olle", "Liam", "Leo", "Olof", "Pontus", "\xC5ke", "Kurt", "Kevin", "Samuel", "Edvin", "Gabriel", "Torbj\xF6rn", "Arvid", "Felix"];
var F3 = ["Andersson", "Johansson", "Karlsson", "Nilsson", "Eriksson", "Larsson", "Olsson", "Persson", "Svensson", "Gustafsson", "Pettersson", "Jonsson", "Jansson", "Hansson", "Bengtsson", "J\xF6nsson", "Lindberg", "Jakobsson", "Magnusson", "Olofsson", "Lindstr\xF6m", "Lindqvist", "Lindgren", "Berg", "Axelsson", "Bergstr\xF6m", "Lundberg", "Lind", "Lundgren", "Lundqvist", "Mattsson", "Berglund", "Fredriksson", "Sandberg", "Henriksson", "Forsberg", "Sj\xF6berg", "Ali", "Wallin", "Mohamed", "Engstr\xF6m", "Eklund", "Danielsson", "Lundin", "H\xE5kansson", "Bj\xF6rk", "Bergman", "Gunnarsson", "Holm", "Wikstr\xF6m", "Samuelsson", "Isaksson", "Fransson", "Bergqvist", "Nystr\xF6m", "Holmberg", "Arvidsson", "L\xF6fgren", "S\xF6derberg", "Nyberg", "Blomqvist", "Claesson", "Nordstr\xF6m", "Ahmed", "M\xE5rtensson", "Lundstr\xF6m", "Hassan", "Viklund", "Bj\xF6rklund", "Eliasson", "P\xE5lsson", "Berggren", "Sandstr\xF6m", "Lund", "Nordin", "Str\xF6m", "\xC5berg", "Falk", "Ekstr\xF6m", "Hermansson", "Holmgren", "Hellstr\xF6m", "Dahlberg", "Hedlund", "Sundberg", "Sj\xF6gren", "Ek", "Blom", "Abrahamsson", "Martinsson", "\xD6berg", "Andreasson", "Str\xF6mberg", "M\xE5nsson", "Hansen", "\xC5kesson", "Dahl", "Lindholm", "Norberg", "Holmqvist"];
var N5 = ["Lars", "Mikael", "Anders", "Johan", "Erik", "Per", "Peter", "Karl", "Thomas", "Jan", "Daniel", "Fredrik", "Andreas", "Hans", "Stefan", "Mohamed", "Mats", "Marcus", "Mattias", "Magnus", "Jonas", "Oskar", "Alexander", "Niklas", "Bengt", "Martin", "Bo", "Nils", "Viktor", "Patrik", "Bj\xF6rn", "David", "Leif", "Filip", "Henrik", "Joakim", "Emil", "Christer", "Ulf", "Sven", "Simon", "Christoffer", "Anton", "Gustav", "Robert", "Christian", "William", "Tommy", "Kjell", "Lucas", "Rickard", "H\xE5kan", "Adam", "G\xF6ran", "Jakob", "Jonathan", "Rolf", "Lennart", "Robin", "Sebastian", "Elias", "Tobias", "John", "Stig", "Axel", "Linus", "Oliver", "Kent", "Hugo", "Isak", "Roger", "Jesper", "Claes", "Albin", "Ludvig", "J\xF6rgen", "Rasmus", "Max", "Ali", "Jimmy", "Kenneth", "Joel", "Gunnar", "Dennis", "Josef", "Johnny", "Olle", "Liam", "Leo", "Olof", "Pontus", "\xC5ke", "Kurt", "Kevin", "Samuel", "Edvin", "Gabriel", "Torbj\xF6rn", "Arvid", "Felix"];
var I3 = ["{{name.prefix}} {{name.first_name}} {{name.last_name}}", "{{name.first_name}} {{name.last_name}} {{name.suffix}}", "{{name.first_name}} {{name.last_name}}", "{{name.first_name}} {{name.last_name}} {{name.last_name}}", "{{name.male_first_name}} {{name.last_name}}", "{{name.female_first_name}} {{name.last_name}}"];
var j3 = ["Dr.", "Prof.", "PhD."];
var C3 = { descriptor: ["Ansvarig", "Senior", "Junior", "F\xF6retags", "Organisatorisk", "Intern", "Tilltr\xE4dande", "Nationell", "Internationell", "Regional", "Global"], level: ["Verkst\xE4llande", "Program", "Varum\xE4rke", "S\xE4kerhet", "Forskning", "Marknadsf\xF6ring", "Direktiv", "Implementation", "Integration", "Funktionalitet", "Taktik", "Marknader", "Division", "Grupp", "Optimering", "Infrastruktur", "Operativ", "Finansiell", "Kommunikation"], job: ["Direkt\xF6r", "Ingenj\xF6r", "Handledare", "Koordinator", "Specialist", "Administrat\xF6r", "Arkitekt", "Analytiker", "Designer", "Planerare", "Tekniker", "Utvecklare", "Konsult", "Representant", "Chef", "Producent", "Assistent"] };
var X2 = { female_first_name: D4, first_name: H3, last_name: F3, male_first_name: N5, name: I3, prefix: j3, title: C3 };
var P3 = X2;
var T3 = ["####-#####", "####-######"];
var $2 = { formats: T3 };
var V3 = $2;
var R3 = ["{{address.city}} {{team.suffix}}"];
var O3 = ["IF", "FF", "BK", "HK", "AIF", "SK", "FC", "BoIS", "FK", "BIS", "FIF", "IK"];
var aa = { name: R3, suffix: O3 };
var U2 = aa;
var ea = { title: "Swedish", address: k4, cell_phone: S4, color: A3, commerce: M4, company: _4, date: E2, internet: G3, name: P3, phone_number: V3, team: U2 };
var Ce = ea;

// ../../node_modules/@faker-js/faker/dist/esm/chunk-BG5XSEAX.mjs
init_esm_shims();
var a6 = ["###", "##", "#", "##a", "##b", "##c"];
var e6 = ["{{address.city_prefix}} {{name.firstName}}{{address.city_suffix}}", "{{address.city_prefix}} {{name.firstName}}", "{{name.firstName}}{{address.city_suffix}}", "{{name.lastName}}{{address.city_suffix}}", "{{address.city_name}}"];
var r6 = ["Adana", "Ad\u0131yaman", "Afyon", "A\u011Fr\u0131", "Amasya", "Ankara", "Antalya", "Artvin", "Ayd\u0131n", "Bal\u0131kesir", "Bilecik", "Bing\xF6l", "Bitlis", "Bolu", "Burdur", "Bursa", "\xC7anakkale", "\xC7ank\u0131r\u0131", "\xC7orum", "Denizli", "Diyarbak\u0131r", "Edirne", "Elaz\u0131\u011F", "Erzincan", "Erzurum", "Eski\u015Fehir", "Gaziantep", "Giresun", "G\xFCm\xFC\u015Fhane", "Hakkari", "Hatay", "Isparta", "\u0130\xE7el (Mersin)", "\u0130stanbul", "\u0130zmir", "Kars", "Kastamonu", "Kayseri", "K\u0131rklareli", "K\u0131r\u015Fehir", "Kocaeli", "Konya", "K\xFCtahya", "Malatya", "Manisa", "K.mara\u015F", "Mardin", "Mu\u011Fla", "Mu\u015F", "Nev\u015Fehir", "Ni\u011Fde", "Ordu", "Rize", "Sakarya", "Samsun", "Siirt", "Sinop", "Sivas", "Tekirda\u011F", "Tokat", "Trabzon", "Tunceli", "\u015Eanl\u0131urfa", "U\u015Fak", "Van", "Yozgat", "Zonguldak", "Aksaray", "Bayburt", "Karaman", "K\u0131r\u0131kkale", "Batman", "\u015E\u0131rnak", "Bart\u0131n", "Ardahan", "I\u011Fd\u0131r", "Yalova", "Karab\xFCk", "Kilis", "Osmaniye", "D\xFCzce"];
var i6 = ["Afganistan", "Almanya", "Amerika Birle\u015Fik Devletleri", "Amerikan Samoa", "Andorra", "Angola", "Anguilla, \u0130ngiltere", "Antigua ve Barbuda", "Arjantin", "Arnavutluk", "Aruba, Hollanda", "Avustralya", "Avusturya", "Azerbaycan", "Bahama Adalar\u0131", "Bahreyn", "Banglade\u015F", "Barbados", "Bel\xE7ika", "Belize", "Benin", "Bermuda, \u0130ngiltere", "Beyaz Rusya", "Bhutan", "Birle\u015Fik Arap Emirlikleri", "Birmanya (Myanmar)", "Bolivya", "Bosna Hersek", "Botswana", "Brezilya", "Brunei", "Bulgaristan", "Burkina Faso", "Burundi", "Cape Verde", "Cayman Adalar\u0131, \u0130ngiltere", "Cebelitar\u0131k, \u0130ngiltere", "Cezayir", "Christmas Adas\u0131 , Avusturalya", "Cibuti", "\xC7ad", "\xC7ek Cumhuriyeti", "\xC7in", "Danimarka", "Do\u011Fu Timor", "Dominik Cumhuriyeti", "Dominika", "Ekvator", "Ekvator Ginesi", "El Salvador", "Endonezya", "Eritre", "Ermenistan", "Estonya", "Etiyopya", "Fas", "Fiji", "Fildi\u015Fi Sahili", "Filipinler", "Filistin", "Finlandiya", "Folkland Adalar\u0131, \u0130ngiltere", "Fransa", "Frans\u0131z Guyanas\u0131", "Frans\u0131z G\xFCney Eyaletleri (Kerguelen Adalar\u0131)", "Frans\u0131z Polinezyas\u0131", "Gabon", "Galler", "Gambiya", "Gana", "Gine", "Gine-Bissau", "Grenada", "Gr\xF6nland", "Guadalup, Fransa", "Guam, Amerika", "Guatemala", "Guyana", "G\xFCney Afrika", "G\xFCney Georgia ve G\xFCney Sandvi\xE7 Adalar\u0131, \u0130ngiltere", "G\xFCney K\u0131br\u0131s Rum Y\xF6netimi", "G\xFCney Kore", "G\xFCrcistan H", "Haiti", "H\u0131rvatistan", "Hindistan", "Hollanda", "Hollanda Antilleri", "Honduras", "Irak", "\u0130ngiltere", "\u0130ran", "\u0130rlanda", "\u0130spanya", "\u0130srail", "\u0130sve\xE7", "\u0130svi\xE7re", "\u0130talya", "\u0130zlanda", "Jamaika", "Japonya", "Johnston Atoll, Amerika", "K.K.T.C.", "Kambo\xE7ya", "Kamerun", "Kanada", "Kanarya Adalar\u0131", "Karada\u011F", "Katar", "Kazakistan", "Kenya", "K\u0131rg\u0131zistan", "Kiribati", "Kolombiya", "Komorlar", "Kongo", "Kongo Demokratik Cumhuriyeti", "Kosova", "Kosta Rika", "Kuveyt", "Kuzey \u0130rlanda", "Kuzey Kore", "Kuzey Maryana Adalar\u0131", "K\xFCba", "Laos", "Lesotho", "Letonya", "Liberya", "Libya", "Liechtenstein", "Litvanya", "L\xFCbnan", "L\xFCksemburg", "Macaristan", "Madagaskar", "Makau (Makao)", "Makedonya", "Malavi", "Maldiv Adalar\u0131", "Malezya", "Mali", "Malta", "Mar\u015Fal Adalar\u0131", "Martinik, Fransa", "Mauritius", "Mayotte, Fransa", "Meksika", "M\u0131s\u0131r", "Midway Adalar\u0131, Amerika", "Mikronezya", "Mo\u011Folistan", "Moldavya", "Monako", "Montserrat", "Moritanya", "Mozambik", "Namibia", "Nauru", "Nepal", "Nijer", "Nijerya", "Nikaragua", "Niue, Yeni Zelanda", "Norve\xE7", "Orta Afrika Cumhuriyeti", "\xD6zbekistan", "Pakistan", "Palau Adalar\u0131", "Palmyra Atoll, Amerika", "Panama", "Papua Yeni Gine", "Paraguay", "Peru", "Polonya", "Portekiz", "Porto Riko, Amerika", "Reunion, Fransa", "Romanya", "Ruanda", "Rusya Federasyonu", "Saint Helena, \u0130ngiltere", "Saint Martin, Fransa", "Saint Pierre ve Miquelon, Fransa", "Samoa", "San Marino", "Santa Kitts ve Nevis", "Santa Lucia", "Santa Vincent ve Grenadinler", "Sao Tome ve Principe", "Senegal", "Sey\u015Feller", "S\u0131rbistan", "Sierra Leone", "Singapur", "Slovakya", "Slovenya", "Solomon Adalar\u0131", "Somali", "Sri Lanka", "Sudan", "Surinam", "Suriye", "Suudi Arabistan", "Svalbard, Norve\xE7", "Svaziland", "\u015Eili", "Tacikistan", "Tanzanya", "Tayland", "Tayvan", "Togo", "Tonga", "Trinidad ve Tobago", "Tunus", "Turks ve Caicos Adalar\u0131, \u0130ngiltere", "Tuvalu", "T\xFCrkiye", "T\xFCrkmenistan", "Uganda", "Ukrayna", "Umman", "Uruguay", "\xDCrd\xFCn", "Vallis ve Futuna, Fransa", "Vanuatu", "Venezuela", "Vietnam", "Virgin Adalar\u0131, Amerika", "Virgin Adalar\u0131, \u0130ngiltere", "Wake Adalar\u0131, Amerika", "Yemen", "Yeni Kaledonya, Fransa", "Yeni Zelanda", "Yunanistan", "Zambiya", "Zimbabve"];
var n6 = ["T\xFCrkiye"];
var l6 = ["#####"];
var t6 = ["{{address.street_name}}"];
var u6 = { normal: "{{address.street}} {{address.buildingNumber}}", full: "{{address.street}} {{address.buildingNumber}} {{address.secondaryAddress}}" };
var k5 = ["Atat\xFCrk Bulvar\u0131", "Alparslan T\xFCrke\u015F Bulvar\u0131", "Ali \xC7etinkaya Caddesi", "Tevfik Fikret Caddesi", "Kocatepe Caddesi", "\u0130smet Pa\u015Fa Caddesi", "30 A\u011Fustos Caddesi", "\u0130smet Attila Caddesi", "Nam\u0131k Kemal Caddesi", "L\xFCtfi Karadirek Caddesi", "Sar\u0131kaya Caddesi", "Yunus Emre Sokak", "Dar Sokak", "Fatih Sokak ", "Harman Yolu Sokak ", "Ergenekon Sokak  ", "\xDClk\xFC Sokak", "Sa\u011Fl\u0131k Sokak", "Okul Sokak", "Harman Alt\u0131 Sokak", "Kald\u0131r\u0131m Sokak", "Mevlana Sokak", "G\xFCl Sokak", "S\u0131ran S\xF6\u011F\xFCt Sokak", "G\xFCven Yaka Sokak", "Sayg\u0131l\u0131 Sokak", "Menek\u015Fe Sokak", "Da\u011F\u0131n\u0131k Evler Sokak", "Sevgi Sokak", "Afyon Kaya Sokak", "O\u011Fuzhan Sokak", "\u0130bn-i Sina Sokak", "Bah\xE7e Sokak", "K\xF6yp\u0131nar Sokak", "Keke\xE7o\u011Flu Sokak", "Bar\u0131\u015F Sokak", "Bay\u0131r Sokak", "Kerimo\u011Flu Sokak", "Nalbant Sokak", "Bandak Sokak"];
var N6 = { building_number: a6, city: e6, city_name: r6, country: i6, default_country: n6, postcode: l6, street: t6, street_address: u6, street_name: k5 };
var m6 = N6;
var o6 = ["+90-53#-###-##-##", "+90-54#-###-##-##", "+90-55#-###-##-##", "+90-50#-###-##-##"];
var F4 = { formats: o6 };
var d6 = F4;
var s6 = ["k\u0131rm\u0131z\u0131", "ye\u015Fil", "mavi", "sar\u0131", "mor", "nane ye\u015Fili", "beyaz", "siyah", "turuncu", "pembe", "gri", "bordo", "menek\u015Fe", "turkuaz", "tan", "g\xF6ky\xFCz\xFC mavisi", "somon", "erik", "orkide", "zeytin", "eflatun", "misket limonu", "fildi\u015Fi", "indigo", "alt\u0131n", "fu\u015Fya", "camg\xF6be\u011Fi", "masmavi", "lavanta", "g\xFCm\xFC\u015F"];
var C4 = { human: s6 };
var y6 = C4;
var B4 = ["Kitaplar", "Filmler", "M\xFCzikler", "Oyunlar", "Elektronik", "Bilgisayarlar", "Ev", "Bah\xE7e", "Aletler", "Bakkal", "Sa\u011Fl\u0131k", "G\xFCzellik", "Oyuncaklar", "\xC7ocuklar", "Bebek", "Giyim", "Ayakkab\u0131", "M\xFCcevher", "Spor Dallar\u0131", "A\xE7\u0131k Hava", "Otomotiv", "Sanayi"];
var A4 = ["G\xFCn boyu konfor ve destek i\xE7in yap\u0131\u015Ft\u0131r\u0131lm\u0131\u015F siyah deri ve PVC dolgulu koltuk ve s\u0131rt ile kaplanm\u0131\u015F ergonomik y\xF6netici koltu\u011Fu", "Otomobil d\xFCzeni, motorun arkas\u0131na monte edilmi\u015F transaks tipi \u015Fanz\u0131manlar ve d\xF6rt tekerlekten \xE7eki\u015F ile bir \xF6n motor tasar\u0131m\u0131ndan olu\u015Fur", "Yeni ABC 13 9370, 13.3, 5. Nesil CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016", "Dev Byte'\u0131n ince ve basit Maple Oyun Klavyesi, \u015F\u0131k bir g\xF6vde ve ak\u0131ll\u0131 i\u015Flevsellik i\xE7in 7 Renkli RGB LED Arka Ayd\u0131nlatma ile birlikte gelir", "Apollotech B340, g\xFCvenilir ba\u011Flant\u0131ya, 12 ayl\u0131k pil \xF6mr\xFCne ve modern tasar\u0131ma sahip uygun fiyatl\u0131 bir kablosuz faredir", "Nagasaki Lander, 1984 ABC800J ile ba\u015Flayan birka\xE7 Nagasaki spor bisiklet serisinin ticari markas\u0131d\u0131r", "Futbol Antrenman Ve Rekreasyon Ama\xE7l\u0131 \u0130yidir", "Karbonit a\u011F kaleci eldivenleri ergonomik olarak kolay oturacak \u015Fekilde tasarlanm\u0131\u015Ft\u0131r", "Boston'un en geli\u015Fmi\u015F kompresyon a\u015F\u0131nmas\u0131 teknolojisi, kas oksijenlenmesini art\u0131r\u0131r, aktif kaslar\u0131 stabilize eder", "Yeni forma g\xF6mlek \xE7e\u015Fitleri sizi g\xF6z \xF6n\xFCnde bulundurarak tasarland\u0131. Sizi farkl\u0131 k\u0131lacak kesimler ve stiller ile", "Do\u011Fal bile\u015Fenlerin heyecan verici bir kar\u0131\u015F\u0131m\u0131na sahip g\xFCzel Apple Natural\xE9 serisi. %100 Do\u011Fal \u0130\xE7eri\u011Fin \u0130yili\u011Fi ile", "Andy ayakkab\u0131lar, trendlerin yan\u0131 s\u0131ra dayan\u0131kl\u0131l\u0131\u011F\u0131 da g\xF6z \xF6n\xFCnde bulundurarak tasarland\u0131, en \u015F\u0131k ayakkab\u0131 ve sandalet yelpazesi"];
var b6 = { adjective: ["K\xFC\xE7\xFCk", "Ergonomik", "K\u0131rsal", "Zeki", "Muhte\u015Fem", "\u0130nan\u0131lmaz", "Harika", "Pratik", "\u015E\u0131k", "M\xFCkemmel", "Genel", "El \xDCretimi", "El Yap\u0131m\u0131", "Lisansl\u0131", "Rafine", "Markalanmam\u0131\u015F", "Lezzetli"], material: ["\xC7elik", "Ah\u015Fap", "Beton", "Plastik", "Pamuk", "Granit", "Kau\xE7uk", "Metal", "Yumu\u015Fak", "Taze", "Dondurulmu\u015F"], product: ["Sandalye", "Araba", "Bilgisayar", "Tu\u015F Tak\u0131m\u0131", "Fare", "Bisiklet", "Top", "Eldiven", "Pantolon", "G\xF6mlek", "Tablo", "Ayakkab\u0131", "\u015Eapka", "Havlu", "Sabun", "Tuna", "Tavuk", "Bal\u0131k", "Peynir", "Kayseri Past\u0131rmas\u0131", "Pizza", "Salata", "Sosis", "Cips"] };
var R4 = { department: B4, product_description: A4, product_name: b6 };
var p6 = R4;
var z5 = ["com.tr", "com", "biz", "info", "name", "gov.tr"];
var Y3 = { domain_suffix: z5 };
var g5 = Y3;
var f6 = ["alias", "consequatur", "aut", "perferendis", "sit", "voluptatem", "accusantium", "doloremque", "aperiam", "eaque", "ipsa", "quae", "ab", "illo", "inventore", "veritatis", "et", "quasi", "architecto", "beatae", "vitae", "dicta", "sunt", "explicabo", "aspernatur", "odit", "fugit", "sed", "quia", "consequuntur", "magni", "dolores", "eos", "qui", "ratione", "sequi", "nesciunt", "neque", "dolorem", "ipsum", "dolor", "amet", "consectetur", "adipisci", "velit", "non", "numquam", "eius", "modi", "tempora", "incidunt", "ut", "labore", "dolore", "magnam", "aliquam", "quaerat", "enim", "ad", "minima", "veniam", "quis", "nostrum", "exercitationem", "ullam", "corporis", "nemo", "ipsam", "voluptas", "suscipit", "laboriosam", "nisi", "aliquid", "ex", "ea", "commodi", "autem", "vel", "eum", "iure", "reprehenderit", "in", "voluptate", "esse", "quam", "nihil", "molestiae", "iusto", "odio", "dignissimos", "ducimus", "blanditiis", "praesentium", "laudantium", "totam", "rem", "voluptatum", "deleniti", "atque", "corrupti", "quos", "quas", "molestias", "excepturi", "sint", "occaecati", "cupiditate", "provident", "perspiciatis", "unde", "omnis", "iste", "natus", "error", "similique", "culpa", "officia", "deserunt", "mollitia", "animi", "id", "est", "laborum", "dolorum", "fuga", "harum", "quidem", "rerum", "facilis", "expedita", "distinctio", "nam", "libero", "tempore", "cum", "soluta", "nobis", "eligendi", "optio", "cumque", "impedit", "quo", "porro", "quisquam", "minus", "quod", "maxime", "placeat", "facere", "possimus", "assumenda", "repellendus", "temporibus", "quibusdam", "illum", "fugiat", "nulla", "pariatur", "at", "vero", "accusamus", "officiis", "debitis", "necessitatibus", "saepe", "eveniet", "voluptates", "repudiandae", "recusandae", "itaque", "earum", "hic", "tenetur", "a", "sapiente", "delectus", "reiciendis", "voluptatibus", "maiores", "doloribus", "asperiores", "repellat"];
var x5 = { words: f6 };
var h6 = x5;
var c6 = ["Abendam", "A\xE7ela", "A\xE7elya", "A\xE7\u0131lay", "Adel", "Adelya", "Adile", "Afitap", "Afra", "A\u011F\xE7a", "Ahenk", "Ahlem", "Alisa", "Almila", "Alvina", "Amelya", "Amara", "Anda\xE7", "Anar", "Anise", "Anita", "Anka", "Alpike", "Alt\u0131n", "Ar\u0131n", "Arya", "Asuela", "Asl\u0131m", "Ayren", "Aykal", "Aysar", "Ay\u015F\u0131l", "Bade", "Ba\u011Fdag\xFCl", "Bal\u0131n", "Bediz", "Bedran", "Behrem", "Bel\xE7im", "Belma", "Beltun", "Belemir", "Benice", "Benli", "Berceste", "Ber\xE7in", "Berinay", "Berran", "Berre", "Berva", "Besra", "\xC7a\u011F\u0131l", "Cang\xFCl", "Cannur", "Cansel", "Cans\u0131n", "Canel", "Ceren", "Ceyda", "Cilvenaz", "Ceylinaz", "Ceylin", "Ceyla", "Ceylan", "\xC7a\u011Fla", "\xC7e\u015Fminaz", "\xC7\u0131g\u0131l", "\xC7i\xE7ek", "\xC7ilay", "\xC7iler", "\xC7imen", "\xC7ise", "\xC7i\u015Fem", "\xC7isil", "Damla", "Defne", "Demet", "Deniz", "Derya", "Destan", "Deste", "Didem", "Dilan", "Dilara", "Dilay", "Diler", "Dilhan", "Dilek", "Dilruba", "D\xF6nd\xFC", "Duygu", "D\xFCnya", "D\xFCrdane", "D\xFCrriye", "Dicle", "Dolunay", "Derin", "Diclehan", "Dilberay", "Ebru", "Ece", "Eda", "Ekin", "Ela", "El\xE7in", "Elif", "Elmas", "Elvan", "Emel", "Emine", "Enise", "Esen", "Eser", "Esin", "Esmeray", "Eyl\xFCl", "Ev\u015Fen", "Eftalya", "Ecem", "Ey\u015Fan", "Fadime", "Fahriye", "Fahr\xFCnissa", "Fatma", "Fato\u015F", "Fazilet", "Fehime", "Ferah", "Feray", "Ferda", "Feride", "Feriha", "Feyza", "Fidan", "Figen", "Fikriye", "Filiz", "Firdevs", "Fulya", "Fuldem", "Fulden", "Funda", "F\xFCruzan", "F\xFCsun", "F\xFCreyya", "Gamze", "Gaye", "Gizem", "Gonca", "G\xF6kben", "G\xF6k\xE7e", "G\xF6k\u015Fin", "G\xF6n\xFCl", "G\xF6zde", "G\xFCher", "G\xFCl", "G\xFClbahar", "G\xFClben", "G\xFCl\xE7in", "G\xFCldem", "G\xFClden", "G\xFCldeste", "G\xFClen", "G\xFCl\u015Fen", "G\xFClg\xFCn", "G\xFClnaz", "G\xFClpembe", "G\xFClriz", "G\xFClsen", "G\xFCnay", "G\xFCne\u015F", "G\xFCner", "G\xFCng\xF6r", "G\xFCniz", "G\xFCnsel", "G\xFCnseli", "G\xFCrcan", "G\xFCven", "G\xF6knur", "G\xFCnnur", "Hale", "Handan", "Hande", "Hayal", "Hayat", "Hazan", "Hilal", "H\xFClya", "H\xFCmeyra", "H\xFCner", "Ilg\u0131n", "I\u015F\u0131k", "I\u015F\u0131l", "I\u015F\u0131lay", "I\u015F\u0131n", "It\u0131r", "\u0130clal", "\u0130dil", "\u0130ffet", "\u0130kbal", "\u0130layda", "\u0130lkben", "\u0130lke", "\u0130lknur", "\u0130lksen", "\u0130lkyaz", "\u0130mge", "\u0130mran", "\u0130nci", "\u0130pek", "\u0130rem", "\u0130zel", "Yaprak", "Yasemin", "Ya\u011Fmur", "Yelda", "Yeliz", "Ye\u015Fim", "Y\u0131ld\u0131z", "Yonca", "Yosun", "Jale", "Julide", "Kader", "Kadriye", "Kamelya", "Kamile", "Kamuran", "Kevser", "Kumru", "K\u0131smet", "K\u0131ymet", "Kiraz", "Lale", "Lamia", "Latife", "Leman", "Lemide", "Lerzan", "Leyla", "Lida", "Mehtap", "Melda", "Melek", "Melike", "Melis", "Melisa", "Melodi", "Meltem", "Meral", "Meri\xE7", "Merih", "Merve", "Meryem", "Mihriban", "Mine", "Miray", "M\xFCesser", "M\xFCnevver", "M\xFCge", "M\xFCjde", "M\xFCjgan", "Mukaddes", "M\u0131sra", "Nalan", "Naz", "Nazan", "Nazl\u0131", "Necla", "Nehir", "Nergis", "Nesli\u015Fah", "Nesrin", "Nevin", "Nevra", "Nida", "Nigar", "Nihal", "Nihan", "Nil", "Nilg\xFCn", "Nisa", "Nisan", "N\xFCkhet", "Nur", "Nural", "Nuran", "Nurg\xFCl", "Nursel", "Nurseli", "Ok\u015Fan", "Olcay", "Oya", "\xD6yk\xFC", "\xD6zden", "\xD6zge", "\xD6zlem", "\xD6zlen", "\xD6znur", "Parla", "Pakize", "Pelin", "Pelinsu", "Pembe", "Peri", "Perihan", "Perran", "Pervin", "Petek", "P\u0131nar", "Piraye", "Rabia", "Rahime", "Rah\u015Fan", "Rana", "Rengin", "Reyhan", "Rezzan", "R\xFCya", "Ruhsar", "Sanem", "Se\xE7il", "Seda", "Sedef", "Seden", "Seher", "Selda", "Selen", "Selin", "Selma", "Selvi", "Sema", "Semra", "Senay", "Serap", "Sertap", "Seren", "Serin", "Serpil", "Sevda", "Sevgi", "Sevil", "Sevim", "Sevin\xE7", "Sevtap", "Seval", "S\u0131la", "Sibel", "Simge", "Sinem", "Song\xFCl", "Su", "Sunay", "Suzan", "\u015Eebnem", "\u015Eehrazat", "\u015Eelale", "\u015Eenay", "\u015Eeng\xFCl", "\u015Eennur", "\u015Eermin", "\u015Eeyda", "\u015Eeyma", "\u015Eevval", "\u015Eiir", "\u015Eule", "Tanyeli", "Tezer", "Tu\u011Fba", "Turna", "Tutku", "T\xFClay", "T\xFClin", "T\xFCrkan", "Tunay", "Utku", "Ulus", "Uhra", "Uygu", "Ulviye", "\xDClfet", "\xDClker", "\xDClk\xFC", "\xDCmmiye", "\xDCmran", "\xDCnsel", "\xDCnseli", "Vahide", "Verda", "Vesile", "Vicdan", "Vildan", "Vuslat", "Zahide", "Zehra", "Zekiye", "Zerrin", "Zeynep", "Z\xFCbeyde", "Z\xFChal", "Z\xFClal", "Z\xFCleyha", "Zeliha", "Z\xFCmr\xFCt"];
var v4 = ["Aba", "Abak", "Abaka", "Abakan", "Abakay", "Abar", "Abay", "Ab\u0131", "Ab\u0131lay", "Ablu\xE7", "Ab\u015Far", "A\xE7\u0131\u011F", "A\xE7\u0131k", "A\xE7uk", "Adalan", "Adald\u0131", "Adalm\u0131\u015F", "Adar", "Ada\u015F", "Adberilgen", "Ad\u0131g\xFCzel", "Ad\u0131k", "Ad\u0131kutlu", "Ad\u0131kutluta\u015F", "Adl\u0131", "Adl\u0131be\u011F", "Adraman", "Ads\u0131z", "Af\u015Far", "Af\u015F\u0131n", "A\u011Fabay", "A\u011Faka\u011Fan", "A\u011Falak", "A\u011Flam\u0131\u015F", "Ak", "Aka\u015F", "Akata", "Akba\u015F", "Akbay", "Akbo\u011Fa", "Akb\xF6r\xFC", "Akbudak", "Akbu\u011Fra", "Akbulak", "Ak\xE7a", "Ak\xE7akoca", "Ak\xE7ora", "Akdemir", "Akdo\u011Fan", "Ak\u0131", "Ak\u0131budak", "Ak\u0131m", "Ak\u0131n", "Ak\u0131n\xE7\u0131", "Akkun", "Akkunlu", "Akkurt", "Akku\u015F", "Akp\u0131ra", "Aksungur", "Aktan", "Al", "Ala", "Alaban", "Alab\xF6r\xFC", "Alada\u011F", "Alado\u011Fan", "Alakurt", "Alayunt", "Alayuntlu", "Aldemir", "Ald\u0131gerey", "Aldo\u011Fan", "Algu", "Al\u0131mga", "Alka", "Alkab\xF6l\xFCk", "Alkaevli", "Alkan", "Alka\u015F\u0131", "Alk\u0131\u015F", "Alp", "Alpagut", "Alpam\u0131\u015F", "Alparsbe\u011F", "Alparslan", "Alpata", "Alpay", "Alpaya", "Alpayka\u011Fan", "Alpbams\u0131", "Alpbilge", "Alpdirek", "Alpdo\u011Fan", "Alper", "Alperen", "Alpertunga", "Alpgerey", "Alp\u0131\u015F", "Alpilig", "Alpkara", "Alpkutlu", "Alpk\xFCl\xFCk", "Alp\u015Fal\xE7\u0131", "Alptegin", "Alptu\u011Frul", "Alptunga", "Alpturan", "Alptutuk", "Alpulu\u011F", "Alpurungu", "Alpurungututuk", "Alpy\xF6r\xFCk", "Altan", "Altanka\u011Fan", "Altankan", "Altay", "Alt\u0131n", "Alt\u0131nka\u011Fan", "Alt\u0131nkan", "Alt\u0131noba", "Alt\u0131ntamgan", "Alt\u0131ntamgantarkan", "Alt\u0131ntarkan", "Alt\u0131ntay", "Altm\u0131\u015Fkara", "Altuga", "Ama\xE7", "Amrak", "Amul", "An\xE7uk", "Andar\u0131man", "An\u0131l", "Ant", "Apa", "Apak", "Apatarkan", "Apran\xE7ur", "Arabo\u011Fa", "Arademir", "Aral", "Arbay", "Arbuz", "Ar\xE7uk", "Ard\u0131\xE7", "Arg\u0131l", "Argu", "Argun", "Ar\u0131", "Ar\u0131bo\u011Fa", "Ar\u0131k", "Ar\u0131ka\u011Fan", "Ar\u0131kdoruk", "Ar\u0131n\xE7", "Ark\u0131n", "Ark\u0131\u015F", "Arma\u011Fan", "Arna\xE7", "Arpat", "Arsal", "Ars\u0131l", "Arslan", "Arslanargun", "Arslanb\xF6r\xFC", "Arslansungur", "Arslantegin", "Arslanyabgu", "Ar\u015Fun", "Art\u0131\u0131nal", "Artuk", "Artuka\xE7", "Artut", "Aruk", "Asartegin", "As\u0131\u011F", "Asr\u0131", "Asu\u011F", "A\u015Fan", "A\u015Fanbo\u011Fa", "A\u015Fantu\u011Frul", "A\u015Fantudun", "A\u015F\u0131kbulmu\u015F", "A\u015Fk\u0131n", "A\u015Ftalo\u011Ful", "A\u015Fuk", "Ata\xE7", "Ataka\u011Fan", "Atakan", "Atalan", "Atald\u0131", "Atalm\u0131\u015F", "Ataman", "Atasagun", "Atasu", "Atberilgen", "At\u0131gay", "At\u0131kutlu", "At\u0131kutluta\u015F", "At\u0131la", "At\u0131lgan", "At\u0131m", "At\u0131mer", "At\u0131\u015F", "Atl\u0131", "Atl\u0131be\u011F", "Atl\u0131ka\u011Fan", "Atmaca", "Ats\u0131z", "Atun\xE7u", "Avar", "Avlu\xE7", "Av\u015Far", "Ay", "Aya\xE7\u0131", "Ayas", "Aya\u015F", "Ayaz", "Aybalta", "Ayban", "Aybars", "Aybe\u011F", "Aydarka\u011Fan", "Aydemir", "Ayd\u0131n", "Ayd\u0131nalp", "Aydo\u011Fan", "Aydo\u011Fdu", "Aydo\u011Fmu\u015F", "Ayg\u0131rak", "Ay\u0131tm\u0131\u015F", "Ay\u0131z", "Ay\u0131zda\u011F", "Ayka\u011Fan", "Aykan", "Aykurt", "Aylu\xE7", "Aylu\xE7tarkan", "Ayma", "Ayruk", "Ays\u0131l\u0131\u011F", "Aytak", "Ayy\u0131ld\u0131z", "Azak", "Azban", "Azgan", "Azganaz", "Az\u0131l", "Bab\u0131r", "Babur", "Ba\xE7ara", "Ba\xE7\xE7ayman", "Ba\xE7man", "Badabul", "Badruk", "Badur", "Ba\u011Fa", "Ba\u011Faalp", "Ba\u011Fa\u0131\u015Fbara", "Ba\u011Fan", "Ba\u011Fa\u015Fatulu", "Ba\u011Fatarkan", "Ba\u011Fatengrika\u011Fan", "Ba\u011Fatur", "Ba\u011Fatur\xE7ig\u015Fi", "Ba\u011Faturgerey", "Ba\u011Faturipi", "Ba\u011Fatursepi", "Ba\u011F\u0131\u015F", "Ba\u011Fta\u015F", "Baka\u011Ful", "Bak\u0131r", "Bak\u0131rsokum", "Baks\u0131", "Bak\u015F\u0131", "Balaban", "Balaka", "Balakatay", "Balam\u0131r", "Bal\xE7ar", "Baldu", "Balk\u0131k", "Balta", "Baltac\u0131", "Baltar", "Balt\u0131r", "Baltur", "Bams\u0131", "Bangu", "Barak", "Barakt\xF6re", "Baran", "Barbe\u011F", "Barbo\u011Fa", "Barbol", "Barbulsun", "Bar\xE7a", "Bar\xE7ado\u011Fdu", "Bar\xE7ado\u011Fmu\u015F", "Bar\xE7adurdu", "Bar\xE7adurmu\u015F", "Bar\xE7an", "Bar\xE7atoyun", "Bard\u0131bay", "Bargan", "Bar\u0131mtay", "Bar\u0131n", "Barkan", "Barkdo\u011Fdu", "Barkdo\u011Fmu\u015F", "Barkdurdu", "Barkdurmu\u015F", "Bark\u0131n", "Barlas", "Barl\u0131bay", "Barmaklak", "Barmakl\u0131", "Barman", "Bars", "Barsbe\u011F", "Barsbo\u011Fa", "Barsgan", "Barskan", "Barsurungu", "Bartu", "Basademir", "Basan", "Basanyalava\xE7", "Basar", "Basat", "Bask\u0131n", "Basm\u0131l", "Bast\u0131", "Bastu\u011Frul", "Basu", "Basut", "Ba\u015Fak", "Ba\u015Fbu\u011F", "Ba\u015F\xE7\u0131", "Ba\u015Fgan", "Ba\u015Fk\u0131rt", "Ba\u015Fkurt", "Ba\u015Ftar", "Batrak", "Batu", "Batuk", "Batur", "Baturalp", "Bay", "Bayan\xE7ar", "Bayanka\u011Fan", "Bayat", "Bayaz\u0131t", "Baybars", "Baybay\u0131k", "Baybi\xE7en", "Baybo\u011Fa", "Baybora", "Bayb\xFCre", "Baydar", "Baydemir", "Baydur", "Bay\u0131k", "Bay\u0131n\xE7ur", "Bay\u0131nd\u0131r", "Baykal", "Baykara", "Baykoca", "Baykuzu", "Baym\xFCnke", "Bayna", "Baynal", "Bayp\xFCre", "Bayr\u0131", "Bayra\xE7", "Bayrak", "Bayram", "Bayr\u0131n", "Bayruk", "Baysungur", "Baytara", "Bayta\u015F", "Bayun\xE7ur", "Bayur", "Bayurku", "Bayutmu\u015F", "Bayuttu", "Baz\u0131r", "Be\xE7eapa", "Be\xE7kem", "Be\u011F", "Be\u011Farslan", "Be\u011Fbars", "Be\u011Fbilge\xE7ik\u015Fin", "Be\u011Fbo\u011Fa", "Be\u011F\xE7ur", "Be\u011Fdemir", "Be\u011Fdilli", "Be\u011Fdurmu\u015F", "Be\u011Fkulu", "Be\u011Fta\u015F", "Be\u011Ftegin", "Be\u011Ft\xFCz\xFCn", "Begi", "Begil", "Begine", "Begitutuk", "Beglen", "Begni", "Bek", "Bekaz\u0131l", "Bekbeke\xE7", "Beke\xE7", "Beke\xE7arslan", "Beke\xE7arslantegin", "Beke\xE7tegin", "Beker", "Beklemi\u015F", "Bekt\xFCr", "Bel\xE7ir", "Belek", "Belgi", "Belg\xFCc", "Beltir", "Bengi", "Beng\xFC", "Benlidemir", "Berdibe\u011F", "Berendey", "Berg\xFC", "Berginsenge", "Berk", "Berke", "Berki\u015F", "Berkyaruk", "Bermek", "Besentegin", "Betemir", "Beyiz\xE7i", "Beyrek", "Beyrem", "B\u0131\xE7k\u0131", "B\u0131\xE7k\u0131c\u0131", "B\u0131d\u0131n", "B\u0131tayb\u0131k\u0131", "B\u0131tr\u0131", "Bi\xE7ek", "Bilge", "Bilgebayun\xE7ur", "Bilgebe\u011F", "Bilge\xE7ik\u015Fin", "Bilge\u0131\u015Fbara", "Bilge\u0131\u015Fbaratamgan", "Bilgeka\u011Fan", "Bilgekan", "Bilgekutluk", "Bilgek\xFCl\xFC\xE7ur", "Bilgeta\xE7am", "Bilgetamgac\u0131", "Bilgetardu", "Bilgetegin", "Bilgetonyukuk", "Bilgez", "Bilgi\xE7", "Bilgin", "Bilig", "Biligk\xF6ng\xFClseng\xFCn", "Bilik", "Binbe\u011Fi", "Bindir", "Bo\u011Fa", "Bo\u011Fa\xE7", "Bo\u011Fa\xE7uk", "Boldaz", "Bolmu\u015F", "Bolsun", "Bolun", "Boncuk", "Bongul", "Bongulbo\u011Fa", "Bora", "Boran", "Bor\xE7ul", "Borluk\xE7u", "Bornak", "Boyan", "Boyankulu", "Boylaba\u011Fa", "Boylaba\u011Fatarkan", "Boylakutlutarkan", "Bozan", "Bozb\xF6r\xFC", "Bozdo\u011Fan", "Bozkurt", "Bozku\u015F", "Bozok", "B\xF6gde", "B\xF6ge", "B\xF6g\xFC", "B\xF6kde", "B\xF6ke", "B\xF6len", "B\xF6l\xFCkba\u015F\u0131", "B\xF6nek", "B\xF6nge", "B\xF6r\xFC", "B\xF6r\xFCbars", "B\xF6r\xFCseng\xFCn", "B\xF6rte\xE7ine", "Bu\xE7an", "Bu\xE7ur", "Buda\u011F", "Budak", "Budunlu", "Bu\u011Fday", "Bu\u011Fra", "Bu\u011Frakaraka\u011Fan", "Bukak", "Bukaktutuk", "Bula\xE7apan", "Bulak", "Bulan", "Buldur", "Bulgak", "Bulmaz", "Bulmu\u015F", "Bulu\xE7", "Bulu\u011F", "Buluk", "Bulu\u015F", "Bulut", "Bum\u0131n", "Bunsuz", "Bur\xE7ak", "Burgu\xE7an", "Burkay", "Burslan", "Burulday", "Burulgu", "Burunduk", "Bu\u015Fulgan", "Butak", "Butuk", "Buyan", "Buyan\xE7uk", "Buyandemir", "Buyankara", "Buyat", "Buyra\xE7", "Buyru\xE7", "Buyruk", "Buza\xE7", "Buza\xE7tutuk", "B\xFCd\xFCs", "B\xFCd\xFCstudun", "B\xFCg\xFC", "B\xFCgd\xFCz", "B\xFCgd\xFCzemen", "B\xFCge", "B\xFC\u011F\xFCbilge", "B\xFCkd\xFCz", "B\xFCke", "B\xFCkebuyra\xE7", "B\xFCkebuyru\xE7", "B\xFCkey", "B\xFCktegin", "B\xFCk\xFC\u015Fbo\u011Fa", "B\xFCmen", "B\xFCn\xFCl", "B\xFCre", "B\xFCrg\xFCt", "B\xFCrkek", "B\xFCrk\xFCt", "B\xFCrl\xFCk", "Cebe", "Ceyhun", "C\u0131lasun", "\xC7aba", "\xC7abdar", "\xC7abl\u0131", "\xC7abu\u015F", "\xC7a\u011Fan", "\xC7a\u011Fatay", "\xC7a\u011Flar", "\xC7a\u011Flayan", "\xC7a\u011Fr\u0131", "\xC7a\u011Fr\u0131be\u011F", "\xC7a\u011Fr\u0131tegin", "\xC7a\u011Fru", "\xC7alapkulu", "\xC7ank\u0131z", "\xC7emen", "\xC7emgen", "\xC7eyk\xFCn", "\xC7\u0131ng\u0131r", "\xC7i\xE7ek", "\xC7i\xE7em", "\xC7i\u011Fdem", "\xC7ilenti", "\xC7imen", "\xC7obulmak", "\xC7ocukb\xF6r\xFC", "\xC7okramayul", "\xC7olman", "\xC7olpan", "\xC7\xF6l\xFC", "Damla", "Deniz", "Dilek", "Diri", "Dizik", "Duru", "Dururbunsuz", "Duygu", "Ebin", "Ebk\u0131z\u0131", "Ebren", "Edil", "Ediz", "Egemen", "E\u011Frim", "Eke\xE7", "Ekim", "Ekin", "Elkin", "Elti", "Engin", "Erdem", "Erdeni", "Erdeni\xF6z\xFCk", "Erdenikatun", "Erent\xFCz", "Ergene", "Ergenekatun", "Erin\xE7", "Erke", "Ermen", "Erten", "Erten\xF6z\xFCk", "Esen", "Esenbike", "Eser", "Esin", "Etil", "Evin", "Eyiz", "Gelin", "Gelincik", "G\xF6kb\xF6r\xFC", "G\xF6k\xE7e", "G\xF6k\xE7eg\xF6l", "G\xF6k\xE7en", "G\xF6k\xE7i\xE7ek", "G\xF6k\u015Fin", "G\xF6n\xFCl", "G\xF6r\xFCn", "G\xF6zde", "G\xFClegen", "G\xFClemen", "G\xFCler", "G\xFCl\xFCmser", "G\xFCm\xFC\u015F", "G\xFCn", "G\xFCnay", "G\xFCn\xE7i\xE7ek", "G\xFCndo\u011Fdu", "G\xFCndo\u011Fmu\u015F", "G\xFCne\u015F", "G\xFCnyaruk", "G\xFCrb\xFCz", "G\xFCvercin", "G\xFCzey", "I\u015F\u0131\u011F", "I\u015F\u0131k", "I\u015F\u0131l", "I\u015F\u0131lay", "Ila", "Ila\xE7\u0131n", "Ilg\u0131n", "Inan\xE7", "Irmak", "Is\u0131\u011F", "Is\u0131k", "Iy\u0131k", "Iy\u0131kta\u011F", "\u0130dil", "\u0130keme", "\u0130ki\xE7itoyun", "\u0130lbilge", "\u0130ldike", "\u0130lgeg\xFC", "\u0130mrem", "\u0130nci", "\u0130n\xE7", "\u0130rin\xE7", "\u0130rin\xE7k\xF6l", "\u0130rti\u015F", "\u0130til", "Kanc\u0131", "Kan\xE7\u0131", "Kapgar", "Karaca", "Kara\xE7a", "Karak", "Karg\u0131la\xE7", "Karl\u0131ga\xE7", "Katun", "Katunk\u0131z", "Kayac\u0131k", "Kaya\xE7\u0131k", "Kay\xE7a", "Kaynak", "Kazan\xE7", "Kazkatun", "Kekik", "Keklik", "Kepez", "Kesme", "Keyken", "Kezlik", "K\u0131m\u0131z", "K\u0131m\u0131z\u0131n", "K\u0131m\u0131zalma", "K\u0131m\u0131zalm\u0131la", "K\u0131r\xE7i\xE7ek", "K\u0131rgavul", "K\u0131rlang\u0131\xE7", "K\u0131van\xE7", "K\u0131v\u0131lc\u0131m", "K\u0131zdurmu\u015F", "K\u0131z\u0131lalma"];
var S5 = ["Abac\u0131", "Abadan", "Aclan", "Adal", "Adan", "Ad\u0131var", "Akal", "Akan", "Akar ", "Akay", "Akayd\u0131n", "Akbulut", "Akg\xFCl", "Ak\u0131\u015F\u0131k", "Akman", "Aky\xFCrek", "Aky\xFCz", "Ak\u015Fit", "Aln\u0131a\xE7\u0131k", "Alpu\u011Fan", "Alyanak", "Ar\u0131can", "Arslano\u011Flu", "Atakol", "Atan", "Avan", "Ayayd\u0131n", "Aybar", "Aydan", "Ayka\xE7", "Ayverdi", "A\u011Fao\u011Flu", "A\u015F\u0131ko\u011Flu", "Babacan", "Babao\u011Flu", "Bademci", "Bak\u0131rc\u0131o\u011Flu", "Balaban", "Balc\u0131", "Barbaroso\u011Flu", "Baturalp", "Baykam", "Ba\u015Fo\u011Flu", "Berbero\u011Flu", "Be\u015Ferler", "Be\u015Fok", "Bi\xE7er", "Bolatl\u0131", "Dalk\u0131ran", "Da\u011Fda\u015F", "Da\u011Flaro\u011Flu", "Demirba\u015F", "Demirel", "Denkel", "Dizdar ", "Do\u011Fan ", "Durak ", "Durmaz", "Duygulu", "D\xFC\u015Fenkalkar", "Egeli", "Ekici", "Ek\u015Fio\u011Flu", "Eli\xE7in", "Elmasta\u015Fo\u011Flu", "El\xE7ibo\u011Fa", "Erbay", "Erberk", "Erbulak", "Erdo\u011Fan", "Erez", "Erginsoy", "Erkekli", "Eronat", "Ertep\u0131nar", "Ert\xFCrk", "Er\xE7etin", "Evliyao\u011Flu", "G\xF6n\xFClta\u015F", "G\xFCm\xFC\u015Fpala", "G\xFCnday", "G\xFCrmen", "Hakyemez", "Hamzao\u011Flu", "Il\u0131cal\u0131", "Kahveci", "Kaplang\u0131", "Karabulut", "Karab\xF6cek", "Karada\u015F", "Karaduman", "Karaer", "Kasapo\u011Flu", "Kavakl\u0131o\u011Flu", "Kaya ", "Kesero\u011Flu", "Ke\xE7eci", "K\u0131l\u0131\xE7\xE7\u0131", "K\u0131ra\xE7 ", "Kocab\u0131y\u0131k", "Korol", "Koyuncu", "Ko\xE7", "Ko\xE7o\u011Flu", "Ko\xE7yi\u011Fit", "Kuday", "Kulaks\u0131zo\u011Flu", "Kumcuo\u011Flu", "Kunt", "Kunter", "Kurutluo\u011Flu", "Kutlay", "Kuzucu", "K\xF6rm\xFCk\xE7\xFC", "K\xF6yba\u015F\u0131", "K\xF6yl\xFCo\u011Flu", "K\xFC\xE7\xFCkler", "Limoncuo\u011Flu", "Mayho\u015F", "Menemencio\u011Flu", "Merto\u011Flu", "Nalbanto\u011Flu", "Nebio\u011Flu", "Numano\u011Flu", "Okumu\u015F", "Okur", "Oralo\u011Flu", "Orbay", "Ozansoy", "Paks\xFCt", "Pekkan", "Pektemek", "Polat", "Poyrazo\u011Flu", "Po\xE7an", "Sad\u0131klar", "Samanc\u0131", "Sandalc\u0131", "Sar\u0131o\u011Flu", "Sayg\u0131ner", "Sepet\xE7i", "Sezek", "Sinano\u011Flu", "Solmaz", "S\xF6zeri", "S\xFCleymano\u011Flu", "Tahincio\u011Flu", "Tanr\u0131kulu", "Tazeg\xFCl", "Ta\u015Fl\u0131", "Ta\u015F\xE7\u0131", "Tekand", "Tekelio\u011Flu", "Tokatl\u0131o\u011Flu", "Tokg\xF6z", "Topalo\u011Flu", "Top\xE7uo\u011Flu", "Toraman", "Tunaboylu", "Tun\xE7eri", "Tu\u011Flu", "Tu\u011Fluk", "T\xFCrkdo\u011Fan", "T\xFCrky\u0131lmaz", "T\xFCt\xFCnc\xFC", "T\xFCz\xFCn", "Uca", "Uluhan", "Velio\u011Flu", "Yal\xE7\u0131n", "Yaz\u0131c\u0131", "Yetkiner", "Ye\u015Filkaya", "Y\u0131ld\u0131r\u0131m ", "Y\u0131ld\u0131zo\u011Flu", "Y\u0131lmazer", "Yorulmaz", "\xC7amdal\u0131", "\xC7apano\u011Flu", "\xC7atalba\u015F", "\xC7a\u011F\u0131ran", "\xC7etin", "\xC7etiner", "\xC7evik", "\xC7\xF6rek\xE7i", "\xD6n\xFCr", "\xD6rge", "\xD6ymen", "\xD6zberk", "\xD6zbey", "\xD6zbir", "\xD6zdenak", "\xD6zdo\u011Fan", "\xD6zg\xF6rkey", "\xD6zkara", "\xD6zk\xF6k ", "\xD6ztonga", "\xD6ztuna"];
var K4 = ["Abay", "Abidin", "Acar", "Acun", "Adem", "Adil", "Adn\xE2n", "Af\u015Fin", "Affan", "Afi", "Ag\xE2h", "Ahmet", "Ahsen", "Akalp", "Akbatur", "Ak\u0131n", "Ak\u0131n Alp", "Ak\u0131ner", "Aktekin", "Aktimur", "Ali", "Alican", "Ali\u015Fan", "Ali\u015Fir", "Alp", "Alparslan", "Alpay", "Alper", "Alperen", "Alphan", "Altan", "Altemur", "\xC2mir", "Amm\xE2r", "Ata", "Atalay", "At\xE2ullah", "Av\u015Far", "Aykan", "Ayvaz", "An\u0131l", "Ant", "Arda", "Arif", "Arslan", "As\u0131m", "Asil", "A\u015Fk\u0131n", "Atakan", "At\u0131f", "Atilla", "Avni", "Aydemir", "Ayd\u0131n", "Ayhan", "Aykut", "Ayta\xE7", "Aytekin", "Aytu\u011F", "Azer", "Aziz", "Azizhan", "Azmi", "Babacan", "Bar\u0131n", "Battal", "Behram", "Behzat", "Bekir", "Bekta\u015F", "Bera", "Berkan", "Berkin", "Be\u015Fer", "Baha", "Bahad\u0131r", "Bahri", "Bahtiyar", "B\xE2ki", "Bar\u0131\u015F", "Bark\u0131n", "Barlas", "Bartu", "Batu", "Batuhan", "Batur", "Baturalp", "Baykal", "Bayram", "Bedir", "Bedirhan", "Bedreddin", "Bedri", "Beh\xE7et", "Behi\xE7", "Behl\xFCl", "Berat", "Berk", "Berkay", "Besim", "Be\u015Fir", "Bil\xE2l", "Birol", "Bora", "Bu\u011Fra", "Bulut", "Burak", "Burhan", "B\xFClent", "B\xFCnyamin", "Cafer", "Cahid", "Can", "Canalp", "C\xE2ndar", "Caner", "Cankan", "Cavid", "Celal", "Cel\xE2leddin", "Celasun", "Celil", "Cem", "Cemal", "Cemali", "Cemil", "Cenk", "Cevat", "Cevahir", "Ceyhun", "Cezmi", "Cihan", "Co\u015Fkun", "Co\u015Fkuner", "Cumhur", "C\xFCbeyr", "C\xFCneyt", "Cihad", "Cihangir", "Civan", "Cihan\u015Fah", "\xC7a\u011Fan", "\xC7a\u011Fatay", "\xC7a\u011Fda\u015F", "\xC7a\u011Flar", "\xC7a\u011Fr\u0131", "\xC7a\u011Fr\u0131han", "\xC7elen", "\xC7elik", "\xC7etin", "\xC7etinel", "\xC7etiner", "Da\u011Fhan", "D\xE2ver", "Davud", "Demiralp", "Demirhan", "Denizalp", "Devran", "Dikmen", "Dilaver", "Dild\xE2r", "Dilhan", "Din\xE7", "Dervi\u015F", "Din\xE7er", "Diren\xE7", "Do\u011Fan", "Do\u011Fanay", "Do\u011Faner", "Do\u011Fu", "Dora", "Durmu\u015F", "D\xFCndar", "Ebuzer", "Ecevit", "Ecmel", "Ediz", "Efe", "Efsun", "Egemen", "Ekrem", "Elgin", "Emin", "Emir", "Emrah", "Emre", "Emrullah", "Ender", "Enderun", "Enes", "Engin", "Enis", "Ensar", "Enver", "Eralp", "Eray", "Erberk", "Ercan", "Erc\xFCment", "Er\xE7in", "Erda", "Erdal", "Erdem", "Erdin\xE7", "Erel", "Eren", "Ergin", "Erg\xFCn", "Erg\xFCner", "Erhan", "Erk\xE2m", "Erk\xE2n", "Erman", "Erol", "Ersin", "Er\u015Fan", "Ertan", "Ertu\u011Frul", "Esat", "E\u015Fref", "Ethem", "Evren", "Ecehan", "Ecvet", "Ede", "Edhem", "Efken", "Eflah", "Ekmel", "Elvan", "Emced", "Evran", "Eymen", "Ey\xFCp", "Ezrak", "Fad\u0131l", "Fahrettin", "Fahri", "Faik", "Faris", "Faruk", "Fatih", "Faysal", "Faz\u0131l", "Fehmi", "Ferda", "Ferdi", "Ferhat", "Ferhan", "Ferit", "Feridun", "Ferruh", "Fevzi", "Feyyaz", "Feyzullah", "Fikret", "Fikri", "Fuat", "Furk\xE2n", "Fazl\u0131", "F\xE2lih", "Fasih", "Fatin", "Fazullah", "Feda", "Fedai", "Feramuz", "Feramu\u015F", "Ferman", "Fuzuli", "Gaffar", "Gazanfer", "Gencer", "G\xF6kalp", "G\xF6kben", "G\xF6kmen", "G\xF6nen\xE7", "G\xF6rkem", "G\xFClhan", "G\xFCltekin", "G\xFCnay", "G\xFCner", "G\xF6ng\xF6r", "G\xFCrdal", "G\xFCrhan", "G\xFCrkan", "G\xFCrol", "G\xFCrsel", "G\xFCven", "G\xFCvenalp", "Gazi", "Gevheri", "G\u0131yas", "Giray", "G\xFCrb\xFCz", "Habib", "H\xE2di", "Haf\u0131z", "Hakan", "Hakk\u0131", "Haldun", "Halit", "Halil", "Halim", "H\xE2lis", "Haluk", "Hamdi", "Hami", "Hamit", "Hamza", "Harun", "Hasan", "Ha\u015Fim", "Ha\u015Fmet", "Hayati", "Haydar", "Hazar", "H\u0131fz\u0131", "Hikmet", "Hilmi", "Himmet", "Hulki", "Hulusi", "Hur\u015Fit", "H\xFCma", "H\xFCrkan", "H\xFCsamettin", "H\xFCseyin", "H\xFCsn\xFC", "H\xFCsrev", "Habbab", "Habil", "Hacib", "Hafi", "Hafid", "Hakem", "Haki", "Hamdullah", "Hamm\xE2d", "Hanefi", "Hani", "Haseki", "Hasibi", "Hasin", "H\xE2tem", "Hatt\xE2b", "Hatip", "Hayali", "Haz\u0131m", "H\u0131z\u0131r", "Hicabi", "Hi\u015Fam", "Hud", "Huzeyfe", "H\xFCccet", "H\xFCd\xE2vendig\xE2r", "H\xFCdayi", "H\xFCmayun", "H\xFCsameddin", "Ilg\u0131n", "I\u015F\u0131ner", "Itri", "\u0130brahim", "\u0130dris", "\u0130hsan", "\u0130kbal", "\u0130lbey", "\u0130lhami", "\u0130lhan", "\u0130lkay", "\u0130lker", "\u0130lyas", "\u0130rfan", "\u0130smail", "\u0130smet", "\u0130zzettin", "\u0130zzet", "\u0130hvan", "\u0130krime", "Kadir", "Kadrican", "Ka\u011Fan", "Kamber", "K\xE2mil", "Karahan", "Kayaalp", "K\xE2z\u0131m", "Kem\xE2l", "Kemalettin", "Kenan", "Kerami", "Kerem", "Kerim", "Koray", "Korkut", "K\xF6ksal", "Kubat", "Kubilay", "Kutbettin", "K\xFCr\u015Fad", "Kabil", "Kadem", "Kad\u0131", "Kalender", "Kamran", "Kas\u0131m", "Kele\u015F", "Keramet", "Kerem\u015Fah", "Ke\u015F\u015Faf", "Kuddusi", "Lamih", "Latif", "Levent", "L\xFCtfullah", "L\xFCtfi", "Maad", "Mahir", "Mahmut", "Mahzun", "Maksud", "Mansur", "Mazhar", "Mehmet", "Melih", "Melik\u015Fah", "Memduh", "Mert", "Mesut", "Mete", "Metin", "Mevl\xFCt", "Mithat", "Muammer", "Muaviye", "Muhammed", "Muharrem", "Muhsin", "Muhyiddin", "Mukadder", "Murat", "Musa", "Mustafa", "Muzaffer", "M\xFCfid", "M\xFCjdat", "M\xFCmtaz", "M\xFCnir", "Mestan", "Mir", "Mira\xE7", "Mirkelam", "Mirza", "Misbah", "Muaz", "Muhtar", "Muhterem", "Muhte\u015Fem", "Muktedi", "Muktedir", "Muktefi", "Muslih", "Mutahhar", "Mutas\u0131m", "Muteber", "Mutemed", "Muttalib", "M\xFCkerrem", "M\xFCren", "M\xFC\u015Fir", "M\xFCzdad", "Nabi", "Naci", "Nadi", "Nadir", "Nafiz", "Nahid", "Nahil", "Nail", "Naim", "Nam\u0131k", "Nasrullah", "Naz\u0131m", "Nazif", "Nazmi", "Necat", "Necati", "Necdet", "Necib", "Necmettin", "Nedim", "Nejat", "Nesim", "Ne\u015Fet", "Nevzat", "Nihat", "Niyazi", "Nizamettin", "Numan", "Nurettin", "Nurullah", "Nusret", "O\u011Fuz", "O\u011Fuzhan", "Okan", "Oktay", "Onur", "Orhan", "Osman", "Ozan", "\xD6mer", "\xD6nder", "\xD6zcan", "\xD6zden", "\xD6zer", "\xD6zg\xFCr", "\xD6zhan", "\xD6zkan", "Payidar", "Pertev", "Perver", "Peyami", "Raci", "Rafet", "Rahim", "Rahmi", "Raif", "Rak\u0131p", "Ramazan", "Ramiz", "Rasim", "Ra\u015Fit", "Rauf", "Recai", "Recep", "Refik", "Reha", "Remzi", "Res\xFBl", "Re\u015Fat", "R\u0131dvan", "R\u0131fat", "R\u0131fk\u0131", "R\u0131za", "R\xFC\xE7han", "R\xFCkneddin", "R\xFC\u015Ft\xFC", "Refah", "Refet", "Reis", "Res\xFCl", "Rifat", "Sabri", "Sacid", "Sadberk", "Sadettin", "Sad\u0131k", "Sadi", "Sadri", "Sadullah", "Safa", "Saffet", "Said", "Saim", "S\xE2k\u0131p", "Salih", "Salim", "Samed", "Sami", "Samih", "Samim", "Sava\u015F", "Se\xE7kin", "Sedat", "Sefer", "Selahattin", "Selami", "Sel\xE7uk", "Selim", "Semih", "Serb\xFClent", "Sergen", "Serhat", "Sermet", "Serta\xE7", "Server", "Settar", "Seyfettin", "Seyfi", "Seyfullah", "Seyyit", "S\u0131dk\u0131", "S\u0131rr\u0131", "Sinan", "Suat", "Subhi", "Sudi", "Sururi", "S\xFCheyl", "S\xFCleyman", "\u015Eaban", "\u015Eadan", "\u015Eahap", "\u015Eahin", "\u015Eahsuvar", "\u015Eakir", "\u015Eamil", "\u015Eayan", "\u015Eefik", "\u015Eemsi", "\u015Eener", "\u015Eenol", "\u015Eerafettin", "\u015Eeref", "\u015Eerif", "\u015Eevket", "\u015Eevki", "\u015Einasi", "\u015E\xFCkr\xFC", "\u015Eahinalp", "\u015Eahs\xFCvar", "\u015E\xE2fi", "\u015Earani", "\u015Eecaeddin", "\u015Eehlevent", "\u015Eeyban", "\u015Eihab", "\u015Eihabeddin", "\u015Eir", "Taceddin", "Tahir", "Tahsin", "Taib", "Talat", "Talay", "Talha", "Talip", "Tamer", "Taner", "Tanju", "Tar\u0131k", "Tarkan", "Ta\u015Fk\u0131n", "Tayfun", "Tayyar", "Tekin", "Tekinalp", "Temel", "Teoman", "Tevfik", "Tevhid", "Tezcan", "Tezel", "T\u0131nas", "Timur", "Tolga", "Tolunay", "Tufan", "Tugay", "Tu\u011Frul", "Tu\u011Ftekin", "Tuhfe", "Tunahan", "Tun\xE7", "Tun\xE7er", "Turan", "Turgay", "Turgut", "T\xFCmer", "T\xFCrkay", "T\xFCrke\u015F", "T\xFCrker", "Ufuk", "U\u011Fur", "Ukbe", "Ulvi", "Umur", "Umuralp", "Umut", "Usame", "Utku", "\xDClgen", "\xDClker", "\xDCmit", "\xDCnal", "\xDCzeyir", "Vah\xE2", "Vahdet", "Vahid", "Valid", "Vecdi", "Vedat", "Vefa", "Vefik", "Vehbi", "Veli", "Veysel", "Veysi", "Volkan", "Ya\u011F\u0131z", "Yahya", "Yal\xE7\u0131n", "Yalg\u0131n", "Yaman", "Yasin", "Ya\u015Far", "Yavuz", "Yekta", "Yener", "Yetkin", "Y\u0131ld\u0131r\u0131m", "Y\u0131lmaz", "Yi\u011Fit", "Yunus", "Yusuf", "Y\xFCce", "Y\xFCcel", "Y\xFCksel", "Y\xFCmni", "Zafer", "Z\xE2hit", "Zekeriyy\xE2", "Zeyd", "Zihn\xEE", "Ziy\xE2d", "Z\xFClfik\xE2r", "Z\xE2fir", "Zamir", "Zekai", "Zeynel", "Ziver", "Ziya", "Ziyad", "Z\xFCbeyr"];
var E3 = ["{{name.prefix}} {{name.first_name}} {{name.last_name}}", "{{name.first_name}} {{name.last_name}}", "{{name.male_first_name}} {{name.last_name}}", "{{name.female_first_name}} {{name.last_name}}"];
var G4 = ["Bay", "Bayan", "Dr.", "Prof. Dr."];
var P4 = { female_first_name: c6, first_name: v4, last_name: S5, male_first_name: K4, name: E3, prefix: G4 };
var M5 = P4;
var D5 = ["392", "510", "512", "522", "562", "564", "592", "594", "800", "811", "822", "850", "888", "898", "900", "322", "416", "272", "472", "382", "358", "312", "242", "478", "466", "256", "266", "378", "488", "458", "228", "426", "434", "374", "248", "224", "286", "376", "364", "258", "412", "380", "284", "424", "446", "442", "222", "342", "454", "456", "438", "326", "476", "246", "216", "212", "232", "344", "370", "338", "474", "366", "352", "318", "288", "386", "348", "262", "332", "274", "422", "236", "482", "324", "252", "436", "384", "388", "452", "328", "464", "264", "362", "484", "368", "346", "414", "486", "282", "356", "462", "428", "276", "432", "226", "354", "372"];
var T4 = ["+90-###-###-##-##", "+90-###-###-#-###"];
var _5 = { area_code: D5, formats: T4 };
var H4 = _5;
var L4 = { title: "Turkish", address: m6, cell_phone: d6, color: y6, commerce: p6, internet: g5, lorem: h6, name: M5, phone_number: H4 };
var Qa = L4;

// ../../node_modules/@faker-js/faker/dist/esm/chunk-WTFAB2OK.mjs
init_esm_shims();
var e7 = ["#", "##", "###"];
var a7 = ["{{address.city_name}}", "{{address.city_prefix}} {{name.male_first_name}}"];
var m7 = ["\u0410\u043B\u0447\u0435\u0432\u0441\u044C\u043A", "\u0410\u0440\u0442\u0435\u043C\u0456\u0432\u0441\u044C\u043A", "\u0411\u0435\u0440\u0434\u0438\u0447\u0456\u0432", "\u0411\u0435\u0440\u0434\u044F\u043D\u0441\u044C\u043A", "\u0411\u0456\u043B\u0430 \u0426\u0435\u0440\u043A\u0432\u0430", "\u0411\u0440\u043E\u0432\u0430\u0440\u0438", "\u0412\u0456\u043D\u043D\u0438\u0446\u044F", "\u0413\u043E\u0440\u043B\u0456\u0432\u043A\u0430", "\u0414\u043D\u0456\u043F\u0440\u043E\u0434\u0437\u0435\u0440\u0436\u0438\u043D\u0441\u044C\u043A", "\u0414\u043D\u0456\u043F\u0440\u043E\u043F\u0435\u0442\u0440\u043E\u0432\u0441\u044C\u043A", "\u0414\u043E\u043D\u0435\u0446\u044C\u043A", "\u0404\u0432\u043F\u0430\u0442\u043E\u0440\u0456\u044F", "\u0404\u043D\u0430\u043A\u0456\u0454\u0432\u0435", "\u0416\u0438\u0442\u043E\u043C\u0438\u0440", "\u0417\u0430\u043F\u043E\u0440\u0456\u0436\u0436\u044F", "\u0406\u0432\u0430\u043D\u043E-\u0424\u0440\u0430\u043D\u043A\u0456\u0432\u0441\u044C\u043A", "\u0406\u0437\u043C\u0430\u0457\u043B", "\u041A\u0430\u043C\u2019\u044F\u043D\u0435\u0446\u044C-\u041F\u043E\u0434\u0456\u043B\u044C\u0441\u044C\u043A\u0438\u0439", "\u041A\u0435\u0440\u0447", "\u041A\u0438\u0457\u0432", "\u041A\u0456\u0440\u043E\u0432\u043E\u0433\u0440\u0430\u0434", "\u041A\u043E\u043D\u043E\u0442\u043E\u043F", "\u041A\u0440\u0430\u043C\u0430\u0442\u043E\u0440\u0441\u044C\u043A", "\u041A\u0440\u0430\u0441\u043D\u0438\u0439 \u041B\u0443\u0447", "\u041A\u0440\u0435\u043C\u0435\u043D\u0447\u0443\u043A", "\u041A\u0440\u0438\u0432\u0438\u0439 \u0420\u0456\u0433", "\u041B\u0438\u0441\u0438\u0447\u0430\u043D\u0441\u044C\u043A", "\u041B\u0443\u0433\u0430\u043D\u0441\u044C\u043A", "\u041B\u0443\u0446\u044C\u043A", "\u041B\u044C\u0432\u0456\u0432", "\u041C\u0430\u043A\u0456\u0457\u0432\u043A\u0430", "\u041C\u0430\u0440\u0456\u0443\u043F\u043E\u043B\u044C", "\u041C\u0435\u043B\u0456\u0442\u043E\u043F\u043E\u043B\u044C", "\u041C\u0438\u043A\u043E\u043B\u0430\u0457\u0432", "\u041C\u0443\u043A\u0430\u0447\u0435\u0432\u0435", "\u041D\u0456\u043A\u043E\u043F\u043E\u043B\u044C", "\u041E\u0434\u0435\u0441\u0430", "\u041E\u043B\u0435\u043A\u0441\u0430\u043D\u0434\u0440\u0456\u044F", "\u041F\u0430\u0432\u043B\u043E\u0433\u0440\u0430\u0434", "\u041F\u043E\u043B\u0442\u0430\u0432\u0430", "\u0420\u0456\u0432\u043D\u0435", "\u0421\u0435\u0432\u0430\u0441\u0442\u043E\u043F\u043E\u043B\u044C", "\u0421\u0454\u0432\u0454\u0440\u043E\u0434\u043E\u043D\u0435\u0446\u044C\u043A", "\u0421\u0456\u043C\u0444\u0435\u0440\u043E\u043F\u043E\u043B\u044C", "\u0421\u043B\u043E\u0432\u2019\u044F\u043D\u0441\u044C\u043A", "\u0421\u0443\u043C\u0438", "\u0422\u0435\u0440\u043D\u043E\u043F\u0456\u043B\u044C", "\u0423\u0436\u0433\u043E\u0440\u043E\u0434", "\u0423\u043C\u0430\u043D\u044C", "\u0425\u0430\u0440\u043A\u0456\u0432", "\u0425\u0435\u0440\u0441\u043E\u043D", "\u0425\u043C\u0435\u043B\u044C\u043D\u0438\u0446\u044C\u043A\u0438\u0439", "\u0427\u0435\u0440\u043A\u0430\u0441\u0438", "\u0427\u0435\u0440\u043D\u0456\u0432\u0446\u0456", "\u0427\u0435\u0440\u043D\u0456\u0433\u0456\u0432", "\u0428\u043E\u0441\u0442\u043A\u0430", "\u042F\u043B\u0442\u0430"];
var t7 = ["\u041F\u0456\u0432\u0434\u0435\u043D\u043D\u0438\u0439", "\u041F\u0456\u0432\u043D\u0456\u0447\u043D\u0438\u0439", "\u0421\u0445\u0456\u0434\u043D\u0438\u0439", "\u0417\u0430\u0445\u0456\u0434\u043D\u0438\u0439"];
var r7 = ["\u0433\u0440\u0430\u0434"];
var o7 = ["\u0410\u0432\u0441\u0442\u0440\u0430\u043B\u0456\u044F", "\u0410\u0432\u0441\u0442\u0440\u0456\u044F", "\u0410\u0437\u0435\u0440\u0431\u0430\u0439\u0434\u0436\u0430\u043D", "\u0410\u043B\u0431\u0430\u043D\u0456\u044F", "\u0410\u043B\u0436\u0438\u0440", "\u0410\u043D\u0433\u043E\u043B\u0430", "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", "\u0410\u043D\u0442\u0438\u0433\u0443\u0430 \u0456 \u0411\u0430\u0440\u0431\u0443\u0434\u0430", "\u0410\u0440\u0433\u0435\u043D\u0442\u0438\u043D\u0430", "\u0410\u0444\u0433\u0430\u043D\u0456\u0441\u0442\u0430\u043D", "\u0411\u0430\u0433\u0430\u043C\u0441\u044C\u043A\u0456 \u041E\u0441\u0442\u0440\u043E\u0432\u0438", "\u0411\u0430\u043D\u0433\u043B\u0430\u0434\u0435\u0448", "\u0411\u0430\u0440\u0431\u0430\u0434\u043E\u0441", "\u0411\u0430\u0445\u0440\u0435\u0439\u043D", "\u0411\u0435\u043B\u0456\u0437", "\u0411\u0435\u043B\u044C\u0433\u0456\u044F", "\u0411\u0435\u043D\u0456\u043D", "\u0411\u0456\u043B\u043E\u0440\u0443\u0441\u044C", "\u0411\u043E\u043B\u0433\u0430\u0440\u0456\u044F", "\u0411\u043E\u043B\u0456\u0432\u0456\u044F", "\u0411\u043E\u0441\u043D\u0456\u044F \u0456 \u0413\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430", "\u0411\u043E\u0442\u0441\u0432\u0430\u043D\u0430", "\u0411\u0440\u0430\u0437\u0438\u043B\u0456\u044F", "\u0411\u0440\u0443\u043D\u0435\u0439", "\u0411\u0443\u0440\u043A\u0456\u043D\u0430-\u0424\u0430\u0441\u043E", "\u0411\u0443\u0440\u0443\u043D\u0434\u0456", "\u0411\u0443\u0442\u0430\u043D", "\u0412\u2019\u0454\u0442\u043D\u0430\u043C", "\u0412\u0430\u043D\u0443\u0430\u0442\u0443", "\u0412\u0430\u0442\u0438\u043A\u0430\u043D", "\u0412\u0435\u043B\u0438\u043A\u0430 \u0411\u0440\u0438\u0442\u0430\u043D\u0456\u044F", "\u0412\u0435\u043D\u0435\u0441\u0443\u0435\u043B\u0430", "\u0412\u0456\u0440\u043C\u0435\u043D\u0456\u044F", "\u0413\u0430\u0431\u043E\u043D", "\u0413\u0430\u0457\u0442\u0456", "\u0413\u0430\u0439\u0430\u043D\u0430", "\u0413\u0430\u043C\u0431\u0456\u044F", "\u0413\u0430\u043D\u0430", "\u0413\u0432\u0430\u0442\u0435\u043C\u0430\u043B\u0430", "\u0413\u0432\u0456\u043D\u0435\u044F", "\u0413\u0432\u0456\u043D\u0435\u044F-\u0411\u0456\u0441\u0430\u0443", "\u0413\u043E\u043D\u0434\u0443\u0440\u0430\u0441", "\u0413\u0440\u0435\u043D\u0430\u0434\u0430", "\u0413\u0440\u0435\u0446\u0456\u044F", "\u0413\u0440\u0443\u0437\u0456\u044F", "\u0414\u0430\u043D\u0456\u044F", "\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u043D\u0430 \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0456\u043A\u0430 \u041A\u043E\u043D\u0433\u043E", "\u0414\u0436\u0438\u0431\u0443\u0442\u0456", "\u0414\u043E\u043C\u0456\u043D\u0456\u043A\u0430", "\u0414\u043E\u043C\u0456\u043D\u0456\u043A\u0430\u043D\u0441\u044C\u043A\u0430 \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0456\u043A\u0430", "\u0415\u043A\u0432\u0430\u0434\u043E\u0440", "\u0415\u043A\u0432\u0430\u0442\u043E\u0440\u0456\u0430\u043B\u044C\u043D\u0430 \u0413\u0432\u0456\u043D\u0435\u044F", "\u0415\u0440\u0438\u0442\u0440\u0435\u044F", "\u0415\u0441\u0442\u043E\u043D\u0456\u044F", "\u0415\u0444\u0456\u043E\u043F\u0456\u044F", "\u0404\u0433\u0438\u043F\u0435\u0442", "\u0404\u043C\u0435\u043D", "\u0417\u0430\u043C\u0431\u0456\u044F", "\u0417\u0456\u043C\u0431\u0430\u0431\u0432\u0435", "\u0406\u0437\u0440\u0430\u0457\u043B\u044C", "\u0406\u043D\u0434\u0456\u044F", "\u0406\u043D\u0434\u043E\u043D\u0435\u0437\u0456\u044F", "\u0406\u0440\u0430\u043A", "\u0406\u0440\u0430\u043D", "\u0406\u0440\u043B\u0430\u043D\u0434\u0456\u044F", "\u0406\u0441\u043B\u0430\u043D\u0434\u0456\u044F", "\u0406\u0441\u043F\u0430\u043D\u0456\u044F", "\u0406\u0442\u0430\u043B\u0456\u044F", "\u0419\u043E\u0440\u0434\u0430\u043D\u0456\u044F", "\u041A\u0430\u0431\u043E-\u0412\u0435\u0440\u0434\u0435", "\u041A\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043D", "\u041A\u0430\u043C\u0431\u043E\u0434\u0436\u0430", "\u041A\u0430\u043C\u0435\u0440\u0443\u043D", "\u041A\u0430\u043D\u0430\u0434\u0430", "\u041A\u0430\u0442\u0430\u0440", "\u041A\u0435\u043D\u0456\u044F", "\u041A\u0438\u0440\u0433\u0438\u0437\u0441\u0442\u0430\u043D", "\u041A\u0438\u0442\u0430\u0439", "\u041A\u0456\u043F\u0440", "\u041A\u0456\u0440\u0438\u0431\u0430\u0442\u0456", "\u041A\u043E\u043B\u0443\u043C\u0431\u0456\u044F", "\u041A\u043E\u043C\u043E\u0440\u0441\u044C\u043A\u0456 \u041E\u0441\u0442\u0440\u043E\u0432\u0438", "\u041A\u043E\u043D\u0433\u043E", "\u041A\u043E\u0441\u0442\u0430-\u0420\u0438\u043A\u0430", "\u041A\u043E\u0442-\u0434\u2019\u0406\u0432\u0443\u0430\u0440", "\u041A\u0443\u0431\u0430", "\u041A\u0443\u0432\u0435\u0439\u0442", "\u041B\u0430\u043E\u0441", "\u041B\u0430\u0442\u0432\u0456\u044F", "\u041B\u0435\u0441\u043E\u0442\u043E", "\u041B\u0438\u0442\u0432\u0430", "\u041B\u0456\u0431\u0435\u0440\u0456\u044F", "\u041B\u0456\u0432\u0430\u043D", "\u041B\u0456\u0432\u0456\u044F", "\u041B\u0456\u0445\u0442\u0435\u043D\u0448\u0442\u0435\u0439\u043D", "\u041B\u044E\u043A\u0441\u0435\u043C\u0431\u0443\u0440\u0433", "\u041C\u0430\u0432\u0440\u0438\u043A\u0456\u0439", "\u041C\u0430\u0432\u0440\u0438\u0442\u0430\u043D\u0456\u044F", "\u041C\u0430\u0434\u0430\u0491\u0430\u0441\u043A\u0430\u0440", "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0456\u044F", "\u041C\u0430\u043B\u0430\u0432\u0456", "\u041C\u0430\u043B\u0430\u0439\u0437\u0456\u044F", "\u041C\u0430\u043B\u0456", "\u041C\u0430\u043B\u044C\u0434\u0456\u0432\u0438", "\u041C\u0430\u043B\u044C\u0442\u0430", "\u041C\u0430\u0440\u043E\u043A\u043A\u043E", "\u041C\u0430\u0440\u0448\u0430\u043B\u043B\u043E\u0432\u0456 \u041E\u0441\u0442\u0440\u043E\u0432\u0438", "\u041C\u0435\u043A\u0441\u0438\u043A\u0430", "\u041C\u043E\u0437\u0430\u043C\u0431\u0456\u043A", "\u041C\u043E\u043B\u0434\u043E\u0432\u0430", "\u041C\u043E\u043D\u0430\u043A\u043E", "\u041C\u043E\u043D\u0433\u043E\u043B\u0456\u044F", "\u041D\u0430\u043C\u0456\u0431\u0456\u044F", "\u041D\u0430\u0443\u0440\u0443", "\u041D\u0435\u043F\u0430\u043B", "\u041D\u0456\u0433\u0435\u0440", "\u041D\u0456\u0433\u0435\u0440\u0456\u044F", "\u041D\u0456\u0434\u0435\u0440\u043B\u0430\u043D\u0434\u0438", "\u041D\u0456\u043A\u0430\u0440\u0430\u0433\u0443\u0430", "\u041D\u0456\u043C\u0435\u0447\u0447\u0438\u043D\u0430", "\u041D\u043E\u0432\u0430 \u0417\u0435\u043B\u0430\u043D\u0434\u0456\u044F", "\u041D\u043E\u0440\u0432\u0435\u0433\u0456\u044F", "\u041E\u0431\u2019\u0454\u0434\u043D\u0430\u043D\u0456 \u0410\u0440\u0430\u0431\u0441\u044C\u043A\u0456 \u0415\u043C\u0456\u0440\u0430\u0442\u0438", "\u041E\u043C\u0430\u043D", "\u041F\u0430\u043A\u0438\u0441\u0442\u0430\u043D", "\u041F\u0430\u043B\u0430\u0443", "\u041F\u0430\u043D\u0430\u043C\u0430", "\u041F\u0430\u043F\u0443\u0430-\u041D\u043E\u0432\u0430 \u0413\u0432\u0456\u043D\u0435\u044F", "\u041F\u0430\u0440\u0430\u0433\u0432\u0430\u0439", "\u041F\u0435\u0440\u0443", "\u041F\u0456\u0432\u0434\u0435\u043D\u043D\u0430 \u041A\u043E\u0440\u0435\u044F", "\u041F\u0456\u0432\u0434\u0435\u043D\u043D\u0438\u0439 \u0421\u0443\u0434\u0430\u043D", "\u041F\u0456\u0432\u0434\u0435\u043D\u043D\u043E-\u0410\u0444\u0440\u0438\u043A\u0430\u043D\u0441\u044C\u043A\u0430 \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0456\u043A\u0430", "\u041F\u0456\u0432\u043D\u0456\u0447\u043D\u0430 \u041A\u043E\u0440\u0435\u044F", "\u041F\u043E\u043B\u044C\u0449\u0430", "\u041F\u043E\u0440\u0442\u0443\u0433\u0430\u043B\u0456\u044F", "\u0420\u043E\u0441\u0456\u0439\u0441\u044C\u043A\u0430 \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0456\u044F", "\u0420\u0443\u0430\u043D\u0434\u0430", "\u0420\u0443\u043C\u0443\u043D\u0456\u044F", "\u0421\u0430\u043B\u044C\u0432\u0430\u0434\u043E\u0440", "\u0421\u0430\u043C\u043E\u0430", "\u0421\u0430\u043D-\u041C\u0430\u0440\u0438\u043D\u043E", "\u0421\u0430\u043D-\u0422\u043E\u043C\u0435 \u0456 \u041F\u0440\u0438\u043D\u0441\u0456\u043F\u0456", "\u0421\u0430\u0443\u0434\u0456\u0432\u0441\u044C\u043A\u0430 \u0410\u0440\u0430\u0432\u0456\u044F", "\u0421\u0432\u0430\u0437\u0456\u043B\u0435\u043D\u0434", "\u0421\u0435\u0439\u0448\u0435\u043B\u044C\u0441\u044C\u043A\u0456 \u041E\u0441\u0442\u0440\u043E\u0432\u0438", "\u0421\u0435\u043D\u0435\u0491\u0430\u043B", "\u0421\u0435\u043D\u0442-\u0412\u0456\u043D\u0441\u0435\u043D\u0442 \u0456 \u0413\u0440\u0435\u043D\u0430\u0434\u0438\u043D\u0438", "\u0421\u0435\u043D\u0442-\u041A\u0456\u0442\u0441 \u0456 \u041D\u0435\u0432\u0456\u0441", "\u0421\u0435\u043D\u0442-\u041B\u044E\u0441\u0456\u044F", "\u0421\u0435\u0440\u0431\u0456\u044F", "\u0421\u0438\u0440\u0456\u044F", "\u0421\u0456\u043D\u0433\u0430\u043F\u0443\u0440", "\u0421\u043B\u043E\u0432\u0430\u0447\u0447\u0438\u043D\u0430", "\u0421\u043B\u043E\u0432\u0435\u043D\u0456\u044F", "\u0421\u043E\u043B\u043E\u043C\u043E\u043D\u043E\u0432\u0456 \u041E\u0441\u0442\u0440\u043E\u0432\u0438", "\u0421\u043E\u043C\u0430\u043B\u0456", "\u0421\u0443\u0434\u0430\u043D", "\u0421\u0443\u0440\u0438\u043D\u0430\u043C", "\u0421\u0445\u0456\u0434\u043D\u0438\u0439 \u0422\u0438\u043C\u043E\u0440", "\u0421\u0428\u0410", "\u0421\u044C\u0454\u0440\u0440\u0430-\u041B\u0435\u043E\u043D\u0435", "\u0422\u0430\u0434\u0436\u0438\u043A\u0438\u0441\u0442\u0430\u043D", "\u0422\u0430\u0457\u043B\u0430\u043D\u0434", "\u0422\u0430\u043D\u0437\u0430\u043D\u0456\u044F", "\u0422\u043E\u0433\u043E", "\u0422\u043E\u043D\u0433\u0430", "\u0422\u0440\u0438\u043D\u0456\u0434\u0430\u0434 \u0456 \u0422\u043E\u0431\u0430\u0433\u043E", "\u0422\u0443\u0432\u0430\u043B\u0443", "\u0422\u0443\u043D\u0456\u0441", "\u0422\u0443\u0440\u0435\u0447\u0447\u0438\u043D\u0430", "\u0422\u0443\u0440\u043A\u043C\u0435\u043D\u0456\u0441\u0442\u0430\u043D", "\u0423\u0433\u0430\u043D\u0434\u0430", "\u0423\u0433\u043E\u0440\u0449\u0438\u043D\u0430", "\u0423\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u0430\u043D", "\u0423\u043A\u0440\u0430\u0457\u043D\u0430", "\u0423\u0440\u0443\u0433\u0432\u0430\u0439", "\u0424\u0435\u0434\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u0456 \u0428\u0442\u0430\u0442\u0438 \u041C\u0456\u043A\u0440\u043E\u043D\u0435\u0437\u0456\u0457", "\u0424\u0456\u0434\u0436\u0456", "\u0424\u0456\u043B\u0456\u043F\u043F\u0456\u043D\u0438", "\u0424\u0456\u043D\u043B\u044F\u043D\u0434\u0456\u044F", "\u0424\u0440\u0430\u043D\u0446\u0456\u044F", "\u0425\u043E\u0440\u0432\u0430\u0442\u0456\u044F", "\u0426\u0435\u043D\u0442\u0440\u0430\u043B\u044C\u043D\u043E\u0430\u0444\u0440\u0438\u043A\u0430\u043D\u0441\u044C\u043A\u0430 \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0456\u043A\u0430", "\u0427\u0430\u0434", "\u0427\u0435\u0445\u0456\u044F", "\u0427\u0438\u043B\u0456", "\u0427\u043E\u0440\u043D\u043E\u0433\u043E\u0440\u0456\u044F", "\u0428\u0432\u0435\u0439\u0446\u0430\u0440\u0456\u044F", "\u0428\u0432\u0435\u0446\u0456\u044F", "\u0428\u0440\u0456-\u041B\u0430\u043D\u043A\u0430", "\u042F\u043C\u0430\u0439\u043A\u0430", "\u042F\u043F\u043E\u043D\u0456\u044F"];
var i7 = ["\u0423\u043A\u0440\u0430\u0457\u043D\u0430"];
var f7 = ["#####"];
var n7 = ["\u043A\u0432. ###"];
var p7 = ["\u0410\u0420 \u041A\u0440\u0438\u043C", "\u0412\u0456\u043D\u043D\u0438\u0446\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0412\u043E\u043B\u0438\u043D\u0441\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0414\u043D\u0456\u043F\u0440\u043E\u043F\u0435\u0442\u0440\u043E\u0432\u0441\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0414\u043E\u043D\u0435\u0446\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0416\u0438\u0442\u043E\u043C\u0438\u0440\u0441\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0417\u0430\u043A\u0430\u0440\u043F\u0430\u0442\u0441\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0417\u0430\u043F\u043E\u0440\u0456\u0437\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0406\u0432\u0430\u043D\u043E-\u0424\u0440\u0430\u043D\u043A\u0456\u0432\u0441\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041A\u0438\u0457\u0432\u0441\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041A\u0456\u0440\u043E\u0432\u043E\u0433\u0440\u0430\u0434\u0441\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041B\u0443\u0433\u0430\u043D\u0441\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041B\u044C\u0432\u0456\u0432\u0441\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041C\u0438\u043A\u043E\u043B\u0430\u0457\u0432\u0441\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041E\u0434\u0435\u0441\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041F\u043E\u043B\u0442\u0430\u0432\u0441\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0420\u0456\u0432\u043D\u0435\u043D\u0441\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0421\u0443\u043C\u0441\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0422\u0435\u0440\u043D\u043E\u043F\u0456\u043B\u044C\u0441\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0425\u0430\u0440\u043A\u0456\u0432\u0441\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0425\u0435\u0440\u0441\u043E\u043D\u0441\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0425\u043C\u0435\u043B\u044C\u043D\u0438\u0446\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0427\u0435\u0440\u043A\u0430\u0441\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0427\u0435\u0440\u043D\u0456\u0432\u0435\u0446\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u0427\u0435\u0440\u043D\u0456\u0433\u0456\u0432\u0441\u044C\u043A\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C", "\u041A\u0438\u0457\u0432", "\u0421\u0435\u0432\u0430\u0441\u0442\u043E\u043F\u043E\u043B\u044C"];
var u7 = ["{{address.street_prefix}} {{address.street_name}}", "{{address.street_name}} {{address.street_suffix}}"];
var s7 = { normal: "{{address.street}}, {{address.buildingNumber}}", full: "{{address.street}}, {{address.buildingNumber}} {{address.secondaryAddress}}" };
var l7 = ["\u0417\u0435\u043B\u0435\u043D\u0430", "\u041C\u043E\u043B\u043E\u0434\u0456\u0436\u043D\u0430", "\u0413\u043E\u0440\u043E\u0434\u043E\u0446\u044C\u043A\u0430", "\u0421\u0442\u0440\u0438\u0439\u0441\u044C\u043A\u0430", "\u0412\u0443\u0437\u044C\u043A\u0430", "\u041D\u0438\u0436\u0430\u043D\u043A\u0456\u0432\u0441\u044C\u043A\u043E\u0433\u043E", "\u0421\u0442\u0430\u0440\u043E\u043C\u0456\u0441\u044C\u043A\u0430", "\u041B\u0456\u0441\u0442\u0430", "\u0412\u0456\u0447\u0435\u0432\u0430", "\u0411\u0440\u044E\u0445\u043E\u0432\u0438\u0447\u0456\u0432", "\u0412\u0438\u043D\u043D\u0438\u043A\u0456\u0432", "\u0420\u0443\u0434\u043D\u043E\u0433\u043E", "\u041A\u043E\u043B\u0456\u0457\u0432\u0449\u0438\u043D\u0438"];
var d7 = ["\u0432\u0443\u043B.", "\u0432\u0443\u043B\u0438\u0446\u044F", "\u043F\u0440.", "\u043F\u0440\u043E\u0441\u043F\u0435\u043A\u0442", "\u043F\u043B.", "\u043F\u043B\u043E\u0449\u0430", "\u043F\u0440\u043E\u0432.", "\u043F\u0440\u043E\u0432\u0443\u043B\u043E\u043A"];
var _6 = ["\u043C\u0430\u0439\u0434\u0430\u043D"];
var E4 = { building_number: e7, city: a7, city_name: m7, city_prefix: t7, city_suffix: r7, country: o7, default_country: i7, postcode: f7, secondary_address: n7, state: p7, street: u7, street_address: s7, street_name: l7, street_prefix: d7, street_suffix: _6 };
var x6 = E4;
var c7 = ["{{company.prefix}} {{name.female_first_name}}", "{{company.prefix}} {{name.male_first_name}}", "{{company.prefix}} {{name.male_last_name}}", "{{company.prefix}} {{company.suffix}}{{company.suffix}}", "{{company.prefix}} {{company.suffix}}{{company.suffix}}{{company.suffix}}", "{{company.prefix}} {{address.city_name}}{{company.suffix}}", "{{company.prefix}} {{address.city_name}}{{company.suffix}}{{company.suffix}}", "{{company.prefix}} {{address.city_name}}{{company.suffix}}{{company.suffix}}{{company.suffix}}"];
var y7 = ["\u0422\u041E\u0412", "\u041F\u0410\u0422", "\u041F\u0440\u0410\u0422", "\u0422\u0414\u0412", "\u041A\u0422", "\u041F\u0422", "\u0414\u041F", "\u0424\u041E\u041F"];
var k6 = ["\u041F\u043E\u0441\u0442\u0430\u0447", "\u0422\u043E\u0440\u0433", "\u041F\u0440\u043E\u043C", "\u0422\u0440\u0435\u0439\u0434", "\u0417\u0431\u0443\u0442"];
var F5 = { name_patterns: c7, prefix: y7, suffix: k6 };
var v5 = F5;
var h7 = ["cherkassy.ua", "cherkasy.ua", "ck.ua", "cn.ua", "com.ua", "crimea.ua", "cv.ua", "dn.ua", "dnepropetrovsk.ua", "dnipropetrovsk.ua", "donetsk.ua", "dp.ua", "if.ua", "in.ua", "ivano-frankivsk.ua", "kh.ua", "kharkiv.ua", "kharkov.ua", "kherson.ua", "khmelnitskiy.ua", "kiev.ua", "kirovograd.ua", "km.ua", "kr.ua", "ks.ua", "lg.ua", "lt.ua", "lugansk.ua", "lutsk.ua", "lutsk.net", "lviv.ua", "mk.ua", "net.ua", "nikolaev.ua", "od.ua", "odessa.ua", "org.ua", "pl.ua", "poltava.ua", "rovno.ua", "rv.ua", "sebastopol.ua", "sm.ua", "sumy.ua", "te.ua", "ternopil.ua", "ua", "uz.ua", "uzhgorod.ua", "vinnica.ua", "vn.ua", "volyn.net", "volyn.ua", "yalta.ua", "zaporizhzhe.ua", "zhitomir.ua", "zp.ua", "zt.ua", "\u0443\u043A\u0440"];
var b7 = ["ukr.net", "ex.ua", "e-mail.ua", "i.ua", "meta.ua", "yandex.ua", "gmail.com"];
var G5 = { domain_suffix: h7, free_email: b7 };
var D6 = G5;
var g6 = ["\u0410\u0432\u0440\u0435\u043B\u0456\u044F", "\u0410\u0432\u0440\u043E\u0440\u0430", "\u0410\u0433\u0430\u043F\u0456\u044F", "\u0410\u0433\u0430\u0442\u0430", "\u0410\u0433\u0430\u0444\u0456\u044F", "\u0410\u0433\u043D\u0435\u0441\u0430", "\u0410\u0433\u043D\u0456\u044F", "\u0410\u0433\u0440\u0438\u043F\u0438\u043D\u0430", "\u0410\u0434\u0430", "\u0410\u0434\u0435\u043B\u0430\u0457\u0434\u0430", "\u0410\u0434\u0435\u043B\u0456\u043D\u0430", "\u0410\u0434\u0440\u0456\u0430\u043D\u0430", "\u0410\u0437\u0430\u043B\u0456\u044F", "\u0410\u043B\u0435\u0432\u0442\u0438\u043D\u0430", "\u0410\u043B\u0456\u043D\u0430", "\u0410\u043B\u043B\u0430", "\u0410\u043B\u044C\u0431\u0456\u043D\u0430", "\u0410\u043B\u044C\u0432\u0456\u043D\u0430", "\u0410\u043D\u0430\u0441\u0442\u0430\u0441\u0456\u044F", "\u0410\u043D\u0430\u0442\u043E\u043B\u0456\u044F", "\u0410\u043D\u0433\u0435\u043B\u0456\u043D\u0430", "\u0410\u043D\u0436\u0435\u043B\u0430", "\u0410\u043D\u043D\u0430", "\u0410\u043D\u0442\u043E\u043D\u0438\u0434\u0430", "\u0410\u043D\u0442\u043E\u043D\u0456\u043D\u0430", "\u0410\u043D\u0442\u043E\u043D\u0456\u044F", "\u0410\u043D\u0444\u0456\u0441\u0430", "\u0410\u043F\u043E\u043B\u043B\u0456\u043D\u0430\u0440\u0456\u044F", "\u0410\u043F\u043E\u043B\u043B\u043E\u043D\u0456\u044F", "\u0410\u0440\u043A\u0430\u0434\u0456\u044F", "\u0410\u0440\u0442\u0435\u043C\u0456\u044F", "\u0410\u0444\u0430\u043D\u0430\u0441\u0456\u044F", "\u0411\u0456\u043B\u043E\u0441\u043B\u0430\u0432\u0430", "\u0411\u0456\u043B\u044F\u043D\u0430", "\u0411\u043B\u0430\u0433\u043E\u0432\u0456\u0441\u0442\u0430", "\u0411\u043E\u0433\u0434\u0430\u043D\u0430", "\u0411\u043E\u0433\u0443\u0441\u043B\u0430\u0432\u0430", "\u0411\u043E\u0436\u0435\u043D\u0430", "\u0411\u043E\u043B\u0435\u0441\u043B\u0430\u0432\u0430", "\u0411\u043E\u0440\u0438\u0441\u043B\u0430\u0432\u0430", "\u0411\u0440\u043E\u043D\u0456\u0441\u043B\u0430\u0432\u0430", "\u0412\u2019\u044F\u0447\u0435\u0441\u043B\u0430\u0432\u0430", "\u0412\u0430\u043B\u0435\u043D\u0442\u0438\u043D\u0430", "\u0412\u0430\u043B\u0435\u0440\u0456\u044F", "\u0412\u0430\u0440\u0432\u0430\u0440\u0430", "\u0412\u0430\u0441\u0438\u043B\u0438\u043D\u0430", "\u0412\u0456\u043A\u0442\u043E\u0440\u0456\u044F", "\u0412\u0456\u043B\u0435\u043D\u0430", "\u0412\u0456\u043B\u0435\u043D\u0456\u043D\u0430", "\u0412\u0456\u043B\u0456\u043D\u0430", "\u0412\u0456\u043E\u043B\u0430", "\u0412\u0456\u043E\u043B\u0435\u0442\u0442\u0430", "\u0412\u0456\u0440\u0430", "\u0412\u0456\u0440\u0433\u0456\u043D\u0456\u044F", "\u0412\u0456\u0442\u0430", "\u0412\u0456\u0442\u0430\u043B\u0456\u043D\u0430", "\u0412\u043B\u0430\u0434\u0430", "\u0412\u043B\u0430\u0434\u0438\u0441\u043B\u0430\u0432\u0430", "\u0412\u043B\u0430\u0441\u0442\u0430", "\u0412\u0441\u0435\u0441\u043B\u0430\u0432\u0430", "\u0413\u0430\u043B\u0438\u043D\u0430", "\u0413\u0430\u043D\u043D\u0430", "\u0413\u0435\u043B\u0435\u043D\u0430", "\u0414\u0430\u043B\u0435\u0441\u043B\u0430\u0432\u0430", "\u0414\u0430\u043D\u0430", "\u0414\u0430\u0440\u0438\u043D\u0430", "\u0414\u0430\u0440\u0438\u0441\u043B\u0430\u0432\u0430", "\u0414\u0456\u0430\u043D\u0430", "\u0414\u0456\u044F\u043D\u0430", "\u0414\u043E\u0431\u0440\u0438\u043D\u043A\u0430", "\u0414\u043E\u0431\u0440\u043E\u043C\u0438\u043B\u0430", "\u0414\u043E\u0431\u0440\u043E\u043C\u0438\u0440\u0430", "\u0414\u043E\u0431\u0440\u043E\u043C\u0438\u0441\u043B\u0430", "\u0414\u043E\u0431\u0440\u043E\u0441\u043B\u0430\u0432\u0430", "\u0414\u043E\u043B\u0435\u0441\u043B\u0430\u0432\u0430", "\u0414\u043E\u043B\u044F\u043D\u0430", "\u0416\u0430\u043D\u043D\u0430", "\u0416\u043E\u0437\u0435\u0444\u0456\u043D\u0430", "\u0417\u0430\u0431\u0430\u0432\u0430", "\u0417\u0432\u0435\u043D\u0438\u0441\u043B\u0430\u0432\u0430", "\u0417\u0456\u043D\u0430\u0457\u0434\u0430", "\u0417\u043B\u0430\u0442\u0430", "\u0417\u043E\u0440\u0435\u0441\u043B\u0430\u0432\u0430", "\u0417\u043E\u0440\u0438\u043D\u0430", "\u0417\u043E\u0440\u044F\u043D\u0430", "\u0417\u043E\u044F", "\u0406\u0432\u0430\u043D\u043D\u0430", "\u0406\u043B\u043E\u043D\u0430", "\u0406\u043D\u043D\u0430", "\u0406\u043D\u043D\u0435\u0441\u0430", "\u0406\u0440\u0438\u043D\u0430", "\u0406\u0440\u043C\u0430", "\u041A\u0430\u043B\u0438\u043D\u0430", "\u041A\u0430\u0440\u0456\u043D\u0430", "\u041A\u0430\u0442\u0435\u0440\u0438\u043D\u0430", "\u041A\u0432\u0456\u0442\u043A\u0430", "\u041A\u0432\u0456\u0442\u043E\u0441\u043B\u0430\u0432\u0430", "\u041A\u043B\u0430\u0432\u0434\u0456\u044F", "\u041A\u0440\u0435\u043D\u0442\u0442\u0430", "\u041A\u0441\u0435\u043D\u0456\u044F", "\u041A\u0443\u043F\u0430\u0432\u0430", "\u041B\u0430\u0434\u0430", "\u041B\u0430\u0440\u0438\u0441\u0430", "\u041B\u0435\u0441\u044F", "\u041B\u0438\u043A\u0435\u0440\u0430", "\u041B\u0456\u0434\u0456\u044F", "\u041B\u0456\u043B\u0456\u044F", "\u041B\u044E\u0431\u0430\u0432\u0430", "\u041B\u044E\u0431\u0438\u0441\u043B\u0430\u0432\u0430", "\u041B\u044E\u0431\u043E\u0432", "\u041B\u044E\u0431\u043E\u043C\u0438\u043B\u0430", "\u041B\u044E\u0431\u043E\u043C\u0438\u0440\u0430", "\u041B\u044E\u0431\u043E\u0440\u0430\u0434\u0430", "\u041B\u044E\u0431\u043E\u0441\u043B\u0430\u0432\u0430", "\u041B\u044E\u0434\u043C\u0438\u043B\u0430", "\u041B\u044E\u0434\u043E\u043C\u0438\u043B\u0430", "\u041C\u0430\u0439\u044F", "\u041C\u0430\u043B\u044C\u0432\u0430", "\u041C\u0430\u0440\u2019\u044F\u043D\u0430", "\u041C\u0430\u0440\u0438\u043D\u0430", "\u041C\u0430\u0440\u0456\u0447\u043A\u0430", "\u041C\u0430\u0440\u0456\u044F", "\u041C\u0430\u0440\u0442\u0430", "\u041C\u0435\u043B\u0430\u043D\u0456\u044F", "\u041C\u0435\u0447\u0438\u0441\u043B\u0430\u0432\u0430", "\u041C\u0438\u043B\u043E\u0434\u0430\u0440\u0430", "\u041C\u0438\u043B\u043E\u0441\u043B\u0430\u0432\u0430", "\u041C\u0438\u0440\u043E\u0441\u043B\u0430\u0432\u0430", "\u041C\u0456\u043B\u0430\u043D\u0430", "\u041C\u043E\u043A\u0440\u0438\u043D\u0430", "\u041C\u043E\u0442\u0440\u044F", "\u041C\u0441\u0442\u0438\u0441\u043B\u0430\u0432\u0430", "\u041D\u0430\u0434\u0456\u044F", "\u041D\u0430\u0442\u0430\u043B\u0456\u044F", "\u041D\u0435\u043B\u044F", "\u041D\u0435\u043C\u0438\u0440\u0430", "\u041D\u0456\u043D\u0430", "\u041E\u0433\u043D\u044F\u043D\u0430", "\u041E\u043A\u0441\u0430\u043D\u0430", "\u041E\u043B\u0435\u043A\u0441\u0430\u043D\u0434\u0440\u0430", "\u041E\u043B\u0435\u043D\u0430", "\u041E\u043B\u0435\u0441\u044F", "\u041E\u043B\u044C\u0433\u0430", "\u041E\u0440\u0435\u0441\u0442\u0430", "\u041E\u0440\u0438\u043D\u0430", "\u041E\u0440\u0438\u0441\u043B\u0430\u0432\u0430", "\u041E\u0440\u0438\u0441\u044F", "\u041E\u0440\u0456\u044F\u043D\u0430", "\u041F\u0430\u0432\u043B\u0456\u043D\u0430", "\u041F\u0430\u043B\u0430\u0436\u043A\u0430", "\u041F\u0435\u043B\u0430\u0433\u0435\u044F", "\u041F\u0435\u043B\u0430\u0433\u0456\u044F", "\u041F\u043E\u043B\u0456\u043D\u0430", "\u041F\u043E\u043B\u044F\u043D\u0430", "\u041F\u043E\u0442\u0456\u0448\u0430\u043D\u0430", "\u0420\u0430\u0434\u043C\u0456\u043B\u0430", "\u0420\u0430\u0434\u043E\u0441\u043B\u0430\u0432\u0430", "\u0420\u0430\u0457\u043D\u0430", "\u0420\u0430\u0457\u0441\u0430", "\u0420\u043E\u043A\u0441\u043E\u043B\u0430\u043D\u0430", "\u0420\u043E\u043C\u0435\u043D\u0430", "\u0420\u043E\u0441\u0442\u0438\u0441\u043B\u0430\u0432\u0430", "\u0420\u0443\u0441\u043B\u0430\u043D\u0430", "\u0421\u0432\u0456\u0442\u043B\u0430\u043D\u0430", "\u0421\u0432\u044F\u0442\u043E\u0441\u043B\u0430\u0432\u0430", "\u0421\u043B\u0430\u0432\u0430", "\u0421\u043C\u0456\u044F\u043D\u0430", "\u0421\u043D\u0456\u0436\u0430\u043D\u0430", "\u0421\u043E\u043B\u043E\u043C\u0456\u044F", "\u0421\u043E\u043D\u044F", "\u0421\u043E\u0444\u0456\u044F", "\u0421\u0442\u0430\u043D\u0438\u0441\u043B\u0430\u0432\u0430", "\u0421\u044E\u0437\u0430\u043D\u0430", "\u0422\u0430\u0457\u0441\u0456\u044F", "\u0422\u0430\u043C\u0430\u0440\u0430", "\u0422\u0435\u0442\u044F\u043D\u0430", "\u0423\u0441\u0442\u0438\u043D\u0430", "\u0424\u0430\u0457\u043D\u0430", "\u0424\u0435\u0432\u0440\u043E\u043D\u0456\u044F", "\u0424\u0435\u0434\u043E\u0440\u0430", "\u0424\u0435\u043E\u0434\u043E\u0441\u0456\u044F", "\u0425\u0430\u0440\u0438\u0442\u0438\u043D\u0430", "\u0425\u0440\u0438\u0441\u0442\u0438\u043D\u0430", "\u0425\u0440\u0438\u0441\u0442\u044F", "\u042E\u043B\u0456\u0430\u043D\u043D\u0430", "\u042E\u043B\u0456\u044F", "\u042E\u0441\u0442\u0438\u043D\u0430", "\u042E\u0445\u0438\u043C\u0430", "\u042E\u0445\u0438\u043C\u0456\u044F", "\u042F\u043D\u0430", "\u042F\u0440\u0438\u043D\u0430", "\u042F\u0440\u043E\u0441\u043B\u0430\u0432\u0430"];
var z6 = ["\u0410\u043D\u0434\u0440\u0443\u0445\u043E\u0432\u0438\u0447", "\u0411\u0430\u0431\u0443\u0445", "\u0411\u0430\u043B\u0430\u0431\u0430\u043D", "\u0411\u0430\u043B\u0430\u0431\u0443\u0445\u0430", "\u0411\u0430\u043B\u0430\u043A\u0443\u043D", "\u0411\u0430\u043B\u0438\u0446\u044C\u043A\u0430", "\u0411\u0430\u043C\u0431\u0443\u043B\u0430", "\u0411\u0430\u043D\u0434\u0435\u0440\u0430", "\u0411\u0430\u0440\u0430\u043D\u043E\u0432\u0441\u044C\u043A\u0430", "\u0411\u0430\u0447\u0435\u0439", "\u0411\u0430\u0448\u0443\u043A", "\u0411\u0435\u0440\u0434\u043D\u0438\u043A", "\u0411\u0456\u043B\u0438\u0447", "\u0411\u043E\u043D\u0434\u0430\u0440\u0435\u043D\u043A\u043E", "\u0411\u043E\u0440\u0435\u0446\u044C\u043A\u0430", "\u0411\u043E\u0440\u043E\u0432\u0441\u044C\u043A\u0430", "\u0411\u043E\u0440\u043E\u0447\u043A\u043E", "\u0411\u043E\u044F\u0440\u0447\u0443\u043A", "\u0411\u0440\u0438\u0446\u044C\u043A\u0430", "\u0411\u0443\u0440\u043C\u0438\u043B\u043E", "\u0411\u0443\u0442\u044C\u043A\u043E", "\u0412\u0430\u0441\u0438\u043B\u0438\u0448\u0438\u043D\u0430", "\u0412\u0430\u0441\u0438\u043B\u044C\u043A\u0456\u0432\u0441\u044C\u043A\u0430", "\u0412\u0435\u0440\u0433\u0443\u043D", "\u0412\u0435\u0440\u0435\u0434\u0443\u043D", "\u0412\u0435\u0440\u0435\u0449\u0443\u043A", "\u0412\u0438\u0442\u0440\u0435\u0431\u0435\u043D\u044C\u043A\u043E", "\u0412\u0456\u0442\u0440\u044F\u043A", "\u0412\u043E\u043B\u043E\u0449\u0443\u043A", "\u0413\u0430\u0439\u0434\u0443\u043A", "\u0413\u0430\u0439\u043E\u0432\u0430", "\u0413\u0430\u0439\u0447\u0443\u043A", "\u0413\u0430\u043B\u0430\u0454\u043D\u043A\u043E", "\u0413\u0430\u043B\u0430\u0442\u0435\u0439", "\u0413\u0430\u043B\u0430\u0446\u0456\u043E\u043D", "\u0413\u0430\u043C\u0430\u043D", "\u0413\u0430\u043C\u0443\u043B\u0430", "\u0413\u0430\u043D\u0438\u0447", "\u0413\u0430\u0440\u0430\u0439", "\u0413\u0430\u0440\u0443\u043D", "\u0413\u043B\u0430\u0434\u043A\u0456\u0432\u0441\u044C\u043A\u0430", "\u0413\u043B\u0430\u0434\u0443\u0445", "\u0413\u043B\u0438\u043D\u0441\u044C\u043A\u0430", "\u0413\u043D\u0430\u0442\u0438\u0448\u0438\u043D\u0430", "\u0413\u043E\u0439\u043A\u043E", "\u0413\u043E\u043B\u043E\u0432\u0435\u0446\u044C", "\u0413\u043E\u0440\u0431\u0430\u0447", "\u0413\u043E\u0440\u0434\u0456\u0439\u0447\u0443\u043A", "\u0413\u043E\u0440\u043E\u0432\u0430", "\u0413\u043E\u0440\u043E\u0434\u043E\u0446\u044C\u043A\u0430", "\u0413\u0440\u0435\u0447\u043A\u043E", "\u0413\u0440\u0438\u0433\u043E\u0440\u0438\u0448\u0438\u043D\u0430", "\u0413\u0440\u0438\u043D\u0435\u0432\u0435\u0446\u044C\u043A\u0430", "\u0413\u0440\u0438\u043D\u0435\u0432\u0441\u044C\u043A\u0430", "\u0413\u0440\u0438\u0448\u043A\u043E", "\u0413\u0440\u043E\u043C\u0438\u043A\u043E", "\u0414\u0430\u043D\u0438\u043B\u0438\u0448\u0438\u043D\u0430", "\u0414\u0430\u043D\u0438\u043B\u043A\u043E", "\u0414\u0435\u043C\u043A\u0456\u0432", "\u0414\u0435\u043C\u0447\u0438\u0448\u0438\u043D\u0430", "\u0414\u0437\u044E\u0431\u2019\u044F\u043A", "\u0414\u0437\u044E\u0431\u0430", "\u0414\u0456\u0434\u0443\u0445", "\u0414\u043C\u0438\u0442\u0440\u0438\u0448\u0438\u043D\u0430", "\u0414\u043C\u0438\u0442\u0440\u0443\u043A", "\u0414\u043E\u0432\u0433\u0430\u043B\u0435\u0432\u0441\u044C\u043A\u0430", "\u0414\u0443\u0440\u0434\u0438\u043D\u0435\u0446\u044C", "\u0404\u0432\u0435\u043D\u043A\u043E", "\u0404\u0432\u043F\u0430\u043A", "\u0404\u043C\u0435\u0446\u044C", "\u0404\u0440\u043C\u0430\u043A", "\u0417\u0430\u0431\u0456\u043B\u0430", "\u0417\u0432\u0430\u0440\u0438\u0447", "\u0417\u0456\u043D\u043A\u0435\u0432\u0438\u0447", "\u0417\u043B\u0435\u043D\u043A\u043E", "\u0406\u0432\u0430\u043D\u0438\u0448\u0438\u043D\u0430", "\u041A\u0430\u043B\u0430\u0447", "\u041A\u0430\u043D\u0434\u0438\u0431\u0430", "\u041A\u0430\u0440\u043F\u0443\u0445", "\u041A\u0438\u0432\u0430\u0447", "\u041A\u043E\u0432\u0430\u043B\u0435\u043D\u043A\u043E", "\u041A\u043E\u0432\u0430\u043B\u044C\u0441\u044C\u043A\u0430", "\u041A\u043E\u043B\u043E\u043C\u0456\u0454\u0446\u044C", "\u041A\u043E\u043C\u0430\u043D", "\u041A\u043E\u043C\u043F\u0430\u043D\u0456\u0454\u0446\u044C", "\u041A\u043E\u043D\u043E\u043D\u0435\u0446\u044C", "\u041A\u043E\u0440\u0434\u0443\u043D", "\u041A\u043E\u0440\u0435\u0446\u044C\u043A\u0430", "\u041A\u043E\u0440\u043D\u0457\u0439\u0447\u0443\u043A", "\u041A\u043E\u0440\u043E\u0432\u2019\u044F\u043A", "\u041A\u043E\u0446\u044E\u0431\u0438\u043D\u0441\u044C\u043A\u0430", "\u041A\u0443\u043B\u0438\u043D\u0438\u0447", "\u041A\u0443\u043B\u044C\u0447\u0438\u0446\u044C\u043A\u0430", "\u041B\u0430\u0433\u043E\u0439\u0434\u0430", "\u041B\u0430\u0437\u0456\u0440\u043A\u043E", "\u041B\u0430\u043D\u043E\u0432\u0430", "\u041B\u0430\u0442\u0430\u043D", "\u041B\u0430\u0442\u0430\u043D\u0441\u044C\u043A\u0430", "\u041B\u0430\u0445\u043C\u0430\u043D", "\u041B\u0435\u0432\u0430\u0434\u043E\u0432\u0441\u044C\u043A\u0430", "\u041B\u0438\u043A\u043E\u0432\u0438\u0447", "\u041B\u0438\u043D\u0434\u0438\u043A", "\u041B\u0456\u0445\u043D\u043E", "\u041B\u043E\u0431\u0430\u0447\u0435\u0432\u0441\u044C\u043A\u0430", "\u041B\u043E\u043C\u043E\u0432\u0430", "\u041B\u0443\u0433\u043E\u0432\u0430", "\u041B\u0443\u0446\u044C\u043A\u0430", "\u041B\u0443\u0446\u044C\u043A\u0456\u0432", "\u041B\u0443\u0447\u0435\u043D\u043A\u043E", "\u041B\u0443\u0447\u043A\u043E", "\u041B\u044E\u0442\u0430", "\u041B\u044F\u0449\u0443\u043A", "\u041C\u0430\u0433\u0435\u0440\u0430", "\u041C\u0430\u0437\u0430\u0439\u043B\u043E", "\u041C\u0430\u0437\u0438\u043B\u043E", "\u041C\u0430\u0437\u0443\u043D", "\u041C\u0430\u0439\u0431\u043E\u0440\u043E\u0434\u0430", "\u041C\u0430\u0439\u0441\u0442\u0440\u0435\u043D\u043A\u043E", "\u041C\u0430\u043A\u043E\u0432\u0435\u0446\u044C\u043A\u0430", "\u041C\u0430\u043B\u043A\u043E\u0432\u0438\u0447", "\u041C\u0430\u043C\u0456\u0439", "\u041C\u0430\u0440\u0438\u043D\u0438\u0447", "\u041C\u0430\u0440\u0456\u0454\u0432\u0441\u044C\u043A\u0430", "\u041C\u0430\u0440\u043A\u0456\u0432", "\u041C\u0430\u0445\u043D\u043E", "\u041C\u0438\u043A\u043B\u0430\u0448\u0435\u0432\u0441\u044C\u043A\u0430", "\u041C\u0438\u043A\u043B\u0443\u0445\u043E", "\u041C\u0438\u043B\u043E\u0441\u043B\u0430\u0432\u0441\u044C\u043A\u0430", "\u041C\u0438\u0445\u0430\u0439\u043B\u044E\u043A", "\u041C\u0456\u043D\u044F\u0439\u043B\u043E", "\u041C\u043E\u0433\u0438\u043B\u0435\u0432\u0441\u044C\u043A\u0430", "\u041C\u043E\u0441\u043A\u0430\u043B\u044C", "\u041C\u043E\u0441\u043A\u0430\u043B\u044E\u043A", "\u041C\u043E\u0442\u0440\u0456\u0454\u043D\u043A\u043E", "\u041D\u0435\u0433\u043E\u0434\u0430", "\u041D\u043E\u0433\u0430\u0447\u0435\u0432\u0441\u044C\u043A\u0430", "\u041E\u043F\u0435\u043D\u044C\u043A\u043E", "\u041E\u0441\u0430\u0434\u043A\u043E", "\u041F\u0430\u0432\u043B\u0435\u043D\u043A\u043E", "\u041F\u0430\u0432\u043B\u0438\u0448\u0438\u043D\u0430", "\u041F\u0430\u0432\u043B\u0456\u0432", "\u041F\u0430\u0433\u0443\u0442\u044F\u043A", "\u041F\u0430\u043B\u0430\u043C\u0430\u0440\u0447\u0443\u043A", "\u041F\u0430\u043B\u0456\u0439", "\u041F\u0430\u0440\u0430\u0449\u0443\u043A", "\u041F\u0430\u0441\u0456\u0447\u043D\u0438\u043A", "\u041F\u0435\u043D\u0434\u0438\u043A", "\u041F\u0435\u0442\u0438\u043A", "\u041F\u0435\u0442\u043B\u044E\u0440\u0430", "\u041F\u0435\u0442\u0440\u0435\u043D\u043A\u043E", "\u041F\u0435\u0442\u0440\u0438\u043D\u0430", "\u041F\u0435\u0442\u0440\u0438\u0448\u0438\u043D\u0430", "\u041F\u0435\u0442\u0440\u0456\u0432", "\u041F\u043B\u0430\u043A\u0441\u0456\u0439", "\u041F\u043E\u0433\u0438\u0431\u0430", "\u041F\u043E\u043B\u0456\u0449\u0443\u043A", "\u041F\u043E\u043D\u043E\u043C\u0430\u0440\u0456\u0432", "\u041F\u043E\u0440\u0438\u0432\u0430\u0439", "\u041F\u043E\u0440\u0438\u0432\u0430\u0439\u043B\u043E", "\u041F\u043E\u0442\u0435\u0431\u0435\u043D\u044C\u043A\u043E", "\u041F\u043E\u0442\u043E\u0446\u044C\u043A\u0430", "\u041F\u0440\u0438\u0433\u043E\u0434\u0430", "\u041F\u0440\u0438\u0439\u043C\u0430\u043A", "\u041F\u0440\u0438\u0442\u0443\u043B\u0430", "\u041F\u0440\u044F\u0434\u0443\u043D", "\u0420\u043E\u0437\u043F\u0443\u0442\u043D\u044F", "\u0420\u043E\u043C\u0430\u043D\u0438\u0448\u0438\u043D\u0430", "\u0420\u043E\u043C\u0435\u0439", "\u0420\u043E\u043C\u0435\u043D\u0435\u0446\u044C", "\u0420\u043E\u043C\u043E\u0447\u043A\u043E", "\u0421\u0430\u0432\u0438\u0446\u044C\u043A\u0430", "\u0421\u0430\u0454\u043D\u043A\u043E", "\u0421\u0432\u0438\u0434\u0440\u0438\u0433\u0430\u0439\u043B\u043E", "\u0421\u0435\u043C\u0435\u043D\u043E\u0447\u043A\u043E", "\u0421\u0435\u043C\u0435\u0449\u0443\u043A", "\u0421\u0435\u0440\u0434\u044E\u043A", "\u0421\u0438\u043B\u0435\u0446\u044C\u043A\u0430", "\u0421\u0456\u0434\u043B\u0435\u0446\u044C\u043A\u0430", "\u0421\u0456\u0434\u043B\u044F\u043A", "\u0421\u0456\u0440\u043A\u043E", "\u0421\u043A\u0438\u0431\u0430", "\u0421\u043A\u043E\u0440\u043E\u043F\u0430\u0434\u0441\u044C\u043A\u0430", "\u0421\u043B\u043E\u0431\u043E\u0434\u044F\u043D", "\u0421\u043E\u0441\u044E\u0440\u0430", "\u0421\u043F\u043B\u044E\u0445\u0430", "\u0421\u043F\u043E\u0442\u0438\u043A\u0430\u0447", "\u0421\u0442\u0435\u043F\u0430\u043D\u0435\u0446\u044C", "\u0421\u0442\u0438\u0433\u0430\u0439\u043B\u043E", "\u0421\u0442\u043E\u0440\u043E\u0436\u0443\u043A", "\u0421\u0442\u043E\u0440\u0447\u0430\u043A", "\u0421\u0442\u043E\u044F\u043D", "\u0421\u0443\u0447\u0430\u043A", "\u0421\u0443\u0448\u043A\u043E", "\u0422\u0430\u0440\u0430\u0441\u044E\u043A", "\u0422\u0438\u043D\u0434\u0430\u0440\u0435\u0439", "\u0422\u043A\u0430\u0447\u0435\u043D\u043A\u043E", "\u0422\u0440\u0435\u0442\u044F\u043A", "\u0422\u0440\u043E\u044F\u043D", "\u0422\u0440\u0443\u0431\u043B\u0430\u0454\u0432\u0441\u044C\u043A\u0430", "\u0422\u0440\u044F\u0441\u0438\u043B\u043E", "\u0422\u0440\u044F\u0441\u0443\u043D", "\u0423\u043C\u0430\u043D\u0435\u0446\u044C", "\u0423\u043D\u0438\u0447", "\u0423\u0441\u0438\u0447", "\u0424\u0435\u0434\u043E\u0440\u0438\u0448\u0438\u043D\u0430", "\u0426\u0443\u0448\u043A\u043E", "\u0427\u0435\u0440\u0432\u043E\u043D\u0456\u0439", "\u0428\u0430\u043C\u0440\u0438\u043B\u043E", "\u0428\u0435\u0432\u0447\u0435\u043D\u043A\u043E", "\u0428\u0435\u0441\u0442\u0430\u043A", "\u0428\u0438\u043D\u0434\u0430\u0440\u0435\u0439", "\u0428\u0438\u044F\u043D", "\u0428\u043A\u0430\u0440\u0430\u0431\u0430", "\u0428\u0443\u0434\u0440\u0438\u043A", "\u0428\u0443\u043C\u0438\u043B\u043E", "\u0428\u0443\u043F\u0438\u043A", "\u0428\u0443\u0445\u0435\u0432\u0438\u0447", "\u0429\u0435\u0440\u0431\u0430\u043A", "\u042E\u0440\u0447\u0438\u0448\u0438\u043D\u0430", "\u042E\u0445\u043D\u043E", "\u042E\u0449\u0438\u043A", "\u042E\u0449\u0443\u043A", "\u042F\u0432\u043E\u0440\u0456\u0432\u0441\u044C\u043A\u0430", "\u042F\u043B\u043E\u0432\u0430", "\u042F\u043B\u044E\u043A", "\u042F\u043D\u044E\u043A", "\u042F\u0440\u043C\u0430\u043A", "\u042F\u0446\u0438\u0448\u0438\u043D\u0430", "\u042F\u0446\u044C\u043A\u0456\u0432", "\u042F\u0449\u0443\u043A"];
var N7 = ["\u0410\u0434\u0430\u043C\u0456\u0432\u043D\u0430", "\u0410\u0437\u0430\u0440\u0456\u0432\u043D\u0430", "\u0410\u043B\u0435\u0432\u0442\u0438\u043D\u0456\u0432\u043D\u0430", "\u0410\u043B\u044C\u0431\u0435\u0440\u0442\u0456\u0432\u043D\u0430", "\u0410\u043D\u0430\u0441\u0442\u0430\u0441\u0456\u0432\u043D\u0430", "\u0410\u043D\u0430\u0442\u043E\u043B\u0456\u0457\u0432\u043D\u0430", "\u0410\u043D\u0434\u0440\u0456\u0457\u0432\u043D\u0430", "\u0410\u043D\u0442\u043E\u043D\u0456\u0432\u043D\u0430", "\u0410\u0440\u043A\u0430\u0434\u0456\u0457\u0432\u043D\u0430", "\u0410\u0440\u0441\u0435\u043D\u0456\u0432\u043D\u0430", "\u0410\u0440\u0441\u0435\u043D\u0456\u0457\u0432\u043D\u0430", "\u0410\u0440\u0442\u0435\u043C\u0456\u0432\u043D\u0430", "\u0410\u0440\u0445\u0438\u043F\u0456\u0432\u043D\u0430", "\u0410\u0441\u043A\u043E\u043B\u044C\u0434\u0456\u0432\u043D\u0430", "\u0410\u0444\u0430\u043D\u0430\u0441\u0456\u0457\u0432\u043D\u0430", "\u0411\u0456\u043B\u043E\u0441\u043B\u0430\u0432\u0456\u0432\u043D\u0430", "\u0411\u043E\u0433\u0434\u0430\u043D\u0456\u0432\u043D\u0430", "\u0411\u043E\u0436\u0435\u043C\u0438\u0440\u0456\u0432\u043D\u0430", "\u0411\u043E\u0436\u0435\u043D\u0456\u0432\u043D\u0430", "\u0411\u043E\u043B\u0435\u0441\u043B\u0430\u0432\u0456\u0432\u043D\u0430", "\u0411\u043E\u0440\u0438\u043C\u0438\u0440\u0456\u0432\u043D\u0430", "\u0411\u043E\u0440\u0438\u0441\u0456\u0432\u043D\u0430", "\u0411\u043E\u0440\u0438\u0441\u043B\u0430\u0432\u0456\u0432\u043D\u0430", "\u0411\u0440\u0430\u0442\u0438\u0441\u043B\u0430\u0432\u0456\u0432\u043D\u0430", "\u0412\u2019\u044F\u0447\u0435\u0441\u043B\u0430\u0432\u0456\u0432\u043D\u0430", "\u0412\u0430\u0434\u0438\u043C\u0456\u0432\u043D\u0430", "\u0412\u0430\u043B\u0435\u043D\u0442\u0438\u043D\u0456\u0432\u043D\u0430", "\u0412\u0430\u043B\u0435\u0440\u0456\u0457\u0432\u043D\u0430", "\u0412\u0430\u0441\u0438\u043B\u0456\u0432\u043D\u0430", "\u0412\u0456\u043A\u0442\u043E\u0440\u0456\u0432\u043D\u0430", "\u0412\u0456\u0442\u0430\u043B\u0456\u0457\u0432\u043D\u0430", "\u0412\u043B\u0430\u0434\u0438\u0441\u043B\u0430\u0432\u0456\u0432\u043D\u0430", "\u0412\u043E\u043B\u043E\u0434\u0438\u043C\u0438\u0440\u0456\u0432\u043D\u0430", "\u0412\u0441\u0435\u0432\u043E\u043B\u043E\u0434\u0456\u0432\u043D\u0430", "\u0412\u0441\u0435\u0441\u043B\u0430\u0432\u0456\u0432\u043D\u0430", "\u0413\u0430\u0432\u0440\u0438\u043B\u0456\u0432\u043D\u0430", "\u0413\u0430\u0440\u0430\u0441\u0438\u043C\u0456\u0432\u043D\u0430", "\u0413\u0435\u043E\u0440\u0433\u0456\u0457\u0432\u043D\u0430", "\u0413\u043D\u0430\u0442\u0456\u0432\u043D\u0430", "\u0413\u043E\u0440\u0434\u0456\u0457\u0432\u043D\u0430", "\u0413\u0440\u0438\u0433\u043E\u0440\u0456\u0457\u0432\u043D\u0430", "\u0414\u0430\u043D\u0438\u043B\u0456\u0432\u043D\u0430", "\u0414\u0430\u0440\u043E\u043C\u0438\u0440\u0456\u0432\u043D\u0430", "\u0414\u0435\u043D\u0438\u0441\u0456\u0432\u043D\u0430", "\u0414\u043C\u0438\u0442\u0440\u0456\u0432\u043D\u0430", "\u0414\u043E\u0431\u0440\u043E\u043C\u0438\u0440\u0456\u0432\u043D\u0430", "\u0414\u043E\u0431\u0440\u043E\u0441\u043B\u0430\u0432\u0456\u0432\u043D\u0430", "\u0404\u0432\u0433\u0435\u043D\u0456\u0432\u043D\u0430", "\u0417\u0430\u0445\u0430\u0440\u0456\u0432\u043D\u0430", "\u0417\u0430\u0445\u0430\u0440\u0456\u0457\u0432\u043D\u0430", "\u0417\u0431\u043E\u0440\u0438\u0441\u043B\u0430\u0432\u0456\u0432\u043D\u0430", "\u0417\u0432\u0435\u043D\u0438\u043C\u0438\u0440\u0456\u0432\u043D\u0430", "\u0417\u0432\u0435\u043D\u0438\u0441\u043B\u0430\u0432\u0456\u0432\u043D\u0430", "\u0417\u0435\u043D\u043E\u0432\u0456\u0457\u0432\u043D\u0430", "\u0417\u0438\u043D\u043E\u0432\u0456\u0457\u0432\u043D\u0430", "\u0417\u043B\u0430\u0442\u043E\u043C\u0438\u0440\u0456\u0432\u043D\u0430", "\u0417\u043E\u0440\u0435\u0441\u043B\u0430\u0432\u0456\u0432\u043D\u0430", "\u0406\u0432\u0430\u043D\u0456\u0432\u043D\u0430", "\u0406\u0433\u043E\u0440\u0456\u0432\u043D\u0430", "\u0406\u0437\u044F\u0441\u043B\u0430\u0432\u0456\u0432\u043D\u0430", "\u041A\u043E\u0440\u043D\u0435\u043B\u0456\u0457\u0432\u043D\u0430", "\u041A\u043E\u0440\u043D\u0438\u043B\u0456\u0432\u043D\u0430", "\u041A\u043E\u0440\u043D\u0456\u0457\u0432\u043D\u0430", "\u041A\u043E\u0441\u0442\u044F\u043D\u0442\u0438\u043D\u0456\u0432\u043D\u0430", "\u041B\u0430\u0432\u0440\u0435\u043D\u0442\u0456\u0457\u0432\u043D\u0430", "\u041B\u044E\u0431\u043E\u043C\u0438\u0440\u0456\u0432\u043D\u0430", "\u041C\u0430\u043A\u0430\u0440\u0456\u0432\u043D\u0430", "\u041C\u0430\u043A\u0441\u0438\u043C\u0456\u0432\u043D\u0430", "\u041C\u0430\u0440\u043A\u0456\u0432\u043D\u0430", "\u041C\u0430\u0440\u043A\u0456\u044F\u043D\u0456\u0432\u043D\u0430", "\u041C\u0430\u0442\u0432\u0456\u0457\u0432\u043D\u0430", "\u041C\u0435\u0447\u0438\u0441\u043B\u0430\u0432\u0456\u0432\u043D\u0430", "\u041C\u0438\u043A\u0438\u0442\u0456\u0432\u043D\u0430", "\u041C\u0438\u043A\u043E\u043B\u0430\u0457\u0432\u043D\u0430", "\u041C\u0438\u0440\u043E\u043D\u0456\u0432\u043D\u0430", "\u041C\u0438\u0440\u043E\u0441\u043B\u0430\u0432\u0456\u0432\u043D\u0430", "\u041C\u0438\u0445\u0430\u0439\u043B\u0456\u0432\u043D\u0430", "\u041C\u0441\u0442\u0438\u0441\u043B\u0430\u0432\u0456\u0432\u043D\u0430", "\u041D\u0430\u0437\u0430\u0440\u0456\u0432\u043D\u0430", "\u041D\u0430\u0437\u0430\u0440\u0456\u0457\u0432\u043D\u0430", "\u041D\u0430\u0442\u0430\u043D\u0456\u0432\u043D\u0430", "\u041D\u0435\u043C\u0438\u0440\u0456\u0432\u043D\u0430", "\u041D\u0435\u0441\u0442\u043E\u0440\u0456\u0432\u043D\u0430", "\u041E\u043B\u0435\u0433\u0456\u0432\u043D\u0430", "\u041E\u043B\u0435\u043A\u0441\u0430\u043D\u0434\u0440\u0456\u0432\u043D\u0430", "\u041E\u043B\u0435\u043A\u0441\u0456\u0457\u0432\u043D\u0430", "\u041E\u043B\u0435\u043B\u044C\u043A\u0456\u0432\u043D\u0430", "\u041E\u043C\u0435\u043B\u044F\u043D\u0456\u0432\u043D\u0430", "\u041E\u0440\u0435\u0441\u0442\u0456\u0432\u043D\u0430", "\u041E\u0440\u0445\u0438\u043F\u0456\u0432\u043D\u0430", "\u041E\u0441\u0442\u0430\u043F\u0456\u0432\u043D\u0430", "\u041E\u0445\u0440\u0456\u043C\u0456\u0432\u043D\u0430", "\u041F\u0430\u0432\u043B\u0456\u0432\u043D\u0430", "\u041F\u0430\u043D\u0430\u0441\u0456\u0432\u043D\u0430", "\u041F\u0430\u043D\u0442\u0435\u043B\u0435\u0439\u043C\u043E\u043D\u0456\u0432\u043D\u0430", "\u041F\u0435\u0442\u0440\u0456\u0432\u043D\u0430", "\u041F\u0438\u043B\u0438\u043F\u0456\u0432\u043D\u0430", "\u0420\u0430\u0434\u0438\u043C\u0438\u0440\u0456\u0432\u043D\u0430", "\u0420\u0430\u0434\u0438\u043C\u0456\u0432\u043D\u0430", "\u0420\u043E\u0434\u0456\u043E\u043D\u0456\u0432\u043D\u0430", "\u0420\u043E\u043C\u0430\u043D\u0456\u0432\u043D\u0430", "\u0420\u043E\u0441\u0442\u0438\u0441\u043B\u0430\u0432\u0456\u0432\u043D\u0430", "\u0420\u0443\u0441\u043B\u0430\u043D\u0456\u0432\u043D\u0430", "\u0421\u0432\u044F\u0442\u043E\u0441\u043B\u0430\u0432\u0456\u0432\u043D\u0430", "\u0421\u0435\u0440\u0433\u0456\u0457\u0432\u043D\u0430", "\u0421\u043B\u0430\u0432\u0443\u0442\u0456\u0432\u043D\u0430", "\u0421\u0442\u0430\u043D\u0456\u0441\u043B\u0430\u0432\u0456\u0432\u043D\u0430", "\u0421\u0442\u0435\u043F\u0430\u043D\u0456\u0432\u043D\u0430", "\u0421\u0442\u0435\u0444\u0430\u043D\u0456\u0457\u0432\u043D\u0430", "\u0422\u0430\u0440\u0430\u0441\u0456\u0432\u043D\u0430", "\u0422\u0438\u043C\u043E\u0444\u0456\u0457\u0432\u043D\u0430", "\u0422\u0438\u0445\u043E\u043D\u0456\u0432\u043D\u0430", "\u0423\u0441\u0442\u0438\u043C\u0456\u0432\u043D\u0430", "\u042E\u0440\u0456\u0457\u0432\u043D\u0430", "\u042E\u0445\u0438\u043C\u0456\u0432\u043D\u0430", "\u042F\u0440\u043E\u0441\u043B\u0430\u0432\u0456\u0432\u043D\u0430"];
var A5 = ["\u0410\u0432\u0433\u0443\u0441\u0442\u0438\u043D", "\u0410\u0432\u0440\u0435\u043B\u0456\u0439", "\u0410\u0434\u0430\u043C", "\u0410\u0434\u0440\u0456\u044F\u043D", "\u0410\u0437\u0430\u0440\u0456\u0439", "\u0410\u043B\u0435\u0432\u0442\u0438\u043D", "\u0410\u043B\u044C\u0431\u0435\u0440\u0442", "\u0410\u043D\u0430\u0441\u0442\u0430\u0441", "\u0410\u043D\u0430\u0441\u0442\u0430\u0441\u0456\u0439", "\u0410\u043D\u0430\u0442\u043E\u043B\u0456\u0439", "\u0410\u043D\u0434\u0440\u0456\u0439", "\u0410\u043D\u0442\u0456\u043D", "\u0410\u043D\u0442\u043E\u043D", "\u0410\u043D\u0442\u043E\u043D\u0456\u0439", "\u0410\u0440\u043A\u0430\u0434\u0456\u0439", "\u0410\u0440\u0441\u0435\u043D", "\u0410\u0440\u0441\u0435\u043D\u0456\u0439", "\u0410\u0440\u0442\u0435\u043C", "\u0410\u0440\u0445\u0438\u043F", "\u0410\u0441\u043A\u043E\u043B\u044C\u0434", "\u0410\u0444\u0430\u043D\u0430\u0441\u0456\u0439", "\u0411\u0456\u043B\u043E\u043C\u0438\u0440", "\u0411\u0456\u043B\u043E\u0441\u043B\u0430\u0432", "\u0411\u043E\u0433\u0434\u0430\u043D", "\u0411\u043E\u0436\u0435\u043C\u0438\u0440", "\u0411\u043E\u0436\u0435\u043D", "\u0411\u043E\u043B\u0435\u0441\u043B\u0430\u0432", "\u0411\u043E\u0440\u0438\u043C\u0438\u0440", "\u0411\u043E\u0440\u0438\u043C\u0438\u0441\u043B", "\u0411\u043E\u0440\u0438\u0441", "\u0411\u043E\u0440\u0438\u0441\u043B\u0430\u0432", "\u0411\u0440\u0430\u0442\u0438\u043C\u0438\u0440", "\u0411\u0440\u0430\u0442\u0438\u0441\u043B\u0430\u0432", "\u0411\u0440\u0430\u0442\u043E\u043C\u0438\u043B", "\u0411\u0440\u0430\u0442\u043E\u0441\u043B\u0430\u0432", "\u0411\u0440\u044F\u0447\u0438\u0441\u043B\u0430\u0432", "\u0411\u0443\u0434\u0438\u043C\u0438\u0440", "\u0411\u0443\u0439\u0442\u0443\u0440", "\u0411\u0443\u0440\u0435\u0432\u0456\u0441\u0442", "\u0412\u2019\u044F\u0447\u0435\u0441\u043B\u0430\u0432", "\u0412\u0430\u0434\u0438\u043C", "\u0412\u0430\u043B\u0435\u043D\u0442\u0438\u043D", "\u0412\u0430\u043B\u0435\u0440\u0456\u0439", "\u0412\u0430\u0441\u0438\u043B\u044C", "\u0412\u0435\u043B\u0435\u043C\u0438\u0440", "\u0412\u0456\u043A\u0442\u043E\u0440", "\u0412\u0456\u0442\u0430\u043B\u0456\u0439", "\u0412\u043B\u0430\u0434", "\u0412\u043B\u0430\u0434\u0438\u0441\u043B\u0430\u0432", "\u0412\u043E\u043B\u043E\u0434\u0438\u043C\u0438\u0440", "\u0412\u043E\u043B\u043E\u0434\u0438\u0441\u043B\u0430\u0432", "\u0412\u0441\u0435\u0432\u043B\u0430\u0434", "\u0412\u0441\u0435\u0432\u043E\u043B\u043E\u0434", "\u0412\u0441\u0435\u0441\u043B\u0430\u0432", "\u0413\u0430\u0432\u0440\u0438\u043B\u043E", "\u0413\u0430\u0440\u043D\u043E\u0441\u043B\u0430\u0432", "\u0413\u0435\u043D\u043D\u0430\u0434\u0456\u0439", "\u0413\u0435\u043E\u0440\u0433\u0456\u0439", "\u0413\u0435\u0440\u0430\u0441\u0438\u043C", "\u0413\u043B\u0456\u0431", "\u0413\u043D\u0430\u0442", "\u0413\u043E\u0440\u0434\u0456\u0439", "\u0413\u043E\u0440\u0438\u043C\u0438\u0440", "\u0413\u043E\u0440\u0438\u0441\u043B\u0430\u0432", "\u0413\u0440\u0430\u0434\u0438\u043C\u0438\u0440", "\u0413\u0440\u0438\u0433\u043E\u0440\u0456\u0439", "\u0414\u0430\u043B\u0435\u043C\u0438\u0440", "\u0414\u0430\u043D\u0438\u043B\u043E", "\u0414\u0430\u0440\u0456\u0439", "\u0414\u0430\u0440\u043E\u043C\u0438\u0440", "\u0414\u0435\u043D\u0438\u0441", "\u0414\u043C\u0438\u0442\u0440\u043E", "\u0414\u043E\u0431\u0440\u043E\u043C\u0438\u0440", "\u0414\u043E\u0431\u0440\u043E\u043C\u0438\u0441\u043B", "\u0414\u043E\u0431\u0440\u043E\u0441\u043B\u0430\u0432", "\u0404\u0432\u0433\u0435\u043D", "\u0404\u0440\u0435\u043C\u0456\u0439", "\u0417\u0430\u0445\u0430\u0440", "\u0417\u0430\u0445\u0430\u0440\u0456\u0439", "\u0417\u0431\u043E\u0440\u0438\u0441\u043B\u0430\u0432", "\u0417\u0432\u0435\u043D\u0438\u0433\u043E\u0440", "\u0417\u0432\u0435\u043D\u0438\u043C\u0438\u0440", "\u0417\u0432\u0435\u043D\u0438\u0441\u043B\u0430\u0432", "\u0417\u0435\u043C\u0438\u0441\u043B\u0430\u0432", "\u0417\u0435\u043D\u043E\u0432\u0456\u0439", "\u0417\u0438\u043D\u043E\u0432\u0456\u0439", "\u0417\u043B\u0430\u0442", "\u0417\u043B\u0430\u0442\u043E\u043C\u0438\u0440", "\u0417\u043E\u0440\u0435\u043C\u0438\u0440", "\u0417\u043E\u0440\u0435\u0441\u043B\u0430\u0432", "\u0417\u043E\u0440\u044F\u043D", "\u0406\u0432\u0430\u043D", "\u0406\u0433\u043E\u0440", "\u0406\u0437\u044F\u0441\u043B\u0430\u0432", "\u0406\u043B\u043B\u044F", "\u041A\u0438\u0439", "\u041A\u043E\u0440\u043D\u0435\u043B\u0456\u0439", "\u041A\u043E\u0440\u043D\u0438\u043B\u0456\u0439", "\u041A\u043E\u0440\u043D\u0438\u043B\u043E", "\u041A\u043E\u0440\u043D\u0456\u0439", "\u041A\u043E\u0441\u0442\u044F\u043D\u0442\u0438\u043D", "\u041A\u0443\u0437\u044C\u043C\u0430", "\u041B\u0430\u0432\u0440\u0435\u043D\u0442\u0456\u0439", "\u041B\u0430\u0432\u0440\u0456\u043D", "\u041B\u0430\u0434", "\u041B\u0430\u0434\u0438\u0441\u043B\u0430\u0432", "\u041B\u0430\u0434\u043E", "\u041B\u0430\u0434\u043E\u043C\u0438\u0440", "\u041B\u0435\u0432\u043A\u043E", "\u041B\u0438\u0441\u0442\u0432\u0438\u0447", "\u041B\u0443\u043A\u2019\u044F\u043D", "\u041B\u044E\u0431\u043E\u0434\u0430\u0440", "\u041B\u044E\u0431\u043E\u0437\u0430\u0440", "\u041B\u044E\u0431\u043E\u043C\u0438\u0440", "\u041C\u0430\u043A\u0430\u0440", "\u041C\u0430\u043A\u0441\u0438\u043C", "\u041C\u0430\u0440\u2019\u044F\u043D", "\u041C\u0430\u0440\u043A\u0456\u044F\u043D", "\u041C\u0430\u0440\u043A\u043E", "\u041C\u0430\u0442\u0432\u0456\u0439", "\u041C\u0435\u0447\u0438\u0441\u043B\u0430\u0432", "\u041C\u0438\u043A\u0438\u0442\u0430", "\u041C\u0438\u043A\u043E\u043B\u0430", "\u041C\u0438\u0440\u043E\u043D", "\u041C\u0438\u0440\u043E\u0441\u043B\u0430\u0432", "\u041C\u0438\u0445\u0430\u0439\u043B\u043E", "\u041C\u0441\u0442\u0438\u0441\u043B\u0430\u0432", "\u041C\u0443\u0441\u0456\u0439", "\u041D\u0430\u0437\u0430\u0440", "\u041D\u0430\u0437\u0430\u0440\u0456\u0439", "\u041D\u0430\u0442\u0430\u043D", "\u041D\u0435\u043C\u0438\u0440", "\u041D\u0435\u0441\u0442\u043E\u0440", "\u041E\u043B\u0435\u0433", "\u041E\u043B\u0435\u043A\u0441\u0430\u043D\u0434\u0440", "\u041E\u043B\u0435\u043A\u0441\u0456\u0439", "\u041E\u043B\u0435\u043B\u044C\u043A\u043E", "\u041E\u043B\u0435\u0441\u044C", "\u041E\u043C\u0435\u043B\u044F\u043D", "\u041E\u0440\u0435\u0441\u0442", "\u041E\u0440\u0445\u0438\u043F", "\u041E\u0441\u0442\u0430\u043F", "\u041E\u0445\u0440\u0456\u043C", "\u041F\u0430\u0432\u043B\u043E", "\u041F\u0430\u043D\u0430\u0441", "\u041F\u0430\u043D\u0442\u0435\u043B\u0435\u0439\u043C\u043E\u043D", "\u041F\u0435\u0442\u0440\u043E", "\u041F\u0438\u043B\u0438\u043F", "\u041F\u043E\u0434\u043E\u043B\u044F\u043D", "\u041F\u043E\u0442\u0430\u043F", "\u0420\u0430\u0434\u0438\u043C", "\u0420\u0430\u0434\u0438\u043C\u0438\u0440", "\u0420\u0430\u0442\u0438\u0431\u043E\u0440", "\u0420\u0430\u0442\u0438\u043C\u0438\u0440", "\u0420\u043E\u0434\u0456\u043E\u043D", "\u0420\u043E\u0434\u043E\u0441\u043B\u0430\u0432", "\u0420\u043E\u043A\u0441\u043E\u043B\u0430\u043D", "\u0420\u043E\u043C\u0430\u043D", "\u0420\u043E\u0441\u0442\u0438\u0441\u043B\u0430\u0432", "\u0420\u0443\u0441\u043B\u0430\u043D", "\u0421\u0432\u044F\u0442\u043E\u043F\u043E\u043B\u043A", "\u0421\u0432\u044F\u0442\u043E\u0441\u043B\u0430\u0432", "\u0421\u0435\u043C\u0438\u0431\u043E\u0440", "\u0421\u0435\u0440\u0433\u0456\u0439", "\u0421\u0438\u043D\u044C\u043E\u043E\u043A", "\u0421\u043B\u0430\u0432\u043E\u043B\u044E\u0431", "\u0421\u043B\u0430\u0432\u043E\u043C\u0438\u0440", "\u0421\u043B\u0430\u0432\u0443\u0442\u0430", "\u0421\u043D\u0456\u0436\u0430\u043D", "\u0421\u043E\u043B\u043E\u0433\u0443\u0431", "\u0421\u0442\u0430\u043D\u0456\u0441\u043B\u0430\u0432", "\u0421\u0442\u0435\u043F\u0430\u043D", "\u0421\u0442\u0435\u0444\u0430\u043D\u0456\u0439", "\u0421\u0442\u043E\u0436\u0430\u0440", "\u0422\u0430\u0440\u0430\u0441", "\u0422\u0438\u043C\u0456\u0448", "\u0422\u0438\u043C\u043E\u0444\u0456\u0439", "\u0422\u0438\u0445\u043E\u043D", "\u0422\u0443\u0440", "\u0423\u0441\u0442\u0438\u043C", "\u0425\u0432\u0430\u043B\u0438\u043C\u0438\u0440", "\u0425\u043E\u0440\u0438\u0432", "\u0427\u043E\u0440\u043D\u043E\u0442\u0430", "\u0429\u0430\u0441\u0442\u0438\u0441\u043B\u0430\u0432", "\u0429\u0435\u043A", "\u042E\u043B\u0456\u0430\u043D", "\u042E\u0440\u0456\u0439", "\u042E\u0445\u0438\u043C", "\u042F\u043D", "\u042F\u0440\u0435\u043C\u0430", "\u042F\u0440\u043E\u0432\u0438\u0434", "\u042F\u0440\u043E\u043C\u0438\u043B", "\u042F\u0440\u043E\u043C\u0438\u0440", "\u042F\u0440\u043E\u043F\u043E\u043B\u043A", "\u042F\u0440\u043E\u0441\u043B\u0430\u0432"];
var C5 = ["\u0410\u043D\u0434\u0440\u0443\u0445\u043E\u0432\u0438\u0447", "\u0411\u0430\u0431\u0443\u0445", "\u0411\u0430\u043B\u0430\u0431\u0430\u043D", "\u0411\u0430\u043B\u0430\u0431\u0443\u0445", "\u0411\u0430\u043B\u0430\u043A\u0443\u043D", "\u0411\u0430\u043B\u0438\u0446\u044C\u043A\u0438\u0439", "\u0411\u0430\u043C\u0431\u0443\u043B\u0430", "\u0411\u0430\u043D\u0434\u0435\u0440\u0430", "\u0411\u0430\u0440\u0430\u043D\u043E\u0432\u0441\u044C\u043A\u0438\u0439", "\u0411\u0430\u0447\u0435\u0439", "\u0411\u0430\u0448\u0443\u043A", "\u0411\u0435\u0440\u0434\u043D\u0438\u043A", "\u0411\u0456\u043B\u0438\u0447", "\u0411\u043E\u043D\u0434\u0430\u0440\u0435\u043D\u043A\u043E", "\u0411\u043E\u0440\u0435\u0446\u044C\u043A\u0438\u0439", "\u0411\u043E\u0440\u043E\u0432\u0441\u044C\u043A\u0438\u0439", "\u0411\u043E\u0440\u043E\u0447\u043A\u043E", "\u0411\u043E\u044F\u0440\u0447\u0443\u043A", "\u0411\u0440\u0438\u0446\u044C\u043A\u0438\u0439", "\u0411\u0443\u0440\u043C\u0438\u043B\u043E", "\u0411\u0443\u0442\u044C\u043A\u043E", "\u0412\u0430\u0441\u0438\u043B\u0438\u043D", "\u0412\u0430\u0441\u0438\u043B\u0438\u0448\u0438\u043D", "\u0412\u0430\u0441\u0438\u043B\u044C\u043A\u0456\u0432\u0441\u044C\u043A\u0438\u0439", "\u0412\u0435\u0440\u0433\u0443\u043D", "\u0412\u0435\u0440\u0435\u0434\u0443\u043D", "\u0412\u0435\u0440\u0435\u0449\u0443\u043A", "\u0412\u0438\u0442\u0440\u0435\u0431\u0435\u043D\u044C\u043A\u043E", "\u0412\u0456\u0442\u0440\u044F\u043A", "\u0412\u043E\u043B\u043E\u0449\u0443\u043A", "\u0413\u0430\u0439\u0434\u0443\u043A", "\u0413\u0430\u0439\u043E\u0432\u0438\u0439", "\u0413\u0430\u0439\u0447\u0443\u043A", "\u0413\u0430\u043B\u0430\u0454\u043D\u043A\u043E", "\u0413\u0430\u043B\u0430\u0442\u0435\u0439", "\u0413\u0430\u043B\u0430\u0446\u0456\u043E\u043D", "\u0413\u0430\u043C\u0430\u043D", "\u0413\u0430\u043C\u0443\u043B\u0430", "\u0413\u0430\u043D\u0438\u0447", "\u0413\u0430\u0440\u0430\u0439", "\u0413\u0430\u0440\u0443\u043D", "\u0413\u043B\u0430\u0434\u043A\u0456\u0432\u0441\u044C\u043A\u0438\u0439", "\u0413\u043B\u0430\u0434\u0443\u0445", "\u0413\u043B\u0438\u043D\u0441\u044C\u043A\u0438\u0439", "\u0413\u043D\u0430\u0442\u0438\u0448\u0438\u043D", "\u0413\u043E\u0439\u043A\u043E", "\u0413\u043E\u043B\u043E\u0432\u0435\u0446\u044C", "\u0413\u043E\u0440\u0431\u0430\u0447", "\u0413\u043E\u0440\u0434\u0456\u0439\u0447\u0443\u043A", "\u0413\u043E\u0440\u043E\u0432\u0438\u0439", "\u0413\u043E\u0440\u043E\u0434\u043E\u0446\u044C\u043A\u0438\u0439", "\u0413\u0440\u0435\u0447\u043A\u043E", "\u0413\u0440\u0438\u0433\u043E\u0440\u0438\u0448\u0438\u043D", "\u0413\u0440\u0438\u043D\u0435\u0432\u0435\u0446\u044C\u043A\u0438\u0439", "\u0413\u0440\u0438\u043D\u0435\u0432\u0441\u044C\u043A\u0438\u0439", "\u0413\u0440\u0438\u0448\u043A\u043E", "\u0413\u0440\u043E\u043C\u0438\u043A\u043E", "\u0414\u0430\u043D\u0438\u043B\u0438\u0448\u0438\u043D", "\u0414\u0430\u043D\u0438\u043B\u043A\u043E", "\u0414\u0435\u043C\u043A\u0456\u0432", "\u0414\u0435\u043C\u0447\u0438\u0448\u0438\u043D", "\u0414\u0437\u044E\u0431\u2019\u044F\u043A", "\u0414\u0437\u044E\u0431\u0430", "\u0414\u0456\u0434\u0443\u0445", "\u0414\u043C\u0438\u0442\u0440\u0438\u0448\u0438\u043D", "\u0414\u043C\u0438\u0442\u0440\u0443\u043A", "\u0414\u043E\u0432\u0433\u0430\u043B\u0435\u0432\u0441\u044C\u043A\u0438\u0439", "\u0414\u0443\u0440\u0434\u0438\u043D\u0435\u0446\u044C", "\u0404\u0432\u0435\u043D\u043A\u043E", "\u0404\u0432\u043F\u0430\u043A", "\u0404\u043C\u0435\u0446\u044C", "\u0404\u0440\u043C\u0430\u043A", "\u0417\u0430\u0431\u0456\u043B\u0430", "\u0417\u0432\u0430\u0440\u0438\u0447", "\u0417\u0456\u043D\u043A\u0435\u0432\u0438\u0447", "\u0417\u043B\u0435\u043D\u043A\u043E", "\u0406\u0432\u0430\u043D\u0438\u0448\u0438\u043D", "\u0406\u0432\u0430\u043D\u0456\u0432", "\u0406\u0432\u0430\u043D\u0446\u0456\u0432", "\u041A\u0430\u043B\u0430\u0447", "\u041A\u0430\u043D\u0434\u0438\u0431\u0430", "\u041A\u0430\u0440\u043F\u0443\u0445", "\u041A\u0430\u0441\u044C\u043A\u0456\u0432", "\u041A\u0438\u0432\u0430\u0447", "\u041A\u043E\u0432\u0430\u043B\u0435\u043D\u043A\u043E", "\u041A\u043E\u0432\u0430\u043B\u044C\u0441\u044C\u043A\u0438\u0439", "\u041A\u043E\u043B\u043E\u043C\u0456\u0454\u0446\u044C", "\u041A\u043E\u043C\u0430\u043D", "\u041A\u043E\u043C\u043F\u0430\u043D\u0456\u0454\u0446\u044C", "\u041A\u043E\u043D\u043E\u043D\u0435\u0446\u044C", "\u041A\u043E\u0440\u0434\u0443\u043D", "\u041A\u043E\u0440\u0435\u0446\u044C\u043A\u0438\u0439", "\u041A\u043E\u0440\u043D\u0457\u0439\u0447\u0443\u043A", "\u041A\u043E\u0440\u043E\u0432\u2019\u044F\u043A", "\u041A\u043E\u0446\u044E\u0431\u0438\u043D\u0441\u044C\u043A\u0438\u0439", "\u041A\u0443\u043B\u0438\u043D\u0438\u0447", "\u041A\u0443\u043B\u044C\u0447\u0438\u0446\u044C\u043A\u0438\u0439", "\u041B\u0430\u0433\u043E\u0439\u0434\u0430", "\u041B\u0430\u0437\u0456\u0440\u043A\u043E", "\u041B\u0430\u043D\u043E\u0432\u0438\u0439", "\u041B\u0430\u0442\u0430\u043D\u0438\u0439", "\u041B\u0430\u0442\u0430\u043D\u0441\u044C\u043A\u0438\u0439", "\u041B\u0430\u0445\u043C\u0430\u043D", "\u041B\u0435\u0432\u0430\u0434\u043E\u0432\u0441\u044C\u043A\u0438\u0439", "\u041B\u0438\u043A\u043E\u0432\u0438\u0447", "\u041B\u0438\u043D\u0434\u0438\u043A", "\u041B\u0456\u0445\u043D\u043E", "\u041B\u043E\u0431\u0430\u0447\u0435\u0432\u0441\u044C\u043A\u0438\u0439", "\u041B\u043E\u043C\u043E\u0432\u0438\u0439", "\u041B\u0443\u0433\u043E\u0432\u0438\u0439", "\u041B\u0443\u0446\u044C\u043A\u0438\u0439", "\u041B\u0443\u0446\u044C\u043A\u0456\u0432", "\u041B\u0443\u0447\u0435\u043D\u043A\u043E", "\u041B\u0443\u0447\u043A\u043E", "\u041B\u044E\u0442\u0438\u0439", "\u041B\u044F\u0449\u0443\u043A", "\u041C\u0430\u0433\u0435\u0440\u0430", "\u041C\u0430\u0437\u0430\u0439\u043B\u043E", "\u041C\u0430\u0437\u0438\u043B\u043E", "\u041C\u0430\u0437\u0443\u043D", "\u041C\u0430\u0439\u0431\u043E\u0440\u043E\u0434\u0430", "\u041C\u0430\u0439\u0441\u0442\u0440\u0435\u043D\u043A\u043E", "\u041C\u0430\u043A\u043E\u0432\u0435\u0446\u044C\u043A\u0438\u0439", "\u041C\u0430\u043B\u043A\u043E\u0432\u0438\u0447", "\u041C\u0430\u043C\u0456\u0439", "\u041C\u0430\u0440\u0438\u043D\u0438\u0447", "\u041C\u0430\u0440\u0456\u0454\u0432\u0441\u044C\u043A\u0438\u0439", "\u041C\u0430\u0440\u043A\u0456\u0432", "\u041C\u0430\u0445\u043D\u043E", "\u041C\u0438\u043A\u043B\u0430\u0448\u0435\u0432\u0441\u044C\u043A\u0438\u0439", "\u041C\u0438\u043A\u043B\u0443\u0445\u043E", "\u041C\u0438\u043B\u043E\u0441\u043B\u0430\u0432\u0441\u044C\u043A\u0438\u0439", "\u041C\u0438\u0445\u0430\u0439\u043B\u044E\u043A", "\u041C\u0456\u043D\u044F\u0439\u043B\u043E", "\u041C\u043E\u0433\u0438\u043B\u0435\u0432\u0441\u044C\u043A\u0438\u0439", "\u041C\u043E\u0441\u043A\u0430\u043B\u044C", "\u041C\u043E\u0441\u043A\u0430\u043B\u044E\u043A", "\u041C\u043E\u0442\u0440\u0456\u0454\u043D\u043A\u043E", "\u041D\u0435\u0433\u043E\u0434\u0430", "\u041D\u043E\u0433\u0430\u0447\u0435\u0432\u0441\u044C\u043A\u0438\u0439", "\u041E\u043F\u0435\u043D\u044C\u043A\u043E", "\u041E\u0441\u0430\u0434\u043A\u043E", "\u041F\u0430\u0432\u043B\u0435\u043D\u043A\u043E", "\u041F\u0430\u0432\u043B\u0438\u0448\u0438\u043D", "\u041F\u0430\u0432\u043B\u0456\u0432", "\u041F\u0430\u0433\u0443\u0442\u044F\u043A", "\u041F\u0430\u043B\u0430\u043C\u0430\u0440\u0447\u0443\u043A", "\u041F\u0430\u043B\u0456\u0439", "\u041F\u0430\u0440\u0430\u0449\u0443\u043A", "\u041F\u0430\u0441\u0456\u0447\u043D\u0438\u043A", "\u041F\u0435\u043D\u0434\u0438\u043A", "\u041F\u0435\u0442\u0438\u043A", "\u041F\u0435\u0442\u043B\u044E\u0440\u0430", "\u041F\u0435\u0442\u0440\u0435\u043D\u043A\u043E", "\u041F\u0435\u0442\u0440\u0438\u043D", "\u041F\u0435\u0442\u0440\u0438\u0448\u0438\u043D", "\u041F\u0435\u0442\u0440\u0456\u0432", "\u041F\u043B\u0430\u043A\u0441\u0456\u0439", "\u041F\u043E\u0433\u0438\u0431\u0430", "\u041F\u043E\u043B\u0456\u0449\u0443\u043A", "\u041F\u043E\u043D\u043E\u043C\u0430\u0440\u0456\u0432", "\u041F\u043E\u0440\u0438\u0432\u0430\u0439", "\u041F\u043E\u0440\u0438\u0432\u0430\u0439\u043B\u043E", "\u041F\u043E\u0442\u0435\u0431\u0435\u043D\u044C\u043A\u043E", "\u041F\u043E\u0442\u043E\u0446\u044C\u043A\u0438\u0439", "\u041F\u0440\u0438\u0433\u043E\u0434\u0430", "\u041F\u0440\u0438\u0439\u043C\u0430\u043A", "\u041F\u0440\u0438\u0442\u0443\u043B\u0430", "\u041F\u0440\u044F\u0434\u0443\u043D", "\u0420\u043E\u0437\u043F\u0443\u0442\u043D\u0456\u0439", "\u0420\u043E\u043C\u0430\u043D\u0438\u0448\u0438\u043D", "\u0420\u043E\u043C\u0430\u043D\u0456\u0432", "\u0420\u043E\u043C\u0435\u0439", "\u0420\u043E\u043C\u0435\u043D\u0435\u0446\u044C", "\u0420\u043E\u043C\u043E\u0447\u043A\u043E", "\u0421\u0430\u0432\u0438\u0446\u044C\u043A\u0438\u0439", "\u0421\u0430\u0454\u043D\u043A\u043E", "\u0421\u0432\u0438\u0434\u0440\u0438\u0433\u0430\u0439\u043B\u043E", "\u0421\u0435\u043C\u0435\u043D\u043E\u0447\u043A\u043E", "\u0421\u0435\u043C\u0435\u0449\u0443\u043A", "\u0421\u0435\u0440\u0434\u044E\u043A", "\u0421\u0438\u043B\u0435\u0446\u044C\u043A\u0438\u0439", "\u0421\u0456\u0434\u043B\u0435\u0446\u044C\u043A\u0438\u0439", "\u0421\u0456\u0434\u043B\u044F\u043A", "\u0421\u0456\u0440\u043A\u043E", "\u0421\u043A\u0438\u0431\u0430", "\u0421\u043A\u043E\u0440\u043E\u043F\u0430\u0434\u0441\u044C\u043A\u0438\u0439", "\u0421\u043B\u043E\u0431\u043E\u0434\u044F\u043D", "\u0421\u043E\u0441\u044E\u0440\u0430", "\u0421\u043F\u043B\u044E\u0445", "\u0421\u043F\u043E\u0442\u0438\u043A\u0430\u0447", "\u0421\u0442\u0430\u0445\u0456\u0432", "\u0421\u0442\u0435\u043F\u0430\u043D\u0435\u0446\u044C", "\u0421\u0442\u0435\u0446\u044C\u043A\u0456\u0432", "\u0421\u0442\u0438\u0433\u0430\u0439\u043B\u043E", "\u0421\u0442\u043E\u0440\u043E\u0436\u0443\u043A", "\u0421\u0442\u043E\u0440\u0447\u0430\u043A", "\u0421\u0442\u043E\u044F\u043D", "\u0421\u0443\u0447\u0430\u043A", "\u0421\u0443\u0448\u043A\u043E", "\u0422\u0430\u0440\u0430\u0441\u044E\u043A", "\u0422\u0438\u043D\u0434\u0430\u0440\u0435\u0439", "\u0422\u043A\u0430\u0447\u0435\u043D\u043A\u043E", "\u0422\u0440\u0435\u0442\u044F\u043A", "\u0422\u0440\u043E\u044F\u043D", "\u0422\u0440\u0443\u0431\u043B\u0430\u0454\u0432\u0441\u044C\u043A\u0438\u0439", "\u0422\u0440\u044F\u0441\u0438\u043B\u043E", "\u0422\u0440\u044F\u0441\u0443\u043D", "\u0423\u043C\u0430\u043D\u0435\u0446\u044C", "\u0423\u043D\u0438\u0447", "\u0423\u0441\u0438\u0447", "\u0424\u0435\u0434\u043E\u0440\u0438\u0448\u0438\u043D", "\u0425\u0438\u0442\u0440\u043E\u0432\u043E", "\u0426\u0438\u043C\u0431\u0430\u043B\u0456\u0441\u0442\u0438\u0439", "\u0426\u0443\u0448\u043A\u043E", "\u0427\u0435\u0440\u0432\u043E\u043D\u0456\u0439", "\u0428\u0430\u043C\u0440\u0438\u043B\u043E", "\u0428\u0435\u0432\u0447\u0435\u043D\u043A\u043E", "\u0428\u0435\u0441\u0442\u0430\u043A", "\u0428\u0438\u043D\u0434\u0430\u0440\u0435\u0439", "\u0428\u0438\u044F\u043D", "\u0428\u043A\u0430\u0440\u0430\u0431\u0430", "\u0428\u0443\u0434\u0440\u0438\u043A", "\u0428\u0443\u043C\u0438\u043B\u043E", "\u0428\u0443\u043F\u0438\u043A", "\u0428\u0443\u0445\u0435\u0432\u0438\u0447", "\u0429\u0435\u0440\u0431\u0430\u043A", "\u042E\u0440\u0447\u0438\u0448\u0438\u043D", "\u042E\u0445\u043D\u043E", "\u042E\u0449\u0438\u043A", "\u042E\u0449\u0443\u043A", "\u042F\u0432\u043E\u0440\u0456\u0432\u0441\u044C\u043A\u0438\u0439", "\u042F\u043B\u043E\u0432\u0438\u0439", "\u042F\u043B\u044E\u043A", "\u042F\u043D\u044E\u043A", "\u042F\u0440\u043C\u0430\u043A", "\u042F\u0446\u0438\u0448\u0438\u043D", "\u042F\u0446\u044C\u043A\u0456\u0432", "\u042F\u0449\u0443\u043A"];
var I4 = ["\u0410\u0434\u0430\u043C\u043E\u0432\u0438\u0447", "\u0410\u0437\u0430\u0440\u043E\u0432\u0438\u0447", "\u0410\u043B\u0435\u0432\u0442\u0438\u043D\u043E\u0432\u0438\u0447", "\u0410\u043B\u044C\u0431\u0435\u0440\u0442\u043E\u0432\u0438\u0447", "\u0410\u043D\u0430\u0441\u0442\u0430\u0441\u043E\u0432\u0438\u0447", "\u0410\u043D\u0430\u0442\u043E\u043B\u0456\u0439\u043E\u0432\u0438\u0447", "\u0410\u043D\u0434\u0440\u0456\u0439\u043E\u0432\u0438\u0447", "\u0410\u043D\u0442\u043E\u043D\u043E\u0432\u0438\u0447", "\u0410\u0440\u043A\u0430\u0434\u0456\u0439\u043E\u0432\u0438\u0447", "\u0410\u0440\u0441\u0435\u043D\u0456\u0439\u043E\u0432\u0438\u0447", "\u0410\u0440\u0441\u0435\u043D\u043E\u0432\u0438\u0447", "\u0410\u0440\u0442\u0435\u043C\u043E\u0432\u0438\u0447", "\u0410\u0440\u0445\u0438\u043F\u043E\u0432\u0438\u0447", "\u0410\u0441\u043A\u043E\u043B\u044C\u0434\u043E\u0432\u0438\u0447", "\u0410\u0444\u0430\u043D\u0430\u0441\u0456\u0439\u043E\u0432\u0438\u0447", "\u0411\u0456\u043B\u043E\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447", "\u0411\u043E\u0433\u0434\u0430\u043D\u043E\u0432\u0438\u0447", "\u0411\u043E\u0436\u0435\u043C\u0438\u0440\u043E\u0432\u0438\u0447", "\u0411\u043E\u0436\u0435\u043D\u043E\u0432\u0438\u0447", "\u0411\u043E\u043B\u0435\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447", "\u0411\u043E\u0440\u0438\u043C\u0438\u0440\u043E\u0432\u0438\u0447", "\u0411\u043E\u0440\u0438\u0441\u043E\u0432\u0438\u0447", "\u0411\u043E\u0440\u0438\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447", "\u0411\u0440\u0430\u0442\u0438\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447", "\u0412\u2019\u044F\u0447\u0435\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447", "\u0412\u0430\u0434\u0438\u043C\u043E\u0432\u0438\u0447", "\u0412\u0430\u043B\u0435\u043D\u0442\u0438\u043D\u043E\u0432\u0438\u0447", "\u0412\u0430\u043B\u0435\u0440\u0456\u0439\u043E\u0432\u0438\u0447", "\u0412\u0430\u0441\u0438\u043B\u044C\u043E\u0432\u0438\u0447", "\u0412\u0456\u043A\u0442\u043E\u0440\u043E\u0432\u0438\u0447", "\u0412\u0456\u0442\u0430\u043B\u0456\u0439\u043E\u0432\u0438\u0447", "\u0412\u043B\u0430\u0434\u0438\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447", "\u0412\u043E\u043B\u043E\u0434\u0438\u043C\u0438\u0440\u043E\u0432\u0438\u0447", "\u0412\u0441\u0435\u0432\u043E\u043B\u043E\u0434\u043E\u0432\u0438\u0447", "\u0412\u0441\u0435\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447", "\u0413\u0430\u0432\u0440\u0438\u043B\u043E\u0432\u0438\u0447", "\u0413\u0435\u0440\u0430\u0441\u0438\u043C\u043E\u0432\u0438\u0447", "\u0413\u0435\u043E\u0440\u0433\u0456\u0439\u043E\u0432\u0438\u0447", "\u0413\u043D\u0430\u0442\u043E\u0432\u0438\u0447", "\u0413\u043E\u0440\u0434\u0456\u0439\u043E\u0432\u0438\u0447", "\u0413\u0440\u0438\u0433\u043E\u0440\u0456\u0439\u043E\u0432\u0438\u0447", "\u0414\u0430\u043D\u0438\u043B\u043E\u0432\u0438\u0447", "\u0414\u0430\u0440\u043E\u043C\u0438\u0440\u043E\u0432\u0438\u0447", "\u0414\u0435\u043D\u0438\u0441\u043E\u0432\u0438\u0447", "\u0414\u043C\u0438\u0442\u0440\u043E\u0432\u0438\u0447", "\u0414\u043E\u0431\u0440\u043E\u043C\u0438\u0440\u043E\u0432\u0438\u0447", "\u0414\u043E\u0431\u0440\u043E\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447", "\u0404\u0432\u0433\u0435\u043D\u043E\u0432\u0438\u0447", "\u0417\u0430\u0445\u0430\u0440\u043E\u0432\u0438\u0447", "\u0417\u0430\u0445\u0430\u0440\u0456\u0439\u043E\u0432\u0438\u0447", "\u0417\u0431\u043E\u0440\u0438\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447", "\u0417\u0432\u0435\u043D\u0438\u043C\u0438\u0440\u043E\u0432\u0438\u0447", "\u0417\u0432\u0435\u043D\u0438\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447", "\u0417\u0435\u043D\u043E\u0432\u0456\u0439\u043E\u0432\u0438\u0447", "\u0417\u0438\u043D\u043E\u0432\u0456\u0439\u043E\u0432\u0438\u0447", "\u0417\u043B\u0430\u0442\u043E\u043C\u0438\u0440\u043E\u0432\u0438\u0447", "\u0417\u043E\u0440\u0435\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447", "\u0406\u0432\u0430\u043D\u043E\u0432\u0438\u0447", "\u0406\u0433\u043E\u0440\u043E\u0432\u0438\u0447", "\u0406\u0437\u044F\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447", "\u041A\u043E\u0440\u043D\u0435\u043B\u0456\u0439\u043E\u0432\u0438\u0447", "\u041A\u043E\u0440\u043D\u0438\u043B\u043E\u0432\u0438\u0447", "\u041A\u043E\u0440\u043D\u0456\u0439\u043E\u0432\u0438\u0447", "\u041A\u043E\u0441\u0442\u044F\u043D\u0442\u0438\u043D\u043E\u0432\u0438\u0447", "\u041B\u0430\u0432\u0440\u0435\u043D\u0442\u0456\u0439\u043E\u0432\u0438\u0447", "\u041B\u044E\u0431\u043E\u043C\u0438\u0440\u043E\u0432\u0438\u0447", "\u041C\u0430\u043A\u0430\u0440\u043E\u0432\u0438\u0447", "\u041C\u0430\u043A\u0441\u0438\u043C\u043E\u0432\u0438\u0447", "\u041C\u0430\u0440\u043A\u043E\u0432\u0438\u0447", "\u041C\u0430\u0440\u043A\u0456\u044F\u043D\u043E\u0432\u0438\u0447", "\u041C\u0430\u0442\u0432\u0456\u0439\u043E\u0432\u0438\u0447", "\u041C\u0435\u0447\u0438\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447", "\u041C\u0438\u043A\u0438\u0442\u043E\u0432\u0438\u0447", "\u041C\u0438\u043A\u043E\u043B\u0430\u0439\u043E\u0432\u0438\u0447", "\u041C\u0438\u0440\u043E\u043D\u043E\u0432\u0438\u0447", "\u041C\u0438\u0440\u043E\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447", "\u041C\u0438\u0445\u0430\u0439\u043B\u043E\u0432\u0438\u0447", "\u041C\u0441\u0442\u0438\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447", "\u041D\u0430\u0437\u0430\u0440\u043E\u0432\u0438\u0447", "\u041D\u0430\u0437\u0430\u0440\u0456\u0439\u043E\u0432\u0438\u0447", "\u041D\u0430\u0442\u0430\u043D\u043E\u0432\u0438\u0447", "\u041D\u0435\u043C\u0438\u0440\u043E\u0432\u0438\u0447", "\u041D\u0435\u0441\u0442\u043E\u0440\u043E\u0432\u0438\u0447", "\u041E\u043B\u0435\u0433\u043E\u0432\u0438\u0447", "\u041E\u043B\u0435\u043A\u0441\u0430\u043D\u0434\u0440\u043E\u0432\u0438\u0447", "\u041E\u043B\u0435\u043A\u0441\u0456\u0439\u043E\u0432\u0438\u0447", "\u041E\u043B\u0435\u043B\u044C\u043A\u043E\u0432\u0438\u0447", "\u041E\u043C\u0435\u043B\u044F\u043D\u043E\u0432\u0438\u0447", "\u041E\u0440\u0435\u0441\u0442\u043E\u0432\u0438\u0447", "\u041E\u0440\u0445\u0438\u043F\u043E\u0432\u0438\u0447", "\u041E\u0441\u0442\u0430\u043F\u043E\u0432\u0438\u0447", "\u041E\u0445\u0440\u0456\u043C\u043E\u0432\u0438\u0447", "\u041F\u0430\u0432\u043B\u043E\u0432\u0438\u0447", "\u041F\u0430\u043D\u0430\u0441\u043E\u0432\u0438\u0447", "\u041F\u0430\u043D\u0442\u0435\u043B\u0435\u0439\u043C\u043E\u043D\u043E\u0432\u0438\u0447", "\u041F\u0435\u0442\u0440\u043E\u0432\u0438\u0447", "\u041F\u0438\u043B\u0438\u043F\u043E\u0432\u0438\u0447", "\u0420\u0430\u0434\u0438\u043C\u0438\u0440\u043E\u0432\u0438\u0447", "\u0420\u0430\u0434\u0438\u043C\u043E\u0432\u0438\u0447", "\u0420\u043E\u0434\u0456\u043E\u043D\u043E\u0432\u0438\u0447", "\u0420\u043E\u043C\u0430\u043D\u043E\u0432\u0438\u0447", "\u0420\u043E\u0441\u0442\u0438\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447", "\u0420\u0443\u0441\u043B\u0430\u043D\u043E\u0432\u0438\u0447", "\u0421\u0432\u044F\u0442\u043E\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447", "\u0421\u0435\u0440\u0433\u0456\u0439\u043E\u0432\u0438\u0447", "\u0421\u043B\u0430\u0432\u0443\u0442\u043E\u0432\u0438\u0447", "\u0421\u0442\u0430\u043D\u0456\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447", "\u0421\u0442\u0435\u043F\u0430\u043D\u043E\u0432\u0438\u0447", "\u0421\u0442\u0435\u0444\u0430\u043D\u043E\u0432\u0438\u0447", "\u0422\u0430\u0440\u0430\u0441\u043E\u0432\u0438\u0447", "\u0422\u0438\u043C\u043E\u0444\u0456\u0439\u043E\u0432\u0438\u0447", "\u0422\u0438\u0445\u043E\u043D\u043E\u0432\u0438\u0447", "\u0423\u0441\u0442\u0438\u043C\u043E\u0432\u0438\u0447", "\u042E\u0440\u0456\u0439\u043E\u0432\u0438\u0447", "\u042E\u0445\u0438\u043C\u043E\u0432\u0438\u0447", "\u042F\u0440\u043E\u0441\u043B\u0430\u0432\u043E\u0432\u0438\u0447"];
var L5 = ["{{name.male_first_name}} {{name.male_last_name}}", "{{name.male_last_name}} {{name.male_first_name}}", "{{name.male_first_name}} {{name.male_middle_name}} {{name.male_last_name}}", "{{name.male_last_name}} {{name.male_first_name}} {{name.male_middle_name}}", "{{name.female_first_name}} {{name.female_last_name}}", "{{name.female_last_name}} {{name.female_first_name}}", "{{name.female_first_name}} {{name.female_middle_name}} {{name.female_last_name}}", "{{name.female_last_name}} {{name.female_first_name}} {{name.female_middle_name}}"];
var P5 = ["\u041F\u0430\u043D", "\u041F\u0430\u043D\u0456"];
var j4 = ["\u043F\u0440\u043E\u0444.", "\u0434\u043E\u0446.", "\u0434\u043E\u043A\u0442. \u043F\u0435\u0434. \u043D\u0430\u0443\u043A", "\u0434\u043E\u043A\u0442. \u043F\u043E\u043B\u0456\u0442. \u043D\u0430\u0443\u043A", "\u0434\u043E\u043A\u0442. \u0444\u0456\u043B\u043E\u043B. \u043D\u0430\u0443\u043A", "\u0434\u043E\u043A\u0442. \u0444\u0456\u043B\u043E\u0441. \u043D\u0430\u0443\u043A", "\u0434\u043E\u043A\u0442. \u0456. \u043D\u0430\u0443\u043A", "\u0434\u043E\u043A\u0442. \u044E\u0440\u0438\u0434. \u043D\u0430\u0443\u043A", "\u0434\u043E\u043A\u0442. \u0442\u0435\u0445\u043D. \u043D\u0430\u0443\u043A", "\u0434\u043E\u043A\u0442. \u043F\u0441\u0438\u0445\u043E\u043B. \u043D\u0430\u0443\u043A", "\u043A\u0430\u043D\u0434. \u043F\u0435\u0434. \u043D\u0430\u0443\u043A", "\u043A\u0430\u043D\u0434. \u043F\u043E\u043B\u0456\u0442. \u043D\u0430\u0443\u043A", "\u043A\u0430\u043D\u0434. \u0444\u0456\u043B\u043E\u043B. \u043D\u0430\u0443\u043A", "\u043A\u0430\u043D\u0434. \u0444\u0456\u043B\u043E\u0441. \u043D\u0430\u0443\u043A", "\u043A\u0430\u043D\u0434. \u0456. \u043D\u0430\u0443\u043A", "\u043A\u0430\u043D\u0434. \u044E\u0440\u0438\u0434. \u043D\u0430\u0443\u043A", "\u043A\u0430\u043D\u0434. \u0442\u0435\u0445\u043D. \u043D\u0430\u0443\u043A", "\u043A\u0430\u043D\u0434. \u043F\u0441\u0438\u0445\u043E\u043B. \u043D\u0430\u0443\u043A"];
var U3 = { descriptor: ["\u0413\u043E\u043B\u043E\u0432\u043D\u0438\u0439", "\u0413\u0435\u043D\u0435\u0440\u0430\u043B\u044C\u043D\u0438\u0439", "\u041F\u0440\u043E\u0432\u0456\u0434\u043D\u0438\u0439", "\u041D\u0430\u0446\u0456\u043E\u043D\u0430\u043B\u044C\u043D\u0438\u0439", "\u0420\u0435\u0433\u0456\u043E\u043D\u0430\u043B\u044C\u043D\u0438\u0439", "\u041E\u0431\u043B\u0430\u0441\u043D\u0438\u0439", "\u0420\u0430\u0439\u043E\u043D\u043D\u0438\u0439", "\u0413\u043B\u043E\u0431\u0430\u043B\u044C\u043D\u0438\u0439", "\u041C\u0456\u0436\u043D\u0430\u0440\u043E\u0434\u043D\u0438\u0439", "\u0426\u0435\u043D\u0442\u0440\u0430\u043B\u044C\u043D\u0438\u0439"], level: ["\u043C\u0430\u0440\u043A\u0435\u0442\u0438\u043D\u0433\u043E\u0432\u0438\u0439", "\u043E\u043F\u0442\u0438\u043C\u0456\u0437\u0430\u0446\u0456\u0439\u043D\u0438\u0439", "\u0441\u0442\u0440\u0430\u0445\u043E\u0432\u0438\u0439", "\u0444\u0443\u043D\u043A\u0446\u0456\u043E\u043D\u0430\u043B\u044C\u043D\u0438\u0439", "\u0456\u043D\u0442\u0435\u0433\u0440\u0430\u0446\u0456\u0439\u043D\u0438\u0439", "\u043B\u043E\u0433\u0456\u0441\u0442\u0438\u0447\u043D\u0438\u0439"], job: ["\u0456\u043D\u0436\u0435\u043D\u0435\u0440", "\u0430\u0433\u0435\u043D\u0442", "\u0430\u0434\u043C\u0456\u043D\u0456\u0441\u0442\u0440\u0430\u0442\u043E\u0440", "\u0430\u043D\u0430\u043B\u0456\u0442\u0438\u043A", "\u0430\u0440\u0445\u0456\u0442\u0435\u043A\u0442\u043E\u0440", "\u0434\u0438\u0437\u0430\u0439\u043D\u0435\u0440", "\u043A\u0435\u0440\u0456\u0432\u043D\u0438\u043A", "\u043A\u043E\u043D\u0441\u0443\u043B\u044C\u0442\u0430\u043D\u0442", "\u043A\u043E\u043E\u0440\u0434\u0438\u043D\u0430\u0442\u043E\u0440", "\u043C\u0435\u043D\u0435\u0434\u0436\u0435\u0440", "\u043F\u043B\u0430\u043D\u0443\u0432\u0430\u043B\u044C\u043D\u0438\u043A", "\u043F\u043E\u043C\u0456\u0447\u043D\u0438\u043A", "\u0440\u043E\u0437\u0440\u043E\u0431\u043D\u0438\u043A", "\u0441\u043F\u0435\u0446\u0456\u0430\u043B\u0456\u0441\u0442", "\u0441\u043F\u0456\u0432\u0440\u043E\u0431\u0456\u0442\u043D\u0438\u043A", "\u0442\u0435\u0445\u043D\u0456\u043A"] };
var H5 = { female_first_name: g6, female_last_name: z6, female_middle_name: N7, male_first_name: A5, male_last_name: C5, male_middle_name: I4, name: L5, prefix: P5, suffix: j4, title: U3 };
var q3 = H5;
var w5 = ["(044) ###-##-##", "(050) ###-##-##", "(063) ###-##-##", "(066) ###-##-##", "(073) ###-##-##", "(091) ###-##-##", "(092) ###-##-##", "(093) ###-##-##", "(094) ###-##-##", "(095) ###-##-##", "(096) ###-##-##", "(097) ###-##-##", "(098) ###-##-##", "(099) ###-##-##"];
var J4 = { formats: w5 };
var B5 = J4;
var K5 = { title: "Ukrainian", address: x6, company: v5, internet: D6, name: q3, phone_number: B5 };
var ia = K5;

// ../../node_modules/@faker-js/faker/dist/esm/chunk-4WRXY4YA.mjs
init_esm_shims();
var e8 = ["#####", "####", "###"];
var t8 = ["{{address.city_prefix}} {{name.first_name}}{{address.city_suffix}}", "{{address.city_prefix}} {{name.first_name}}", "{{name.first_name}}{{address.city_suffix}}", "{{name.last_name}}{{address.city_suffix}}"];
var r8 = ["\u0627\u0633\u0644\u0627\u0645 \u0627\u0653\u0628\u0627\u062F", "\u067E\u0634\u0627\u0648\u0631", "\u0644\u0627\u06C1\u0648\u0631", "\u06A9\u0631\u0627\u0686\u06CC", "\u0645\u0644\u062A\u0627\u0646", "\u0646\u0648\u0634\u06C1\u0631\u06C1", "\u0645\u0631\u062F\u0627\u0646", "\u0686\u0627\u0631\u0633\u062F\u06C1", "\u06AF\u0648\u062C\u0631\u0646\u0648\u0627\u0644\u06C1", "\u06AF\u062C\u0631\u0627\u062A", "\u0645\u0646\u06AF\u0648\u0631\u06C1", "\u0645\u0644\u0627\u06A9\u0646\u0688", "\u062F\u0631\u06AF\u06CC\u0657", "\u062D\u06CC\u062F\u0631\u0627\u0653\u0628\u0627\u062F", "\u0627\u06CC\u0628\u0679 \u0627\u0653\u0628\u0627\u062F", "\u0646\u0627\u0631\u0627\u0646", "\u0641\u06CC\u0635\u0644 \u0627\u0653\u0628\u0627\u062F", "\u0631\u0627\u0648\u0644\u067E\u0646\u0688\u06CC", "\u06A9\u0648\u0626\u0679\u06C1", "\u0628\u06C1\u0627\u0648\u0644\u067E\u0648\u0631", "\u0633\u06CC\u0627\u0644\u06A9\u0648\u0679", "\u0644\u0627\u0691\u06A9\u0627\u0646\u06C1", "\u0631\u062D\u06CC\u0645 \u06CC\u0627\u0631 \u062E\u0627\u0646", "\u0642\u0635\u064F\u0648\u0631", "\u0627\u0648\u06A9\u0627\u0691\u0627\u200E", "\u0646\u0648\u0627\u0628 \u0634\u0627\u06C1", "\u0686\u0646\u06CC\u0648\u0679", "\u062D\u0627\u0641\u0638 \u0627\u0653\u0628\u0627\u062F", "\u06A9\u0648\u06BE\u0627\u0679", "\u062C\u06C1\u0644\u0645", "\u0648\u0627\u0631\u0633\u06A9", "\u062E\u0627\u0646\u067E\u0648\u0631", "\u062D\u0628", "\u062F\u0633\u06A9\u06C1", "\u062E\u0632\u062F\u0627\u0631", "\u0645\u0631\u06CC", "\u06AF\u0648\u062C\u0631\u06C1", "\u062F\u0627\u062F\u0648", "\u0686\u0634\u062A\u06CC\u0627\u06BA", "\u0679\u06CC\u06A9\u0633\u0644\u0627", "\u06A9\u0628\u0644", "\u06AF\u0648\u0679\u06A9\u06CC", "\u0646\u0627\u0631\u0648 \u0648\u0627\u0644", "\u06AF\u0648\u0627\u062F\u0631"];
var o8 = ["\u0645\u0634\u0631\u0642", "\u0645\u063A\u0631\u0628", "\u0634\u0645\u0627\u0644", "\u062C\u0646\u0648\u0628", "\u0646\u06CC\u0627", "\u062C\u06BE\u06CC\u0644", "\u0628\u0646\u062F\u0631\u06AF\u0627\u06C1"];
var i8 = ["\u0679\u0627\u0648\u0652\u0646"];
var m8 = ["\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646", "\u0627\u0644\u0628\u0627\u0646\u06CC\u0627", "\u0627\u0644\u062C\u0632\u0627\u06CC\u0631", "\u0627\u0645\u0631\u06CC\u06A9\u06CC \u0633\u0645\u0648\u0627", "\u0627\u0646\u062F\u0648\u0631\u06C1", "\u0627\u0646\u06AF\u0648\u0644\u0627", "\u0627\u0646\u06AF\u0648\u06CC\u0644\u06CC\u0627", "\u0627\u0646\u062A\u0627\u0631\u062A\u06CC\u06A9\u0627", "\u0627\u0646\u062A\u06CC\u06AF\u0627 \u0627\u0648\u0631 \u0628\u0627\u0631\u0628\u0626\u062F\u0627", "\u0627\u0631\u062C\u0646\u0679\u0627\u06CC\u0646\u0627", "\u0627\u0631\u0645\u06CC\u0646\u06CC\u0627", "\u0627\u0631\u0648\u0628\u0627", "\u0627\u0653\u0633\u0679\u0631\u06CC\u0644\u06CC\u0644\u0627", "\u0627\u0653\u0633\u0679\u0631\u06CC\u0627", "\u0627\u0653\u0632\u0631\u0628\u0627\u06CC\u062C\u0627\u0646", "\u0628\u06C1\u0627\u0645\u0633", "\u0628\u06C1\u0631\u06CC\u0646", "\u0628\u0646\u06AF\u0644\u06C1 \u062F\u06CC\u0634", "\u0628\u0627\u0631\u0628\u0627\u062F\u0648\u0633", "\u0628\u06CC\u0644\u0627\u0631\u0648\u0633", "\u0628\u06CC\u0644\u062C\u06CC\u0645", "\u0628\u06CC\u0644\u06CC\u0632", "\u0628\u06CC\u0646\u0646", "\u0628\u0631\u0645\u0648\u062F\u06C1", "\u0628\u06BE\u0648\u0679\u0627\u0646", "\u0628\u0648\u0644\u0648\u06CC\u0627", "\u0628\u0648\u0633\u0646\u06CC\u0627 \u0648 \u06C1\u0631\u0632\u06AF\u0648\u0648\u06CC\u0646\u06CC\u0627", "\u0628\u0648\u0633\u0679\u0648\u0627\u0646\u0627", "\u0628\u0631\u0627\u0632\u06CC\u0644", "\u0628\u0631\u0648\u0646\u0648\u0626 \u062F\u0627\u0631\u0627\u0633\u0644\u0627\u0645", "\u0628\u0644\u063A\u0627\u0631\u06CC\u06C1", "\u0628\u0631\u0648\u0646\u0688\u06CC", "\u06A9\u0645\u0628\u0648\u0688\u06CC\u0627", "\u06A9\u0645\u0631\u0648\u06CC\u0646", "\u06A9\u06CC\u0646\u06CC\u0688\u0627", "\u0633\u06CC\u0646\u0679\u0631\u0644 \u0627\u0641\u0631\u06CC\u0642\u06CC \u0631\u06CC\u0627\u0633\u062A", "\u0686\u0627\u0688", "\u0686\u0644\u06D2", "\u0686\u0627\u0626\u0646\u0627", "\u06A9\u0648\u0644\u0645\u0628\u06CC\u0627", "\u06A9\u0648\u0645\u0648\u0631\u0633", "\u06A9\u0627\u0646\u06AF\u0648", "\u06A9\u0648\u0633\u0679\u0627 \u0631\u06CC\u06A9\u0627", "\u06A9\u0631\u0648\u0627\u06CC\u0634\u06CC\u0627", "\u06A9\u0648\u0628\u0627", "\u0686\u06A9 \u0631\u06CC\u0627\u0633\u062A", "\u0688\u06CC\u0646\u0645\u0627\u0631\u06A9", "\u062C\u0628\u0648\u062A\u06CC", "\u0688\u0648\u0645\u06CC\u0646\u06A9 \u0631\u06CC\u0627\u0633\u062A", "\u0627\u06A9\u0648\u0627\u0688\u0648\u0631", "\u0645\u0635\u0631", "\u0627\u0644 \u0633\u0644\u0648\u0627\u062F\u0648\u0631", "\u0627\u06CC\u0631\u0679\u0631\u06CC\u0627", "\u0627\u0633\u062A\u0648\u0646\u06CC\u0627", "\u0627\u062A\u06BE\u0648\u067E\u06CC\u0627", "\u0641\u06CC \u062C\u06CC", "\u0641\u0646 \u0644\u06CC\u0646\u0688", "\u0641\u0631\u0627\u0646\u0633", "\u06AF\u0627\u0628\u0648\u0646", "\u06AF\u0627\u0645\u0628\u06CC\u06C1", "\u062C\u06CC\u0648\u0631\u062C\u06CC\u06C1", "\u062C\u0631\u0645\u0646\u06CC", "\u06AF\u0627\u0646\u0627", "\u062C\u0628\u0631\u0627\u0644\u0679\u0631", "\u06CC\u0648\u0646\u0627\u0646", "\u06AF\u0627\u0645", "\u0648\u0627\u062A\u06CC\u06A9\u0646", "\u06C1\u0648\u0646\u0688\u0648\u0631\u0633", "\u06C1\u0627\u0646\u06AF \u06A9\u0627\u0646\u06AF", "\u06C1\u0646\u06AF\u0631\u06CC", "\u0628\u06BE\u0627\u0631\u062A", "\u0627\u0646\u0688\u0648\u0646\u06CC\u0634\u06CC\u0627", "\u0627\u06CC\u0631\u0627\u0646", "\u0639\u0631\u0627\u0642", "\u0627\u0653\u0626\u0631 \u0644\u06CC\u0646\u0688", "\u0627\u0679\u0644\u06CC", "\u062C\u0645\u0627\u0626\u06A9\u06C1", "\u062C\u0627\u067E\u0627\u0646", "\u0627\u0652\u0631\u062F\u0646", "\u06A9\u0627\u0632\u062E\u0633\u062A\u0627\u0646", "\u06A9\u06CC\u0646\u06CC\u0627", "\u06A9\u0631\u06CC\u0628\u0627\u062A\u06CC", "\u0634\u0645\u0627\u0644\u06CC \u0631\u06CC\u0627\u0633\u062A \u06A9\u0648\u0631\u06CC\u0627", "\u062C\u0646\u0648\u0628\u06CC \u0631\u06CC\u0627\u0633\u062A \u06A9\u0648\u0631\u06CC\u0627", "\u06A9\u0648\u06CC\u062A", "\u0644\u0628\u0646\u0627\u0646", "\u0645\u0633\u06CC\u0688\u0648\u0646", "\u0645\u062F\u06AF\u0627\u0633\u06A9\u0631", "\u0645\u0644\u0627\u0648\u06CC", "\u0645\u0644\u0627\u0626\u0634\u06CC\u0627", "\u0645\u0627\u0644\u062F\u06CC\u067E", "\u0645\u0627\u0644\u06CC", "\u0645\u0627\u0644\u0679\u0627", "\u0645\u06CC\u06A9\u0633\u06CC\u06A9\u0648", "\u0645\u0646\u06AF\u0648\u0644\u06CC\u06C1", "\u0645\u0631\u0627\u06A9\u0698", "\u0645\u06CC\u0627\u0646\u0645\u0627\u0631", "\u0646\u06CC\u067E\u0627\u0644", "\u0646\u06CC\u062F\u0631\u0644\u06CC\u0646\u0688", "\u0646\u06CC\u0648\u0632\u06CC\u0644\u06CC\u0646\u0688", "\u0646\u06CC\u06A9\u0627\u0631\u0627\u06AF\u0648\u0627", "\u0646\u0627\u0626\u062C\u0631", "\u0646\u06CC\u06CC\u062C\u06CC\u0631\u06CC\u0627", "\u0646\u0627\u0631\u0648\u06D2", "\u0627\u0648\u0645\u0627\u0646", "\u0627\u0633\u0644\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u067E\u0627\u06A9\u0633\u062A\u0627\u0646", "\u067E\u0644\u0627\u0648\u0611", "\u0641\u0644\u0633\u0637\u06CC\u0646", "\u067E\u0627\u0646\u0627\u0645\u0627", "\u067E\u0631\u0648", "\u0641\u0644\u067E\u0627\u0626\u0646", "\u067E\u0648\u0644\u06CC\u0646\u0688", "\u067E\u0631\u062A\u06AF\u0627\u0644", "\u067E\u0648\u0631\u062A\u0648 \u0631\u06CC\u06A9\u0648", "\u0642\u0637\u0631", "\u0631\u0648\u0645\u0627\u0646\u06CC\u06C1", "\u0631\u0648\u0633", "\u0631\u0648\u0627\u0646\u0688\u0627", "\u0633\u0645\u0648\u06C1", "\u0633\u0627\u0646 \u0645\u0631\u06CC\u0646\u0648", "\u0633\u0639\u0648\u062F\u06CC\u06C1 \u0639\u0631\u0628\u06CC\u06C1", "\u0633\u0646\u06CC\u06AF\u0627\u0644", "\u0633\u0631\u0628\u06CC\u0627", "\u0633\u06D2 \u0634\u06CC\u0644", "\u0633\u0646\u06AF\u0627\u067E\u0648\u0631", "\u0633\u0648\u0645\u0627\u0644\u06CC\u06C1", "\u062C\u0646\u0648\u0628\u06CC \u0627\u0641\u0631\u0642\u06C1", "\u06C1\u0633\u067E\u0627\u0646\u06CC\u06C1", "\u0633\u0631\u06CC \u0644\u0646\u06A9\u0627", "\u0633\u0648\u0688\u0627\u0646", "\u0633\u0631\u06CC \u0646\u0627\u0645\u067E", "\u0633\u0648\u0627\u0632\u06CC \u0644\u06CC\u0646\u0688", "\u0633\u0648\u06CC\u0688\u0646", "\u0633\u0648\u0679\u0632\u0631\u0644\u06CC\u0646\u0688", "\u0634\u0627\u0645", "\u062A\u0627\u0626\u0648\u0627\u0646", "\u062A\u0627\u062C\u06A9\u0633\u062A\u0627\u0646", "\u062A\u0646\u0632\u0627\u0646\u06CC\u06C1", "\u062A\u06BE\u0627\u0626 \u0644\u06CC\u0646\u0688", "\u0679\u0648\u06AF\u0648", "\u0679\u0648\u0646\u06AF\u0627", "\u0679\u0648\u0646\u06CC\u0633\u06CC\u0627", "\u062A\u0631\u06A9\u06CC", "\u062A\u0631\u06A9\u0645\u0627\u0646\u0633\u062A\u0627\u0646", "\u06CC\u0648\u06AF\u0627\u0646\u0688\u0627", "\u06CC\u0648\u06A9\u0631\u06CC\u0646", "\u0645\u062A\u062D\u062F\u06C1 \u0639\u0631\u0628 \u0627\u0645\u0627\u0631\u0627\u062A", "\u0645\u062A\u062D\u062F\u06C1 \u0633\u0644\u0637\u0646\u062A", "\u0645\u062A\u062D\u062F\u06C1 \u0631\u06CC\u0627\u0633\u062A \u0627\u0645\u0631\u06CC\u06A9\u0627", "\u06CC\u0648\u0631\u0627\u06AF\u0648\u0627\u0626\u06D2", "\u0627\u0652\u0632\u0628\u06A9\u0633\u062A\u0627\u0646", "\u0648\u0646\u06CC\u0632\u0648\u06CC\u0644\u0627", "\u0648\u062A\u0646\u0627\u0645", "\u06CC\u0645\u0646", "\u0632\u0645\u0628\u06CC\u0627", "\u0632\u0645\u0628\u0627\u0628\u0648\u06D2"];
var a8 = ["\u0627\u0633\u0644\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u067E\u0627\u06A9\u0633\u062A\u0627\u0646"];
var f8 = ["\u0634\u0645\u0627\u0644", "\u0645\u0634\u0631\u0642", "\u062C\u0646\u0648\u0628", "\u0645\u063A\u0631\u0628", "\u0634\u0645\u0627\u0644 \u0645\u0634\u0631\u0642", "\u0633\u0645\u0627\u0644 \u0645\u063A\u0631\u0628", "\u062C\u0646\u0648\u0628 \u0645\u0634\u0631\u0642", "\u062C\u0646\u0648\u0628 \u0645\u063A\u0631\u0628"];
var p8 = ["#####"];
var n8 = ["\u06AF\u06BE\u0631. ###", "\u06AF\u0644\u06CC ###"];
var s8 = ["\u062E\u06CC\u0628\u0631 \u067E\u062E\u062A\u0648\u0646\u062E\u0648\u0627\u06C1", "\u0627\u0633\u0644\u0627\u0645 \u0627\u0653\u0628\u0627\u062F", "\u067E\u0646\u062C\u0627\u0628", "\u0633\u0646\u062F\u06BE", "\u0627\u0653\u0632\u0627\u062F \u06A9\u0634\u0645\u06CC\u0631", "\u0628\u0644\u0648\u0686\u0633\u062A\u0627\u0646", "\u06AF\u0644\u06AF\u062A \u0628\u0644\u062A\u0633\u062A\u0627\u0646"];
var d8 = ["KP", "ICT", "J&K", "GB", "PB", "SD", "BA"];
var l8 = ["{{name.first_name}} {{address.street_suffix}}", "{{name.last_name}} {{address.street_suffix}}"];
var u8 = { normal: "{{address.buildingNumber}} {{address.street}}", full: "{{address.buildingNumber}} {{address.street}} {{address.secondaryAddress}}" };
var x7 = ["\u06AF\u0627\u0648\u0652\u06BA", "\u06AF\u0644\u06CC", "\u0627\u0653\u0628\u0627\u062F", "\u06A9\u0627\u0644\u0648\u0646\u06CC", "\u06AF\u06BE\u0691\u06CC"];
var le = { building_number: e8, city: t8, city_name: r8, city_prefix: o8, city_suffix: i8, country: m8, default_country: a8, direction: f8, postcode: p8, secondary_address: n8, state: s8, state_abbr: d8, street: l8, street_address: u8, street_suffix: x7 };
var c8 = le;
var _7 = ["\u067E\u0627\u0646\u0688\u0627", "\u0628\u06BE\u0627\u0644\u0648", "\u0627\u0645\u0631\u06CC\u06A9\u06CC \u06A9\u0627\u0644\u0627 \u0628\u06BE\u0627\u0644\u0648", "\u0627\u06CC\u0634\u06CC\u0627\u06CC\u0670 \u06A9\u0627\u0644\u0627 \u0628\u06BE\u0627\u0644\u0648", "\u0628\u06BE\u0648\u0631\u0627 \u0628\u06BE\u0627\u0644\u0648"];
var y8 = ["\u06AF\u0627\u0626\u06D2", "\u0646\u06CC\u0644\u06CC \u06AF\u0627\u0657\u06CC\u06D2", "\u0627\u0645\u0631\u06CC\u06A9\u06CC \u06AF\u0627\u0657\u06CC\u06D2"];
var D7 = ["\u0627\u0645\u0631\u06CC\u06A9\u06CC \u06AF\u0691\u06CC\u0627\u0644", "\u0627\u0653\u0633\u0679\u0631\u06CC\u0644\u06CC\u0627\u0626 \u062A\u0627\u0632\u06C1 \u067E\u0627\u0646\u06CC \u06A9\u0627 \u06AF\u0691\u06CC\u0627\u0644", "\u0646\u06CC\u0644 \u06AF\u0691\u06CC\u0627\u0644", "\u0645\u0634\u0631\u0642\u06CC \u0627\u0641\u0631\u06CC\u0642\u06CC \u06AF\u0691\u06CC\u0627\u0644", "\u0646\u0645\u06A9\u06CC\u0646 \u067E\u0627\u0646\u06CC \u06A9\u0627 \u06AF\u0691\u06CC\u0627\u0644", "\u06AF\u0691\u06CC\u0627\u0644"];
var b8 = ["\u0634\u06C1\u062F \u06A9\u06CC \u0645\u06A9\u06BE\u06CC", "\u0645\u06A9\u06BE\u06CC", "\u0686\u06CC\u0648\u0646\u0679\u06CC"];
var h8 = ["\u0627\u06CC\u0634\u06CC\u0627\u06CC\u0652 \u0634\u06CC\u0631", "\u0645\u0634\u0631\u0642\u06CC \u0627\u0641\u0631\u06CC\u0642\u06CC \u0634\u06CC\u0631", "\u0634\u0645\u0627\u0644\u06CC \u0645\u063A\u0631\u0628\u06CC \u06A9\u0627\u0646\u06AF\u0648 \u06A9\u0627 \u0634\u06CC\u0631"];
var w6 = ["bear", "lion", "insect", "crocodilia", "cow"];
var ue2 = { bear: _7, cow: y8, crocodilia: D7, insect: b8, lion: h8, type: w6 };
var v6 = ue2;
var A6 = ["{{name.name}}", "{{company.name}}"];
var C6 = ["\u0627\u0648\u0642\u0627\u062A \u0646\u0645\u0627\u0632", "\u0642\u0633\u0637 \u062D\u0633\u0627\u0628", "\u0646\u0642\u0634\u06C1 \u0646\u06AF\u0627\u0631", "\u062F\u0628\u06CC\u0657 \u0648\u0642\u062A", "\u0688\u0627\u0644\u0631 \u0631\u067E\u06CC\u06C1", "\u062F\u0631\u0627\u0632", "\u067E\u0627\u06A9 \u0648\u06BE\u06CC\u0644\u0632", "\u0648\u0627\u0679\u0633 \u0627\u06CC\u067E"];
var N8 = ["0.#.#", "0.##", "#.##", "#.#", "#.#.#"];
var xe = { author: A6, name: C6, version: N8 };
var g7 = xe;
var E5 = ["visa", "mastercard", "link one", "paypak"];
var ce = { credit_card_types: E5 };
var L6 = ce;
var k7 = ["+92 ###-###-####", "03## ### ####", "03#########"];
var _e = { formats: k7 };
var B6 = _e;
var T5 = ["\u0633\u0631\u062E", "\u06C1\u0631\u0627", "\u0646\u06CC\u0644\u0627", "\u067E\u06CC\u0644\u0627", "\u06C1\u0644\u06A9\u0627 \u06C1\u0631\u0627", "\u0633\u0641\u06C1\u062F", "\u06A9\u0627\u0644\u0627", "\u0646\u0627\u0631\u0646\u062C\u06CC", "\u067E\u06CC\u06A9\u0627", "\u0645\u06C1\u0646\u062F\u06CC", "\u0627\u0653\u0633\u0645\u0627\u0646\u06CC", "\u0633\u0646\u06C1\u0631\u06CC", "\u0686\u0627\u0646\u062F\u0646\u06CC"];
var ye = { human: T5 };
var F6 = ye;
var K6 = ["\u06A9\u062A\u0627\u0628\u06CC\u06C1", "\u0641\u0644\u0645", "\u06AF\u0627\u0646\u06CC", "\u06A9\u06BE\u06CC\u0644", "\u0628\u062C\u0644\u06CC", "\u06A9\u0645\u067E\u06CC\u0648\u0679\u0631", "\u06AF\u06BE\u0631", "\u0628\u0627\u063A", "\u0627\u0648\u0632\u0627\u0631", "\u0627\u0634\u06CC\u0627\u0621", "\u0635\u062D\u0631", "\u062E\u0648\u0628\u0635\u0648\u0631\u062A\u06CC", "\u06A9\u06BE\u0644\u0648\u0646\u06C1", "\u0628\u0686\u06D2", "\u06A9\u067E\u0691\u06D2", "\u062C\u0648\u062A\u06D2", "\u06AF\u0627\u0691\u06CC\u0627\u06BA", "\u06A9\u0627\u0631\u063A\u0627\u0646\u06D2"];
var M6 = { adjective: ["\u0686\u06BE\u0648\u0679\u0627", "\u0627\u0653\u0631\u0627\u0645\u062F\u06C1", "\u06C1\u0648\u0634\u06CC\u0627\u0631", "\u062E\u0648\u0628\u0635\u0648\u0631\u062A", "\u0628\u06CC\u062A\u0631\u06CC\u0646"], material: ["\u0644\u0648\u06C1\u0627", "\u0644\u06A9\u0691\u06C1", "\u06A9\u0646\u06A9\u0631\u06CC\u0679", "\u067E\u0644\u0627\u0633\u0679\u06A9", "\u0631\u0648\u06CC\u0670", "\u06AF\u0631\u0627\u0646\u0627\u06CC\u0679", "\u0631\u0628\u0691", "\u062F\u06BE\u0627\u062A", "\u0646\u0631\u0645", "\u062A\u0627\u0632\u06C1", "\u062C\u0645 \u0634\u062F\u06C1"], product: ["\u06A9\u0631\u0633\u06C1", "\u06AF\u0627\u0691\u06CC", "\u06A9\u0645\u067E\u06CC\u0648\u0679\u0631", "\u06A9\u06CC \u0628\u0648\u0631\u0688", "\u0645\u0627\u0648\u0670\u0633", "\u0628\u0627\u06CC\u0670\u06A9", "\u0628\u0627\u0644", "\u062F\u0633\u062A\u0627\u0646\u06D2", "\u067E\u062A\u0644\u0648\u0646", "\u0642\u0645\u06CC\u0635", "\u0645\u06CC\u0632", "\u062C\u0648\u062A\u06D2", "\u0679\u0648\u067E\u06CC", "\u062A\u0648\u0644\u06CC\u06C1", "\u0635\u0627\u0628\u0646", "\u0645\u0686\u06BE\u0644\u06CC", "\u0645\u0631\u063A", "\u067E\u0646\u06CC\u0631", "\u0633\u0644\u0627\u062F", "\u0633\u06CC\u062E \u06A9\u0628\u0627\u0628", "\u067E\u0627\u067E\u0691"] };
var De = { department: K6, product_name: M6 };
var P6 = De;
var S6 = { wide: ["\u062C\u0646\u0648\u0631\u06CC", "\u0641\u0631\u0648\u0631\u06CC", "\u0645\u0627\u0631\u0686", "\u0627\u067E\u0631\u06CC\u0644", "\u0645\u0626", "\u062C\u0648\u0646", "\u062C\u0648\u0644\u0627\u0626", "\u0627\u06AF\u0633\u062A", "\u0633\u062A\u0645\u0628\u0631", "\u0627\u06A9\u062A\u0648\u0628\u0631", "\u0646\u0648\u0645\u0628\u0631", "\u062F\u0633\u0645\u0628\u0631"], wide_context: ["\u062C\u0646\u0648\u0631\u06CC", "\u0641\u0631\u0648\u0631\u06CC", "\u0645\u0627\u0631\u0686", "\u0627\u067E\u0631\u06CC\u0644", "\u0645\u0626", "\u062C\u0648\u0646", "\u062C\u0648\u0644\u0627\u0626", "\u0627\u06AF\u0633\u062A", "\u0633\u062A\u0645\u0628\u0631", "\u0627\u06A9\u062A\u0648\u0628\u0631", "\u0646\u0648\u0645\u0628\u0631", "\u062F\u0633\u0645\u0628\u0631"] };
var V4 = { wide: ["\u0627\u062A\u0648\u0631", "\u067E\u06CC\u0631", "\u0645\u0646\u06AF\u0644", "\u0628\u062F\u06BE", "\u062C\u0645\u0639\u0631\u0627\u062A", "\u062C\u0645\u0639\u06C1", "\u06C1\u0641\u062A\u06C1"], wide_context: ["\u0627\u062A\u0648\u0631", "\u067E\u06CC\u0631", "\u0645\u0646\u06AF\u0644", "\u0628\u062F\u06BE", "\u062C\u0645\u0639\u0631\u0627\u062A", "\u062C\u0645\u0639\u06C1", "\u06C1\u0641\u062A\u06C1"] };
var be = { month: S6, weekday: V4 };
var j5 = be;
var G6 = ["Savings", "Current"];
var I5 = ["deposit", "withdrawal", "payment", "invoice"];
var he = { account_type: G6, transaction_type: I5 };
var J5 = he;
var U4 = ["\u0633\u06AF", "\u062F\u06AF\u0627\u0633", "\u0633\u0627\u062F", "\u062F\u0633\u06BE\u0627", "\u0628\u0627\u0633", "\u0646\u0627\u0646", "\u0627\u0646\u0628", "\u0627\u0628\u0633", "\u0627\u062F\u0633\u06AF", "\u0627\u0628\u0646\u0633\u062F", "\u0633\u0641\u062F", "\u062F\u0641", "\u0628\u0633", "\u0628\u0627\u0633\u062F\u0628", "\u0628\u0627\u0633\u062F\u0628\u0627", "\u0631\u0639\u0627\u0628\u06BE", "\u0627\u0628\u0633\u062F", "\u0633\u0628", "\u0637", "\u0627\u0633\u062F\u0628\u06AF", "\u0627\u0633\u062F\u06AF", "\u0627\u06BE\u06AF\u0633\u062F", "\u0633\u062F\u06AF", "\u0627\u0633\u06AF", "\u0634\u0628\u0686", "\u0639\u0648", "\u0633\u062F\u0628\u06AF\u0627", "\u0627\u0633\u0628\u062F", "\u0633\u0627\u0628", "\u0633\u062F\u0628", "\u0633\u0628\u0627", "\u0628\u0627\u0633\u062F", "\u062F\u0633\u0628", "\u0637\u0633\u062F", "\u0686\u0633\u062F", "\u0627\u0633\u062F\u0627\u0633\u062F\u06BE\u062F\u0633\u0628\u0627\u0628\u06AF", "\u0633\u0628\u0627\u062F\u0641\u06BE\u0646\u0627\u0633\u062F\u06BE", "\u0628\u0627\u0633\u062F\u0628\u0627\u0633\u062F\u0641\u0646\u0628\u0627\u0633\u062F", "\u0627\u0628\u0633\u0627\u0646\u0641\u0633\u062F\u062F", "\u0633\u0646\u062F\u0627\u0641\u0627\u06BE\u06AF\u0633\u062F\u0628\u0627", "\u0633\u0627\u0633\u062F\u0628\u06BE \u0627\u0633\u062F\u0641\u06AF\u0628\u0637\u0627\u0633\u062F\u0641\u062F", "\u0633\u062F\u0637\u0627\u0633\u062F\u06AF\u0627\u0633\u062F\u06AF", "\u0686\u0627\u0633\u062F\u0633\u062F"];
var q4 = ["\u0633\u06AF", "\u062F\u06AF\u0627\u0633", "\u0633\u0627\u062F", "\u062F\u0633\u06BE\u0627", "\u0628\u0627\u0633", "\u0646\u0627\u0646", "\u0627\u0646\u0628", "\u0627\u0628\u0633", "\u0627\u062F\u0633\u06AF", "\u0627\u0628\u0646\u0633\u062F", "\u0633\u0641\u062F", "\u062F\u0641", "\u0628\u0633", "\u0628\u0627\u0633\u062F\u0628", "\u0628\u0627\u0633\u062F\u0628\u0627", "\u0631\u0639\u0627\u0628\u06BE", "\u0627\u0628\u0633\u062F", "\u0633\u0628", "\u0637", "\u0627\u0633\u062F\u0628\u06AF", "\u0627\u0633\u062F\u06AF", "\u0627\u06BE\u06AF\u0633\u062F", "\u0633\u062F\u06AF", "\u0627\u0633\u06AF", "\u0634\u0628\u0686", "\u0639\u0648", "\u0633\u062F\u0628\u06AF\u0627", "\u0627\u0633\u0628\u062F", "\u0633\u0627\u0628", "\u0633\u062F\u0628", "\u0633\u0628\u0627", "\u0628\u0627\u0633\u062F", "\u062F\u0633\u0628", "\u0637\u0633\u062F", "\u0686\u0633\u062F"];
var we = { supplemental: U4, words: q4 };
var z7 = we;
var H6 = ["\u067E\u0627\u067E", "\u0641\u0644\u06A9", "\u062F\u0646\u06CC\u0627\u06CC\u0670", "\u062C\u0627\u0632", "\u0641\u0646\u06A9", "\u06A9\u0644\u0627\u0633\u06A9\u06CC", "\u0644\u0627\u0637\u06CC\u0646\u06CC", "\u067E\u0631\u0627\u0646\u06CC", "\u0631\u06CC\u067E"];
var ve = { genre: H6 };
var O4 = ve;
var Q3 = ["\u0645\u0646\u0627\u06CC\u0644", "\u0639\u0627\u06CC\u0634\u06C1", "\u0627\u0653\u0645\u0646\u06C1", "\u0639\u0645\u0627\u0626\u0645", "\u062E\u062F\u06CC\u062C\u06C1", "\u062D\u0641\u0635\u06C1", "\u0631\u0627\u0628\u0639\u06C1", "\u0627\u0642\u062F\u0633", "\u062D\u0633\u0646\u06C1", "\u0645\u0631\u06CC\u0645", "\u062D\u0645\u06CC\u0631\u06C1", "\u0648\u0631\u062F\u06C1", "\u0634\u06C1\u0646\u0627\u0632", "\u0646\u0648\u0634\u06CC\u0646", "\u0645\u0634\u0627\u0644", "\u0631\u0648\u0628\u06CC\u0646\u06C1", "\u0631\u0648\u0632\u06CC\u0646\u06C1", "\u062D\u062F\u06CC\u062F"];
var R5 = ["\u0645\u0646\u0627\u06CC\u0644", "\u0639\u0627\u06CC\u0634\u06C1", "\u0627\u0653\u0645\u0646\u06C1", "\u0639\u0645\u0627\u0626\u0645", "\u062E\u062F\u06CC\u062C\u06C1", "\u062D\u0641\u0635\u06C1", "\u0631\u0627\u0628\u0639\u06C1", "\u0627\u0642\u062F\u0633", "\u062D\u0633\u0646\u06C1", "\u0645\u0631\u06CC\u0645", "\u062D\u0645\u06CC\u0631\u06C1", "\u0648\u0631\u062F\u06C1", "\u0634\u06C1\u0646\u0627\u0632", "\u0646\u0648\u0634\u06CC\u0646", "\u0645\u0634\u0627\u0644", "\u0631\u0648\u0628\u06CC\u0646\u06C1", "\u0631\u0648\u0632\u06CC\u0646\u06C1", "\u062D\u062F\u06CC\u062F", "\u0639\u0645\u06CC\u0631", "\u0627\u0628\u0631\u0627\u06C1\u06CC\u0645", "\u0627\u062D\u0633\u0646", "\u0639\u0628\u062F\u0627\u0644\u0644\u06C1", "\u0639\u062B\u0645\u0627\u0646", "\u062D\u0645\u0632\u06C1", "\u0633\u06CC\u0641", "\u0648\u0644\u06CC\u062F", "\u0648\u0633\u06CC\u0645", "\u0645\u062D\u0633\u0646", "\u06CC\u0627\u0633\u06CC\u0646", "\u06A9\u0645\u0627\u0644", "\u0639\u0627\u062F\u0644", "\u0627\u0648\u06CC\u0633", "\u0645\u0633\u0648\u062F", "\u0634\u0641\u06CC\u0639", "\u0641\u0631\u06C1\u0627\u0646", "\u0645\u0645\u062A\u0627\u0632"];
var W3 = ["\u0627\u0639\u0648\u0627\u0646", "\u0645\u0644\u06A9", "\u062C\u0628\u0631\u0627\u0646", "\u0627\u062D\u0645\u062F", "\u0639\u0644\u06CC", "\u062E\u0627\u0646", "\u062C\u0627\u0646", "\u0627\u0653\u0641\u0631\u06CC\u062F\u06CC", "\u0628\u0627\u062C\u0648\u0691\u06CC", "\u0645\u06CC\u0645\u0646", "\u0631\u0627\u062C\u067E\u0648\u062A", "\u0639\u0628\u062F\u0627\u0644\u06CC", "\u0646\u06CC\u0627\u0632\u06CC", "\u0634\u0631\u06CC\u0641", "\u0686\u0648\u06C1\u062F\u0631\u06CC", "\u0645\u0644\u0648\u06A9", "\u0627\u0644\u0644\u064E\u06C1", "\u0634\u0646\u0648\u0627\u0631\u06CC", "\u062D\u0633\u06CC\u0646", "\u0627\u0644\u062D\u0642"];
var X3 = ["\u0639\u0645\u06CC\u0631", "\u0627\u0628\u0631\u0627\u06C1\u06CC\u0645", "\u0627\u062D\u0633\u0646", "\u0639\u0628\u062F\u0627\u0644\u0644\u06C1", "\u0639\u062B\u0645\u0627\u0646", "\u062D\u0645\u0632\u06C1", "\u0633\u06CC\u0641", "\u0648\u0644\u06CC\u062F", "\u0648\u0633\u06CC\u0645", "\u0645\u062D\u0633\u0646", "\u06CC\u0627\u0633\u06CC\u0646", "\u06A9\u0645\u0627\u0644", "\u0639\u0627\u062F\u0644", "\u0627\u0648\u06CC\u0633", "\u0645\u0633\u0648\u062F", "\u0634\u0641\u06CC\u0639", "\u0641\u0631\u06C1\u0627\u0646", "\u0645\u0645\u062A\u0627\u0632"];
var Y4 = ["{{name.prefix}} {{name.first_name}} {{name.last_name}}", "{{name.first_name}} {{name.last_name}} {{name.suffix}}", "{{name.first_name}} {{name.last_name}}", "{{name.male_first_name}} {{name.last_name}}", "{{name.female_first_name}} {{name.last_name}}", "{{name.male_first_name}} \u0628\u0646 {{name.male_first_name}}", "{{name.female_first_name}} \u0628\u0646\u062A {{name.male_first_name}}"];
var Z4 = ["\u0645\u062D\u062A\u0631\u0645.", "\u0645\u062D\u062A\u0631\u0645\u06C1.", "\u0688\u0627\u06A9\u0679\u0631"];
var $3 = ["\u0639\u0648\u0631\u062A", "\u0645\u0631\u062F"];
var ee2 = ["\u0686\u06BE\u0648\u0679\u06D2", "\u0628\u0691\u06D2", "\u067E\u06C1\u0644", "\u062F\u0648\u0645", "\u0633\u0648\u0645", "\u0686\u06C1\u0627\u0631\u0645", "\u067E\u0646\u062C\u0645", "\u0634\u0634\u0645", "\u0647\u0641\u062A\u0645", "\u0646\u0648\u0626\u0645", "\u062F\u0633\u0645"];
var te2 = { descriptor: ["\u0633\u0631\u0628\u0631\u0627\u06C1", "\u0627\u0639\u0644\u06CC\u0670", "\u0645\u0633\u062A\u0642\u0628\u0644", "\u0634\u06C1\u0631\u06CC", "\u0688\u0633\u0679\u0631\u06A9\u0679", "\u062F\u0631\u0645\u06CC\u0627\u0646\u06C1", "\u06AF\u0644\u0648\u0628\u0644", "\u06AF\u0627\u06C1\u06A9", "\u0628\u06CC\u0646 \u0627\u0644 \u0627\u0642\u0648\u0627\u0645\u06CC", "\u0627\u0653\u06AF\u06D2", "\u0627\u0646\u062F\u0631\u0648\u0646\u06CC", "\u0627\u0646\u0633\u0627\u0646\u06CC", "\u0686\u06CC\u0641", "\u067E\u0631\u0646\u0633\u067E\u0644"], level: ["\u062D\u0644", "\u067E\u0631\u0648\u06AF\u0631\u0627\u0645", "\u0628\u0631\u0627\u0646\u0688", "\u0633\u06A9\u06CC\u0648\u0631\u0679\u06CC", "\u0631\u06CC\u0633\u0631\u0686", "\u0627\u0653\u06AF\u0627\u06C1\u06CC", "\u062D\u0631\u0628\u06C1", "\u0634\u0646\u0627\u062E\u062A", "\u0628\u0627\u0632\u0627\u0631", "\u06AF\u0631\u0648\u06C1", "\u062A\u0642\u0633\u06CC\u0645", "\u0627\u0633\u062A\u0639\u0645\u0627\u0644", "\u0628\u0627\u062A \u0686\u06CC\u062A", "\u062C\u0627\u0644"] };
var Ae = { female_first_name: Q3, first_name: R5, last_name: W3, male_first_name: X3, name: Y4, prefix: Z4, sex: $3, suffix: ee2, title: te2 };
var re2 = Ae;
var oe2 = ["\u0686\u06CC\u0648\u0646\u0679\u06CC\u0627\u06BA", "\u0686\u0645\u06AF\u0627\u062F\u0691", "\u0628\u06BE\u0627\u0644\u0648", "\u0645\u06A9\u06CC\u0627\u06BA", "\u067E\u0631\u0646\u062F\u06D2", "\u0628\u06CC\u0644", "\u0628\u0644\u06CC\u0627\u06BA", "\u0645\u0631\u063A\u06CC\u0627\u06BA", "\u0645\u0648\u06CC\u0634\u06CC", "\u06A9\u062A\u06D2", "\u0645\u0686\u06BE\u0644\u06CC\u0627\u06BA", "\u0628\u0637\u062E\u06CC\u06BA", "\u06C1\u0627\u062A\u06BE\u06CC", "\u0644\u0648\u0645\u0691\u06CC\u0627\u06BA", "\u0645\u06CC\u0646\u0688\u06A9", "\u0628\u06A9\u0631\u06CC\u0627\u06BA", "\u06AF\u06BE\u0648\u0691\u06D2", "\u0634\u06CC\u0631", "\u0628\u0646\u062F\u0631", "\u0627\u0644\u0648", "\u0644\u0648\u06AF", "\u0633\u0648\u0631", "\u062E\u0631\u06AF\u0648\u0634", "\u0628\u06BE\u06CC\u0691", "\u0628\u06BE\u06CC\u0691\u06CC\u06BA", "\u0632\u06CC\u0628\u0631\u0627", "\u06A9\u0648\u06CC\u06BA", "\u06A9\u0627\u0644\u06CC \u0628\u0644\u06CC\u0627\u06BA", "\u0628\u06BE\u0648\u062A", "\u062C\u0627\u062F\u0648\u06AF\u0631", "\u0628\u06CC\u0679\u06CC\u06BA", "\u062F\u0634\u0645\u0646", "\u067E\u06CC\u063A\u0645\u0628\u0631", "\u0631\u0648\u062D", "\u0639\u0628\u0627\u062F\u062A \u06AF\u0632\u0627\u0631"];
var ie3 = ["{{address.state}} {{team.creature}}"];
var Ce2 = { creature: oe2, name: ie3 };
var me2 = Ce2;
var ae2 = ["\u0633\u06C1\u0631\u0627\u0628 \u0633\u0627\u0626\u06A9\u0644", "\u0686\u0627\u0626\u0646\u06C1 \u0633\u0627\u0626\u06A9\u0644"];
var fe = ["\u0688\u06CC\u0632\u0644", "\u0628\u062C\u0644\u06CC", "\u067E\u06CC\u0679\u0631\u0648\u0644", "\u0634\u0645\u0633\u06CC"];
var pe = ["\u0627\u0653\u0633\u062A\u0646 \u0645\u0627\u0631\u0679\u0646", "\u0628\u06CC\u0646\u0679\u0644\u06D2", "\u0628\u06CC \u0627\u06CC\u0645 \u0688\u0628\u0644\u06CC\u0648", "\u0641\u0631\u0627\u0631\u06CC", "\u06C1\u0646\u0688\u0627", "\u062C\u06CC\u067E", "\u0645\u0632\u062F\u0627", "\u0645\u0631\u0633\u06CC\u0688\u06CC\u0632"];
var ne = ["\u06A9\u0631\u0648\u0644\u0627", "\u0627\u06A9\u0648\u0631\u0688", "\u0633\u0648\u06A9"];
var se = ["\u06C1\u06CC\u0686 \u0628\u06CC\u06A9", "\u0633\u0648\u0627\u0631\u06CC"];
var Ne = { bicycle_type: ae2, fuel: fe, manufacturer: pe, model: ne, type: se };
var de = Ne;
var ge = { title: "Urdu", separator: " \u0627\u0648\u0631 ", address: c8, animal: v6, app: g7, business: L6, cell_phone: B6, color: F6, commerce: P6, date: j5, finance: J5, lorem: z7, music: O4, name: re2, team: me2, vehicle: de };
var Yr = ge;

// ../../node_modules/@faker-js/faker/dist/esm/chunk-PHKD4ARO.mjs
init_esm_shims();
var i9 = ["{{address.city_name}}"];
var g8 = ["An Giang", "B\xE0 R\u1ECBa-V\u0169ng T\xE0u", "B\u1EA1c Li\xEAu", "B\u1EAFc K\u1EA1n", "B\u1EAFc Giang", "B\u1EAFc Ninh", "B\u1EBFn Tre", "B\xECnh D\u01B0\u01A1ng", "B\xECnh \u0110\u1ECBnh", "B\xECnh Ph\u01B0\u1EDBc", "B\xECnh Thu\u1EADn", "C\xE0 Mau", "Cao B\u1EB1ng", "C\u1EA7n Th\u01A1", "\u0110\xE0 N\u1EB5ng", "\u0110\u1EAFk L\u1EAFk", "\u0110\u1EAFk N\xF4ng", "\u0110i\u1EC7n Bi\xEAn", "\u0110\u1ED3ng Nai", "\u0110\u1ED3ng Th\xE1p", "Gia Lai", "H\xE0 Giang", "H\xE0 Nam", "H\xE0 N\u1ED9i", "H\xE0 T\u0129nh", "H\u1EA3i D\u01B0\u01A1ng", "H\u1EA3i Ph\xF2ng", "H\u1EADu Giang", "H\xF2a B\xECnh", "TP. H\u1ED3 Ch\xED Minh", "H\u01B0ng Y\xEAn", "Kh\xE1nh Ho\xE0", "Ki\xEAn Giang", "Kon Tum", "Lai Ch\xE2u", "L\u1EA1ng S\u01A1n", "L\xE0o Cai", "L\xE2m \u0110\u1ED3ng", "Long An", "Nam \u0110\u1ECBnh", "Ngh\u1EC7 An", "Ninh B\xECnh", "Ninh Thu\u1EADn", "Ph\xFA Th\u1ECD", "Ph\xFA Y\xEAn", "Qu\u1EA3ng B\xECnh", "Qu\u1EA3ng Nam", "Qu\u1EA3ng Ng\xE3i", "Qu\u1EA3ng Ninh", "Qu\u1EA3ng Tr\u1ECB", "S\xF3c Tr\u0103ng", "S\u01A1n La", "T\xE2y Ninh", "Th\xE1i B\xECnh", "Th\xE1i Nguy\xEAn", "Thanh Ho\xE1", "Th\u1EEBa Thi\xEAn-Hu\u1EBF", "Ti\u1EC1n Giang", "Tr\xE0 Vinh", "Tuy\xEAn Quang", "V\u0129nh Long", "V\u0129nh Ph\xFAc", "Y\xEAn B\xE1i"];
var T6 = ["Afghanistan", "Ai C\u1EADp", "Albania", "Alg\xE9rie", "Andorra", "Angola", "V\u01B0\u01A1ng qu\u1ED1c Li\xEAn hi\u1EC7p Anh v\xE0 B\u1EAFc Ireland", "Antigua v\xE0 Barbuda", "\xC1o", "\u1EA2 R\u1EADp X\xEA \xDAt", "Argentina", "Armenia", "Azerbaijan", "\u1EA4n \u0110\u1ED9", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belize", "B\xE9nin", "Bhutan", "B\u1EC9", "Bolivia", "Bosna v\xE0 Hercegovina", "Botswana", "B\u1ED3 \u0110\xE0o Nha", "B\u1EDD Bi\u1EC3n Ng\xE0", "Brasil", "Brunei", "Bulgaria", "Burkina Faso", "Burundi", "Cabo Verde", "C\xE1c Ti\u1EC3u V\u01B0\u01A1ng qu\u1ED1c \u1EA2 R\u1EADp Th\u1ED1ng nh\u1EA5t", "Cameroon", "Campuchia", "Canada", "Chile", "Colombia", "Comoros", "C\u1ED9ng h\xF2a Congo", "C\u1ED9ng h\xF2a D\xE2n ch\u1EE7 Congo", "Costa Rica", "Croatia", "Cuba", "Djibouti", "Dominica", "C\u1ED9ng h\xF2a Dominica", "\u0110an M\u1EA1ch", "\u0110\xF4ng Timor", "\u0110\u1EE9c", "Ecuador", "El Salvador", "Eritrea", "Estonia", "Ethiopia", "Fiji", "Gabon", "Gambia", "Ghana", "Grenada", "Gruzia", "Guatemala", "Guin\xE9-Bissau", "Guinea X\xEDch \u0110\u1EA1o", "Guin\xE9e", "Guyana", "Haiti", "H\xE0 Lan", "H\xE0n Qu\u1ED1c", "Hoa K\u1EF3", "Honduras", "Hungary", "Hy L\u1EA1p", "Iceland", "Indonesia", "Iran", "Iraq", "Ireland", "Israel", "Jamaica", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kosovo", "Kuwait", "Kyrgyzstan", "L\xE0o", "Latvia", "Lesotho", "Liban", "Liberia", "Libya", "Liechtenstein", "Litva", "Luxembourg", "Macedonia", "Madagascar", "Malaysia", "Mali", "Malta", "Maroc", "Qu\u1EA7n \u0111\u1EA3o Marshall", "Mauritanie", "Mauritius", "M\xE9xico", "Micronesia", "Moldova", "Monaco", "M\xF4ng C\u1ED5", "Montenegro", "Mozambique", "Myanmar", "Namibia", "Nam Sudan", "Nam Phi", "Nauru", "Na Uy", "Nepal", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Nga", "Nh\u1EADt B\u1EA3n", "Oman", "Pakistan", "Palau", "Palestine", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Ph\xE1p", "Ph\u1EA7n Lan", "Philippines", "Qatar", "Rom\xE2nia", "Rwanda", "Saint Kitts v\xE0 Nevis", "Saint Lucia", "Saint Vincent v\xE0 Grenadines", "Samoa", "San Marino", "S\xE3o Tom\xE9 v\xE0 Pr\xEDncipe", "S\xE9c", "S\xE9n\xE9gal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "S\xEDp", "Slovakia", "Slovenia", "Solomon", "Somalia", "Sri Lanka", "Sudan", "Suriname", "Swaziland", "Syria", "Tajikistan", "Tanzania", "T\xE2y Ban Nha", "Tchad", "Th\xE1i Lan", "Th\u1ED5 Nh\u0129 K\u1EF3", "Th\u1EE5y \u0110i\u1EC3n", "Th\u1EE5y S\u0129", "Togo", "Tonga", "Tri\u1EC1u Ti\xEAn", "Trinidad v\xE0 Tobago", "Trung Qu\u1ED1c", "Trung Phi", "Tunisia", "Turkmenistan", "Tuvalu", "\xDAc", "Uganda", "Ukraina", "Uruguay", "Uzbekistan", "Vanuatu", "Vatican", "Venezuela", "Vi\u1EC7t Nam", "\xDD", "Yemen", "Zambia", "Zimbabwe"];
var a9 = ["Vi\u1EC7t Nam"];
var u9 = ["#####"];
var H7 = ["{{name.firstName}} {{address.street_suffix}}", "{{name.lastName}} {{address.street_suffix}}"];
var S7 = { city: i9, city_name: g8, country: T6, default_country: a9, postcode: u9, street: H7 };
var o9 = S7;
var c9 = ["03# ### ####", "05# ### ####", "07# ### ####", "08# ### ####", "09# ### ####"];
var G7 = { formats: c9 };
var y9 = G7;
var N9 = ["{{company.prefix}} {{name.last_name}}"];
var t9 = ["C\xF4ng ty", "Cty TNHH", "Cty", "C\u1EEDa h\xE0ng", "Trung t\xE2m", "Chi nh\xE1nh"];
var f9 = { name_patterns: N9, prefix: t9 };
var m9 = f9;
var r9 = { wide: ["Th\xE1ng Gi\xEAng", "Th\xE1ng Hai", "Th\xE1ng Ba", "Th\xE1ng T\u01B0", "Th\xE1ng N\u0103m", "Th\xE1ng S\xE1u", "Th\xE1ng B\u1EA3y", "Th\xE1ng T\xE1m", "Th\xE1ng Ch\xEDn", "Th\xE1ng M\u01B0\u1EDDi", "Th\xE1ng M\u01B0\u1EDDi M\u1ED9t", "Th\xE1ng M\u01B0\u1EDDi Hai"], wide_context: ["Th\xE1ng Gi\xEAng", "Th\xE1ng Hai", "Th\xE1ng Ba", "Th\xE1ng T\u01B0", "Th\xE1ng N\u0103m", "Th\xE1ng S\xE1u", "Th\xE1ng B\u1EA3y", "Th\xE1ng T\xE1m", "Th\xE1ng Ch\xEDn", "Th\xE1ng M\u01B0\u1EDDi", "Th\xE1ng M\u01B0\u1EDDi M\u1ED9t", "Th\xE1ng M\u01B0\u1EDDi Hai"], abbr: ["Th\xE1ng 1", "Th\xE1ng 2", "Th\xE1ng 3", "Th\xE1ng 4", "Th\xE1ng 5", "Th\xE1ng 6", "Th\xE1ng 7", "Th\xE1ng 8", "Th\xE1ng 9", "Th\xE1ng 10", "Th\xE1ng 11", "Th\xE1ng 12"], abbr_context: ["Th\xE1ng 1", "Th\xE1ng 2", "Th\xE1ng 3", "Th\xE1ng 4", "Th\xE1ng 5", "Th\xE1ng 6", "Th\xE1ng 7", "Th\xE1ng 8", "Th\xE1ng 9", "Th\xE1ng 10", "Th\xE1ng 11", "Th\xE1ng 12"] };
var L7 = { wide: ["Ch\u1EE7 nh\u1EADt", "Th\u1EE9 hai", "Th\u1EE9 ba", "Th\u1EE9 t\u01B0", "Th\u1EE9 n\u0103m", "Th\u1EE9 s\xE1u", "Th\u1EE9 b\u1EA3y"], wide_context: ["Ch\u1EE7 nh\u1EADt", "Th\u1EE9 hai", "Th\u1EE9 ba", "Th\u1EE9 t\u01B0", "Th\u1EE9 n\u0103m", "Th\u1EE9 s\xE1u", "Th\u1EE9 b\u1EA3y"], abbr: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"], abbr_context: ["C.Nh\u1EADt", "Th\u1EE9 2", "Th\u1EE9 3", "Th\u1EE9 4", "Th\u1EE9 5", "Th\u1EE9 6", "Th\u1EE9 7"] };
var s9 = { month: r9, weekday: L7 };
var M7 = s9;
var K7 = ["com", "net", "info", "vn", "com.vn"];
var l9 = { domain_suffix: K7 };
var e9 = l9;
var V5 = ["\u0111\xE3", "\u0111ang", "\u1EEB", "\u1EDD", "\xE1", "kh\xF4ng", "bi\u1EBFt", "g\xEC", "h\u1EBFt", "\u0111\xE2u", "nha", "th\u1EBF", "th\xEC", "l\xE0", "\u0111\xE1nh", "\u0111\xE1", "\u0111\u1EADp", "ph\xE1", "vi\u1EBFt", "v\u1EBD", "t\xF4", "thu\xEA", "m\u01B0\u1EDBn", "m\u01B0\u1EE3n", "mua", "m\u1ED9t", "hai", "ba", "b\u1ED1n", "n\u0103m", "s\xE1u", "b\u1EA3y", "t\xE1m", "ch\xEDn", "m\u01B0\u1EDDi", "th\xF4i", "vi\u1EC7c", "ngh\u1EC9", "l\xE0m", "nh\xE0", "c\u1EEDa", "xe", "\u0111\u1EA1p", "\xE1c", "\u0111\u1ED9c", "kho\u1EA3ng", "khoan", "thuy\u1EC1n", "t\xE0u", "b\xE8", "l\u1EA7u", "xanh", "\u0111\u1ECF", "t\xEDm", "v\xE0ng", "kim", "ch\u1EC9", "kh\xE2u", "may", "v\xE1", "em", "anh", "y\xEAu", "th\u01B0\u01A1ng", "th\xEDch", "con", "c\xE1i", "b\xE0n", "gh\u1EBF", "t\u1EE7", "qu\u1EA7n", "\xE1o", "n\xF3n", "d\xE9p", "gi\xE0y", "l\u1ED7i", "\u0111\u01B0\u1EE3c", "gh\xE9t", "gi\u1EBFt", "ch\u1EBFt", "t\xF4i", "b\u1EA1n", "tui", "tr\u1EDDi", "tr\u0103ng", "m\xE2y", "gi\xF3", "m\xE1y", "h\xE0ng", "h\xF3a", "leo", "n\xFAi", "b\u01A1i", "bi\u1EC3n", "ch\xECm", "xu\u1ED3ng", "n\u01B0\u1EDBc", "ng\u1ECDt", "ru\u1ED9ng", "\u0111\u1ED3ng", "qu\xEA", "h\u01B0\u01A1ng"];
var d9 = { words: V5 };
var D8 = d9;
var n9 = ["An B\xECnh", "An Di", "An H\u1EA1", "An H\u1EB1ng", "An Kh\xEA", "An Nhi\xEAn", "An Nh\xE0n", "Anh Chi", "Anh H\u01B0\u01A1ng", "Anh Mai", "Anh Ph\u01B0\u01A1ng", "Anh Thi", "Anh Thy", "Anh Th\u01A1", "Anh Th\u01B0", "Anh Th\u1EA3o", "Anh V\u0169", "Anh \xD0\xE0o", "Ban Mai", "B\xECnh Minh", "B\xECnh Y\xEAn", "B\xEDch Chi\xEAu", "B\xEDch Ch\xE2u", "B\xEDch Duy\xEAn", "B\xEDch Hi\u1EC1n", "B\xEDch Hu\u1EC7", "B\xEDch H\xE0", "B\xEDch H\u1EA1nh", "B\xEDch H\u1EA3i", "B\xEDch H\u1EA3o", "B\xEDch H\u1EADu", "B\xEDch H\u1EB1ng", "B\xEDch H\u1ED3ng", "B\xEDch H\u1EE3p", "B\xEDch Lam", "B\xEDch Li\xEAn", "B\xEDch Loan", "B\xEDch Nga", "B\xEDch Ng\xE0", "B\xEDch Ng\xE2n", "B\xEDch Ng\u1ECDc", "B\xEDch Nh\u01B0", "B\xEDch Ph\u01B0\u1EE3ng", "B\xEDch Quy\xEAn", "B\xEDch Qu\xE2n", "B\xEDch San", "B\xEDch Thoa", "B\xEDch Thu", "B\xEDch Th\u1EA3o", "B\xEDch Th\u1EE7y", "B\xEDch Trang", "B\xEDch Tr\xE2m", "B\xEDch Ty", "B\xEDch V\xE2n", "B\xEDch \xD0i\u1EC7p", "B\xEDch \xD0\xE0o", "B\u0103ng B\u0103ng", "B\u0103ng T\xE2m", "B\u1EA1ch C\xFAc", "B\u1EA1ch Hoa", "B\u1EA1ch Kim", "B\u1EA1ch Li\xEAn", "B\u1EA1ch Loan", "B\u1EA1ch Mai", "B\u1EA1ch Qu\u1EF3nh", "B\u1EA1ch Tr\xE0", "B\u1EA1ch Tuy\u1EBFt", "B\u1EA1ch V\xE2n", "B\u1EA1ch Y\u1EBFn", "B\u1EA3o Anh", "B\u1EA3o B\xECnh", "B\u1EA3o Ch\xE2u", "B\u1EA3o Hu\u1EC7", "B\u1EA3o H\xE0", "B\u1EA3o H\xE2n", "B\u1EA3o Lan", "B\u1EA3o L\u1EC5", "B\u1EA3o Ng\u1ECDc", "B\u1EA3o Ph\u01B0\u01A1ng", "B\u1EA3o Quy\xEAn", "B\u1EA3o Qu\u1EF3nh", "B\u1EA3o Thoa", "B\u1EA3o Th\xFAy", "B\u1EA3o Ti\xEAn", "B\u1EA3o Tr\xE2m", "B\u1EA3o Tr\xE2n", "B\u1EA3o Tr\xFAc", "B\u1EA3o Uy\xEAn", "B\u1EA3o Vy", "B\u1EA3o V\xE2n", "B\u1ED9i Linh", "Cam Th\u1EA3o", "Chi Lan", "Chi Mai", "Chi\xEAu D\u01B0\u01A1ng", "C\xE1t C\xE1t", "C\xE1t Linh", "C\xE1t Ly", "C\xE1t Ti\xEAn", "C\xE1t T\u01B0\u1EDDng", "C\u1EA9m Hi\u1EC1n", "C\u1EA9m H\u01B0\u1EDDng", "C\u1EA9m H\u1EA1nh", "C\u1EA9m Linh", "C\u1EA9m Li\xEAn", "C\u1EA9m Ly", "C\u1EA9m Nhi", "C\u1EA9m Nhung", "C\u1EA9m Th\xFAy", "C\u1EA9m T\xFA", "C\u1EA9m V\xE2n", "C\u1EA9m Y\u1EBFn", "Di Nhi\xEAn", "Di\xEAn V\u1EF9", "Di\u1EC5m Chi", "Di\u1EC5m Ch\xE2u", "Di\u1EC5m H\u01B0\u01A1ng", "Di\u1EC5m H\u1EA1nh", "Di\u1EC5m H\u1EB1ng", "Di\u1EC5m Khu\xEA", "Di\u1EC5m Ki\u1EC1u", "Di\u1EC5m Li\xEAn", "Di\u1EC5m L\u1ED9c", "Di\u1EC5m My", "Di\u1EC5m Ph\xFAc", "Di\u1EC5m Ph\u01B0\u01A1ng", "Di\u1EC5m Ph\u01B0\u1EDBc", "Di\u1EC5m Ph\u01B0\u1EE3ng", "Di\u1EC5m Quy\xEAn", "Di\u1EC5m Qu\u1EF3nh", "Di\u1EC5m Th\xFAy", "Di\u1EC5m Th\u01B0", "Di\u1EC5m Th\u1EA3o", "Di\u1EC5m Trang", "Di\u1EC5m Trinh", "Di\u1EC5m Uy\xEAn", "Di\u1EC7p Anh", "Di\u1EC7p Vy", "Di\u1EC7u Anh", "Di\u1EC7u Hi\u1EC1n", "Di\u1EC7u Hoa", "Di\u1EC7u Huy\u1EC1n", "Di\u1EC7u H\u01B0\u01A1ng", "Di\u1EC7u H\u1EA1nh", "Di\u1EC7u H\u1EB1ng", "Di\u1EC7u H\u1ED3ng", "Di\u1EC7u Lan", "Di\u1EC7u Linh", "Di\u1EC7u Loan", "Di\u1EC7u Nga", "Di\u1EC7u Ng\xE0", "Di\u1EC7u Ng\u1ECDc", "Di\u1EC7u N\u01B0\u01A1ng", "Di\u1EC7u Thi\u1EC7n", "Di\u1EC7u Th\xFAy", "Di\u1EC7u V\xE2n", "Di\u1EC7u \xC1i", "Duy H\u1EA1nh", "Duy M\u1EF9", "Duy Uy\xEAn", "Duy\xEAn H\u1ED3ng", "Duy\xEAn My", "Duy\xEAn M\u1EF9", "Duy\xEAn N\u01B0\u01A1ng", "D\xE3 Lan", "D\xE3 L\xE2m", "D\xE3 Th\u1EA3o", "D\u1EA1 H\u01B0\u01A1ng", "D\u1EA1 Lan", "D\u1EA1 Nguy\u1EC7t", "D\u1EA1 Thi", "D\u1EA1 Th\u1EA3o", "D\u1EA1 Y\u1EBFn", "Gia H\xE2n", "Gia Khanh", "Gia Linh", "Gia Nhi", "Gia Qu\u1EF3nh", "Giang Thanh", "Giang Thi\xEAn", "Giao H\u01B0\u1EDFng", "Giao Ki\u1EC1u", "Giao Linh", "Gi\xE1ng Ng\u1ECDc", "Gi\xE1ng Ti\xEAn", "Gi\xE1ng Uy\xEAn", "Hi\u1EBFu Giang", "Hi\u1EBFu H\u1EA1nh", "Hi\u1EBFu Khanh", "Hi\u1EBFu Minh", "Hi\u1EC1n Chung", "Hi\u1EC1n H\xF2a", "Hi\u1EC1n Mai", "Hi\u1EC1n Nhi", "Hi\u1EC1n N\u01B0\u01A1ng", "Hi\u1EC1n Th\u1EE5c", "Hi\u1EC3u Lam", "Hi\u1EC3u V\xE2n", "Hoa Li\xEAn", "Hoa L\xFD", "Hoa Thi\xEAn", "Hoa Ti\xEAn", "Hoa Tranh", "Ho\xE0i An", "Ho\xE0i Giang", "Ho\xE0i H\u01B0\u01A1ng", "Ho\xE0i Ph\u01B0\u01A1ng", "Ho\xE0i Th\u01B0\u01A1ng", "Ho\xE0i Trang", "Ho\xE0i V\u1EF9", "Ho\xE0n Ch\xE2u", "Ho\xE0n Vi", "Ho\xE0ng C\xFAc", "Ho\xE0ng H\xE0", "Ho\xE0ng Kim", "Ho\xE0ng Lan", "Ho\xE0ng Mai", "Ho\xE0ng Mi\xEAn", "Ho\xE0ng Nguy\xEAn", "Ho\xE0ng Oanh", "Ho\xE0ng Sa", "Ho\xE0ng Th\u01B0", "Ho\xE0ng Xu\xE2n", "Ho\xE0ng Y\u1EBFn", "Ho\u1EA1 Mi", "Huy\u1EC1n Anh", "Huy\u1EC1n Di\u1EC7u", "Huy\u1EC1n Linh", "Huy\u1EC1n Ng\u1ECDc", "Huy\u1EC1n Nhi", "Huy\u1EC1n Tho\u1EA1i", "Huy\u1EC1n Th\u01B0", "Huy\u1EC1n Trang", "Huy\u1EC1n Tr\xE2m", "Huy\u1EC1n Tr\xE2n", "Hu\u1EC7 An", "Hu\u1EC7 H\u01B0\u01A1ng", "Hu\u1EC7 H\u1ED3ng", "Hu\u1EC7 Lan", "Hu\u1EC7 Linh", "Hu\u1EC7 L\xE2m", "Hu\u1EC7 My", "Hu\u1EC7 Ph\u01B0\u01A1ng", "Hu\u1EC7 Th\u01B0\u01A1ng", "Hu\u1EC7 \xC2n", "Hu\u1EF3nh Anh", "H\xE0 Giang", "H\xE0 Li\xEAn", "H\xE0 Mi", "H\xE0 My", "H\xE0 Nhi", "H\xE0 Ph\u01B0\u01A1ng", "H\xE0 Thanh", "H\xE0 Ti\xEAn", "H\xE0m Duy\xEAn", "H\xE0m Nghi", "H\xE0m Th\u01A1", "H\xE0m \xDD", "H\u01B0\u01A1ng Chi", "H\u01B0\u01A1ng Giang", "H\u01B0\u01A1ng Lan", "H\u01B0\u01A1ng Li\xEAn", "H\u01B0\u01A1ng Ly", "H\u01B0\u01A1ng L\xE2m", "H\u01B0\u01A1ng Mai", "H\u01B0\u01A1ng Nhi", "H\u01B0\u01A1ng Thu", "H\u01B0\u01A1ng Th\u1EA3o", "H\u01B0\u01A1ng Th\u1EE7y", "H\u01B0\u01A1ng Ti\xEAn", "H\u01B0\u01A1ng Trang", "H\u01B0\u01A1ng Tr\xE0", "H\u01B0\u01A1ng Xu\xE2n", "H\u01B0\u1EDBng D\u01B0\u01A1ng", "H\u1EA1 B\u0103ng", "H\u1EA1 Giang", "H\u1EA1 Ph\u01B0\u01A1ng", "H\u1EA1 Ti\xEAn", "H\u1EA1 Uy\xEAn", "H\u1EA1 Vy", "H\u1EA1c C\xFAc", "H\u1EA1nh Chi", "H\u1EA1nh Dung", "H\u1EA1nh Linh", "H\u1EA1nh My", "H\u1EA1nh Nga", "H\u1EA1nh Nh\u01A1n", "H\u1EA1nh Ph\u01B0\u01A1ng", "H\u1EA1nh San", "H\u1EA1nh Th\u1EA3o", "H\u1EA1nh Trang", "H\u1EA1nh Vi", "H\u1EA3i Anh", "H\u1EA3i Ch\xE2u", "H\u1EA3i Duy\xEAn", "H\u1EA3i D\u01B0\u01A1ng", "H\u1EA3i Mi\xEAn", "H\u1EA3i My", "H\u1EA3i M\u1EF9", "H\u1EA3i Ng\xE2n", "H\u1EA3i Nhi", "H\u1EA3i Ph\u01B0\u01A1ng", "H\u1EA3i Ph\u01B0\u1EE3ng", "H\u1EA3i San", "H\u1EA3i Sinh", "H\u1EA3i Thanh", "H\u1EA3i Th\u1EA3o", "H\u1EA3i Th\u1EE5y", "H\u1EA3i Uy\xEAn", "H\u1EA3i Vy", "H\u1EA3i V\xE2n", "H\u1EA3i Y\u1EBFn", "H\u1EA3i \xC2n", "H\u1EA3i \xD0\u01B0\u1EDDng", "H\u1EA3o Nhi", "H\u1EB1ng Anh", "H\u1EB1ng Nga", "H\u1ECDa Mi", "H\u1ED3 Di\u1EC7p", "H\u1ED3ng Anh", "H\u1ED3ng B\u1EA1ch Th\u1EA3o", "H\u1ED3ng Ch\xE2u", "H\u1ED3ng Di\u1EC5m", "H\u1ED3ng Giang", "H\u1ED3ng Hoa", "H\u1ED3ng H\xE0", "H\u1ED3ng H\u1EA1nh", "H\u1ED3ng Khanh", "H\u1ED3ng Khu\xEA", "H\u1ED3ng Kh\xF4i", "H\u1ED3ng Linh", "H\u1ED3ng Li\xEAn", "H\u1ED3ng L\xE2m", "H\u1ED3ng Mai", "H\u1ED3ng Nga", "H\u1ED3ng Ng\xE2n", "H\u1ED3ng Ng\u1ECDc", "H\u1ED3ng Nhung", "H\u1ED3ng Nh\u01B0", "H\u1ED3ng Nh\u1EA1n", "H\u1ED3ng Oanh", "H\u1ED3ng Ph\xFAc", "H\u1ED3ng Ph\u01B0\u01A1ng", "H\u1ED3ng Qu\u1EBF", "H\u1ED3ng Thu", "H\u1ED3ng Th\xFAy", "H\u1ED3ng Th\u01B0", "H\u1ED3ng Th\u1EA3o", "H\u1ED3ng Th\u1EAFm", "H\u1ED3ng Th\u1EE7y", "H\u1ED3ng Tr\xFAc", "H\u1ED3ng T\xE2m", "H\u1ED3ng V\xE2n", "H\u1ED3ng Xu\xE2n", "H\u1ED3ng \xD0i\u1EC7p", "H\u1ED3ng \xD0\xE0o", "H\u1ED3ng \u0110\u0103ng", "Khi\u1EBFt Linh", "Khi\u1EBFt T\xE2m", "Khu\xEA Trung", "Kh\xE1nh Chi", "Kh\xE1nh Giang", "Kh\xE1nh Giao", "Kh\xE1nh Huy\u1EC1n", "Kh\xE1nh H\xE0", "Kh\xE1nh H\u1EB1ng", "Kh\xE1nh Linh", "Kh\xE1nh Ly", "Kh\xE1nh Mai", "Kh\xE1nh My", "Kh\xE1nh Ng\xE2n", "Kh\xE1nh Ng\u1ECDc", "Kh\xE1nh Quy\xEAn", "Kh\xE1nh Qu\u1EF3nh", "Kh\xE1nh Th\u1EE7y", "Kh\xE1nh Trang", "Kh\xE1nh Vi", "Kh\xE1nh Vy", "Kh\xE1nh V\xE2n", "Kh\xFAc Lan", "Kh\u1EA3 Khanh", "Kh\u1EA3 T\xFA", "Kh\u1EA3 \xC1i", "Kh\u1EA3i Ca", "Kh\u1EA3i H\xE0", "Kh\u1EA3i T\xE2m", "Kim Anh", "Kim Chi", "Kim C\u01B0\u01A1ng", "Kim Dung", "Kim Duy\xEAn", "Kim Hoa", "Kim H\u01B0\u01A1ng", "Kim Khanh", "Kim Khuy\xEAn", "Kim Kh\xE1nh", "Kim Lan", "Kim Li\xEAn", "Kim Loan", "Kim Ly", "Kim Mai", "Kim Ng\xE2n", "Kim Ng\u1ECDc", "Kim Oanh", "Kim Ph\u01B0\u1EE3ng", "Kim Quy\xEAn", "Kim Sa", "Kim Thanh", "Kim Thoa", "Kim Thu", "Kim Thy", "Kim Th\xF4ng", "Kim Th\u01B0", "Kim Th\u1EA3o", "Kim Th\u1EE7y", "Kim Trang", "Kim Tuy\u1EBFn", "Kim Tuy\u1EBFt", "Kim Tuy\u1EC1n", "Kim Xuy\u1EBFn", "Kim Xu\xE2n", "Kim Y\u1EBFn", "Kim \xC1nh", "Kim \u0110an", "Ki\u1EBFt H\u1ED3ng", "Ki\u1EBFt Trinh", "Ki\u1EC1u Anh", "Ki\u1EC1u Di\u1EC5m", "Ki\u1EC1u Dung", "Ki\u1EC1u Giang", "Ki\u1EC1u Hoa", "Ki\u1EC1u H\u1EA1nh", "Ki\u1EC1u Khanh", "Ki\u1EC1u Loan", "Ki\u1EC1u Mai", "Ki\u1EC1u Minh", "Ki\u1EC1u M\u1EF9", "Ki\u1EC1u Nga", "Ki\u1EC1u Nguy\u1EC7t", "Ki\u1EC1u N\u01B0\u01A1ng", "Ki\u1EC1u Thu", "Ki\u1EC1u Trang", "Ki\u1EC1u Trinh", "K\u1EF3 Anh", "K\u1EF3 Di\u1EC7u", "K\u1EF3 Duy\xEAn", "Lam Giang", "Lam H\xE0", "Lam Kh\xEA", "Lam Ng\u1ECDc", "Lam Tuy\u1EC1n", "Lan Anh", "Lan Chi", "Lan H\u01B0\u01A1ng", "Lan Khu\xEA", "Lan Ng\u1ECDc", "Lan Nhi", "Lan Ph\u01B0\u01A1ng", "Lan Th\u01B0\u01A1ng", "Lan Tr\xFAc", "Lan Vy", "Linh Chi", "Linh Ch\xE2u", "Linh Duy\xEAn", "Linh Giang", "Linh H\xE0", "Linh Lan", "Linh Nhi", "Linh Ph\u01B0\u01A1ng", "Linh Ph\u01B0\u1EE3ng", "Linh San", "Linh Trang", "Linh \xD0an", "Li\xEAn Chi", "Li\xEAn Hoa", "Li\xEAn H\u01B0\u01A1ng", "Li\xEAn Nh\u01B0", "Li\xEAn Ph\u01B0\u01A1ng", "Li\xEAn Tr\xE2n", "Li\u1EC5u Oanh", "Loan Ch\xE2u", "Ly Ch\xE2u", "L\xE2m Nhi", "L\xE2m Oanh", "L\xE2m Tuy\u1EC1n", "L\xE2m Uy\xEAn", "L\xEA Qu\u1EF3nh", "L\u01B0u Ly", "L\u1EC7 B\u0103ng", "L\u1EC7 Chi", "L\u1EC7 Giang", "L\u1EC7 Hoa", "L\u1EC7 Huy\u1EC1n", "L\u1EC7 Khanh", "L\u1EC7 Nga", "L\u1EC7 Nhi", "L\u1EC7 Quy\xEAn", "L\u1EC7 Qu\xE2n", "L\u1EC7 Thanh", "L\u1EC7 Thu", "L\u1EC7 Th\u1EE7y", "L\u1ED9c Uy\xEAn", "L\u1ED9c Uy\u1EC3n", "L\u1EE5c B\xECnh", "Mai Anh", "Mai Chi", "Mai Ch\xE2u", "Mai Hi\u1EC1n", "Mai H\xE0", "Mai H\u01B0\u01A1ng", "Mai H\u1EA1", "Mai Khanh", "Mai Kh\xF4i", "Mai Lan", "Mai Linh", "Mai Li\xEAn", "Mai Loan", "Mai Ly", "Mai Nhi", "Mai Ph\u01B0\u01A1ng", "Mai Quy\xEAn", "Mai Thanh", "Mai Thu", "Mai Thy", "Mai Th\u1EA3o", "Mai Trinh", "Mai T\xE2m", "Mai Vy", "Minh An", "Minh Ch\xE2u", "Minh Duy\xEAn", "Minh Hi\u1EC1n", "Minh Huy\u1EC1n", "Minh Hu\u1EC7", "Minh H\xE0", "Minh H\u01B0\u01A1ng", "Minh H\u1EA1nh", "Minh H\u1EB1ng", "Minh H\u1ED3ng", "Minh Khai", "Minh Khu\xEA", "Minh Loan", "Minh Minh", "Minh Nguy\u1EC7t", "Minh Ng\u1ECDc", "Minh Nhi", "Minh Nh\u01B0", "Minh Ph\u01B0\u01A1ng", "Minh Ph\u01B0\u1EE3ng", "Minh Thu", "Minh Th\xFAy", "Minh Th\u01B0", "Minh Th\u01B0\u01A1ng", "Minh Th\u1EA3o", "Minh Th\u1EE7y", "Minh Trang", "Minh Tuy\u1EBFt", "Minh Tu\u1EC7", "Minh T\xE2m", "Minh Uy\xEAn", "Minh Vy", "Minh Xu\xE2n", "Minh Y\u1EBFn", "Minh \u0110an", "M\u1EADu Xu\xE2n", "M\u1ED9c Mi\xEAn", "M\u1ED9ng Hoa", "M\u1ED9ng H\u01B0\u01A1ng", "M\u1ED9ng H\u1EB1ng", "M\u1ED9ng Lan", "M\u1ED9ng Li\u1EC5u", "M\u1ED9ng Nguy\u1EC7t", "M\u1ED9ng Nhi", "M\u1ED9ng Qu\u1EF3nh", "M\u1ED9ng Thi", "M\u1ED9ng Thu", "M\u1ED9ng Tuy\u1EC1n", "M\u1ED9ng Vi", "M\u1ED9ng Vy", "M\u1ED9ng V\xE2n", "M\u1ED9ng \xD0i\u1EC7p", "M\u1EF9 Anh", "M\u1EF9 Di\u1EC5m", "M\u1EF9 Dung", "M\u1EF9 Duy\xEAn", "M\u1EF9 Hi\u1EC7p", "M\u1EF9 Ho\xE0n", "M\u1EF9 Huy\u1EC1n", "M\u1EF9 Hu\u1EC7", "M\u1EF9 H\u01B0\u1EDDng", "M\u1EF9 H\u1EA1nh", "M\u1EF9 Khuy\xEAn", "M\u1EF9 Ki\u1EC1u", "M\u1EF9 Lan", "M\u1EF9 Loan", "M\u1EF9 L\u1EC7", "M\u1EF9 L\u1EE3i", "M\u1EF9 Nga", "M\u1EF9 Ng\u1ECDc", "M\u1EF9 Nhi", "M\u1EF9 Nh\xE2n", "M\u1EF9 N\u01B0\u01A1ng", "M\u1EF9 Ph\u01B0\u01A1ng", "M\u1EF9 Ph\u01B0\u1EE3ng", "M\u1EF9 Ph\u1EE5ng", "M\u1EF9 Thu\u1EA7n", "M\u1EF9 Thu\u1EADn", "M\u1EF9 Trang", "M\u1EF9 Tr\xE2m", "M\u1EF9 T\xE2m", "M\u1EF9 Uy\xEAn", "M\u1EF9 V\xE2n", "M\u1EF9 Xu\xE2n", "M\u1EF9 Y\u1EBFn", "Nghi Dung", "Nghi Minh", "Nghi Xu\xE2n", "Nguy\xEAn H\u1ED3ng", "Nguy\xEAn Th\u1EA3o", "Nguy\u1EBFt \xC1nh", "Nguy\u1EC7t Anh", "Nguy\u1EC7t C\xE1t", "Nguy\u1EC7t C\u1EA7m", "Nguy\u1EC7t H\xE0", "Nguy\u1EC7t H\u1ED3ng", "Nguy\u1EC7t Lan", "Nguy\u1EC7t Minh", "Nguy\u1EC7t Nga", "Nguy\u1EC7t Qu\u1EBF", "Nguy\u1EC7t Uy\u1EC3n", "Nguy\u1EC7t \xC1nh", "Ng\xE2n Anh", "Ng\xE2n H\xE0", "Ng\xE2n Thanh", "Ng\xE2n Tr\xFAc", "Ng\u1ECDc Anh", "Ng\u1ECDc B\xEDch", "Ng\u1ECDc C\u1EA7m", "Ng\u1ECDc Di\u1EC7p", "Ng\u1ECDc Dung", "Ng\u1ECDc Hi\u1EC1n", "Ng\u1ECDc Hoa", "Ng\u1ECDc Hoan", "Ng\u1ECDc Ho\xE0n", "Ng\u1ECDc Huy\u1EC1n", "Ng\u1ECDc Hu\u1EC7", "Ng\u1ECDc H\xE0", "Ng\u1ECDc H\xE2n", "Ng\u1ECDc H\u1EA1", "Ng\u1ECDc H\u1EA1nh", "Ng\u1ECDc H\u1EB1ng", "Ng\u1ECDc Khanh", "Ng\u1ECDc Khu\xEA", "Ng\u1ECDc Kh\xE1nh", "Ng\u1ECDc Lam", "Ng\u1ECDc Lan", "Ng\u1ECDc Linh", "Ng\u1ECDc Li\xEAn", "Ng\u1ECDc Loan", "Ng\u1ECDc Ly", "Ng\u1ECDc L\xE2m", "Ng\u1ECDc L\xFD", "Ng\u1ECDc L\u1EC7", "Ng\u1ECDc Mai", "Ng\u1ECDc Nhi", "Ng\u1ECDc N\u1EEF", "Ng\u1ECDc Oanh", "Ng\u1ECDc Ph\u1EE5ng", "Ng\u1ECDc Quy\xEAn", "Ng\u1ECDc Qu\u1EBF", "Ng\u1ECDc Qu\u1EF3nh", "Ng\u1ECDc San", "Ng\u1ECDc S\u01B0\u01A1ng", "Ng\u1ECDc Thi", "Ng\u1ECDc Thy", "Ng\u1ECDc Th\u01A1", "Ng\u1ECDc Trinh", "Ng\u1ECDc Tr\xE2m", "Ng\u1ECDc Tuy\u1EBFt", "Ng\u1ECDc T\xE2m", "Ng\u1ECDc T\xFA", "Ng\u1ECDc Uy\xEAn", "Ng\u1ECDc Uy\u1EC3n", "Ng\u1ECDc Vy", "Ng\u1ECDc V\xE2n", "Ng\u1ECDc Y\u1EBFn", "Ng\u1ECDc \xC1i", "Ng\u1ECDc \xC1nh", "Ng\u1ECDc \xD0i\u1EC7p", "Ng\u1ECDc \xD0\xE0n", "Ng\u1ECDc \xD0\xE0o", "Nhan H\u1ED3ng", "Nh\xE3 H\u01B0\u01A1ng", "Nh\xE3 H\u1ED3ng", "Nh\xE3 Khanh", "Nh\xE3 L\xFD", "Nh\xE3 Mai", "Nh\xE3 S\u01B0\u01A1ng", "Nh\xE3 Thanh", "Nh\xE3 Trang", "Nh\xE3 Tr\xFAc", "Nh\xE3 Uy\xEAn", "Nh\xE3 Y\u1EBFn", "Nh\xE3 \xDD", "Nh\u01B0 Anh", "Nh\u01B0 B\u1EA3o", "Nh\u01B0 Hoa", "Nh\u01B0 H\u1EA3o", "Nh\u01B0 H\u1ED3ng", "Nh\u01B0 Loan", "Nh\u01B0 Mai", "Nh\u01B0 Ng\xE0", "Nh\u01B0 Ng\u1ECDc", "Nh\u01B0 Ph\u01B0\u01A1ng", "Nh\u01B0 Qu\xE2n", "Nh\u01B0 Qu\u1EF3nh", "Nh\u01B0 Th\u1EA3o", "Nh\u01B0 Tr\xE2n", "Nh\u01B0 T\xE2m", "Nh\u01B0 \xDD", "Nh\u1EA5t Th\u01B0\u01A1ng", "Nh\u1EADt D\u1EA1", "Nh\u1EADt H\xE0", "Nh\u1EADt H\u1EA1", "Nh\u1EADt Lan", "Nh\u1EADt Linh", "Nh\u1EADt L\u1EC7", "Nh\u1EADt Mai", "Nh\u1EADt Ph\u01B0\u01A1ng", "Nh\u1EADt \xC1nh", "Oanh Th\u01A1", "Oanh V\u0169", "Phi Khanh", "Phi Nhung", "Phi Nh\u1EA1n", "Phi Phi", "Phi Ph\u01B0\u1EE3ng", "Phong Lan", "Ph\u01B0\u01A1ng An", "Ph\u01B0\u01A1ng Anh", "Ph\u01B0\u01A1ng Chi", "Ph\u01B0\u01A1ng Ch\xE2u", "Ph\u01B0\u01A1ng Di\u1EC5m", "Ph\u01B0\u01A1ng Dung", "Ph\u01B0\u01A1ng Giang", "Ph\u01B0\u01A1ng Hi\u1EC1n", "Ph\u01B0\u01A1ng Hoa", "Ph\u01B0\u01A1ng H\u1EA1nh", "Ph\u01B0\u01A1ng Lan", "Ph\u01B0\u01A1ng Linh", "Ph\u01B0\u01A1ng Li\xEAn", "Ph\u01B0\u01A1ng Loan", "Ph\u01B0\u01A1ng Mai", "Ph\u01B0\u01A1ng Nghi", "Ph\u01B0\u01A1ng Ng\u1ECDc", "Ph\u01B0\u01A1ng Nhi", "Ph\u01B0\u01A1ng Nhung", "Ph\u01B0\u01A1ng Ph\u01B0\u01A1ng", "Ph\u01B0\u01A1ng Quy\xEAn", "Ph\u01B0\u01A1ng Qu\xE2n", "Ph\u01B0\u01A1ng Qu\u1EBF", "Ph\u01B0\u01A1ng Qu\u1EF3nh", "Ph\u01B0\u01A1ng Thanh", "Ph\u01B0\u01A1ng Thi", "Ph\u01B0\u01A1ng Th\xF9y", "Ph\u01B0\u01A1ng Th\u1EA3o", "Ph\u01B0\u01A1ng Th\u1EE7y", "Ph\u01B0\u01A1ng Trang", "Ph\u01B0\u01A1ng Trinh", "Ph\u01B0\u01A1ng Tr\xE0", "Ph\u01B0\u01A1ng Tr\xE2m", "Ph\u01B0\u01A1ng T\xE2m", "Ph\u01B0\u01A1ng Uy\xEAn", "Ph\u01B0\u01A1ng Y\u1EBFn", "Ph\u01B0\u1EDBc B\xECnh", "Ph\u01B0\u1EDBc Hu\u1EC7", "Ph\u01B0\u1EE3ng B\xEDch", "Ph\u01B0\u1EE3ng Li\xEAn", "Ph\u01B0\u1EE3ng Loan", "Ph\u01B0\u1EE3ng L\u1EC7", "Ph\u01B0\u1EE3ng Nga", "Ph\u01B0\u1EE3ng Nhi", "Ph\u01B0\u1EE3ng Ti\xEAn", "Ph\u01B0\u1EE3ng Uy\xEAn", "Ph\u01B0\u1EE3ng Vy", "Ph\u01B0\u1EE3ng V\u0169", "Ph\u1EE5ng Y\u1EBFn", "Qu\u1EBF Anh", "Qu\u1EBF Chi", "Qu\u1EBF Linh", "Qu\u1EBF L\xE2m", "Qu\u1EBF Ph\u01B0\u01A1ng", "Qu\u1EBF Thu", "Qu\u1EF3nh Anh", "Qu\u1EF3nh Chi", "Qu\u1EF3nh Dao", "Qu\u1EF3nh Dung", "Qu\u1EF3nh Giang", "Qu\u1EF3nh Giao", "Qu\u1EF3nh Hoa", "Qu\u1EF3nh H\xE0", "Qu\u1EF3nh H\u01B0\u01A1ng", "Qu\u1EF3nh Lam", "Qu\u1EF3nh Li\xEAn", "Qu\u1EF3nh L\xE2m", "Qu\u1EF3nh Nga", "Qu\u1EF3nh Ng\xE2n", "Qu\u1EF3nh Nhi", "Qu\u1EF3nh Nhung", "Qu\u1EF3nh Nh\u01B0", "Qu\u1EF3nh Ph\u01B0\u01A1ng", "Qu\u1EF3nh Sa", "Qu\u1EF3nh Thanh", "Qu\u1EF3nh Th\u01A1", "Qu\u1EF3nh Ti\xEAn", "Qu\u1EF3nh Trang", "Qu\u1EF3nh Tr\xE2m", "Qu\u1EF3nh V\xE2n", "Sao B\u0103ng", "Sao Mai", "Song K\xEA", "Song Lam", "Song Oanh", "Song Th\u01B0", "S\xF4ng H\xE0", "S\xF4ng H\u01B0\u01A1ng", "S\u01A1n Ca", "S\u01A1n Tuy\u1EC1n", "S\u01B0\u01A1ng S\u01B0\u01A1ng", "Thanh B\xECnh", "Thanh D\xE2n", "Thanh Giang", "Thanh Hi\u1EBFu", "Thanh Hi\u1EC1n", "Thanh Hoa", "Thanh Huy\u1EC1n", "Thanh H\xE0", "Thanh H\u01B0\u01A1ng", "Thanh H\u01B0\u1EDDng", "Thanh H\u1EA1nh", "Thanh H\u1EA3o", "Thanh H\u1EB1ng", "Thanh H\u1ED3ng", "Thanh Ki\u1EC1u", "Thanh Lam", "Thanh Lan", "Thanh Loan", "Thanh L\xE2m", "Thanh Mai", "Thanh M\u1EABn", "Thanh Nga", "Thanh Nguy\xEAn", "Thanh Ng\xE2n", "Thanh Ng\u1ECDc", "Thanh Nhung", "Thanh Nh\xE0n", "Thanh Nh\xE3", "Thanh Ph\u01B0\u01A1ng", "Thanh Thanh", "Thanh Thi\xEAn", "Thanh Thu", "Thanh Th\xFAy", "Thanh Th\u01B0", "Thanh Th\u1EA3o", "Thanh Th\u1EE7y", "Thanh Trang", "Thanh Tr\xFAc", "Thanh Tuy\u1EBFt", "Thanh Tuy\u1EC1n", "Thanh T\xE2m", "Thanh Uy\xEAn", "Thanh Vy", "Thanh V\xE2n", "Thanh Xu\xE2n", "Thanh Y\u1EBFn", "Thanh \u0110an", "Thi C\u1EA7m", "Thi Ng\xF4n", "Thi Thi", "Thi Xu\xE2n", "Thi Y\u1EBFn", "Thi\xEAn Di", "Thi\xEAn Duy\xEAn", "Thi\xEAn Giang", "Thi\xEAn H\xE0", "Thi\xEAn H\u01B0\u01A1ng", "Thi\xEAn Kh\xE1nh", "Thi\xEAn Kim", "Thi\xEAn Lam", "Thi\xEAn Lan", "Thi\xEAn Mai", "Thi\xEAn M\u1EF9", "Thi\xEAn Nga", "Thi\xEAn N\u01B0\u01A1ng", "Thi\xEAn Ph\u01B0\u01A1ng", "Thi\xEAn Thanh", "Thi\xEAn Th\xEAu", "Thi\xEAn Th\u01B0", "Thi\xEAn Th\u1EA3o", "Thi\xEAn Trang", "Thi\xEAn Tuy\u1EC1n", "Thi\u1EBFu Mai", "Thi\u1EC1u Ly", "Thi\u1EC7n M\u1EF9", "Thi\u1EC7n Ti\xEAn", "Thu Duy\xEAn", "Thu Giang", "Thu Hi\u1EC1n", "Thu Ho\xE0i", "Thu Huy\u1EC1n", "Thu Hu\u1EC7", "Thu H\xE0", "Thu H\u1EADu", "Thu H\u1EB1ng", "Thu H\u1ED3ng", "Thu Linh", "Thu Li\xEAn", "Thu Loan", "Thu Mai", "Thu Minh", "Thu Nga", "Thu Nguy\u1EC7t", "Thu Ng\xE0", "Thu Ng\xE2n", "Thu Ng\u1ECDc", "Thu Nhi\xEAn", "Thu Oanh", "Thu Phong", "Thu Ph\u01B0\u01A1ng", "Thu Ph\u01B0\u1EE3ng", "Thu S\u01B0\u01A1ng", "Thu Thu\u1EADn", "Thu Th\u1EA3o", "Thu Th\u1EE7y", "Thu Trang", "Thu Vi\u1EC7t", "Thu V\xE2n", "Thu V\u1ECDng", "Thu Y\u1EBFn", "Thu\u1EA7n H\u1EADu", "Thy Khanh", "Thy Oanh", "Thy Tr\xFAc", "Thy V\xE2n", "Th\xE1i Chi", "Th\xE1i H\xE0", "Th\xE1i H\u1ED3ng", "Th\xE1i Lan", "Th\xE1i L\xE2m", "Th\xE1i Thanh", "Th\xE1i Th\u1EA3o", "Th\xE1i T\xE2m", "Th\xE1i V\xE2n", "Th\xF9y Anh", "Th\xF9y Dung", "Th\xF9y D\u01B0\u01A1ng", "Th\xF9y Giang", "Th\xF9y Linh", "Th\xF9y Mi", "Th\xF9y My", "Th\xF9y Nhi", "Th\xF9y Nh\u01B0", "Th\xF9y Oanh", "Th\xF9y Uy\xEAn", "Th\xF9y V\xE2n", "Th\xFAy Anh", "Th\xFAy Di\u1EC5m", "Th\xFAy Hi\u1EC1n", "Th\xFAy Huy\u1EC1n", "Th\xFAy H\xE0", "Th\xFAy H\u01B0\u01A1ng", "Th\xFAy H\u01B0\u1EDDng", "Th\xFAy H\u1EA1nh", "Th\xFAy H\u1EB1ng", "Th\xFAy Ki\u1EC1u", "Th\xFAy Li\xEAn", "Th\xFAy Li\u1EC5u", "Th\xFAy Loan", "Th\xFAy Mai", "Th\xFAy Minh", "Th\xFAy My", "Th\xFAy Nga", "Th\xFAy Ng\xE0", "Th\xFAy Ng\xE2n", "Th\xFAy Ng\u1ECDc", "Th\xFAy Ph\u01B0\u1EE3ng", "Th\xFAy Qu\u1EF3nh", "Th\xFAy Vi", "Th\xFAy Vy", "Th\xFAy V\xE2n", "Th\u01A1 Th\u01A1", "Th\u01B0 L\xE2m", "Th\u01B0 S\u01B0\u01A1ng", "Th\u01B0\u01A1ng Huy\u1EC1n", "Th\u01B0\u01A1ng Nga", "Th\u01B0\u01A1ng Th\u01B0\u01A1ng", "Th\u01B0\u1EDDng Xu\xE2n", "Th\u1EA1ch Th\u1EA3o", "Th\u1EA3o H\u01B0\u01A1ng", "Th\u1EA3o H\u1ED3ng", "Th\u1EA3o Linh", "Th\u1EA3o Ly", "Th\u1EA3o Mai", "Th\u1EA3o My", "Th\u1EA3o Nghi", "Th\u1EA3o Nguy\xEAn", "Th\u1EA3o Nhi", "Th\u1EA3o Quy\xEAn", "Th\u1EA3o Ti\xEAn", "Th\u1EA3o Trang", "Th\u1EA3o Uy\xEAn", "Th\u1EA3o Vy", "Th\u1EA3o V\xE2n", "Th\u1EE5c Anh", "Th\u1EE5c Khu\xEA", "Th\u1EE5c Nhi", "Th\u1EE5c Oanh", "Th\u1EE5c Quy\xEAn", "Th\u1EE5c Trang", "Th\u1EE5c Trinh", "Th\u1EE5c T\xE2m", "Th\u1EE5c Uy\xEAn", "Th\u1EE5c V\xE2n", "Th\u1EE5c \xD0oan", "Th\u1EE5c \xD0\xE0o", "Th\u1EE5c \xD0\xECnh", "Th\u1EE5y Du", "Th\u1EE5y Khanh", "Th\u1EE5y Linh", "Th\u1EE5y L\xE2m", "Th\u1EE5y Mi\xEAn", "Th\u1EE5y N\u01B0\u01A1ng", "Th\u1EE5y Trinh", "Th\u1EE5y Tr\xE2m", "Th\u1EE5y Uy\xEAn", "Th\u1EE5y V\xE2n", "Th\u1EE5y \xD0\xE0o", "Th\u1EE7y H\u1EB1ng", "Th\u1EE7y H\u1ED3ng", "Th\u1EE7y Linh", "Th\u1EE7y Minh", "Th\u1EE7y Nguy\u1EC7t", "Th\u1EE7y Qu\u1EF3nh", "Th\u1EE7y Ti\xEAn", "Th\u1EE7y Trang", "Th\u1EE7y T\xE2m", "Tinh T\xFA", "Ti\xEAn Ph\u01B0\u01A1ng", "Ti\u1EC3u Mi", "Ti\u1EC3u My", "Ti\u1EC3u Qu\u1EF3nh", "Trang Anh", "Trang Linh", "Trang Nh\xE3", "Trang T\xE2m", "Trang \xD0\xE0i", "Tri\u1EC1u Nguy\u1EC7t", "Tri\u1EC1u Thanh", "Tri\u1EC7u M\u1EABn", "Trung Anh", "Tr\xE0 Giang", "Tr\xE0 My", "Tr\xE2m Anh", "Tr\xE2m Oanh", "Tr\xE2n Ch\xE2u", "Tr\xFAc Chi", "Tr\xFAc Lam", "Tr\xFAc Lan", "Tr\xFAc Linh", "Tr\xFAc Li\xEAn", "Tr\xFAc Loan", "Tr\xFAc Ly", "Tr\xFAc L\xE2m", "Tr\xFAc Mai", "Tr\xFAc Ph\u01B0\u01A1ng", "Tr\xFAc Qu\xE2n", "Tr\xFAc Qu\u1EF3nh", "Tr\xFAc Vy", "Tr\xFAc V\xE2n", "Tr\xFAc \xD0\xE0o", "Tr\xFAc \u0110\xE0o", "Tr\u1EA7m H\u01B0\u01A1ng", "Tuy\u1EBFt Anh", "Tuy\u1EBFt B\u0103ng", "Tuy\u1EBFt Chi", "Tuy\u1EBFt Hoa", "Tuy\u1EBFt H\xE2n", "Tuy\u1EBFt H\u01B0\u01A1ng", "Tuy\u1EBFt H\u1ED3ng", "Tuy\u1EBFt Lan", "Tuy\u1EBFt Loan", "Tuy\u1EBFt L\xE2m", "Tuy\u1EBFt Mai", "Tuy\u1EBFt Nga", "Tuy\u1EBFt Nhi", "Tuy\u1EBFt Nhung", "Tuy\u1EBFt Oanh", "Tuy\u1EBFt Thanh", "Tuy\u1EBFt Trinh", "Tuy\u1EBFt Tr\u1EA7m", "Tuy\u1EBFt T\xE2m", "Tuy\u1EBFt Vy", "Tuy\u1EBFt V\xE2n", "Tuy\u1EBFt Xu\xE2n", "Tuy\u1EC1n L\xE2m", "Tu\u1EC7 L\xE2m", "Tu\u1EC7 M\u1EABn", "Tu\u1EC7 Nhi", "T\xE2m Hi\u1EC1n", "T\xE2m H\u1EA1nh", "T\xE2m H\u1EB1ng", "T\xE2m Khanh", "T\xE2m Linh", "T\xE2m Nguy\xEAn", "T\xE2m Nguy\u1EC7t", "T\xE2m Nhi", "T\xE2m Nh\u01B0", "T\xE2m Thanh", "T\xE2m Trang", "T\xE2m \xD0oan", "T\xE2m \u0110an", "T\xF9ng Linh", "T\xF9ng L\xE2m", "T\xF9ng Qu\xE2n", "T\xF9y Anh", "T\xF9y Linh", "T\xFA Anh", "T\xFA Ly", "T\xFA Nguy\u1EC7t", "T\xFA Quy\xEAn", "T\xFA Qu\u1EF3nh", "T\xFA S\u01B0\u01A1ng", "T\xFA Trinh", "T\xFA T\xE2m", "T\xFA Uy\xEAn", "T\xFAy Loan", "T\u01B0\u1EDDng Chinh", "T\u01B0\u1EDDng Vi", "T\u01B0\u1EDDng Vy", "T\u01B0\u1EDDng V\xE2n", "T\u1ECBnh L\xE2m", "T\u1ECBnh Nhi", "T\u1ECBnh Nh\u01B0", "T\u1ECBnh T\xE2m", "T\u1ECBnh Y\xEAn", "T\u1ED1 Loan", "T\u1ED1 Nga", "T\u1ED1 Nhi", "T\u1ED1 Quy\xEAn", "T\u1ED1 T\xE2m", "T\u1ED1 Uy\xEAn", "T\u1EEB Dung", "T\u1EEB \xC2n", "Uy\xEAn Minh", "Uy\xEAn My", "Uy\xEAn Nhi", "Uy\xEAn Ph\u01B0\u01A1ng", "Uy\xEAn Thi", "Uy\xEAn Thy", "Uy\xEAn Th\u01A1", "Uy\xEAn Tr\xE2m", "Uy\xEAn Vi", "Uy\u1EC3n Khanh", "Uy\u1EC3n My", "Uy\u1EC3n Nghi", "Uy\u1EC3n Nhi", "Uy\u1EC3n Nh\xE3", "Uy\u1EC3n Nh\u01B0", "Vi Quy\xEAn", "Vinh Di\u1EC7u", "Vi\u1EC7t H\xE0", "Vi\u1EC7t H\u01B0\u01A1ng", "Vi\u1EC7t Khu\xEA", "Vi\u1EC7t Mi", "Vi\u1EC7t Nga", "Vi\u1EC7t Nhi", "Vi\u1EC7t Thi", "Vi\u1EC7t Trinh", "Vi\u1EC7t Tuy\u1EBFt", "Vi\u1EC7t Y\u1EBFn", "Vy Lam", "Vy Lan", "V\xE0ng Anh", "V\xE0nh Khuy\xEAn", "V\xE2n Anh", "V\xE2n Chi", "V\xE2n Du", "V\xE2n H\xE0", "V\xE2n H\u01B0\u01A1ng", "V\xE2n Khanh", "V\xE2n Kh\xE1nh", "V\xE2n Linh", "V\xE2n Ng\u1ECDc", "V\xE2n Nhi", "V\xE2n Phi", "V\xE2n Ph\u01B0\u01A1ng", "V\xE2n Quy\xEAn", "V\xE2n Qu\u1EF3nh", "V\xE2n Thanh", "V\xE2n Th\xFAy", "V\xE2n Th\u01B0\u1EDDng", "V\xE2n Ti\xEAn", "V\xE2n Trang", "V\xE2n Trinh", "V\u0169 H\u1ED3ng", "Xuy\u1EBFn Chi", "Xu\xE2n B\u1EA3o", "Xu\xE2n Dung", "Xu\xE2n Hi\u1EC1n", "Xu\xE2n Hoa", "Xu\xE2n H\xE2n", "Xu\xE2n H\u01B0\u01A1ng", "Xu\xE2n H\u1EA1nh", "Xu\xE2n Lan", "Xu\xE2n Linh", "Xu\xE2n Li\u1EC5u", "Xu\xE2n Loan", "Xu\xE2n L\xE2m", "Xu\xE2n Mai", "Xu\xE2n Nghi", "Xu\xE2n Ng\u1ECDc", "Xu\xE2n Nhi", "Xu\xE2n Nhi\xEAn", "Xu\xE2n N\u01B0\u01A1ng", "Xu\xE2n Ph\u01B0\u01A1ng", "Xu\xE2n Ph\u01B0\u1EE3ng", "Xu\xE2n Thanh", "Xu\xE2n Thu", "Xu\xE2n Th\u1EA3o", "Xu\xE2n Th\u1EE7y", "Xu\xE2n Trang", "Xu\xE2n T\xE2m", "Xu\xE2n Uy\xEAn", "Xu\xE2n V\xE2n", "Xu\xE2n Y\u1EBFn", "Xu\xE2n xanh", "Y\xEAn B\u1EB1ng", "Y\xEAn Mai", "Y\xEAn Nhi", "Y\xEAn \xD0an", "Y\xEAn \u0110an", "Y\u1EBFn Anh", "Y\u1EBFn H\u1ED3ng", "Y\u1EBFn Loan", "Y\u1EBFn Mai", "Y\u1EBFn My", "Y\u1EBFn Nhi", "Y\u1EBFn Oanh", "Y\u1EBFn Ph\u01B0\u01A1ng", "Y\u1EBFn Ph\u01B0\u1EE3ng", "Y\u1EBFn Thanh", "Y\u1EBFn Th\u1EA3o", "Y\u1EBFn Trang", "Y\u1EBFn Trinh", "Y\u1EBFn Tr\xE2m", "Y\u1EBFn \xD0an", "\xC1i H\u1ED3ng", "\xC1i Khanh", "\xC1i Linh", "\xC1i Nhi", "\xC1i Nh\xE2n", "\xC1i Thi", "\xC1i Thy", "\xC1i V\xE2n", "\xC1nh D\u01B0\u01A1ng", "\xC1nh Hoa", "\xC1nh H\u1ED3ng", "\xC1nh Linh", "\xC1nh L\u1EC7", "\xC1nh Mai", "\xC1nh Nguy\u1EC7t", "\xC1nh Ng\u1ECDc", "\xC1nh Th\u01A1", "\xC1nh Trang", "\xC1nh Tuy\u1EBFt", "\xC1nh Xu\xE2n", "\xD0an Khanh", "\xD0an Qu\u1EF3nh", "\u0110an Thu", "\xD0inh H\u01B0\u01A1ng", "\xD0oan Thanh", "\xD0oan Trang", "\xD0\xE0i Trang", "\xD0\xF4ng Nghi", "\xD0\xF4ng Nhi", "\xD0\xF4ng Tr\xE0", "\xD0\xF4ng Tuy\u1EC1n", "\xD0\xF4ng Vy", "\xD0\xF4ng \xD0\xE0o", "\xD0\u1ED3ng Dao", "\xDD B\xECnh", "\xDD Lan", "\xDD Nhi", "\u0110an Linh", "\u0110an Qu\u1EF3nh", "\u0110an Thanh", "\u0110an Th\u01B0", "\u0110an T\xE2m", "\u0110inh H\u01B0\u01A1ng", "\u0110oan Thanh", "\u0110oan Trang", "\u0110\xE0i Trang", "\u0110\xF4ng Nghi", "\u0110\xF4ng Tr\xE0", "\u0110\xF4ng Tuy\u1EC1n", "\u0110\xF4ng Vy", "\u0110\u01A1n Thu\u1EA7n", "\u0110\u1EE9c H\u1EA1nh", "\u1EA4u L\u0103ng"];
var h9 = ["An C\u01A1", "An Khang", "\xC2n Lai", "An Nam", "An Nguy\xEAn", "An Ninh", "An T\xE2m", "\xC2n Thi\u1EC7n", "An T\u01B0\u1EDDng", "Anh \xD0\u1EE9c", "Anh D\u0169ng", "Anh Duy", "Anh Ho\xE0ng", "Anh Kh\u1EA3i", "Anh Khoa", "Anh Kh\xF4i", "Anh Minh", "Anh Qu\xE2n", "Anh Qu\u1ED1c", "Anh S\u01A1n", "Anh T\xE0i", "Anh Th\xE1i", "Anh T\xFA", "Anh Tu\u1EA5n", "Anh T\xF9ng", "Anh Vi\u1EC7t", "Anh V\u0169", "B\xE1 C\u01B0\u1EDDng", "B\xE1 K\u1EF3", "B\xE1 L\u1ED9c", "B\xE1 Long", "B\xE1 Ph\u01B0\u1EDBc", "B\xE1 Th\xE0nh", "B\xE1 Thi\u1EC7n", "B\xE1 Th\u1ECBnh", "B\xE1 Th\xFAc", "B\xE1 Tr\xFAc", "B\xE1 T\xF9ng", "B\xE1ch Du", "B\xE1ch Nh\xE2n", "B\u1EB1ng S\u01A1n", "B\u1EA3o An", "B\u1EA3o B\u1EA3o", "B\u1EA3o Ch\u1EA5n", "B\u1EA3o \xD0\u1ECBnh", "B\u1EA3o Duy", "B\u1EA3o Giang", "B\u1EA3o Hi\u1EC3n", "B\u1EA3o Hoa", "B\u1EA3o Ho\xE0ng", "B\u1EA3o Huy", "B\u1EA3o Huynh", "B\u1EA3o Hu\u1EF3nh", "B\u1EA3o Kh\xE1nh", "B\u1EA3o L\xE2m", "B\u1EA3o Long", "B\u1EA3o Ph\xE1p", "B\u1EA3o Qu\u1ED1c", "B\u1EA3o S\u01A1n", "B\u1EA3o Th\u1EA1ch", "B\u1EA3o Th\xE1i", "B\u1EA3o T\xEDn", "B\u1EA3o To\xE0n", "B\xEDch Nh\xE3", "B\xECnh An", "B\xECnh D\xE2n", "B\xECnh \xD0\u1EA1t", "B\xECnh \xD0\u1ECBnh", "B\xECnh D\u01B0\u01A1ng", "B\xECnh H\xF2a", "B\xECnh Minh", "B\xECnh Nguy\xEAn", "B\xECnh Qu\xE2n", "B\xECnh Thu\u1EADn", "B\xECnh Y\xEAn", "B\u1EEDu Ch\u01B0\u1EDFng", "B\u1EEDu Di\u1EC7p", "B\u1EEFu To\u1EA1i", "C\u1EA3nh Tu\u1EA5n", "Cao K\u1EF3", "Cao Minh", "Cao Nghi\u1EC7p", "Cao Nguy\xEAn", "Cao Nh\xE2n", "Cao Phong", "Cao S\u0129", "Cao S\u01A1n", "Cao S\u1EF9", "Cao Th\u1ECD", "Cao Ti\u1EBFn", "C\xE1t T\u01B0\u1EDDng", "C\xE1t Uy", "Ch\u1EA5n H\xF9ng", "Ch\u1EA5n H\u01B0ng", "Ch\u1EA5n Phong", "Ch\xE1nh Vi\u1EC7t", "Ch\u1EBF Ph\u01B0\u01A1ng", "Ch\xED Anh", "Ch\xED B\u1EA3o", "Ch\xED C\xF4ng", "Ch\xED D\u0169ng", "Ch\xED Giang", "Ch\xED Hi\u1EBFu", "Ch\xED Khang", "Ch\xED Khi\xEAm", "Ch\xED Ki\xEAn", "Ch\xED Nam", "Ch\xED S\u01A1n", "Ch\xED Thanh", "Ch\xED Th\xE0nh", "Chi\u1EBFn Th\u1EAFng", "Chi\xEAu Minh", "Chi\xEAu Phong", "Chi\xEAu Qu\xE2n", "Ch\xEDnh T\xE2m", "Ch\xEDnh Thu\u1EADn", "Ch\xEDnh Tr\u1EF1c", "Chu\u1EA9n Khoa", "Chung Th\u1EE7y", "C\xF4ng \xC1n", "C\xF4ng \xC2n", "C\xF4ng B\u1EB1ng", "C\xF4ng Giang", "C\xF4ng H\u1EA3i", "C\xF4ng H\xE0o", "C\xF4ng H\u1EADu", "C\xF4ng Hi\u1EBFu", "C\xF4ng Ho\xE1n", "C\xF4ng L\u1EADp", "C\xF4ng L\u1ED9c", "C\xF4ng Lu\u1EADn", "C\xF4ng Lu\u1EADt", "C\xF4ng L\xFD", "C\xF4ng Ph\u1EE5ng", "C\xF4ng Sinh", "C\xF4ng S\u01A1n", "C\xF4ng Th\xE0nh", "C\xF4ng Tr\xE1ng", "C\xF4ng Tu\u1EA5n", "C\u01B0\u1EDDng D\u0169ng", "C\u01B0\u01A1ng Ngh\u1ECB", "C\u01B0\u01A1ng Quy\u1EBFt", "C\u01B0\u1EDDng Th\u1ECBnh", "\xD0\u1EAFc C\u01B0\u1EDDng", "\xD0\u1EAFc Di", "\xD0\u1EAFc L\u1ED9", "\xD0\u1EAFc L\u1EF1c", "\xD0\u1EAFc Th\xE1i", "\xD0\u1EAFc Th\xE0nh", "\xD0\u1EAFc Tr\u1ECDng", "\xD0\u1EA1i D\u01B0\u01A1ng", "\xD0\u1EA1i H\xE0nh", "\xD0\u1EA1i Ng\u1ECDc", "\xD0\u1EA1i Th\u1ED1ng", "D\xE2n Hi\u1EC7p", "D\xE2n Kh\xE1nh", "\xD0an Qu\u1EBF", "\xD0an T\xE2m", "\xD0\u0103ng An", "\xD0\u0103ng \xD0\u1EA1t", "\xD0\u0103ng Kh\xE1nh", "\xD0\u0103ng Khoa", "\u0110\u0103ng Kh\u01B0\u01A1ng", "\xD0\u0103ng Minh", "\u0110\u0103ng Quang", "Danh Nh\xE2n", "Danh S\u01A1n", "Danh Th\xE0nh", "Danh V\u0103n", "\xD0\u1EA1t D\u0169ng", "\xD0\u1EA1t H\xF2a", "\xD0\xECnh Chi\u1EC3u", "\xD0\xECnh Ch\u01B0\u01A1ng", "\xD0\xECnh C\u01B0\u1EDDng", "\xD0\xECnh Di\u1EC7u", "\xD0\xECnh \xD0\xF4n", "\xD0\xECnh D\u01B0\u01A1ng", "\xD0\xECnh H\u1EA3o", "\xD0\xECnh H\u1EE3p", "\xD0\xECnh Kim", "\xD0inh L\u1ED9c", "\xD0\xECnh L\u1ED9c", "\xD0\xECnh Lu\u1EADn", "\xD0\u1ECBnh L\u1EF1c", "\xD0\xECnh Nam", "\xD0\xECnh Ng\xE2n", "\xD0\xECnh Nguy\xEAn", "\xD0\xECnh Nh\xE2n", "\xD0\xECnh Ph\xFA", "\xD0\xECnh Ph\xFAc", "\xD0\xECnh Qu\u1EA3ng", "\xD0\xECnh Sang", "\xD0\u1ECBnh Si\xEAu", "\xD0\xECnh Th\u1EAFng", "\xD0\xECnh Thi\u1EC7n", "\xD0\xECnh To\xE0n", "\xD0\xECnh Trung", "\xD0\xECnh Tu\u1EA5n", "\xD0o\xE0n T\u1EE5", "\xD0\u1ED3ng B\u1EB1ng", "\xD0\xF4ng D\u01B0\u01A1ng", "\xD0\xF4ng H\u1EA3i", "\xD0\u1ED3ng Kh\xE1nh", "\xD0\xF4ng Nguy\xEAn", "\xD0\xF4ng Phong", "\xD0\xF4ng Ph\u01B0\u01A1ng", "\xD0\xF4ng Qu\xE2n", "\xD0\xF4ng S\u01A1n", "\xD0\u1EE9c \xC2n", "\xD0\u1EE9c Anh", "\xD0\u1EE9c B\u1EB1ng", "\xD0\u1EE9c B\u1EA3o", "\xD0\u1EE9c B\xECnh", "\xD0\u1EE9c Ch\xEDnh", "\xD0\u1EE9c Duy", "\xD0\u1EE9c Giang", "\xD0\u1EE9c H\u1EA3i", "\xD0\u1EE9c H\u1EA1nh", "\u0110\u1EE9c H\xF2a", "\xD0\u1EE9c H\xF2a", "\xD0\u1EE9c Huy", "\xD0\u1EE9c Kh\u1EA3i", "\xD0\u1EE9c Khang", "\xD0\u1EE9c Khi\xEAm", "\xD0\u1EE9c Ki\xEAn", "\xD0\u1EE9c Long", "\xD0\u1EE9c M\u1EA1nh", "\xD0\u1EE9c Minh", "\xD0\u1EE9c Nh\xE2n", "\xD0\u1EE9c Phi", "\xD0\u1EE9c Phong", "\xD0\u1EE9c Ph\xFA", "\xD0\u1EE9c Quang", "\xD0\u1EE9c Qu\u1EA3ng", "\xD0\u1EE9c Quy\u1EC1n", "\xD0\u1EE9c Si\xEAu", "\xD0\u1EE9c Sinh", "\xD0\u1EE9c T\xE0i", "\xD0\u1EE9c T\xE2m", "\xD0\u1EE9c Th\u1EAFng", "\xD0\u1EE9c Th\xE0nh", "\xD0\u1EE9c Th\u1ECD", "\xD0\u1EE9c To\xE0n", "\xD0\u1EE9c To\u1EA3n", "\xD0\u1EE9c Tr\xED", "\xD0\u1EE9c Trung", "\xD0\u1EE9c Tu\u1EA5n", "\xD0\u1EE9c Tu\u1EC7", "\xD0\u1EE9c T\u01B0\u1EDDng", "D\u0169ng Tr\xED", "D\u0169ng Vi\u1EC7t", "D\u01B0\u01A1ng Anh", "D\u01B0\u01A1ng Kh\xE1nh", "Duy An", "Duy B\u1EA3o", "Duy C\u1EA9n", "Duy C\u01B0\u1EDDng", "Duy H\u1EA3i", "Duy Hi\u1EC1n", "Duy Hi\u1EBFu", "Duy Ho\xE0ng", "Duy H\xF9ng", "Duy Khang", "Duy Kh\xE1nh", "Duy Khi\xEAm", "Duy K\xEDnh", "Duy Lu\u1EADn", "Duy M\u1EA1nh", "Duy Minh", "Duy Ng\xF4n", "Duy Nh\u01B0\u1EE3ng", "Duy Quang", "Duy T\xE2m", "Duy T\xE2n", "Duy Th\u1EA1ch", "Duy Th\u1EAFng", "Duy Thanh", "Duy Th\xE0nh", "Duy Th\xF4ng", "Duy Ti\u1EBFp", "Duy Tuy\u1EC1n", "Gia \xC2n", "Gia Anh", "Gia B\u1EA1ch", "Gia B\u1EA3o", "Gia B\xECnh", "Gia C\u1EA7n", "Gia C\u1EA9n", "Gia C\u1EA3nh", "Gia \xD0\u1EA1o", "Gia \xD0\u1EE9c", "Gia Hi\u1EC7p", "Gia H\xF2a", "Gia Ho\xE0ng", "Gia Hu\u1EA5n", "Gia H\xF9ng", "Gia H\u01B0ng", "Gia Huy", "Gia Kh\xE1nh", "Gia Khi\xEAm", "Gia Ki\xEAn", "Gia Ki\u1EC7t", "Gia L\u1EADp", "Gia Minh", "Gia Ngh\u1ECB", "Gia Phong", "Gia Ph\xFAc", "Gia Ph\u01B0\u1EDBc", "Gia Thi\u1EC7n", "Gia Th\u1ECBnh", "Gia Uy", "Gia Vinh", "Giang Lam", "Giang Nam", "Giang S\u01A1n", "Giang Thi\xEAn", "H\xE0 H\u1EA3i", "H\u1EA3i B\u1EB1ng", "H\u1EA3i B\xECnh", "H\u1EA3i \xD0\u0103ng", "H\u1EA3i D\u01B0\u01A1ng", "H\u1EA3i Giang", "H\u1EA3i H\xE0", "H\u1EA3i Long", "H\u1EA3i L\xFD", "H\u1EA3i Nam", "H\u1EA3i Nguy\xEAn", "H\u1EA3i Phong", "H\u1EA3i Qu\xE2n", "H\u1EA3i S\u01A1n", "H\u1EA3i Th\u1EE5y", "H\xE1n L\xE2m", "H\u1EA1nh T\u01B0\u1EDDng", "H\xE0o Nghi\u1EC7p", "H\u1EA1o Nhi\xEAn", "Hi\u1EC1n Minh", "Hi\u1EC7p Dinh", "Hi\u1EC7p H\xE0", "Hi\u1EC7p H\xE0o", "Hi\u1EC7p Hi\u1EC1n", "Hi\u1EC7p H\xF2a", "Hi\u1EC7p V\u0169", "Hi\u1EBFu D\u1EE5ng", "Hi\u1EBFu H\u1ECDc", "Hi\u1EC3u Lam", "Hi\u1EBFu Li\xEAm", "Hi\u1EBFu Ngh\u0129a", "Hi\u1EBFu Phong", "Hi\u1EBFu Th\xF4ng", "H\u1ED3 B\u1EAFc", "H\u1ED3 Nam", "H\xF2a B\xECnh", "H\xF2a Giang", "H\xF2a Hi\u1EC7p", "H\xF2a H\u1EE3p", "H\xF2a L\u1EA1c", "H\xF2a Th\xE1i", "Ho\xE0i B\u1EAFc", "Ho\xE0i Nam", "Ho\xE0i Phong", "Ho\xE0i Thanh", "Ho\xE0i T\xEDn", "Ho\xE0i Trung", "Ho\xE0i Vi\u1EC7t", "Ho\xE0i V\u1EF9", "Ho\xE0n Ki\u1EBFm", "Ho\xE0n V\u0169", "Ho\xE0ng \xC2n", "Ho\xE0ng Du\u1EC7", "Ho\xE0ng D\u0169ng", "Ho\xE0ng Giang", "Ho\xE0ng H\u1EA3i", "Ho\xE0ng Hi\u1EC7p", "Ho\xE0ng Kh\u1EA3i", "Ho\xE0ng Khang", "Ho\xE0ng Kh\xF4i", "Ho\xE0ng L\xE2m", "Ho\xE0ng Linh", "Ho\xE0ng Long", "Ho\xE0ng Minh", "Ho\xE0ng M\u1EF9", "Ho\xE0ng Nam", "Ho\xE0ng Ng\xF4n", "Ho\xE0ng Ph\xE1t", "Ho\xE0ng Qu\xE2n", "Ho\xE0ng Th\xE1i", "Ho\xE0ng Vi\u1EC7t", "Ho\xE0ng Xu\xE2n", "H\u1ED3ng \xD0\u0103ng", "H\u1ED3ng \u0110\u1EE9c", "H\u1ED3ng Giang", "H\u1ED3ng L\xE2n", "H\u1ED3ng Li\xEAm", "H\u1ED3ng L\u0129nh", "H\u1ED3ng Minh", "H\u1ED3ng Nh\u1EADt", "H\u1ED3ng Nhu\u1EADn", "H\u1ED3ng Ph\xE1t", "H\u1ED3ng Quang", "H\u1ED3ng Qu\xFD", "H\u1ED3ng S\u01A1n", "H\u1ED3ng Th\u1ECBnh", "H\u1ED3ng Th\u1EE5y", "H\u1ED3ng Vi\u1EC7t", "H\u1ED3ng Vinh", "Hu\xE2n V\xF5", "H\xF9ng Anh", "H\xF9ng C\u01B0\u1EDDng", "H\u01B0ng \xD0\u1EA1o", "H\xF9ng D\u0169ng", "H\xF9ng Ng\u1ECDc", "H\xF9ng Phong", "H\xF9ng S\u01A1n", "H\xF9ng Th\u1ECBnh", "H\xF9ng T\u01B0\u1EDDng", "H\u01B0\u1EDBng B\xECnh", "H\u01B0\u1EDBng D\u01B0\u01A1ng", "H\u01B0\u1EDBng Thi\u1EC7n", "H\u01B0\u1EDBng Ti\u1EC1n", "H\u1EEFu B\xE0o", "H\u1EEFu B\u1EA3o", "H\u1EEFu B\xECnh", "H\u1EEFu Canh", "H\u1EEFu C\u1EA3nh", "H\u1EEFu Ch\xE2u", "H\u1EEFu Chi\u1EBFn", "H\u1EEFu C\u01B0\u01A1ng", "H\u1EEFu C\u01B0\u1EDDng", "H\u1EEFu \xD0\u1EA1t", "H\u1EEFu \xD0\u1ECBnh", "H\u1EEFu H\u1EA1nh", "H\u1EEFu Hi\u1EC7p", "H\u1EEFu Ho\xE0ng", "H\u1EEFu H\xF9ng", "H\u1EEFu Khang", "H\u1EEFu Khanh", "H\u1EEFu Kho\xE1t", "H\u1EEFu Kh\xF4i", "H\u1EEFu Long", "H\u1EEFu L\u01B0\u01A1ng", "H\u1EEFu Minh", "H\u1EEFu Nam", "H\u1EEFu Ngh\u1ECB", "H\u1EEFu Ngh\u0129a", "H\u1EEFu Ph\u01B0\u1EDBc", "H\u1EEFu T\xE0i", "H\u1EEFu T\xE2m", "H\u1EEFu T\xE2n", "H\u1EEFu Th\u1EAFng", "H\u1EEFu Thi\u1EC7n", "H\u1EEFu Th\u1ECD", "H\u1EEFu Th\u1ED1ng", "H\u1EEFu Th\u1EF1c", "H\u1EEFu To\xE0n", "H\u1EEFu Tr\xE1c", "H\u1EEFu Tr\xED", "H\u1EEFu Trung", "H\u1EEFu T\u1EEB", "H\u1EEFu T\u01B0\u1EDDng", "H\u1EEFu V\u0129nh", "H\u1EEFu V\u01B0\u1EE3ng", "Huy Anh", "Huy Chi\u1EC3u", "Huy H\xE0", "Huy Ho\xE0ng", "Huy Kha", "Huy Kh\xE1nh", "Huy Khi\xEAm", "Huy L\u0129nh", "Huy Phong", "Huy Quang", "Huy Th\xE0nh", "Huy Th\xF4ng", "Huy Tr\xE2n", "Huy Tu\u1EA5n", "Huy T\u01B0\u1EDDng", "Huy Vi\u1EC7t", "Huy V\u0169", "Kh\u1EAFc Anh", "Kh\u1EAFc C\xF4ng", "Kh\u1EAFc D\u0169ng", "Kh\u1EAFc Duy", "Kh\u1EAFc K\u1EF7", "Kh\u1EAFc Minh", "Kh\u1EAFc Ninh", "Kh\u1EAFc Th\xE0nh", "Kh\u1EAFc Tri\u1EC7u", "Kh\u1EAFc Tr\u1ECDng", "Kh\u1EAFc Tu\u1EA5n", "Kh\u1EAFc Vi\u1EC7t", "Kh\u1EAFc V\u0169", "Kh\u1EA3i Ca", "Kh\u1EA3i H\xF2a", "Khai Minh", "Kh\u1EA3i T\xE2m", "Kh\u1EA3i Tu\u1EA5n", "Khang Ki\u1EC7n", "Kh\xE1nh An", "Kh\xE1nh B\xECnh", "Kh\xE1nh \xD0an", "Kh\xE1nh Duy", "Kh\xE1nh Giang", "Kh\xE1nh H\u1EA3i", "Kh\xE1nh H\xF2a", "Kh\xE1nh Ho\xE0n", "Kh\xE1nh Ho\xE0ng", "Kh\xE1nh H\u1ED9i", "Kh\xE1nh Huy", "Kh\xE1nh Minh", "Kh\xE1nh Nam", "Kh\xE1nh V\u0103n", "Khoa Tr\u01B0\u1EDFng", "Kh\xF4i Nguy\xEAn", "Kh\u1EDFi Phong", "Kh\xF4i V\u0129", "Kh\u01B0\u01A1ng Duy", "Khuy\u1EBFn H\u1ECDc", "Ki\xEAn B\xECnh", "Ki\u1EBFn B\xECnh", "Ki\xEAn C\u01B0\u1EDDng", "Ki\u1EBFn \xD0\u1EE9c", "Ki\xEAn Giang", "Ki\xEAn L\xE2m", "Ki\xEAn Trung", "Ki\u1EBFn V\u0103n", "Ki\u1EC7t V\xF5", "Kim \xD0an", "Kim Ho\xE0ng", "Kim Long", "Kim Ph\xFA", "Kim S\u01A1n", "Kim Th\u1ECBnh", "Kim Th\xF4ng", "Kim To\xE0n", "Kim V\u01B0\u1EE3ng", "K\u1EF3 V\xF5", "L\u1EA1c Nh\xE2n", "L\u1EA1c Ph\xFAc", "L\xE2m \xD0\u1ED3ng", "L\xE2m D\u0169ng", "Lam Giang", "Lam Ph\u01B0\u01A1ng", "L\xE2m Tr\u01B0\u1EDDng", "L\xE2m T\u01B0\u1EDDng", "L\xE2m Vi\xEAn", "L\xE2m V\u0169", "L\u1EADp Nghi\u1EC7p", "L\u1EADp Th\xE0nh", "Li\xEAn Ki\u1EC7t", "Long Giang", "Long Qu\xE2n", "Long V\u1ECBnh", "L\u01B0\u01A1ng Quy\u1EC1n", "L\u01B0\u01A1ng T\xE0i", "L\u01B0\u01A1ng Thi\u1EC7n", "L\u01B0\u01A1ng Tuy\u1EC1n", "M\u1EA1nh C\u01B0\u01A1ng", "M\u1EA1nh C\u01B0\u1EDDng", "M\u1EA1nh \xD0\xECnh", "M\u1EA1nh D\u0169ng", "M\u1EA1nh H\xF9ng", "M\u1EA1nh Nghi\xEAm", "M\u1EA1nh Qu\u1EF3nh", "M\u1EA1nh T\u1EA5n", "M\u1EA1nh Th\u1EAFng", "M\u1EA1nh Thi\u1EC7n", "M\u1EA1nh Tr\xECnh", "M\u1EA1nh Tr\u01B0\u1EDDng", "M\u1EA1nh Tu\u1EA5n", "M\u1EA1nh T\u01B0\u1EDDng", "Minh \xC2n", "Minh Anh", "Minh C\u1EA3nh", "Minh D\xE2n", "Minh \xD0an", "Minh Danh", "Minh \xD0\u1EA1t", "Minh \xD0\u1EE9c", "Minh D\u0169ng", "Minh Giang", "Minh H\u1EA3i", "Minh H\xE0o", "Minh Hi\xEAn", "Minh Hi\u1EBFu", "Minh H\xF2a", "Minh Ho\xE0ng", "Minh Hu\u1EA5n", "Minh H\xF9ng", "Minh H\u01B0ng", "Minh Huy", "Minh H\u1EF7", "Minh Khang", "Minh Kh\xE1nh", "Minh Khi\u1EBFu", "Minh Kh\xF4i", "Minh Ki\u1EC7t", "Minh K\u1EF3", "Minh L\xFD", "Minh M\u1EABn", "Minh Ngh\u0129a", "Minh Nh\xE2n", "Minh Nh\u1EADt", "Minh Nhu", "Minh Qu\xE2n", "Minh Quang", "Minh Qu\u1ED1c", "Minh S\u01A1n", "Minh T\xE2n", "Minh Th\u1EA1c", "Minh Th\xE1i", "Minh Th\u1EAFng", "Minh Thi\u1EC7n", "Minh Th\xF4ng", "Minh Thu\u1EADn", "Minh Ti\u1EBFn", "Minh To\xE0n", "Minh Tr\xED", "Minh Tri\u1EBFt", "Minh Tri\u1EC7u", "Minh Trung", "Minh T\xFA", "Minh Tu\u1EA5n", "Minh Vu", "Minh V\u0169", "Minh V\u01B0\u01A1ng", "M\u1ED9ng Gi\xE1c", "M\u1ED9ng Ho\xE0n", "M\u1ED9ng L\xE2m", "M\u1ED9ng Long", "Nam An", "Nam D\u01B0\u01A1ng", "Nam H\u1EA3i", "Nam H\u01B0ng", "Nam L\u1ED9c", "Nam Nh\u1EADt", "Nam Ninh", "Nam Phi", "Nam Ph\u01B0\u01A1ng", "Nam S\u01A1n", "Nam Thanh", "Nam Th\xF4ng", "Nam T\xFA", "Nam Vi\u1EC7t", "Ngh\u1ECB L\u1EF1c", "Ngh\u1ECB Quy\u1EC1n", "Ngh\u0129a D\u0169ng", "Ngh\u0129a H\xF2a", "Ng\u1ECDc \u1EA8n", "Ng\u1ECDc C\u1EA3nh", "Ng\u1ECDc C\u01B0\u1EDDng", "Ng\u1ECDc Danh", "Ng\u1ECDc \xD0o\xE0n", "Ng\u1ECDc D\u0169ng", "Ng\u1ECDc H\u1EA3i", "Ng\u1ECDc Hi\u1EC3n", "Ng\u1ECDc Huy", "Ng\u1ECDc Khang", "Ng\u1ECDc Kh\xF4i", "Ng\u1ECDc Kh\u01B0\u01A1ng", "Ng\u1ECDc Lai", "Ng\u1ECDc L\xE2n", "Ng\u1ECDc Minh", "Ng\u1ECDc Ng\u1EA1n", "Ng\u1ECDc Quang", "Ng\u1ECDc S\u01A1n", "Ng\u1ECDc Th\u1EA1ch", "Ng\u1ECDc Thi\u1EC7n", "Ng\u1ECDc Th\u1ECD", "Ng\u1ECDc Thu\u1EADn", "Ng\u1ECDc Ti\u1EC3n", "Ng\u1ECDc Tr\u1EE5", "Ng\u1ECDc Tu\u1EA5n", "Nguy\xEAn B\u1EA3o", "Nguy\xEAn B\u1ED5ng", "Nguy\xEAn \xD0an", "Nguy\xEAn Giang", "Nguy\xEAn Gi\xE1p", "Nguy\u1EC5n H\u1EA3i An", "Nguy\xEAn H\u1EA1nh", "Nguy\xEAn Khang", "Nguy\xEAn Kh\xF4i", "Nguy\xEAn L\u1ED9c", "Nguy\xEAn Nh\xE2n", "Nguy\xEAn Phong", "Nguy\xEAn S\u1EED", "Nguy\xEAn V\u0103n", "Nh\xE2n Nguy\xEAn", "Nh\xE2n S\xE2m", "Nh\xE2n T\u1EEB", "Nh\xE2n V\u0103n", "Nh\u1EADt B\u1EA3o Long", "Nh\u1EADt D\u0169ng", "Nh\u1EADt Duy", "Nh\u1EADt H\xF2a", "Nh\u1EADt Ho\xE0ng", "Nh\u1EADt H\u1ED3ng", "Nh\u1EADt H\xF9ng", "Nh\u1EADt Huy", "Nh\u1EADt Kh\u01B0\u01A1ng", "Nh\u1EADt Minh", "Nh\u1EADt Nam", "Nh\u1EADt Qu\xE2n", "Nh\u1EADt Quang", "Nh\u1EADt Qu\u1ED1c", "Nh\u1EADt T\u1EA5n", "Nh\u1EADt Th\u1ECBnh", "Nh\u1EA5t Ti\u1EBFn", "Nh\u1EADt Ti\u1EBFn", "Nh\u01B0 Khang", "Ni\u1EC7m Nhi\xEAn", "Phi C\u01B0\u1EDDng", "Phi \xD0i\u1EC7p", "Phi H\u1EA3i", "Phi Ho\xE0ng", "Phi H\xF9ng", "Phi Long", "Phi Nh\u1EA1n", "Phong Ch\xE2u", "Phong Dinh", "Phong \xD0\u1ED9", "Ph\xFA \xC2n", "Ph\xFA B\xECnh", "Ph\xFA H\u1EA3i", "Ph\xFA Hi\u1EC7p", "Ph\xFA H\xF9ng", "Ph\xFA H\u01B0ng", "Ph\xFA Th\u1ECBnh", "Ph\xFA Th\u1ECD", "Ph\xFA Th\u1EDDi", "Ph\xFAc C\u01B0\u1EDDng", "Ph\xFAc \xD0i\u1EC1n", "Ph\xFAc Duy", "Ph\xFAc H\xF2a", "Ph\xFAc H\u01B0ng", "Ph\xFAc Khang", "Ph\xFAc L\xE2m", "Ph\u1EE5c L\u1EC5", "Ph\xFAc Nguy\xEAn", "Ph\xFAc Sinh", "Ph\xFAc T\xE2m", "Ph\xFAc Th\u1ECBnh", "Ph\u1EE5ng Vi\u1EC7t", "Ph\u01B0\u1EDBc An", "Ph\u01B0\u1EDBc L\u1ED9c", "Ph\u01B0\u1EDBc Nguy\xEAn", "Ph\u01B0\u1EDBc Nh\xE2n", "Ph\u01B0\u1EDBc S\u01A1n", "Ph\u01B0\u1EDBc Thi\u1EC7n", "Ph\u01B0\u1EE3ng Long", "Ph\u01B0\u01A1ng Nam", "Ph\u01B0\u01A1ng Phi", "Ph\u01B0\u01A1ng Th\u1EC3", "Ph\u01B0\u01A1ng Tr\u1EA1ch", "Ph\u01B0\u01A1ng Tri\u1EC1u", "Qu\xE2n D\u01B0\u01A1ng", "Quang Anh", "Quang B\u1EEDu", "Qu\u1EA3ng \xD0\u1EA1i", "Quang Danh", "Quang \xD0\u1EA1t", "Qu\u1EA3ng \xD0\u1EA1t", "Quang \xD0\u1EE9c", "Quang D\u0169ng", "Quang D\u01B0\u01A1ng", "Quang H\xE0", "Quang H\u1EA3i", "Quang H\xF2a", "Quang H\xF9ng", "Quang H\u01B0ng", "Quang H\u1EEFu", "Quang Huy", "Quang Kh\u1EA3i", "Quang Khanh", "Quang L\xE2m", "Quang L\xE2n", "Quang Linh", "Quang L\u1ED9c", "Quang Minh", "Quang Nh\xE2n", "Quang Nh\u1EADt", "Quang Ninh", "Quang S\xE1ng", "Quang T\xE0i", "Quang Th\u1EA1ch", "Quang Th\xE1i", "Quang Th\u1EAFng", "Quang Thi\xEAn", "Quang Th\u1ECBnh", "Qu\u1EA3ng Th\xF4ng", "Quang Thu\u1EADn", "Quang Tri\u1EC1u", "Quang Tri\u1EC7u", "Quang Tr\u1ECDng", "Quang Trung", "Quang Tr\u01B0\u1EDDng", "Quang T\xFA", "Quang Tu\u1EA5n", "Quang Vinh", "Quang V\u0169", "Quang Xu\xE2n", "Qu\u1ED1c Anh", "Qu\u1ED1c B\u1EA3o", "Qu\u1ED1c B\xECnh", "Qu\u1ED1c \xD0\u1EA1i", "Qu\u1ED1c \xD0i\u1EC1n", "Qu\u1ED1c H\u1EA3i", "Qu\u1ED1c H\u1EA1nh", "Qu\u1ED1c Hi\u1EC1n", "Qu\u1ED1c Hi\u1EC3n", "Qu\u1ED1c H\xF2a", "Qu\u1ED1c Ho\xE0i", "Qu\u1ED1c Ho\xE0ng", "Qu\u1ED1c H\xF9ng", "Qu\u1ED1c H\u01B0ng", "Qu\u1ED1c Huy", "Qu\u1ED1c Kh\xE1nh", "Qu\u1ED1c M\u1EA1nh", "Qu\u1ED1c Minh", "Qu\u1ED1c M\u1EF9", "Qu\u1ED1c Phong", "Qu\u1ED1c Ph\u01B0\u01A1ng", "Qu\u1ED1c Qu\xE2n", "Qu\u1ED1c Quang", "Qu\u1ED1c Qu\xFD", "Qu\u1ED1c Th\u1EAFng", "Qu\u1ED1c Th\xE0nh", "Qu\u1ED1c Thi\u1EC7n", "Qu\u1ED1c Th\u1ECBnh", "Qu\u1ED1c Th\xF4ng", "Qu\u1ED1c Ti\u1EBFn", "Qu\u1ED1c To\u1EA3n", "Qu\u1ED1c Tr\u1EE5", "Qu\u1ED1c Trung", "Qu\u1ED1c Tr\u01B0\u1EDDng", "Qu\u1ED1c Tu\u1EA5n", "Qu\u1ED1c V\u0103n", "Qu\u1ED1c Vi\u1EC7t", "Qu\u1ED1c Vinh", "Qu\u1ED1c V\u0169", "Qu\xFD Kh\xE1nh", "Qu\xFD V\u0129nh", "Quy\u1EBFt Th\u1EAFng", "S\u0129 Ho\xE0ng", "S\u01A1n D\u01B0\u01A1ng", "S\u01A1n Giang", "S\u01A1n H\xE0", "S\u01A1n H\u1EA3i", "S\u01A1n L\xE2m", "S\u01A1n Qu\xE2n", "S\u01A1n Quy\u1EC1n", "S\u01A1n Trang", "S\u01A1n T\xF9ng", "Song Lam", "S\u1EF9 \xD0an", "S\u1EF9 Ho\xE0ng", "S\u1EF9 Ph\xFA", "S\u1EF9 Th\u1EF1c", "T\u1EA1 Hi\u1EC1n", "T\xE0i \xD0\u1EE9c", "T\xE0i Nguy\xEAn", "T\xE2m Thi\u1EC7n", "T\xE2n B\xECnh", "T\xE2n \xD0\u1ECBnh", "T\u1EA5n D\u0169ng", "T\u1EA5n Khang", "T\u1EA5n L\u1EE3i", "T\xE2n Long", "T\u1EA5n Nam", "T\u1EA5n Ph\xE1t", "T\xE2n Ph\u01B0\u1EDBc", "T\u1EA5n Sinh", "T\u1EA5n T\xE0i", "T\xE2n Th\xE0nh", "T\u1EA5n Th\xE0nh", "T\u1EA5n Tr\xECnh", "T\u1EA5n Tr\u01B0\u01A1ng", "T\u1EA5t B\xECnh", "T\u1EA5t Hi\u1EBFu", "T\u1EA5t H\xF2a", "Th\u1EA1ch S\u01A1n", "Th\u1EA1ch T\xF9ng", "Th\xE1i B\xECnh", "Th\xE1i \xD0\u1EE9c", "Th\xE1i D\u01B0\u01A1ng", "Th\xE1i Duy", "Th\xE1i H\xF2a", "Th\xE1i Minh", "Th\xE1i Nguy\xEAn", "Th\xE1i San", "Th\xE1i Sang", "Th\xE1i S\u01A1n", "Th\xE1i T\xE2n", "Th\xE1i T\u1ED5", "Th\u1EAFng C\u1EA3nh", "Th\u1EAFng L\u1EE3i", "Th\u0103ng Long", "Th\xE0nh An", "Th\xE0nh \xC2n", "Th\xE0nh Ch\xE2u", "Th\xE0nh C\xF4ng", "Th\xE0nh Danh", "Thanh \xD0\u1EA1o", "Th\xE0nh \xD0\u1EA1t", "Th\xE0nh \xD0\u1EC7", "Thanh \xD0o\xE0n", "Th\xE0nh Doanh", "Thanh H\u1EA3i", "Thanh H\xE0o", "Thanh H\u1EADu", "Th\xE0nh H\xF2a", "Thanh Huy", "Th\xE0nh Khi\xEAm", "Thanh Ki\xEAn", "Thanh Li\xEAm", "Th\xE0nh L\u1EE3i", "Thanh Long", "Th\xE0nh Long", "Thanh Minh", "Th\xE0nh Nguy\xEAn", "Th\xE0nh Nh\xE2n", "Thanh Phi", "Thanh Phong", "Th\xE0nh Ph\u01B0\u01A1ng", "Thanh Quang", "Th\xE0nh Sang", "Thanh S\u01A1n", "Thanh Th\u1EBF", "Thanh Thi\xEAn", "Th\xE0nh Thi\u1EC7n", "Thanh Thu\u1EADn", "Th\xE0nh T\xEDn", "Thanh T\u1ECBnh", "Thanh To\xE0n", "Thanh To\u1EA3n", "Thanh Trung", "Th\xE0nh Trung", "Thanh T\xFA", "Thanh Tu\u1EA5n", "Thanh T\xF9ng", "Thanh Vi\u1EC7t", "Thanh Vinh", "Th\xE0nh Vinh", "Thanh V\u0169", "Th\xE0nh \xDD", "Th\u1EA5t C\u01B0\u01A1ng", "Th\u1EA5t D\u0169ng", "Th\u1EA5t Th\u1ECD", "Th\u1EBF An", "Th\u1EBF Anh", "Th\u1EBF B\xECnh", "Th\u1EBF D\xE2n", "Th\u1EBF Doanh", "Th\u1EBF D\u0169ng", "Th\u1EBF Duy\u1EC7t", "Th\u1EBF Hu\u1EA5n", "Th\u1EBF H\xF9ng", "Th\u1EBF L\xE2m", "Th\u1EBF L\u1EF1c", "Th\u1EBF Minh", "Th\u1EBF N\u0103ng", "Th\u1EBF Ph\xFAc", "Th\u1EBF Ph\u01B0\u01A1ng", "Th\u1EBF Quy\u1EC1n", "Th\u1EBF S\u01A1n", "Th\u1EBF Trung", "Th\u1EBF T\u01B0\u1EDDng", "Th\u1EBF Vinh", "Thi\xEAn An", "Thi\xEAn \xC2n", "Thi\u1EC7n \xC2n", "Thi\xEAn B\u1EEDu", "Thi\xEAn \xD0\u1EE9c", "Thi\u1EC7n \xD0\u1EE9c", "Thi\u1EC7n D\u0169ng", "Thi\u1EC7n Giang", "Thi\xEAn H\u01B0ng", "Thi\u1EC7n Khi\xEAm", "Thi\xEAn L\u1EA1c", "Thi\u1EC7n Lu\xE2n", "Thi\xEAn L\u01B0\u01A1ng", "Thi\u1EC7n L\u01B0\u01A1ng", "Thi\xEAn M\u1EA1nh", "Thi\u1EC7n Minh", "Thi\u1EC7n Ng\xF4n", "Thi\xEAn Ph\xFA", "Thi\u1EC7n Ph\u01B0\u1EDBc", "Thi\u1EC7n Sinh", "Thi\u1EC7n T\xE2m", "Thi\u1EC7n Thanh", "Thi\u1EC7n T\xEDnh", "Thi\xEAn Tr\xED", "Thi\u1EBFu Anh", "Thi\u1EC7u B\u1EA3o", "Thi\u1EBFu C\u01B0\u1EDDng", "Th\u1ECBnh C\u01B0\u1EDDng", "Th\u1EDDi Nhi\u1EC7m", "Th\xF4ng \xD0\u1EA1t", "Th\xF4ng Minh", "Th\u1ED1ng Nh\u1EA5t", "Th\xF4ng Tu\u1EC7", "Th\u1EE5 Nh\xE2n", "Thu Sinh", "Thu\u1EADn Anh", "Thu\u1EADn H\xF2a", "Thu\u1EADn Phong", "Thu\u1EADn Ph\u01B0\u01A1ng", "Thu\u1EADn Th\xE0nh", "Thu\u1EADn To\xE0n", "Th\u01B0\u1EE3ng C\u01B0\u1EDDng", "Th\u01B0\u1EE3ng Khang", "Th\u01B0\u1EDDng Ki\u1EC7t", "Th\u01B0\u1EE3ng Li\u1EC7t", "Th\u01B0\u1EE3ng N\u0103ng", "Th\u01B0\u1EE3ng Ngh\u1ECB", "Th\u01B0\u1EE3ng Thu\u1EADt", "Th\u01B0\u1EDDng Xu\xE2n", "Th\u1EE5y Du", "Th\u1EE5y Long", "Th\u1EE5y Mi\xEAn", "Th\u1EE5y V\u0169", "T\xEDch \xD0\u1EE9c", "T\xEDch Thi\u1EC7n", "Ti\u1EBFn \xD0\u1EE9c", "Ti\u1EBFn D\u0169ng", "Ti\u1EC1n Giang", "Ti\u1EBFn Hi\u1EC7p", "Ti\u1EBFn Ho\u1EA1t", "Ti\u1EBFn V\xF5", "Ti\u1EC3u B\u1EA3o", "To\xE0n Th\u1EAFng", "T\xF4n L\u1EC5", "Tr\xED D\u0169ng", "Tr\xED H\xE0o", "Tr\xED H\xF9ng", "Tr\xED H\u1EEFu", "Tr\xED Li\xEAn", "Tr\xED Minh", "Tr\xED Th\u1EAFng", "Tr\xED T\u1ECBnh", "Tri\u1EC3n Sinh", "Tri\u1EC7u Th\xE1i", "Tri\u1EC1u Th\xE0nh", "Tr\u1ECDng Ch\xEDnh", "Tr\u1ECDng D\u0169ng", "Tr\u1ECDng Duy", "Tr\u1ECDng H\xE0", "Tr\u1ECDng Hi\u1EBFu", "Tr\u1ECDng H\xF9ng", "Tr\u1ECDng Kh\xE1nh", "Tr\u1ECDng Ki\xEAn", "Tr\u1ECDng Ngh\u0129a", "Tr\u1ECDng Nh\xE2n", "Tr\u1ECDng T\u1EA5n", "Tr\u1ECDng Tr\xED", "Tr\u1ECDng T\u01B0\u1EDDng", "Tr\u1ECDng Vi\u1EC7t", "Tr\u1ECDng Vinh", "Tr\xFAc C\u01B0\u01A1ng", "Tr\xFAc Sinh", "Trung Anh", "Trung Ch\xEDnh", "Trung Chuy\xEAn", "Trung \xD0\u1EE9c", "Trung D\u0169ng", "Trung H\u1EA3i", "Trung Hi\u1EBFu", "Trung Ki\xEAn", "Trung L\u1EF1c", "Trung Ngh\u0129a", "Trung Nguy\xEAn", "Trung Nh\xE2n", "Trung Th\xE0nh", "Trung Th\u1EF1c", "Trung Vi\u1EC7t", "Tr\u01B0\u1EDDng An", "Tr\u01B0\u1EDDng Chinh", "Tr\u01B0\u1EDDng Giang", "Tr\u01B0\u1EDDng Hi\u1EC7p", "Tr\u01B0\u1EDDng K\u1EF3", "Tr\u01B0\u1EDDng Li\xEAn", "Tr\u01B0\u1EDDng Long", "Tr\u01B0\u1EDDng Nam", "Tr\u01B0\u1EDDng Nh\xE2n", "Tr\u01B0\u1EDDng Ph\xE1t", "Tr\u01B0\u1EDDng Phu", "Tr\u01B0\u1EDDng Ph\xFAc", "Tr\u01B0\u1EDDng Sa", "Tr\u01B0\u1EDDng Sinh", "Tr\u01B0\u1EDDng S\u01A1n", "Tr\u01B0\u1EDDng Th\xE0nh", "Tr\u01B0\u1EDDng Vinh", "Tr\u01B0\u1EDDng V\u0169", "T\u1EEB \xD0\xF4ng", "Tu\u1EA5n Anh", "Tu\u1EA5n Ch\xE2u", "Tu\u1EA5n Ch\u01B0\u01A1ng", "Tu\u1EA5n \xD0\u1EE9c", "Tu\u1EA5n D\u0169ng", "Tu\u1EA5n H\u1EA3i", "Tu\u1EA5n Ho\xE0ng", "Tu\u1EA5n H\xF9ng", "Tu\u1EA5n Kh\u1EA3i", "Tu\u1EA5n Khanh", "Tu\u1EA5n Khoan", "Tu\u1EA5n Ki\u1EC7t", "Tu\u1EA5n Linh", "Tu\u1EA5n Long", "Tu\u1EA5n Minh", "Tu\u1EA5n Ng\u1ECDc", "Tu\u1EA5n S\u0129", "Tu\u1EA5n S\u1EF9", "Tu\u1EA5n T\xE0i", "Tu\u1EA5n Th\xE0nh", "Tu\u1EA5n Trung", "Tu\u1EA5n T\xFA", "Tu\u1EA5n Vi\u1EC7t", "T\xF9ng Anh", "T\xF9ng Ch\xE2u", "T\xF9ng L\xE2m", "T\xF9ng Linh", "T\xF9ng Minh", "T\xF9ng Quang", "T\u01B0\u1EDDng Anh", "T\u01B0\u1EDDng L\xE2m", "T\u01B0\u1EDDng L\xE2n", "T\u01B0\u1EDDng L\u0129nh", "T\u01B0\u1EDDng Minh", "T\u01B0\u1EDDng Nguy\xEAn", "T\u01B0\u1EDDng Ph\xE1t", "T\u01B0\u1EDDng Vinh", "Tuy\u1EC1n L\xE2m", "Uy Phong", "Uy V\u0169", "V\u1EA1n H\u1EA1nh", "V\u1EA1n L\xFD", "V\u0103n Minh", "V\xE2n S\u01A1n", "V\u1EA1n Th\u1EAFng", "V\u1EA1n Th\xF4ng", "V\u0103n Tuy\u1EC3n", "Vi\u1EC5n C\u1EA3nh", "Vi\u1EC5n \xD0\xF4ng", "Vi\u1EC5n Ph\u01B0\u01A1ng", "Vi\u1EC5n Th\xF4ng", "Vi\u1EC7t An", "Vi\u1EC7t Anh", "Vi\u1EC7t Ch\xEDnh", "Vi\u1EC7t C\u01B0\u01A1ng", "Vi\u1EC7t C\u01B0\u1EDDng", "Vi\u1EC7t D\u0169ng", "Vi\u1EC7t D\u01B0\u01A1ng", "Vi\u1EC7t Duy", "Vi\u1EC7t H\u1EA3i", "Vi\u1EC7t Ho\xE0ng", "Vi\u1EC7t H\u1ED3ng", "Vi\u1EC7t H\xF9ng", "Vi\u1EC7t Huy", "Vi\u1EC7t Kh\u1EA3i", "Vi\u1EC7t Khang", "Vi\u1EC7t Khoa", "Vi\u1EC7t Kh\xF4i", "Vi\u1EC7t Long", "Vi\u1EC7t Ng\u1ECDc", "Vi\u1EBFt Nh\xE2n", "Vi\u1EC7t Nh\xE2n", "Vi\u1EC7t Phong", "Vi\u1EC7t Ph\u01B0\u01A1ng", "Vi\u1EC7t Qu\u1ED1c", "Vi\u1EC7t Quy\u1EBFt", "Vi\u1EBFt S\u01A1n", "Vi\u1EC7t S\u01A1n", "Vi\u1EBFt T\xE2n", "Vi\u1EC7t Th\xE1i", "Vi\u1EC7t Th\u1EAFng", "Vi\u1EC7t Thanh", "Vi\u1EC7t Th\xF4ng", "Vi\u1EC7t Th\u01B0\u01A1ng", "Vi\u1EC7t Ti\u1EBFn", "Vi\u1EC7t V\xF5", "V\u0129nh \xC2n", "Vinh Di\u1EC7u", "V\u0129nh H\u1EA3i", "V\u0129nh H\u01B0ng", "V\u0129nh Long", "V\u0129nh Lu\xE2n", "Vinh Qu\u1ED1c", "V\u0129nh Th\u1ECD", "V\u0129nh Th\u1EE5y", "V\u0129nh To\xE0n", "V\u0169 Anh", "V\u0169 Minh", "V\u01B0\u01A1ng Gia", "V\u01B0\u01A1ng Tri\u1EC1u", "V\u01B0\u01A1ng Tri\u1EC7u", "V\u01B0\u01A1ng Vi\u1EC7t", "Xu\xE2n An", "Xu\xE2n B\xECnh", "Xu\xE2n Cao", "Xu\xE2n Cung", "Xu\xE2n H\xE0m", "Xu\xE2n H\xE3n", "Xu\xE2n Hi\u1EBFu", "Xu\xE2n H\xF2a", "Xu\xE2n Huy", "Xu\xE2n Khoa", "Xu\xE2n Ki\xEAn", "Xu\xE2n L\u1EA1c", "Xu\xE2n L\u1ED9c", "Xu\xE2n Minh", "Xu\xE2n Nam", "Xu\xE2n Ninh", "Xu\xE2n Ph\xFAc", "Xu\xE2n Qu\xE2n", "Xu\xE2n Qu\xFD", "Xu\xE2n S\u01A1n", "Xu\xE2n Th\xE1i", "Xu\xE2n Thi\u1EC7n", "Xu\xE2n Thuy\u1EBFt", "Xu\xE2n Trung", "Xu\xE2n Tr\u01B0\u1EDDng", "Xu\xE2n T\u01B0\u1EDDng", "Xu\xE2n V\u0169", "Y\xEAn B\u1EB1ng", "Y\xEAn B\xECnh", "Y\xEAn S\u01A1n"];
var P7 = [.../* @__PURE__ */ new Set([...n9, ...h9])];
var B7 = ["Ph\u1EA1m", "Nguy\u1EC5n", "Tr\u1EA7n", "L\xEA", "L\xFD", "Ho\xE0ng", "Phan", "V\u0169", "T\u0103ng", "\u0110\u1EB7ng", "B\xF9i", "\u0110\u1ED7", "H\u1ED3", "Ng\xF4", "D\u01B0\u01A1ng", "\u0110\xE0o", "\u0110o\xE0n", "V\u01B0\u01A1ng", "Tr\u1ECBnh", "\u0110inh", "L\xE2m", "Ph\xF9ng", "Mai", "T\xF4", "Tr\u01B0\u01A1ng", "H\xE0"];
var C7 = ["{{name.male_first_name}} {{name.last_name}}", "{{name.female_first_name}} {{name.last_name}}", "{{name.first_name}} {{name.last_name}}"];
var X4 = { female_first_name: n9, first_name: P7, last_name: B7, male_first_name: h9, name: C7 };
var Q4 = X4;
var p9 = ["02# #### ####", "02## #### ####"];
var U5 = { formats: p9 };
var A7 = U5;
var b9 = { title: "Vietnamese", address: o9, cell_phone: y9, company: m9, date: M7, internet: e9, lorem: D8, name: Q4, phone_number: A7 };
var vn = b9;

// ../../node_modules/@faker-js/faker/dist/esm/chunk-NFMQMJTZ.mjs
init_esm_shims();
var e10 = ["#####", "####", "###", "##", "#"];
var t10 = ["{{address.city_prefix}}{{address.city_suffix}}"];
var r10 = ["\u4E0A", "\u5305", "\u5317", "\u5357", "\u53A6", "\u5409", "\u592A", "\u5B81", "\u5B89", "\u6210", "\u6B66", "\u6D4E", "\u6D77", "\u73E0", "\u798F", "\u8861", "\u897F", "\u8BF8", "\u8D35", "\u957F"];
var o10 = ["\u4E61\u53BF", "\u4EAC\u5E02", "\u5357\u5E02", "\u539F\u5E02", "\u53E3\u5E02", "\u5934\u5E02", "\u5B81\u5E02", "\u5B89\u5E02", "\u5DDE\u5E02", "\u5FBD\u5E02", "\u6797\u5E02", "\u6C49\u5E02", "\u6C99\u5E02", "\u6D77\u5E02", "\u7801\u5E02", "\u90FD\u5E02", "\u95E8\u5E02", "\u9633\u5E02"];
var m10 = ["\u4E2D\u56FD"];
var f10 = ["######"];
var i10 = ["\u5317\u4EAC\u5E02", "\u4E0A\u6D77\u5E02", "\u5929\u6D25\u5E02", "\u91CD\u5E86\u5E02", "\u9ED1\u9F99\u6C5F\u7701", "\u5409\u6797\u7701", "\u8FBD\u5B81\u7701", "\u5185\u8499\u53E4", "\u6CB3\u5317\u7701", "\u65B0\u7586", "\u7518\u8083\u7701", "\u9752\u6D77\u7701", "\u9655\u897F\u7701", "\u5B81\u590F", "\u6CB3\u5357\u7701", "\u5C71\u4E1C\u7701", "\u5C71\u897F\u7701", "\u5B89\u5FBD\u7701", "\u6E56\u5317\u7701", "\u6E56\u5357\u7701", "\u6C5F\u82CF\u7701", "\u56DB\u5DDD\u7701", "\u8D35\u5DDE\u7701", "\u4E91\u5357\u7701", "\u5E7F\u897F\u7701", "\u897F\u85CF", "\u6D59\u6C5F\u7701", "\u6C5F\u897F\u7701", "\u5E7F\u4E1C\u7701", "\u798F\u5EFA\u7701", "\u53F0\u6E7E\u7701", "\u6D77\u5357\u7701", "\u9999\u6E2F", "\u6FB3\u95E8"];
var a10 = ["\u4EAC", "\u6CAA", "\u6D25", "\u6E1D", "\u9ED1", "\u5409", "\u8FBD", "\u8499", "\u5180", "\u65B0", "\u7518", "\u9752", "\u9655", "\u5B81", "\u8C6B", "\u9C81", "\u664B", "\u7696", "\u9102", "\u6E58", "\u82CF", "\u5DDD", "\u9ED4", "\u6EC7", "\u6842", "\u85CF", "\u6D59", "\u8D63", "\u7CA4", "\u95FD", "\u53F0", "\u743C", "\u6E2F", "\u6FB3"];
var s10 = ["{{name.last_name}}{{address.street_suffix}}"];
var d10 = { normal: "{{address.street}}{{address.buildingNumber}}\u53F7", full: "{{address.street}}{{address.buildingNumber}}\u53F7 {{address.secondaryAddress}}" };
var p10 = ["\u5DF7", "\u8857", "\u8DEF", "\u6865", "\u4FAC", "\u65C1", "\u4E2D\u5FC3", "\u680B"];
var N10 = { building_number: e10, city: t10, city_prefix: r10, city_suffix: o10, default_country: m10, postcode: f10, state: i10, state_abbr: a10, street: s10, street_address: d10, street_suffix: p10 };
var n10 = N10;
var u10 = ["\u79C0\u82F1", "\u79C0\u5170", "\u79C0\u73CD", "\u6842\u82F1", "\u6842\u5170", "\u7389\u5170", "\u7389\u73CD", "\u7389\u82F1", "\u7389\u6885", "\u51E4\u82F1", "\u5170\u82F1", "\u5A77\u5A77", "\u6D77\u71D5", "\u56FD\u82F1", "\u56FD\u73CD", "\u56FD\u534E", "\u56FD\u82B3", "\u56FD\u5170", "\u56FD\u79C0", "\u56FD\u7434", "\u56FD\u8363", "\u56FD\u9999", "\u82F1", "\u840D", "\u7EA2", "\u4E3D", "\u654F", "\u82B3", "\u9759", "\u971E", "\u71D5", "\u5A1F", "\u8273", "\u5A1C", "\u4E39", "\u73B2", "\u5A77", "\u96EA", "\u5029", "\u60A6", "\u9896", "\u6D01", "\u4E3D\u82AC", "\u4E3D\u82B3", "\u4E3D\u840D", "\u82E5\u6C50", "\u4E00\u8BFA", "\u827A\u6DB5", "\u4F9D\u8BFA", "\u6893\u6DB5", "\u6893\u6668", "\u6893\u99A8", "\u6893\u8431", "\u6893\u598D", "\u6893\u73A5", "\u82E1\u6CAB", "\u96E8\u6850", "\u6B23\u6021", "\u8BED\u6850", "\u8BED\u6C50", "\u96E8\u6DB5", "\u96E8\u6B23"];
var l10 = ["\u4E50\u9A79", "\u4F1F\u5BB8", "\u4F1F\u6CFD", "\u4F1F\u797A", "\u4F1F\u8BDA", "\u4FCA\u9A70", "\u4FEE\u6770", "\u4FEE\u6D01", "\u5065\u67CF", "\u5065\u96C4", "\u51EF\u745E", "\u535A\u6587", "\u535A\u6D9B", "\u535A\u8D85", "\u541B\u6D69", "\u54F2\u701A", "\u5609\u61FF", "\u5609\u7199", "\u5929\u5B87", "\u5929\u78CA", "\u5929\u7FCA", "\u5B50\u6DB5", "\u5B50\u8F69", "\u5B50\u9A9E", "\u5B50\u9ED8", "\u5C55\u9E4F", "\u5CFB\u7199", "\u5EFA\u8F89", "\u5F18\u6587", "\u5F6C", "\u5FD7\u5F3A", "\u5FD7\u6CFD", "\u601D", "\u601D\u6DFC", "\u601D\u6E90", "\u601D\u806A", "\u601D\u8FDC", "\u61FF\u8F69", "\u632F\u5BB6", "\u64CE\u5B87", "\u64CE\u82CD", "\u6587", "\u6587\u535A", "\u6587\u660A", "\u6587\u8F69", "\u65ED\u5C27", "\u660A\u5929", "\u660A\u5F3A", "\u660A\u7131", "\u660A\u7136", "\u660E", "\u660E\u54F2", "\u660E\u6770", "\u660E\u8F69", "\u660E\u8F89", "\u664B\u9E4F", "\u6653\u535A", "\u6653\u5578", "\u665F\u777F", "\u667A\u5BB8", "\u667A\u6E0A", "\u667A\u8F89", "\u679C", "\u6893\u6668", "\u6977\u745E", "\u6B63\u8C6A", "\u6CFD\u6D0B", "\u6D69", "\u6D69\u5B87", "\u6D69\u7136", "\u6D69\u8F69", "\u6D9B", "\u6F47\u7136", "\u708E\u5F6C", "\u70AB\u660E", "\u70E8\u4F1F", "\u70E8\u534E", "\u70E8\u78CA", "\u70E8\u9716", "\u715C\u57CE", "\u715C\u797A", "\u71A0\u5F64", "\u742A", "\u745E\u9716", "\u747E\u745C", "\u7693\u8F69", "\u777F\u6E0A", "\u7ACB\u679C", "\u7ACB\u8BDA", "\u7ACB\u8F69", "\u7ACB\u8F89", "\u7B11\u611A", "\u7ECD\u8F89", "\u7ECD\u9F50", "\u8000\u6770", "\u806A\u5065", "\u80E4\u7965", "\u81F4\u8FDC", "\u822A", "\u82D1\u535A", "\u8363\u8F69", "\u8BED\u5802", "\u8D8A\u5F6C", "\u8D8A\u6CFD", "\u8FDC\u822A", "\u91D1\u946B", "\u946B\u78CA", "\u946B\u9E4F", "\u94B0\u8F69", "\u9526\u7A0B", "\u96E8\u6CFD", "\u96EA\u677E", "\u9756\u742A", "\u98CE\u534E", "\u9A70", "\u9E3F\u6D9B", "\u9E3F\u714A", "\u9E4F", "\u9E4F\u6D9B", "\u9E4F\u714A", "\u9E4F\u98DE", "\u9E64\u8F69", "\u9E6D\u6D0B", "\u9ECE\u6615"];
var x8 = ["\u738B", "\u674E", "\u5F20", "\u5218", "\u9648", "\u6768", "\u9EC4", "\u5434", "\u8D75", "\u5468", "\u5F90", "\u5B59", "\u9A6C", "\u6731", "\u80E1", "\u6797", "\u90ED", "\u4F55", "\u9AD8", "\u7F57", "\u90D1", "\u6881", "\u8C22", "\u5B8B", "\u5510", "\u8BB8", "\u9093", "\u51AF", "\u97E9", "\u66F9", "\u66FE", "\u5F6D", "\u8427", "\u8521", "\u6F58", "\u7530", "\u8463", "\u8881", "\u4E8E", "\u4F59", "\u53F6", "\u848B", "\u675C", "\u82CF", "\u9B4F", "\u7A0B", "\u5415", "\u4E01", "\u6C88", "\u4EFB", "\u59DA", "\u5362", "\u5085", "\u949F", "\u59DC", "\u5D14", "\u8C2D", "\u5ED6", "\u8303", "\u6C6A", "\u9646", "\u91D1", "\u77F3", "\u6234", "\u8D3E", "\u97E6", "\u590F", "\u90B1", "\u65B9", "\u4FAF", "\u90B9", "\u718A", "\u5B5F", "\u79E6", "\u767D", "\u6C5F", "\u960E", "\u859B", "\u5C39", "\u6BB5", "\u96F7", "\u9ECE", "\u53F2", "\u9F99", "\u9676", "\u8D3A", "\u987E", "\u6BDB", "\u90DD", "\u9F9A", "\u90B5", "\u4E07", "\u94B1", "\u4E25", "\u8D56", "\u8983", "\u6D2A", "\u6B66", "\u83AB", "\u5B54", "\u6B27\u9633", "\u6155\u5BB9", "\u53F8\u9A6C", "\u4EE4\u72D0", "\u4EF2\u5B59", "\u949F\u79BB", "\u957F\u5B59", "\u5B87\u6587", "\u53F8\u5F92", "\u9C9C\u4E8E", "\u53F8\u7A7A"];
var _8 = ["\u5EFA\u534E", "\u5EFA\u56FD", "\u5EFA\u519B", "\u56FD\u5F3A", "\u56FD\u5E73", "\u56FD\u826F", "\u56FD\u680B", "\u56FD\u8F89", "\u5FD7\u56FD", "\u5FD7\u660E", "\u52C7", "\u519B", "\u4F1F", "\u5F3A", "\u521A", "\u6D9B", "\u658C", "\u6CE2", "\u8F89", "\u78CA", "\u8D85", "\u9E4F", "\u6770", "\u6D69", "\u946B", "\u5E05", "\u5B87", "\u6668", "\u8BDA", "\u6210", "\u6C11", "\u660E", "\u9633", "\u7199\u6210", "\u7199\u7476", "\u5BB6\u8C6A", "\u5BB6\u660E", "\u4FCA\u6770", "\u4FCA\u7199", "\u6C90\u5BB8", "\u6D69\u5B87", "\u6D69\u7136", "\u6D69\u8F69", "\u6D69\u6668", "\u6C90\u8FB0", "\u8317\u6CFD", "\u5955\u8FB0", "\u5955\u6CFD", "\u5B87\u6CFD", "\u5B87\u8F69", "\u5B87\u822A", "\u6C90\u9633", "\u6893\u8BDA", "\u6893\u8C6A", "\u6893\u777F", "\u6893\u6D69"];
var c10 = ["{{name.first_name}}{{name.last_name}}"];
var h10 = { female_first_name: u10, first_name: l10, last_name: x8, male_first_name: _8, name: c10 };
var b10 = h10;
var y10 = ["0##-########", "0###-########", "1##########"];
var g9 = { formats: y10 };
var D9 = g9;
var A8 = { title: "Chinese", address: n10, name: b10, phone_number: D9 };
var pe2 = A8;

// ../../node_modules/@faker-js/faker/dist/esm/chunk-USQH6BW5.mjs
init_esm_shims();
var e11 = ["#", "##"];
var m11 = ["{{address.city_name}}{{address.city_suffix}}"];
var a11 = ["Fet", "Gjes", "H\xF8y", "Inn", "Fager", "Lille", "Lo", "Mal", "Nord", "N\xE6r", "Sand", "Sme", "Stav", "Stor", "Tand", "Ut", "Vest"];
var n11 = ["berg", "borg", "by", "b\xF8", "dal", "eid", "fjell", "fjord", "foss", "grunn", "hamn", "havn", "helle", "mark", "nes", "odden", "sand", "sj\xF8en", "stad", "strand", "str\xF8m", "sund", "vik", "v\xE6r", "v\xE5g", "\xF8", "\xF8y", "\xE5s"];
var r11 = ["sgate", "svei", "s Gate", "s Vei", "gata", "veien"];
var o11 = ["Norge"];
var i11 = ["####", "0###"];
var t11 = ["Leil. ###", "Oppgang A", "Oppgang B"];
var s11 = [""];
var l11 = ["{{address.street_name}}{{address.street_suffix}}", "{{address.street_prefix}} {{address.street_name}}{{address.street_suffix}}", "{{name.first_name}}{{address.common_street_suffix}}", "{{name.last_name}}{{address.common_street_suffix}}"];
var u11 = { normal: "{{address.street}} {{address.buildingNumber}}", full: "{{address.street}} {{address.buildingNumber}} {{address.secondaryAddress}}" };
var b11 = ["Eike", "Bj\xF8rke", "Gran", "Vass", "Furu", "Litj", "Lille", "H\xF8y", "Fosse", "Elve", "Ku", "Konvall", "Soldugg", "Hestemyr", "Granitt", "Hegge", "Rogne", "Fiol", "Sol", "Ting", "Malm", "Klokker", "Preste", "Dam", "Geiterygg", "Bekke", "Berg", "Kirke", "Kors", "Bru", "Bl\xE5veis", "Torg", "Sj\xF8"];
var d11 = ["\xD8vre", "Nedre", "S\xF8ndre", "Gamle", "\xD8stre", "Vestre"];
var y11 = ["all\xE9en", "bakken", "berget", "br\xE5ten", "eggen", "engen", "ekra", "faret", "flata", "gata", "gjerdet", "grenda", "gropa", "hagen", "haugen", "havna", "holtet", "h\xF8gda", "jordet", "kollen", "kroken", "lia", "lunden", "lyngen", "l\xF8kka", "marka", "moen", "myra", "plassen", "ringen", "roa", "r\xF8a", "skogen", "skrenten", "spranget", "stien", "stranda", "stubben", "stykket", "svingen", "tjernet", "toppen", "tunet", "vollen", "vika", "\xE5sen"];
var O5 = { building_number: e11, city: m11, city_name: a11, city_suffix: n11, common_street_suffix: r11, default_country: o11, postcode: i11, secondary_address: t11, state: s11, street: l11, street_address: u11, street_name: b11, street_prefix: d11, street_suffix: y11 };
var f11 = O5;
var c11 = ["beige", "gr\xF8nn", "gr\xE5", "gul", "hvit", "indigo", "karmin", "bl\xE5", "lilla", "limegr\xF8nn", "magenta", "oransje", "rosa", "r\xF8d", "smaragdgr\xF8nn", "svart", "turkis"];
var G8 = { human: c11 };
var N11 = G8;
var g10 = ["Barn", "B\xF8ker", "Dagligvarer", "Datamaskiner", "Elektronikk", "Filmer", "Hage og utemilj\xF8", "Helse", "Hjem", "Kl\xE6r", "Leker", "Musikk", "Sko", "Skj\xF8nnhet", "Spill", "Smykker", "Sport", "Verkt\xF8y"];
var V6 = { department: g10 };
var p11 = V6;
var k8 = ["{{name.last_name}} {{company.suffix}}", "{{name.last_name}}-{{name.last_name}}", "{{name.last_name}}, {{name.last_name}} og {{name.last_name}}"];
var S8 = ["Gruppen", "AS", "ASA", "BA", "RFH", "og S\xF8nner"];
var W4 = { name_patterns: k8, suffix: S8 };
var h11 = W4;
var v7 = ["no", "com", "net", "org"];
var w7 = { domain_suffix: v7 };
var _9 = w7;
var x9 = ["Emma", "Sara", "Thea", "Ida", "Julie", "Nora", "Emilie", "Ingrid", "Hanna", "Maria", "Sofie", "Anna", "Malin", "Amalie", "Vilde", "Frida", "Andrea", "Tuva", "Victoria", "Mia", "Karoline", "Mathilde", "Martine", "Linnea", "Marte", "Hedda", "Marie", "Helene", "Silje", "Leah", "Maja", "Elise", "Oda", "Kristine", "Aurora", "Kaja", "Camilla", "Mari", "Maren", "Mina", "Selma", "Jenny", "Celine", "Eline", "Sunniva", "Natalie", "Tiril", "Synne", "Sandra", "Madeleine"];
var M8 = ["Emma", "Sara", "Thea", "Ida", "Julie", "Nora", "Emilie", "Ingrid", "Hanna", "Maria", "Sofie", "Anna", "Malin", "Amalie", "Vilde", "Frida", "Andrea", "Tuva", "Victoria", "Mia", "Karoline", "Mathilde", "Martine", "Linnea", "Marte", "Hedda", "Marie", "Helene", "Silje", "Leah", "Maja", "Elise", "Oda", "Kristine", "Aurora", "Kaja", "Camilla", "Mari", "Maren", "Mina", "Selma", "Jenny", "Celine", "Eline", "Sunniva", "Natalie", "Tiril", "Synne", "Sandra", "Madeleine", "Markus", "Mathias", "Kristian", "Jonas", "Andreas", "Alexander", "Martin", "Sander", "Daniel", "Magnus", "Henrik", "Tobias", "Kristoffer", "Emil", "Adrian", "Sebastian", "Marius", "Elias", "Fredrik", "Thomas", "Sondre", "Benjamin", "Jakob", "Oliver", "Lucas", "Oskar", "Nikolai", "Filip", "Mats", "William", "Erik", "Simen", "Ole", "Eirik", "Isak", "Kasper", "Noah", "Lars", "Joakim", "Johannes", "H\xE5kon", "Sindre", "J\xF8rgen", "Herman", "Anders", "Jonathan", "Even", "Theodor", "Mikkel", "Aksel"];
var A9 = ["Johansen", "Hansen", "Andersen", "Kristiansen", "Larsen", "Olsen", "Solberg", "Andresen", "Pedersen", "Nilsen", "Berg", "Halvorsen", "Karlsen", "Svendsen", "Jensen", "Haugen", "Martinsen", "Eriksen", "S\xF8rensen", "Johnsen", "Myhrer", "Johannessen", "Nielsen", "Hagen", "Pettersen", "Bakke", "Skuterud", "L\xF8ken", "Gundersen", "Strand", "J\xF8rgensen", "Kvarme", "R\xF8ed", "S\xE6ther", "Stensrud", "Moe", "Kristoffersen", "Jakobsen", "Holm", "Aas", "Lie", "Moen", "Andreassen", "Vedvik", "Nguyen", "Jacobsen", "Torgersen", "Ruud", "Krogh", "Christiansen", "Bjerke", "Aalerud", "Borge", "S\xF8rlie", "Berge", "\xD8stli", "\xD8deg\xE5rd", "Torp", "Henriksen", "Haukelids\xE6ter", "Fjeld", "Danielsen", "Aasen", "Fredriksen", "Dahl", "Berntsen", "Arnesen", "Wold", "Thoresen", "Solheim", "Skoglund", "Bakken", "Amundsen", "Solli", "Smogeli", "Kristensen", "Glosli", "Fossum", "Evensen", "Eide", "Carlsen", "\xD8stby", "Vegge", "Tangen", "Smedsrud", "Olstad", "Lunde", "Kleven", "Huseby", "Bj\xF8rnstad", "Ryan", "Rasmussen", "Nyg\xE5rd", "Nordskaug", "Nordby", "Mathisen", "Hopland", "Gran", "Finstad", "Edvardsen"];
var H8 = ["Markus", "Mathias", "Kristian", "Jonas", "Andreas", "Alexander", "Martin", "Sander", "Daniel", "Magnus", "Henrik", "Tobias", "Kristoffer", "Emil", "Adrian", "Sebastian", "Marius", "Elias", "Fredrik", "Thomas", "Sondre", "Benjamin", "Jakob", "Oliver", "Lucas", "Oskar", "Nikolai", "Filip", "Mats", "William", "Erik", "Simen", "Ole", "Eirik", "Isak", "Kasper", "Noah", "Lars", "Joakim", "Johannes", "H\xE5kon", "Sindre", "J\xF8rgen", "Herman", "Anders", "Jonathan", "Even", "Theodor", "Mikkel", "Aksel"];
var j6 = ["{{name.prefix}} {{name.first_name}} {{name.last_name}}", "{{name.first_name}} {{name.last_name}} {{name.suffix}}", "{{name.female_first_name}} {{name.female_first_name}} {{name.last_name}}", "{{name.male_first_name}} {{name.male_first_name}} {{name.last_name}}", "{{name.first_name}} {{name.last_name}} {{name.last_name}}", "{{name.first_name}} {{name.last_name}}"];
var T7 = ["Dr.", "Prof."];
var K8 = ["Jr.", "Sr.", "I", "II", "III", "IV", "V"];
var z8 = { female_first_name: x9, first_name: M8, last_name: A9, male_first_name: H8, name: j6, prefix: T7, suffix: K8 };
var B8 = z8;
var D10 = ["########", "## ## ## ##", "### ## ###", "+47 ## ## ## ##"];
var Y5 = { formats: D10 };
var E6 = Y5;
var C8 = Object.freeze([{ symbol: "H", name: "Hydrogen", atomicNumber: 1 }, { symbol: "He", name: "Helium", atomicNumber: 2 }, { symbol: "Li", name: "Litium", atomicNumber: 3 }, { symbol: "Be", name: "Beryllium", atomicNumber: 4 }, { symbol: "B", name: "Bor", atomicNumber: 5 }, { symbol: "C", name: "Karbon", atomicNumber: 6 }, { symbol: "N", name: "Nitrogen", atomicNumber: 7 }, { symbol: "O", name: "Oksygen", atomicNumber: 8 }, { symbol: "F", name: "Fluor", atomicNumber: 9 }, { symbol: "Ne", name: "Neon", atomicNumber: 10 }, { symbol: "Na", name: "Natrium", atomicNumber: 11 }, { symbol: "Mg", name: "Magnesium", atomicNumber: 12 }, { symbol: "Al", name: "Aluminium", atomicNumber: 13 }, { symbol: "Si", name: "Silisium", atomicNumber: 14 }, { symbol: "P", name: "Fosfor", atomicNumber: 15 }, { symbol: "S", name: "Svovel", atomicNumber: 16 }, { symbol: "Cl", name: "Klor", atomicNumber: 17 }, { symbol: "Ar", name: "Argon", atomicNumber: 18 }, { symbol: "K", name: "Kalium", atomicNumber: 19 }, { symbol: "Ca", name: "Kalsium", atomicNumber: 20 }, { symbol: "Sc", name: "Scandium", atomicNumber: 21 }, { symbol: "Ti", name: "Titan", atomicNumber: 22 }, { symbol: "V", name: "Vanadium", atomicNumber: 23 }, { symbol: "Cr", name: "Krom", atomicNumber: 24 }, { symbol: "Mn", name: "Mangan", atomicNumber: 25 }, { symbol: "Fe", name: "Jern", atomicNumber: 26 }, { symbol: "Co", name: "Kobolt", atomicNumber: 27 }, { symbol: "Ni", name: "Nikkel", atomicNumber: 28 }, { symbol: "Cu", name: "Kobber", atomicNumber: 29 }, { symbol: "Zn", name: "Sink", atomicNumber: 30 }, { symbol: "Ga", name: "Gallium", atomicNumber: 31 }, { symbol: "Ge", name: "Germanium", atomicNumber: 32 }, { symbol: "As", name: "Arsen", atomicNumber: 33 }, { symbol: "Se", name: "Selen", atomicNumber: 34 }, { symbol: "Br", name: "Brom", atomicNumber: 35 }, { symbol: "Kr", name: "Krypton", atomicNumber: 36 }, { symbol: "Rb", name: "Rubidium", atomicNumber: 37 }, { symbol: "Sr", name: "Strontium", atomicNumber: 38 }, { symbol: "Y", name: "Yttrium", atomicNumber: 39 }, { symbol: "Zr", name: "Zirkonium", atomicNumber: 40 }, { symbol: "Nb", name: "Niob", atomicNumber: 41 }, { symbol: "Mo", name: "Molybden", atomicNumber: 42 }, { symbol: "Tc", name: "Technetium", atomicNumber: 43 }, { symbol: "Ru", name: "Ruthenium", atomicNumber: 44 }, { symbol: "Rh", name: "Rhodium", atomicNumber: 45 }, { symbol: "Pd", name: "Palladium", atomicNumber: 46 }, { symbol: "Ag", name: "S\xF8lv", atomicNumber: 47 }, { symbol: "Cd", name: "Kadmium", atomicNumber: 48 }, { symbol: "In", name: "Indium", atomicNumber: 49 }, { symbol: "Sn", name: "Tinn", atomicNumber: 50 }, { symbol: "Sb", name: "Antimon", atomicNumber: 51 }, { symbol: "Te", name: "Tellur", atomicNumber: 52 }, { symbol: "I", name: "Jod", atomicNumber: 53 }, { symbol: "Xe", name: "Xenon", atomicNumber: 54 }, { symbol: "Cs", name: "Cesium", atomicNumber: 55 }, { symbol: "Ba", name: "Barium", atomicNumber: 56 }, { symbol: "La", name: "Lantan", atomicNumber: 57 }, { symbol: "Ce", name: "Cerium", atomicNumber: 58 }, { symbol: "Pr", name: "Praseodym", atomicNumber: 59 }, { symbol: "Nd", name: "Neodym", atomicNumber: 60 }, { symbol: "Pm", name: "Promethium", atomicNumber: 61 }, { symbol: "Sm", name: "Samarium", atomicNumber: 62 }, { symbol: "Eu", name: "Europium", atomicNumber: 63 }, { symbol: "Gd", name: "Gadolinium", atomicNumber: 64 }, { symbol: "Tb", name: "Terbium", atomicNumber: 65 }, { symbol: "Dy", name: "Dysprosium", atomicNumber: 66 }, { symbol: "Ho", name: "Holmium", atomicNumber: 67 }, { symbol: "Er", name: "Erbium", atomicNumber: 68 }, { symbol: "Tm", name: "Thulium", atomicNumber: 69 }, { symbol: "Yb", name: "Ytterbium", atomicNumber: 70 }, { symbol: "Lu", name: "Lutetium", atomicNumber: 71 }, { symbol: "Hf", name: "Hafnium", atomicNumber: 72 }, { symbol: "Ta", name: "Tantal", atomicNumber: 73 }, { symbol: "W", name: "Wolfram", atomicNumber: 74 }, { symbol: "Re", name: "Rhenium", atomicNumber: 75 }, { symbol: "Os", name: "Osmium", atomicNumber: 76 }, { symbol: "Ir", name: "Iridium", atomicNumber: 77 }, { symbol: "Pt", name: "Platina", atomicNumber: 78 }, { symbol: "Au", name: "Gull", atomicNumber: 79 }, { symbol: "Hg", name: "Kvikks\xF8lv", atomicNumber: 80 }, { symbol: "Tl", name: "Thallium", atomicNumber: 81 }, { symbol: "Pb", name: "Bly", atomicNumber: 82 }, { symbol: "Bi", name: "Vismut", atomicNumber: 83 }, { symbol: "Po", name: "Polonium", atomicNumber: 84 }, { symbol: "At", name: "Astat", atomicNumber: 85 }, { symbol: "Rn", name: "Radon", atomicNumber: 86 }, { symbol: "Fr", name: "Francium", atomicNumber: 87 }, { symbol: "Ra", name: "Radium", atomicNumber: 88 }, { symbol: "Ac", name: "Actinium", atomicNumber: 89 }, { symbol: "Th", name: "Thorium", atomicNumber: 90 }, { symbol: "Pa", name: "Protactinium", atomicNumber: 91 }, { symbol: "U", name: "Uran", atomicNumber: 92 }, { symbol: "Np", name: "Neptunium", atomicNumber: 93 }, { symbol: "Pu", name: "Plutonium", atomicNumber: 94 }, { symbol: "Am", name: "Americium", atomicNumber: 95 }, { symbol: "Cm", name: "Curium", atomicNumber: 96 }, { symbol: "Bk", name: "Berkelium", atomicNumber: 97 }, { symbol: "Cf", name: "Californium", atomicNumber: 98 }, { symbol: "Es", name: "Einsteinium", atomicNumber: 99 }, { symbol: "Fm", name: "Fermium", atomicNumber: 100 }, { symbol: "Md", name: "Mendelevium", atomicNumber: 101 }, { symbol: "No", name: "Nobelium", atomicNumber: 102 }, { symbol: "Lr", name: "Lawrencium", atomicNumber: 103 }, { symbol: "Rf", name: "Rutherfordium", atomicNumber: 104 }, { symbol: "Db", name: "Dubnium", atomicNumber: 105 }, { symbol: "Sg", name: "Seaborgium", atomicNumber: 106 }, { symbol: "Bh", name: "Bohrium", atomicNumber: 107 }, { symbol: "Hs", name: "Hassium", atomicNumber: 108 }, { symbol: "Mt", name: "Meitnerium", atomicNumber: 109 }, { symbol: "Ds", name: "Darmstadtium", atomicNumber: 110 }, { symbol: "Rg", name: "R\xF8ntgenium", atomicNumber: 111 }, { symbol: "Cn", name: "Copernicium", atomicNumber: 112 }, { symbol: "Nh", name: "Nihonium", atomicNumber: 113 }, { symbol: "Fl", name: "Flerovium", atomicNumber: 114 }, { symbol: "Mc", name: "Moscovium", atomicNumber: 115 }, { symbol: "Lv", name: "Livermorium", atomicNumber: 116 }, { symbol: "Ts", name: "Tenness", atomicNumber: 117 }, { symbol: "Og", name: "Oganesson", atomicNumber: 118 }]);
var L8 = Object.freeze([{ name: "meter", symbol: "m" }, { name: "sekund", symbol: "s" }, { name: "mole", symbol: "mol" }, { name: "ampere", symbol: "A" }, { name: "kelvin", symbol: "K" }, { name: "candela", symbol: "cd" }, { name: "kilogram", symbol: "kg" }, { name: "radian", symbol: "rad" }, { name: "hertz", symbol: "Hz" }, { name: "newton", symbol: "N" }, { name: "pascal", symbol: "Pa" }, { name: "joule", symbol: "J" }, { name: "watt", symbol: "W" }, { name: "coulomb", symbol: "C" }, { name: "volt", symbol: "V" }, { name: "ohm", symbol: "\u03A9" }, { name: "tesla", symbol: "T" }, { name: "grad celsius", symbol: "\xB0C" }, { name: "lumen", symbol: "lm" }, { name: "becquerel", symbol: "Bq" }, { name: "gray", symbol: "Gy" }, { name: "sievert", symbol: "Sv" }]);
var U6 = { chemicalElement: C8, unit: L8 };
var F7 = U6;
var J6 = ["aktuell", "alvorlig", "ansvarlig", "ber\xF8mt", "betydelig", "bevisst", "bred", "dum", "dyp", "ekkel", "eksisterende", "ekte", "enkel", "ensom", "falsk", "fast", "felles", "fersk", "fjern", "flau", "f\xF8lsom", "forsiktig", "fremmed", "fryktelig", "glatt", "gravid", "grunnleggende", "heldig", "hemmelig", "hjelpsom", "hyppig", "imponerende", "kjedelig", "kul", "langsom", "lat", "lav", "lignende", "l\xF8s", "lovlig", "lykkelig", "lys", "menneskelig", "merkelig", "midlertidig", "mistenkelig", "modig", "m\xF8rk", "morsom", "motsatt", "mulig", "naturlig", "n\xE5v\xE6rende", "n\xF8dvendig", "n\xF8yaktig", "nysgjerrig", "nyttig", "offentlig", "opprinnelig", "ordentlig", "plutselig", "r\xE5", "rask", "regelmessig", "ren", "rettferdig", "rimelig", "rund", "ryddig", "sannsynlig", "selvsikker", "sint", "skarp", "skikkelig", "skyldig", "smal", "s\xF8t", "spennende", "stille", "stolt", "stram", "streng", "stygg", "sulten", "sunn", "synlig", "tilgjengelig", "tilstrekkelig", "tung", "tynn", "uavhengig", "ujevn", "ulovlig", "ulykkelig", "umiddelbar", "urettferdig", "vellykket", "vennlig", "verdifull", "vill", "villig", "voksen", "\xE6rlig", "\xE5pen", "\xE5penbar"];
var P8 = ["eller", "for", "men", "og", "s\xE5"];
var R6 = ["aha", "au", "bravo", "b\xF8", "fy", "fysj", "huff", "hurra", "h\xE6", "jippi", "nam", "oi", "ops", "pytt", "p\xF8h", "\xE5", "\xE6sj"];
var Z5 = { adjective: J6, conjunction: P8, interjection: R6 };
var I6 = Z5;
var q5 = { title: "Norwegian", address: f11, color: N11, commerce: p11, company: h11, internet: _9, name: B8, phone_number: E6, science: F7, word: I6 };
var Mm = q5;

// ../../node_modules/@faker-js/faker/dist/esm/chunk-EZQM6TIL.mjs
init_esm_shims();
var a12 = ["{{address.city_prefix}} {{name.firstName}}{{address.city_suffix}}", "{{address.city_prefix}} {{name.firstName}}", "{{name.firstName}}{{address.city_suffix}}", "{{name.lastName}}{{address.city_suffix}}", "{{address.city_name}}"];
var t12 = ["Bhaktapur", "Biratnagar", "Birendranagar", "Birgunj", "Butwal", "Damak", "Dharan", "Gaur", "Gorkha", "Hetauda", "Itahari", "Janakpur", "Kathmandu", "Lahan", "Nepalgunj", "Pokhara"];
var i12 = ["Nepal"];
var r12 = ["Baglung", "Banke", "Bara", "Bardiya", "Bhaktapur", "Bhojupu", "Chitwan", "Dailekh", "Dang", "Dhading", "Dhankuta", "Dhanusa", "Dolakha", "Dolpha", "Gorkha", "Gulmi", "Humla", "Ilam", "Jajarkot", "Jhapa", "Jumla", "Kabhrepalanchok", "Kalikot", "Kapilvastu", "Kaski", "Kathmandu", "Lalitpur", "Lamjung", "Manang", "Mohottari", "Morang", "Mugu", "Mustang", "Myagdi", "Nawalparasi", "Nuwakot", "Palpa", "Parbat", "Parsa", "Ramechhap", "Rauswa", "Rautahat", "Rolpa", "Rupandehi", "Sankhuwasabha", "Sarlahi", "Sindhuli", "Sindhupalchok", "Sunsari", "Surket", "Syangja", "Tanahu", "Terhathum"];
var e12 = ["{{name.firstName}} {{address.street_suffix}}", "{{name.lastName}} {{address.street_suffix}}"];
var y12 = { city: a12, city_name: t12, default_country: i12, state: r12, street: e12 };
var n12 = y12;
var o12 = ["Pvt Ltd", "Group", "Ltd", "Limited"];
var c12 = { suffix: o12 };
var m12 = c12;
var s12 = ["np", "com", "info", "net", "org"];
var u12 = ["worldlink.com.np", "gmail.com", "yahoo.com", "hotmail.com"];
var S9 = { domain_suffix: s12, free_email: u12 };
var p12 = S9;
var h12 = ["Aarav", "Ajita", "Amit", "Amita", "Amrit", "Arijit", "Ashmi", "Asmita", "Bibek", "Bijay", "Bikash", "Bina", "Bishal", "Bishnu", "Buddha", "Deepika", "Dipendra", "Gagan", "Ganesh", "Khem", "Krishna", "Laxmi", "Manisha", "Nabin", "Nikita", "Niraj", "Nischal", "Padam", "Pooja", "Prabin", "Prakash", "Prashant", "Prem", "Purna", "Rajendra", "Rajina", "Raju", "Rakesh", "Ranjan", "Ratna", "Sagar", "Sandeep", "Sanjay", "Santosh", "Sarita", "Shilpa", "Shirisha", "Shristi", "Siddhartha", "Subash", "Sumeet", "Sunita", "Suraj", "Susan", "Sushant"];
var f12 = ["Adhikari", "Aryal", "Baral", "Basnet", "Bastola", "Basynat", "Bhandari", "Bhattarai", "Chettri", "Devkota", "Dhakal", "Dongol", "Ghale", "Gurung", "Gyawali", "Hamal", "Jung", "KC", "Kafle", "Karki", "Khadka", "Koirala", "Lama", "Limbu", "Magar", "Maharjan", "Niroula", "Pandey", "Pradhan", "Rana", "Raut", "Sai", "Shai", "Shakya", "Sherpa", "Shrestha", "Subedi", "Tamang", "Thapa"];
var x10 = { first_name: h12, last_name: f12 };
var d12 = x10;
var l12 = ["##-#######", "+977-#-#######", "+977########"];
var D11 = { formats: l12 };
var k9 = D11;
var g11 = { title: "Nepalese", address: n12, company: m12, internet: p12, name: d12, phone_number: k9 };
var aa2 = g11;

// ../../node_modules/@faker-js/faker/dist/esm/chunk-DHYAFIBN.mjs
init_esm_shims();
var e13 = ["#", "##", "###", "###a", "###b", "###c", "### I", "### II", "### III"];
var a13 = ["{{address.city_prefix}}{{address.city_suffix}}", "{{address.city_prefix}}"];
var n13 = ["Aagte", "Aal", "Aalden", "Aals", "Aalst", "Aalsum", "Aanschot", "Aarden", "Aarle", "Abbe", "Abbegea", "Abben", "Abbestede", "Abcoven", "Absdale", "Abts", "Acht", "Achter", "Achterste", "Achtmaal", "Achttien", "Acquoy", "Aduard", "Aduarder", "Aekinga", "Aerde", "Aerden", "Aerdt", "Afferden", "Aijen", "Akersloot", "Akker", "Akkerput", "Akkrun", "Akmarijp", "Aldeboarn", "Aldegae", "Aldtsjerk", "Aling", "Alkmaar", "Allersma", "Allinga", "Almere", "Alphen", "Altena", "Alteveer", "Alting", "Altweert", "Alverna", "Ameide", "Amerika", "Amerongen", "Ammerstol", "Ams", "Amster", "Andel", "Angeren", "Anholt", "Anjum", "Anke", "Ankum", "Anna", "Annendaal", "Anneville", "Anreep", "Ansen", "Apeldoorn", "Apen", "Appel", "Appen", "Arcen", "Archem", "Arendnest", "Arensge", "Arkens", "Armweide", "Arnhem", "Arnoud", "Arri\xEBn", "Arri\xEBr", "Arum", "Arwerd", "Asch", "Asenray", "Asperen", "Asschat", "Assel", "Asselt", "Assen", "Asten", "Atze", "Augs", "Averlo", "Avest", "Azelo", "Azewijn", "Ba", "Baaium", "Baak", "Baaks", "Baal", "Baamsum", "Baan", "Baard", "Baarder", "Baarle", "Baarlo", "Baars", "Baarschot", "Baexem", "Baflo", "Bahr", "Bakel", "Bakelse", "Bakertand", "Bakke", "Bakkerom", "Balgoij", "Balinge", "Ballast", "Balleman", "Ballum", "Balma", "Bane", "Bankert", "Bantega", "Bare", "Bargebek", "Barlage", "Barlaque", "Barlo", "Barnflair", "Barrier", "Bars", "Basse", "Basser", "Baten", "Bath", "Bathmen", "Bavinkel", "Bazuin", "Bears", "Beckum", "Bedaf", "Bedum", "Beekb", "Beekkant", "Beemdkant", "Beemte", "Beertsen", "Beerze", "Beerzer", "Beesd", "Beetgum", "Beetgumer", "Behelp", "Beilen", "Beinum", "Beke", "Beldert", "Belgen", "Belgeren", "Belt", "Belvert", "Bemmel", "Bemmer", "Benderse", "Beneden", "Benne", "Bennekom", "Bent", "Bente", "Benthem", "Berg", "Bergakker", "Bergen", "Bergens", "Bergerden", "Bergharen", "Berghem", "Berghum", "Bergstoep", "Berik", "Beringe", "Berk", "Berke", "Berken", "Berkt", "Berlicum", "Bern", "Besse", "Besthmen", "Beswerd", "Bethlehem", "Beugt", "Beuke", "Beun", "Beusb", "Beusichem", "Bever", "Bidding", "Biert", "Bierum", "Biessum", "Biest", "Biezen", "Bigge", "Bijster", "Bijsteren", "Billing", "Bilt", "Bingerden", "Bisselt", "Bissen", "Blaker", "Blaricum", "Blauh\xFBs", "Blauw", "Blauwe", "Blauwen", "Bleijen", "Bleijs", "Blekslage", "Blenkert", "Blerick", "Blessum", "Blije", "Blijham", "Blijnse", "Blok", "Blokken", "Blokum", "Boazum", "Boberden", "Bocholtz", "Bocht", "Boeiink", "Boek", "Boekel", "Boekelo", "Boekelte", "Boekend", "Boer", "Boerakker", "Boerelaan", "Boeren", "Boerengat", "Boerenhol", "Boerhaar", "Boijl", "Boks", "Boksum", "Bokt", "Bollinga", "Bols", "Bolst", "Bolt", "Bommerig", "Bong", "Bonkwert", "Bonner", "Bonrepas", "Bontebok", "Boomen", "Boord", "Borger", "Borgharen", "Borgs", "Borgweg", "Borkel", "Borkeld", "Born", "Borne", "Borneo", "Bornwird", "Bos", "Boschkens", "Bosje", "Bosjes", "Boskamp", "Boskant", "Boskoop", "Boslust", "Bosschen", "Bosscher", "Bosven", "Boter", "Botshoofd", "Boukoul", "Bourtange", "Boven", "Bovenstad", "Boxtel", "Braak", "Braamt", "Brabander", "Brakel", "Brand", "Brande", "Brandt", "Brantgum", "Breda", "Brede", "Bree", "Breede", "Breedeweg", "Breehees", "Breezand", "Brem", "Breskens", "Breugel", "Breukele", "Breyvin", "Brielle", "Brigdamme", "Brij", "Brillerij", "Briltil", "Brinkmans", "Britsum", "Britswert", "Broek", "Broekens", "Broekkant", "Brommelen", "Brons", "Bruchem", "Bruggen", "Brugger", "Bruil", "Bruinisse", "Bruister", "Brumhold", "Brunssum", "Brunsting", "Bruntinge", "Buchten", "Buggenum", "Buis", "Buiten", "Bulkenaar", "Bult", "Bultinge", "Bunne", "Bunnik", "Burdaard", "Burger", "Burgh", "Burgt", "Burgum", "Burgwerd", "Burstum", "Burum", "Bussel", "Busselte", "Busser", "Buttinge", "Buurtje", "Cadier", "Cadzand", "Calfven", "Calslagen", "Caluna", "Camerig", "Capelle", "Carnisse", "Cartils", "Castelr\xE9", "Castenray", "Castert", "Castricum", "Catsop", "Chaam", "Clinge", "Coevorden", "Colmont", "Cornjum", "Cornwerd", "Cottessen", "Crapoel", "Crau", "Crix", "Crob", "Croy", "Culemborg", "Daarle", "Dale", "Dalem", "Dalen", "Daler", "Dalerend", "Dalerpeel", "Dallinge", "Damw\xE2ld", "Daniken", "Darp", "Dassemus", "Dearsum", "Dedgum", "Deelen", "Deelse", "Deelshurk", "Deense", "Deest", "Deil", "Deinum", "Dekes", "Dekkers", "Del", "Delden", "Delf", "Delft", "Dellen", "Delwijnen", "Demen", "Den ", "Deursen", "Deuteren", "Deventer", "Dieden", "Diemen", "Diepen", "Diependal", "Diepswal", "Diermen", "Dieskant", "Dieteren", "Diever", "Dijken", "Dijker", "Dijkster", "Dijkwel", "Dintelsas", "Dinther", "Dintherse", "Diphoorn", "Dirkshorn", "Dis", "Diunt", "Doenrade", "Does", "Doeveren", "Doezum", "Doijum", "Dokkum", "Doldersum", "Dom", "Dommelen", "Donderen", "Dongen", "Donia", "Doniaga", "Donzel", "Dood", "Doodstil", "Doon", "Doorn", "Doornen", "Doornik", "Doorning", "Doorwerth", "Doosje", "Dorkwerd", "Dorst", "Dorther", "Douverge", "Douwen", "Draai", "Drachten", "Dreischor", "Drie", "Drieboere", "Driehuis", "Driene", "Dries", "Driewegen", "Driezum", "Drie\xEBn", "Drijber", "Drimmelen", "Drogeham", "Drogt", "Dronrijp", "Dronten", "Druif", "Drunen", "Druten", "Drylts", "Duifhuis", "Duinen", "Duiven", "Duizel", "Duizend", "Dulder", "Dunsborg", "Dussen", "Duur", "Duurends", "Eagum", "Earnew\xE2ld", "Easterein", "Eastermar", "Easthim", "Echt", "Echten", "Echtener", "Echter", "Eder", "Eede", "Eefsele", "Eekt", "Eekwerd", "Eelde", "Eelen", "Eems", "Eemster", "Eemten", "Een", "Eenigen", "Eenrum", "Eenum", "Eerde", "Eersel", "Eerste", "Ees", "Eesterga", "Effen", "Egchel", "Egede", "Egmond", "Egypte", "Eikelen", "Eikelhof", "Eimeren", "Eindewege", "Eindje", "Ekamp", "Elde", "Elden", "Eldik", "Eldrik", "Elft", "Elkerzee", "Ellemeet", "Eller", "Ellerhei", "Ellersing", "Elsen", "Elshof", "Elspeet", "Elst", "Elsteren", "Elzet", "Emmeloord", "Emmen", "Empel", "Endepoel", "Eng", "Enge", "Engel", "Engelbert", "Engelen", "Engelum", "Englum", "Engwegen", "Engwierum", "Enk", "Ensched\xE9", "Enspijk", "Enumatil", "Enzelens", "Eper", "Eppen", "Erichem", "Erlecom", "Ermelo", "Ermer", "Escharen", "Eschoten", "Espelo", "Essen", "Etenaken", "Etzenrade", "Eursing", "Eursinge", "Euverem", "Ever", "Everd", "Everlo", "Everse", "Ewer", "Ewinkel", "Exmorra", "Eygels", "Eyser", "Ezinge", "Ezuma", "Faan", "Falom", "Farmsum", "Fatum", "Feerwerd", "Fel", "Ferwert", "Fiemel", "Fijfh\xFBs", "Finke", "Finkum", "Flieren", "Fl\xE2nsum", "Fokkers", "Follega", "Folsgeare", "Formerum", "Fort", "Fortmond", "Foudgum", "Fraamklap", "Frankhuis", "Frankrijk", "Fransum", "Friens", "Frytum", "F\xFBns", "Gaag", "Gaanderen", "Gaar", "Gaast", "Gaasten", "Gaastmar", "Gaete", "Gagel", "Galder", "Gameren", "Gammelke", "Ganzert", "Gapinge", "Garminge", "Garnwerd", "Garre", "Garrels", "Garst", "Garyp", "Gassel", "Gasthuis", "Gawege", "Gebergte", "Geefs", "Geen", "Geer", "Gees", "Geeuwen", "Geffen", "Gelders", "Gelderse", "Geleen", "Gelkenes", "Gellicum", "Gemaal", "Gement", "Gemert", "Gemonde", "Gendt", "Geneijgen", "Genen", "Gening", "Genne", "Gennep", "Genooi", "Gerheggen", "Gerner", "Gersloot", "Gerven", "Gerwen", "Geulhem", "Gever", "Geverik", "Gewande", "Giers", "Giessen", "Gietelo", "Giethmen", "Giethoorn", "Gijbe", "Gijsselte", "Gijzel", "Gilze", "Ginkel", "Ginnum", "Glaner", "Goai\xEFngea", "Godlinze", "Goes", "Goilberd", "Goirle", "Goldhoorn", "Gooium", "Goor", "Gorinchem", "Gorp", "Gortel", "Gouda", "Gouderak", "Goudseweg", "Go\xEBnga", "Graaf", "Graauw", "Gracht", "Graet", "Graf", "Grafwegen", "Gras", "Graspeel", "Graszode", "Grathem", "Grauwe", "Grave", "Grazen", "Greonterp", "Greup", "Griete", "Grijps", "Grits", "Groe", "Groede", "Groen", "Groenekan", "Groeneweg", "Groenlo", "Groep", "Groes", "Groessen", "Groet", "Groeve", "Groeze", "Gron", "Groot", "Groote", "Grote", "Grotel", "Grou", "Gytsjerk", "Haaften", "Haag", "Haagje", "Haaks", "Haakswold", "Haalderen", "Haalweide", "Haamstede", "Haandrik", "Haar", "Haarlem", "Haarsteeg", "Haart", "Haelen", "Haerst", "Hagestein", "Haiink", "Halder", "Haler", "Half", "Halfmijl", "Halfweg", "Halle", "Haller", "Hallum", "Halte", "Halvink", "Hamrik", "Hamshorn", "Handel", "Hane", "Hank", "Hankate", "Hansweert", "Hantum", "Hantumer", "Harculo", "Harde", "Hardinx", "Haren", "Harener", "Haring", "Harke", "Harkema", "Harl", "Harles", "Harpel", "Harre", "Harse", "Harskamp", "Harssens", "Hartwerd", "Haspel", "Hasselt", "Hasselter", "Hatte", "Hattem", "Hauwert", "Havelt", "Havelte", "Hayum", "Haze", "Hazenhurk", "Hazennest", "Heaburgen", "Hedel", "Hedik", "Heech", "Heegher", "Heek", "Heelsum", "Heems", "Heemstede", "Heenweg", "Heer", "Heerde", "Heere", "Heeren", "Heers", "Hees", "Heesakker", "Heesbeen", "Heesboom", "Heesch", "Heesselt", "Heet", "Heezeren", "Hefswal", "Hegge", "Hei", "Heiakker", "Heibloem", "Heid", "Heide", "Heidekant", "Heiden", "Heier", "Heihoefke", "Heij", "Heijen", "Heikant", "Heikantse", "Heille", "Heine", "Heioord", "Heister", "Heitrak", "Hekel", "Hekkum", "Hel", "Helden", "Helkant", "Hell", "Helle", "Hellegat", "Hellen", "Hellevoet", "Helling", "Hellouw", "Helwerd", "Hemert", "Hemrik", "Hendrik", "Henge", "Herfte", "Herike", "Herk", "Herken", "Hermalen", "Hernen", "Herpen", "Herpt", "Hersel", "Hersend", "Hert", "Herten", "Hertme", "Herveld", "Herwen", "Herwijnen", "Herxen", "Hesens", "Hespe", "Hessum", "Heugde", "Heukelom", "Heukelum", "Heult", "Heumen", "Heure", "Heurne", "Heusden", "Heuvel", "Heuvels", "Heuveltje", "Hexel", "Heze", "Hiaure", "Hichtum", "Hidaard", "Hien", "Hierden", "Hieslum", "Hijken", "Hijum", "Hilaard", "Hilakker", "Hild", "Hill", "Hilte", "Hilversum", "Hinnaard", "Hintham", "Hitsertse", "Hodenpijl", "Hoef", "Hoefkens", "Hoek", "Hoekdries", "Hoekelum", "Hoekens", "Hoekje", "Hoeks", "Hoekske", "Hoetmans", "Hoeve", "Hoeven", "Hoeves", "Hoge", "Hogert", "Hogeweg", "Holker", "Hollum", "Holm", "Holset", "Holsloot", "Holst", "Holt", "Holte", "Holten", "Holter", "Holthe", "Holtien", "Holtinge", "Holtum", "Holwerd", "Holwierde", "Holwinde", "Hommelse", "Hommert", "Hommerts", "Honderd", "Honds", "Hondsrug", "Hongerige", "Honthem", "Hoog", "Hoogcruts", "Hooge", "Hoogehaar", "Hoogen", "Hoogeweg", "Hooghalen", "Hoogmade", "Hoogmeien", "Hoogwatum", "Hool", "Hoon", "Hoonte", "Hoorn", "Hoornder", "Hoptille", "Horck", "Horick", "Horn", "Horssen", "Horsten", "Horzik", "Hout", "Houterd", "Houtgoor", "Houthei", "Houthem", "Houw", "Houwer", "Hugten", "Huij", "Huinen", "Huinerwal", "Huis", "Huissen", "Huize", "Huizinge", "Hul", "Huls", "Hulsen", "Hulst", "Hulten", "Hultje", "Humcoven", "Hunnecum", "Hunsel", "Hupsel", "Hurkske", "Hurpesch", "Hutten", "Huurne", "H\xF6chte", "H\xF6fke", "H\xFAns", "Idaerd", "Idserda", "Idsken", "Idzegea", "Iens", "IJmuiden", "IJpe", "IJpelo", "IJsselham", "IJzen", "IJzeren", "IJzerlo", "Illik", "Indoornik", "Ingwert", "Inia", "Itens", "Itteren", "Jaars", "Jammer", "Jannum", "Jellum", "Jelsum", "Jeth", "Jipsing", "Jirnsum", "Jislum", "Jisp", "Jistrum", "Jonas", "Jonen", "Jonkers", "Jorwert", "Joure", "Jous", "Jousterp", "Jouswerd", "Jouwer", "Jubbega", "Jukwerd", "Junne", "Jutryp", "Kaag", "Kaakhorn", "Kaard", "Kaarschot", "Kaat", "Kade", "Kadoelen", "Kalis", "Kalteren", "Kameren", "Kamp", "Kampen", "Kamper", "Kamperei", "Kampers", "Kamperzee", "Kantens", "Kantje", "Kapel", "Kapelle", "Kapolder", "Kappert", "Karre", "Kasen", "Kasteren", "Kater", "Katerveer", "Kathagen", "Katlijk", "Kats", "Katwijk", "Kaumes", "Kavel", "Kaweide", "Kedichem", "Keegen", "Keent", "Keersop", "Keinsmer", "Keizers", "Kekerdom", "Kelmond", "Kelpen", "Kempkens", "Kerk", "Kerken", "Kerkhof", "Kerkrade", "Kerkwerve", "Keske", "Kessel", "Kesseleik", "Ketting", "Keulse", "Keunen", "Keup", "Keuter", "Kibbel", "Kiel", "Kiester", "Kievit", "Kijf", "Kijfwaard", "Kijkuit", "Kilder", "Kille", "Kimswerd", "Kinderbos", "Kink", "Kinnum", "Kipper", "Klaaswaal", "Kladde", "Klaren", "Klatering", "Klef", "Klei", "Klein", "Kleinder", "Kleine", "Kleinge", "Klem", "Kletter", "Klevers", "Klispoel", "Klomp", "Klooster", "Klosse", "Kl\xF6sse", "Knaphof", "Knegsel", "Knipe", "Knol", "Knolle", "Knuiters", "Koedood", "Koehool", "Koekange", "Koekanger", "Koekoek", "Koel", "Koevering", "Kokkelert", "Kolder", "Kolhol", "Kolhorn", "Kolk", "Kollum", "Kolonie", "Kommer", "Konings", "Koog", "Kooi", "Kooldert", "Kopaf", "Korhorn", "Korn", "Kornhorn", "Kort", "Korte", "Korteraar", "Korteven", "Kortgene", "Kostvlies", "Koude", "Kouden", "Koudhoorn", "Koulen", "Kraan", "Kraanven", "Kraats", "Krabben", "Krachtig", "Kranen", "Krassum", "Kreek", "Kreielt", "Kreijel", "Kreijl", "Krewerd", "Krim", "Krimpen", "Krol", "Kruin", "Kruishaar", "Kruispunt", "Kruisweg", "Kuikhorne", "Kuiks", "Kuinre", "Kuitaart", "Kuivezand", "Kulert", "Kulsdom", "Kunrade", "Kutt", "Kuundert", "Kuzemer", "Kwaal", "Kwakel", "Kwakkel", "Kwartier", "K\xFBkherne", "Laag", "Laaghalen", "Laaghaler", "Laak", "Laaksum", "Laan", "Lage", "Lagekant", "Lageweg", "Lakei", "Laker", "Lalle", "Lammer", "Lammerweg", "Lamperen", "Landerum", "Landsrade", "Lang", "Lange", "Langeraar", "Langerak", "Langereit", "Lank", "Lankes", "Laren", "Laskwerd", "Lattrop", "Laude", "Lauwer", "Ledeacker", "Leeg", "Leegte", "Leek", "Leem", "Leen", "Leens", "Leensel", "Leermens", "Leersum", "Leeuw", "Leeuwerik", "Leeuwte", "Lege", "Legert", "Leiden", "Leimuiden", "Leker", "Lekker", "Lelystad", "Lemel", "Lemele", "Lemmer", "Lemselo", "Lengel", "Lent", "Lenthe", "Leons", "Lerop", "Lethe", "Lettele", "Leuke", "Leunen", "Leur", "Leusden", "Leutes", "Leuth", "Leuven", "Leuvenum", "Leveroy", "Lexmond", "Lhee", "Lichtaard", "Lichtmis", "Liefkens", "Liempde", "Lienden", "Lier", "Lieren", "Lierop", "Lies", "Lievelde", "Lieving", "Lijnden", "Limbricht", "Limmen", "Linde", "Lingsfort", "Lintelo", "Lintvelde", "Lioessens", "Lippen", "Lith", "Lithoijen", "Lobith", "Loc", "Locht", "Loenen", "Loer", "Loete", "Logt", "Loil", "Lollum", "Lomm", "Lonneker", "Loo", "Loobrink", "Loofaert", "Looi", "Looien", "Look", "Loon", "Loons", "Loonse", "Looveer", "Loppersum", "Lovendaal", "Loveren", "Lo\xEBnga", "Lubbinge", "Luchen", "Luchten", "Luissel", "Luitert", "Lula", "Lunen", "Lunteren", "Lunters", "Lutjegast", "Lutjerijp", "Lutke", "Lutkepost", "Lutten", "Lutter", "Lytse", "Lytshuzen", "Maagd", "Maaijkant", "Maalb", "Maaldrift", "Maalstede", "Maar", "Maarn", "Maars", "Maarssen", "Maasband", "Maasbree", "Maaskant", "Maat", "Maatsehei", "Macharen", "Made", "Magele", "Magrette", "Makkum", "Mal", "Malden", "Mallem", "Mamelis", "Manen", "Mantgum", "Mantinge", "Maren", "Maria", "Maris", "Mark", "Markvelde", "Marle", "Marrum", "Mars", "Marssum", "Marsum", "Martens", "Marum", "Mataram", "Maten", "Mathijs", "Maurik", "Maxet", "Medemblik", "Medevoort", "Medler", "Meed", "Meeden", "Meele", "Meemortel", "Meene", "Meer", "Meeren", "Meern", "Meerten", "Meerven", "Meerwijck", "Megelsum", "Megen", "Meije", "Meijel", "Melick", "Melis", "Melissant", "Menaldum", "Mensinge", "Menzel", "Meppen", "Merkel", "Merm", "Merselo", "Merum", "Mesch", "Meteren", "Metsla", "Midbuul", "Midde", "Middel", "Middelijk", "Midden", "Middenhof", "Midlaren", "Midlum", "Mids", "Midwolde", "Miedum", "Mildert", "Milheeze", "Mill", "Mils", "Milschot", "Minkeloos", "Mispel", "Moddergat", "Moer", "Moeren", "Moerslag", "Moespot", "Molembaix", "Molenbaan", "Molenbelt", "Molengat", "Molenhof", "Molenperk", "Molenrij", "Molenstad", "Molkwar", "Monster", "Montfort", "Mook", "Moord", "Moorsel", "Morige", "Morra", "Mortel", "Mosbulten", "Mosik", "Moskou", "Mosse", "Mossel", "Most", "Muggenhol", "Muis", "Muizenhol", "Mulderij", "Mullegen", "Munneke", "Munnekens", "Munniken", "Munte", "Murns", "Mussel", "M\xFBnein", "Naarder", "Nabbegat", "Nagel", "Nansum", "Napels", "Natten", "Neder", "Nederbiel", "Neer", "Neerijnen", "Neeritter", "Neerloon", "Neerst", "Negen", "Nekke", "Nergena", "Nia", "Nie", "Niebert", "Niehove", "Nier", "Niersen", "Niesoord", "Nieuw", "Nieuwaal", "Nieuwe", "Nieuwer", "Nieuwklap", "Nieuwkoop", "Nieuwolda", "Nieuwstad", "Niftrik", "Nijega", "Nijehaske", "Nijesyl", "Nijken", "Nijkerker", "Nijl\xE2n", "Nijmegen", "Nijnsel", "Nijrees", "Nijstad", "Nijve", "Nispense", "Noardein", "Noenes", "Nolde", "Noord", "Noorden", "Noorder", "Noordhorn", "Noordink", "Noordkant", "Noordse", "Notendaal", "Notsel", "Noukoop", "Nuenen", "Nuijen", "Nuil", "Nuis", "Nunhem", "Nunspeet", "Nuth", "Obbicht", "Ock", "Oegst", "Oekel", "Oeken", "Oele", "Oensel", "Oentsjerk", "Oerle", "Oete", "Oever", "Offinga", "Ofwegen", "Oh\xE9;", "Oijen", "Oirlo", "Oirs", "Okswerd", "Olde", "Oldehove", "Oldemarkt", "Olden", "Oldeneel", "Oldenhave", "Oldeouwer", "Old\xF6rp", "Olen", "Oler", "Oling", "Olterterp", "Ommel", "Ommen", "Ommeren", "Onder", "Onna", "Onsenoort", "Onstwedde", "Ooij", "Ooijen", "Oost", "Oostappen", "Ooste", "Ooster", "Oosterend", "Oosterens", "Oosterhof", "Oosterik", "Oosternie", "Oosternij", "Oosterse", "Oosterzee", "Oosthem", "Oostindi\xEB", "Oostrum", "Oostum", "Oostwold", "Oostzaan", "Op", "Opende", "Ophemert", "Ophuis", "Opijnen", "Opmeeden", "Opper", "Opperdoes", "Opperduit", "Opwetten", "Opwierde", "Oranje", "Orvelte", "Osen", "Oshaar", "Ospel", "Ossen", "Ossenisse", "Ostaaijen", "Osterbos", "Othene", "Otterlo", "Ottersum", "Ou", "OuBildt", "Oude", "Oudega", "Oudehaske", "Oudehorne", "Ouden", "Oudenrijn", "Ouder", "Oudeschip", "Oudleusen", "Oukoop", "OuLeede", "OuLeije", "OuPolder", "OuSchouw", "OuStaten", "OuStee", "OuStoof", "OuStrumpt", "OuWaranda", "Ouwer", "OuWillem", "Ouwster", "Oventje", "Over", "Overa", "Overakker", "Overbiel", "Overeys", "Overgeul", "Overheek", "Overschot", "Overval", "Overwater", "Paal", "Paarde", "Paarlo", "Paauwen", "Paddepoel", "Padhuis", "Paesens", "Palestina", "Pallert", "Pandgat", "Panheel", "Pann", "Pannerden", "Papen", "Papenveer", "Park", "Parrega", "Partij", "Pasop", "Patrijzen", "Peebos", "Peelkant", "Peij", "Peizerweg", "Pelikaan", "Pepinus", "Pernis", "Pers", "Pesaken", "Peters", "Petten", "Piaam", "Pieperij", "Piepert", "Piershil", "Pieter", "Pikesyl", "Piksen", "Pingjum", "Pinkeveer", "Pitteperk", "Plaat", "Plaats", "Plak", "Plantage", "Plas", "Plat", "Plein", "Poffert", "Polen", "Polle", "Pollen", "Ponte", "Poonhaven", "Poppen", "Posterenk", "Posthoorn", "Pot", "Praets", "Prickart", "Puiflijk", "Punt", "Purmer", "Purmerend", "Puth", "Putse", "Putten", "Putters", "Pyramide", "Raai", "Raak", "Raam", "Raar", "Raard", "Raayen", "Raerd", "Rakens", "Rakt", "Rand", "Rande", "Randen", "Ranum", "Raren", "Rasquert", "Ratte", "Ravensgat", "Reah\xFBs", "Rechteren", "Rectum", "Reduzum", "Reeth", "Reidswal", "Reitsum", "Remswerd", "Renesse", "Renkum", "Renneborg", "Rens", "Respel", "Ressen", "Reters", "Reth", "Reuth", "Reutje", "Reuzen", "Rewert", "Rhaan", "Rheder", "Rhee", "Rhenoy", "Rhoon", "Ridder", "Riel", "Rien", "Riet", "Rietven", "Rijckholt", "Rijen", "Rijke", "Rijkel", "Rijker", "Rijlst", "Rijnsater", "Rijsb", "Rijsoord", "Rijt", "Rijtjes", "Ril", "Rimpelt", "Rink", "Rips", "Rith", "Ritsuma", "Roeke", "Roekel", "Roelage", "Roels", "Roermond", "Roeven", "Roggel", "Rohel", "Rolaf", "Roligt", "Rollecate", "Rolpaal", "Rome", "Rond", "Ronduite", "Rood", "Roodehaan", "Rooden", "Roond", "Roosteren", "Rooth", "Ropta", "Roskam", "Rothem", "Rott", "Rotte", "Rotter", "Rotting", "Rottum", "Rozendaal", "Rucphen", "Ruif", "Ruigen", "Ruigezand", "Ruimel", "Ruinen", "Ruischer", "Ruiten", "Rukven", "Rullen", "Rumpt", "Rund", "Rusven", "Rut", "Ryptsjerk", "Rytseterp", "Saaksum", "Saaxum", "Salverd", "Sandebuur", "Santfort", "Santpoort", "Sasput", "Sauwerd", "Schaa", "Schaaphok", "Schaaps", "Schadron", "Schafelt", "Schaft", "Schagen", "Schager", "Schandelo", "Schans", "Schapers", "Scharen", "Scharne", "Scharster", "Schatkuil", "Schaveren", "Scheemder", "Schelf", "Schellach", "Schelm", "Schettens", "Schey", "Schieven", "Schijf", "Schijndel", "Schillers", "Schimmert", "Schin", "Schinnen", "Schippers", "School", "Schoon", "Schoonen", "Schoor", "Schoorl", "Schoot", "Schore", "Schoter", "Schotters", "Schouw", "Schouwen", "Schouwer", "Schraard", "Schrap", "Schuilen", "Schuring", "Schuwacht", "Sebalde", "Seerijp", "Sell", "Selmien", "Selwerd", "Seroos", "Seters", "Sibbe", "Siberi\xEB", "Siegers", "Simpel", "Sinouts", "Sinsel", "Sint", "Sion", "Sittard", "Sjunga", "Skarl", "Skillaerd", "Skou", "Skrins", "Skyldum", "Slee", "Sleen", "Slegge", "Slek", "Slichten", "Sliffert", "Slijkwell", "Slikken", "Sloot", "Sluis", "Smakt", "Smal", "Smalle", "Smeerling", "Smelbr\xEAge", "Smele", "Smilde", "Smits", "Sneek", "Sneiders", "Snelle", "Sneps", "Snikzwaag", "Snipperij", "Snoden", "Soeter", "Solwerd", "Someren", "Sopsum", "Spaanrijt", "Spaanse", "Spaken", "Spannen", "Spannum", "Spears", "Spek", "Spekklef", "Spekt", "Speuld", "Speurgt", "Spier", "Spijk", "Spik", "Spits", "Spoolde", "Spoor", "Sprang", "Sprundel", "Spurkt", "Stad", "Stadterij", "Starten", "Stations", "Staverden", "Stedum", "Steeg", "Steegh", "Steel", "Steen", "Steenkamp", "Steenoven", "Steenpaal", "Steensel", "Steenvak", "Stegen", "Steger", "Stegeren", "Stein", "Sterken", "Sterre", "Steurgat", "Stevens", "Stevert", "Stiem", "Stiens", "Stitswerd", "Stobben", "Stokhem", "Stokkelen", "Stokkum", "Stokske", "Stokt", "Stolpen", "Stomme", "Stoof", "Stork", "Stouten", "Stox", "Strand", "Straten", "Strateris", "Streek", "Strepen", "Streukel", "Strij", "Strijen", "Strijp", "Stroet", "Stroo", "Stroopuit", "Strubben", "Strucht", "Strype", "Stuw", "Sumar", "Sumarre", "Surhuizum", "Susteren", "Suttum", "Suw\xE2ld", "Swaenwert", "Swalmen", "Sweik", "Syt", "S\xE2nfurd", "Taarlo", "Teeffelen", "Teije", "Teijl", "Telgt", "Tempel", "Ter", "Terband", "Terblijt", "Terdiek", "Tereyken", "Terg\xEAft", "Terhagen", "Terheijl", "Terherne", "Terkaple", "Terlet", "Terlinden", "Termaar", "Termoors", "Termunten", "Termunter", "Ternaard", "Teroele", "Terover", "Tersoal", "Tervaten", "Tervoorst", "Tervoort", "Terwispel", "Terwolde", "Terziet", "Teuge", "Theetuin", "Themaat", "Tholen", "Thull", "Thuserhof", "Tibma", "Tiel", "Tielse", "Tiggelt", "Tijnje", "Tike", "Til", "Timmer", "Tippe", "Tjaard", "Tjams", "Tjerkwerd", "Tjoene", "Tolbert", "Tolkamer", "Tommel", "Tongeren", "Tongerlo", "Tonsel", "Toom", "Toornwerd", "Top", "Toren", "Toterfout", "Toven", "Tragel", "Tranendal", "Trege", "Trent", "Tricht", "Triemen", "Trimpert", "Trintelen", "Tritzum", "Tronde", "Trophorne", "Trutjes", "Tuil", "Tull", "Tungelroy", "Turns", "Tusschen", "Tuut", "Tuuthees", "Twee", "Tweedeweg", "TweeTol", "Twekkelo", "Twello", "Twijzel", "Twijzeler", "Twisk", "Tynaarlo", "Tytsjerk", "Ubach", "Ubbena", "Ubber", "Uddel", "Uffelsen", "Uffelte", "Uit", "Uiter", "Uithoorn", "Uitwierde", "Ulfter", "Ulicoten", "Ulrum", "Ulsda", "Ulvend", "Unga", "Uppel", "Usquert", "Usselo", "Vaals", "Vaar", "Vaarle", "Vaart", "Vaesrade", "Valk", "Valken", "Valom", "Valsteeg", "Varik", "Varsen", "Varssel", "Vebenabos", "Vecht", "Veecaten", "Veele", "Veeler", "Veen", "Veenhof", "Veenhoop", "Veenhuis", "Veere", "Veessen", "Veghel", "Veld", "Veldbraak", "Velde", "Velden", "Veldhuis", "Veldzicht", "Velp", "Velsen", "Veluwe", "Vemde", "Ven", "Venbe", "Vene", "Venekoten", "Venlo", "Venne", "Venray", "Venweg", "Vergelt", "Verloren", "Vessem", "Vestjens", "Vet", "Vetterik", "Veulen", "Vianen", "Viel", "Vier", "Vierhuis", "Vijcie", "Vijf", "Vilgert", "Vilsteren", "Vilt", "Vink", "Vinkel", "Vinken", "Vinkepas", "Vis", "Visschers", "Vissers", "Vlaas", "Vlake", "Vlas", "Vledder", "Vleet", "Vleuten", "Vlie", "Vliegert", "Vlieghuis", "Vlijmen", "Vliss", "Vlist", "Vlodrop", "Vloei", "Vloet", "Vlootkant", "Vogelfort", "Volthe", "Voor", "Voorne", "Voorrijp", "Voorst", "Voorstad", "Voorste", "Voorster", "Voort", "Voortje", "Voorweg", "Vorchten", "Vorst", "Vorsten", "Voske", "Voskuil", "Vosse", "Vossebelt", "Vosselen", "Vossen", "Voulwames", "Vrachelen", "Vragender", "Vredepeel", "Vree", "Vries", "Vriezen", "Vrij", "Vrijhoeve", "Vrilk", "Vroe", "Vroelen", "Vuile", "Vuilpan", "Vuren", "Waaksens", "Waal", "Waar", "Waard", "Waarde", "Waarden", "Waarder", "Waatskamp", "Wachtum", "Waddinx", "Wadway", "Wadwerd", "Wagen", "Waije", "Walder", "Walik", "Walsert", "Wammert", "Wanneper", "Wanroij", "Wapen", "Wapse", "Wapser", "Warf", "Warffum", "Warfster", "Warmen", "Warmond", "Warnia", "Warstiens", "Warten", "Waspik", "Water", "Wateren", "Waterkant", "Waterop", "Waterval", "Waver", "Weakens", "Wedde", "Wedder", "Wee", "Weeg", "Weende", "Weerd", "Weerdinge", "Weere", "Weert", "Weerwille", "Wehe", "Wehl", "Weidum", "Weij", "Weijer", "Weijpoort", "Weilens", "Weimeren", "Weipoort", "Weite", "Weitemans", "Weiwerd", "Wekerom", "Wele", "Wells", "Welsum", "Wely", "Wenum", "Weper", "Wercheren", "Weren", "Wergea", "Werk", "Wernhouts", "Wesch", "Wessing", "Wessinge", "West", "Westeneng", "Wester", "Westerein", "Westerlee", "Westernie", "Westerse", "Westhim", "Westlaren", "Westmaas", "Westrik", "Wetering", "Wetsens", "Weurt", "Wevers", "Weverslo", "Wezel", "Wezep", "Wezup", "Wezuper", "Wielder", "Wieler", "Wielse", "Wiene", "Wierren", "Wierum", "Wiesel", "Wieuwens", "Wijchen", "Wijnaldum", "Wijnb", "Wijnje", "Wijster", "Wijthmen", "Wijzend", "Wilderhof", "Wildert", "Wilgen", "Wilp", "Wils", "Wilsum", "Winde", "Windraak", "Winkel", "Winkels", "Winssen", "Winsum", "Wintelre", "Winthagen", "Wirdum", "Wisse", "Wissel", "Wissen", "Witharen", "Withuis", "Witman", "Witmarsum", "Witrijt", "Witte", "Wittelte", "Witten", "Wiuwert", "Wjelsryp", "Woerd", "Woerdense", "Woezik", "Wognum", "Wolfers", "Wolfhaag", "Wolfhagen", "Wolfheze", "Wolfs", "Wolfshuis", "Wolling", "Wolsum", "Wommels", "Wonne", "Wons", "Woord", "Wopereis", "Wordragen", "Wormer", "Worsum", "Woubrugge", "Wouwse", "Wulpenbek", "Wyns", "Wytgaard", "W\xE2ldsein", "W\xE2nswert", "Yerseke", "Yndyk", "Zaamslag", "Zaarvlaas", "Zalk", "Zand", "Zande", "Zandfort", "Zandkant", "Zandoerle", "Zandplaat", "Zandpol", "Zandput", "Zandvoort", "Zee", "Zeegat", "Zeegse", "Zeerijp", "Zeesse", "Zegge", "Zeijen", "Zeijer", "Zeist", "Zelder", "Zelen", "Zelt", "Zenderen", "Zethuis", "Zeven", "Zevenhuis", "Zierikzee", "Zieuwent", "Zijder", "Zijdewind", "Zijp", "Zijper", "Zijtaart", "Zilven", "Zinkweg", "Zittard", "Zoeke", "Zoelen", "Zoelmond", "Zoerte", "Zoeter", "Zoggel", "Zomerven", "Zond", "Zorgvlied", "Zoutkamp", "Zuid", "Zuider", "Zuidhorn", "Zuidlaren", "Zuidwolde", "Zuidzande", "Zuidzijde", "Zuilichem", "Zundert", "Zurich", "Zutphen", "Zuuk", "Zwaag", "Zwager", "Zwanegat", "Zwart", "Zwarte", "Zweek", "Zwiggelte", "Zwijn", "Zwinderen", "Zwolle"];
var r13 = [" aan de IJssel", " aan de Rijn", "ambacht", "beek", "berg", "bergen", "bosch", "broek", "brug", "buren", "burg", "buurt", "dam", "dijk", "dijke", "donk", "dorp", "eind", "enmaes", "gat", "geest", "heide", "hoek", "horst", "hout", "hoven", "huizen", "ingen", "kerk", "laar", "land", "meer", "recht", "schoten", "sluis", "stroom", "swaerd", "veen", "veld", "vliet", "weer", "wier", "wijk", "woud", "woude", "zijl", ""];
var i13 = ["Afghanistan", "Akrotiri", "Albani\xEB", "Algerije", "Amerikaanse Maagdeneilanden", "Amerikaans-Samoa", "Andorra", "Angola", "Anguilla", "Antarctica", "Antigua en Barbuda", "Argentini\xEB", "Armeni\xEB", "Aruba", "Ashmore and Cartier Islands", "Atlantic Ocean", "Australi\xEB", "Azerbeidzjan", "Bahama's", "Bahrein", "Bangladesh", "Barbados", "Belarus", "Belgi\xEB", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivi\xEB", "Bosni\xEB-Herzegovina", "Botswana", "Bouvet Island", "Brazili\xEB", "British Indian Ocean Territory", "Britse Maagdeneilanden", "Brunei", "Bulgarije", "Burkina Faso", "Burundi", "Cambodja", "Canada", "Caymaneilanden", "Centraal-Afrikaanse Republiek", "Chili", "China", "Christmas Island", "Clipperton Island", "Cocos (Keeling) Islands", "Colombia", "Comoren (Unie)", "Congo (Democratische Republiek)", "Congo (Volksrepubliek)", "Cook", "Coral Sea Islands", "Costa Rica", "Cuba", "Cyprus", "Denemarken", "Dhekelia", "Djibouti", "Dominica", "Dominicaanse Republiek", "Duitsland", "Ecuador", "Egypte", "El Salvador", "Equatoriaal-Guinea", "Eritrea", "Estland", "Ethiopi\xEB", "European Union", "Falkland", "Faroe Islands", "Fiji", "Filipijnen", "Finland", "Frankrijk", "Frans-Polynesi\xEB", "Gabon", "Gambia", "Gaza Strip", "Georgi\xEB", "Ghana", "Gibraltar", "Grenada", "Griekenland", "Groenland", "Guam", "Guatemala", "Guernsey", "Guinea", "Guinee-Bissau", "Guyana", "Ha\xEFti", "Heard Island and McDonald Islands", "Vaticaanstad", "Honduras", "Hongarije", "Hongkong", "Ierland", "IJsland", "India", "Indonesi\xEB", "Irak", "Iran", "Isle of Man", "Isra\xEBl", "Itali\xEB", "Ivoorkust", "Jamaica", "Jan Mayen", "Japan", "Jemen", "Jersey", "Jordani\xEB", "Kaapverdi\xEB", "Kameroen", "Kazachstan", "Kenia", "Kirgizstan", "Kiribati", "Koeweit", "Kroati\xEB", "Laos", "Lesotho", "Letland", "Libanon", "Liberia", "Libi\xEB", "Liechtenstein", "Litouwen", "Luxemburg", "Macao", "Macedoni\xEB", "Madagaskar", "Malawi", "Maldiven", "Maleisi\xEB", "Mali", "Malta", "Marokko", "Marshall Islands", "Mauritani\xEB", "Mauritius", "Mayotte", "Mexico", "Micronesi\xEB", "Moldavi\xEB", "Monaco", "Mongoli\xEB", "Montenegro", "Montserrat", "Mozambique", "Myanmar", "Namibi\xEB", "Nauru", "Navassa Island", "Nederland", "St. Maarten", "Curacao", "Nepal", "Ngwane", "Nicaragua", "Nieuw-Caledoni\xEB", "Nieuw-Zeeland", "Niger", "Nigeria", "Niue", "Noordelijke Marianen", "Noord-Korea", "Noorwegen", "Norfolk Island", "Oekra\xEFne", "Oezbekistan", "Oman", "Oostenrijk", "Pakistan", "Palau", "Panama", "Papoea-Nieuw-Guinea", "Paracel Islands", "Paraguay", "Peru", "Pitcairn", "Polen", "Portugal", "Puerto Rico", "Qatar", "Roemeni\xEB", "Rusland", "Rwanda", "Saint Helena", "Saint Lucia", "Saint Vincent en de Grenadines", "Saint-Pierre en Miquelon", "Salomon", "Samoa", "San Marino", "S\xE3o Tom\xE9 en Principe", "Saudi-Arabi\xEB", "Senegal", "Servi\xEB", "Seychellen", "Sierra Leone", "Singapore", "Sint-Kitts en Nevis", "Sloveni\xEB", "Slowakije", "Soedan", "Somali\xEB", "South Georgia and the South Sandwich Islands", "Southern Ocean", "Spanje", "Spratly Islands", "Sri Lanka", "Suriname", "Svalbard", "Syri\xEB", "Tadzjikistan", "Taiwan", "Tanzania", "Thailand", "Timor Leste", "Togo", "Tokelau", "Tonga", "Trinidad en Tobago", "Tsjaad", "Tsjechi\xEB", "Tunesi\xEB", "Turkije", "Turkmenistan", "Turks-en Caicoseilanden", "Tuvalu", "Uganda", "Uruguay", "Vanuatu", "Venezuela", "Verenigd Koninkrijk", "Verenigde Arabische Emiraten", "Verenigde Staten van Amerika", "Vietnam", "Wake Island", "Wallis en Futuna", "Wereld", "West Bank", "Westelijke Sahara", "Zambia", "Zimbabwe", "Zuid-Afrika", "Zuid-Korea", "Zweden", "Zwitserland"];
var o13 = ["Nederland"];
var t13 = ["#### ??"];
var l13 = ["1 hoog", "2 hoog", "3 hoog", "3 hoog achter"];
var s13 = ["Noord-Holland", "Zuid-Holland", "Utrecht", "Zeeland", "Overijssel", "Gelderland", "Drenthe", "Friesland", "Groningen", "Noord-Brabant", "Limburg", "Flevoland"];
var u13 = ["{{name.first_name}}{{address.street_suffix}}", "{{name.last_name}}{{address.street_suffix}}"];
var m13 = { normal: "{{address.street}} {{address.buildingNumber}}", full: "{{address.street}} {{address.buildingNumber}} {{address.secondaryAddress}}" };
var d13 = ["straat", "laan", "weg", "plantsoen", "park", "gracht", "dijk"];
var Z6 = { building_number: e13, city: a13, city_prefix: n13, city_suffix: r13, country: i13, default_country: o13, postcode: t13, secondary_address: l13, state: s13, street: u13, street_address: m13, street_suffix: d13 };
var k10 = Z6;
var p13 = ["rood", "groen", "blauw", "koningblauw", "geel", "purper", "muntgroen", "groenblauw", "wit", "zwart", "oranje", "roze", "grijs", "donkergrijs", "oker", "terracotta", "kastanjebruin", "paars", "turkoois", "bruin", "hemelsblauw", "zalmroze", "oudroze", "appelgroen", "levend wit", "olijfgroen", "magenta", "limoen", "ivoor", "indigo", "goud", "fuchsia", "cyaan", "azuurblauw", "lavendel", "zilver"];
var F8 = { human: p13 };
var h13 = F8;
var g12 = ["Boeken", "Films", "Muziek", "Spelletjes", "Elektronica", "Computers", "Huis", "Tuin", "Gereedschap", "Kruiden", "Gezondheid", "Beauty", "Speelgoed", "Kinderen", "Baby", "Kleding", "Schoenen", "Sieraden", "Sport", "Verzorging", "Auto", "Industrieel"];
var c13 = { adjective: ["Klein", "Ergonomisch", "Rustiek", "Intelligent", "Prachtig", "Ongelooflijk", "Fantastisch", "Praktisch", "Slank", "Geweldig", "Algemeen", "Handgemaakt", "Ambachtelijk", "Artistiek", "Verantwoord", "Uitgekiend", "Zeldzaam", "Verfijnd", "Merkloos", "Smakelijk"], material: ["Staal", "Glazen", "Wollen", "Houten", "Beton", "Plastic", "Katoenen", "Granieten", "Rubberen", "IJzeren", "Zachte", "Verse", "Bevroren"], product: ["Stoel", "Auto", "Computer", "Toetsenbord", "Muis", "Fiets", "Bal", "Handschoenen", "Broek", "Shirt", "Tafel", "Bijzettafeltje", "Boekenkast", "Kaasschaaf", "Leunstoel", "Poef", "Hangmat", "Trui", "Schoenen", "Hoed", "Handdoeken", "Zeep", "Tonijn", "Kip", "Vis", "Kaas", "Spek", "Pizza", "Salade", "Worstjes", "Chips"] };
var C9 = { department: g12, product_name: c13 };
var B9 = C9;
var S10 = ["BV", "V.O.F.", "Groep", "NV", "Bedrijf", "en Zonen", "Combinatie"];
var _10 = { suffix: S10 };
var f13 = _10;
var H9 = { wide: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december"], wide_context: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december"], abbr: ["jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec"], abbr_context: ["jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec"] };
var M9 = { wide: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"], wide_context: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"], abbr: ["zo", "ma", "di", "wo", "do", "vr", "za"], abbr_context: ["zo", "ma", "di", "wo", "do", "vr", "za"] };
var q6 = { month: H9, weekday: M9 };
var b12 = q6;
var j7 = ["ondersteunende", "primaire", "onderliggende", "digitale", "open source", "virtuele", "cross-platform", "overtollige", "online", "haptische", "multi-byte", "Bluetooth", "draadloze", "minuscule", "neurale", "optische", "solid state", "mobiele", "cruciale", "kostbare", "verwaarloosde", "smakelijke"];
var v8 = ["driver", "protocol", "bandbreedte", "paneel", "microchip", "programma", "port", "kaart", "array", "verbinding", "draad", "stekker", "systeem", "sensor", "firewall", "harde schijf", "pixel", "alarm", "voeding", "monitor", "toepassing", "zender", "bus", "stroomkring", "condensator", "matrix"];
var L9 = ["Als we de {{noun}} {{verb}}, dan kunnen we naar de {{abbreviation}} {{noun}} via de {{adjective}} {{abbreviation}} {{noun}}!", "We moeten de {{adjective}} {{abbreviation}} {{noun}} {{verb}}!", "Probeer om de {{abbreviation}} {{noun}} te {{verb}}, misschien gaat dat de {{adjective}} {{noun}} {{verb}}!", "Je kan de {{noun}} niet {{verb}} zonder de {{adjective}} {{abbreviation}} {{noun}} te {{verb}}!", "Gebruik de {{adjective}} {{abbreviation}} {{noun}}, dan kan je de {{adjective}} {{noun}} {{verb}}!", "De {{abbreviation}} {{noun}} ligt eruit, jullie moeten de {{adjective}} {{noun}} {{verb}} zodat we de {{abbreviation}} {{noun}} kunnen {{verb}}!", "Het maakt niet uit of we de {{noun}} {{verb}}, we moeten de {{adjective}} {{abbreviation}} {{noun}} {{verb}}!", "Ik ga de {{adjective}} {{abbreviation}} {{noun}} {{verb}}, dat zou de {{noun}} moeten {{verb}}!"];
var y13 = ["back-uppen", "omzeilen", "hacken", "overschrijven", "samenpersen", "kopi\xEBren", "navigeren", "indexeren", "aansluiten", "genereren", "kwantificeren", "berekenen", "samenstellen", "invoeren", "verzenden", "programmeren", "herstarten", "ontleden", "in stukjes snijden", "analyseren"];
var U7 = { adjective: j7, noun: v8, phrase: L9, verb: y13 };
var w8 = U7;
var K9 = ["nl", "com", "net", "org", "eu"];
var A10 = ["gmail.com", "yahoo.com", "hotmail.com"];
var Y6 = { domain_suffix: K9, free_email: A10 };
var D12 = Y6;
var W5 = ["alias", "consequatur", "aut", "perferendis", "sit", "voluptatem", "accusantium", "doloremque", "aperiam", "eaque", "ipsa", "quae", "ab", "illo", "inventore", "veritatis", "et", "quasi", "architecto", "beatae", "vitae", "dicta", "sunt", "explicabo", "aspernatur", "odit", "fugit", "sed", "quia", "consequuntur", "magni", "dolores", "eos", "qui", "ratione", "sequi", "nesciunt", "neque", "dolorem", "ipsum", "dolor", "amet", "consectetur", "adipisci", "velit", "non", "numquam", "eius", "modi", "tempora", "incidunt", "ut", "labore", "dolore", "magnam", "aliquam", "quaerat", "enim", "ad", "minima", "veniam", "quis", "nostrum", "exercitationem", "ullam", "corporis", "nemo", "ipsam", "voluptas", "suscipit", "laboriosam", "nisi", "aliquid", "ex", "ea", "commodi", "autem", "vel", "eum", "iure", "reprehenderit", "in", "voluptate", "esse", "quam", "nihil", "molestiae", "iusto", "odio", "dignissimos", "ducimus", "blanditiis", "praesentium", "laudantium", "totam", "rem", "voluptatum", "deleniti", "atque", "corrupti", "quos", "quas", "molestias", "excepturi", "sint", "occaecati", "cupiditate", "provident", "perspiciatis", "unde", "omnis", "iste", "natus", "error", "similique", "culpa", "officia", "deserunt", "mollitia", "animi", "id", "est", "laborum", "dolorum", "fuga", "harum", "quidem", "rerum", "facilis", "expedita", "distinctio", "nam", "libero", "tempore", "cum", "soluta", "nobis", "eligendi", "optio", "cumque", "impedit", "quo", "porro", "quisquam", "minus", "quod", "maxime", "placeat", "facere", "possimus", "assumenda", "repellendus", "temporibus", "quibusdam", "illum", "fugiat", "nulla", "pariatur", "at", "vero", "accusamus", "officiis", "debitis", "necessitatibus", "saepe", "eveniet", "voluptates", "repudiandae", "recusandae", "itaque", "earum", "hic", "tenetur", "a", "sapiente", "delectus", "reiciendis", "voluptatibus", "maiores", "doloribus", "asperiores", "repellat"];
var Q5 = { words: W5 };
var J7 = Q5;
var V7 = ["Yarah", "Vere", "Si\xEBnna", "Sanna", "Salom\xEB", "Roxy", "Nela", "Myra", "Liene", "Lia", "Kayleigh", "Kaylee", "Kato", "Florence", "Eefje", "Dieke", "Zeyneb", "Wende", "Vienna", "Melisa", "Maaike", "Lova", "Lilian", "Juno", "Joanna", "Jesslyn", "Jaelynn", "Gioia", "Claire", "Alma", "Aliya", "Alisa", "Zofia", "Vivian", "Nowi", "Noami", "Milana", "Marlie", "Macy", "Maan", "Lorena", "Liselotte", "Lien", "Laure", "Laila", "Kim", "Khadija", "Joya", "Jacoba", "Gigi", "Wilhelmina", "Vivienne", "Rose", "Rana", "Milly", "Michelle", "Marrit", "Malou", "Jaimy", "Gaia", "Fayen", "Fabi\xEBnne", "Eveline", "Daisy", "Babette", "Aaltje", "Scottie", "Nomi", "Mathilde", "Linne", "Laurie", "Kyara", "Jalou", "Iva", "Inara", "Grace", "Emmy", "Elle", "Diana", "C\xE9line", "Selena", "Safiya", "Quinty", "Oliwia", "Nadine", "Meghan", "Marwa", "Jada", "Ines", "Fardau", "Eliana", "Carmen", "Ayana", "Asya", "Annabel", "Amara", "Alexandra", "Rachel", "Melissa", "Melina", "Luus", "Jayda", "Jacky", "Eleonora", "Asiya", "Annemijn", "Sare", "Ninthe", "Nena", "Melody", "Kira", "Jasmine", "Imani", "Hira", "Elynn", "Dominique", "Ashley", "Aleyna", "Pola", "No\xEB", "Lisanne", "Lilou", "Kiara", "Jette", "Jess", "Isabeau", "Floortje", "Fiep", "Fieke", "Femm", "Famke", "Chelsey", "Amelie", "Vanessa", "Skye", "Sienna", "Safa", "Lydia", "Esma", "Daantje", "Catharina", "Carlijn", "Asel", "Amaya", "Amalia", "Ada", "Zahra", "Tirza", "Nikkie", "Mirre", "Mayra", "Lenne", "Jule", "Jana", "Farah", "Defne", "Ariana", "Yenthe", "Renske", "Medina", "Liliana", "Kenza", "Jazz", "Esra", "Emilie", "Dua", "Chloe", "Abby", "Selma", "Maren", "Jolijn", "Febe", "Elodie", "Djenna", "Diede", "Cataleya", "Aliyah", "Aisha", "Teddy", "Nika", "Myla", "Izzy", "Dewi", "Mirte", "Mikki", "Kensi", "Karlijn", "Jazzlynn", "Imke", "Eleanor", "Wies", "Thirza", "Safae", "Meyra", "Lune", "Jazzlyn", "Faya", "Arya", "Nadia", "Puk", "Oumayra", "Lois", "Josefien", "Vive", "Fayenne", "Celine", "Nynke", "Loes", "Danique", "Aurora", "Angelina", "Alya", "Abigail", "Tara", "Quinn", "Meike", "Maartje", "Jolien", "Selina", "Phileine", "Miley", "Lexie", "Florine", "Coco", "Britt", "Alyssa", "Yasmine", "Sammie", "Nila", "Lucie", "Eef", "Bella", "Aylin", "Ziva", "Neeltje", "Jesslynn", "Jente", "Jara", "Bobbie", "Yinthe", "Megan", "Freya", "Donna", "Alice", "Milena", "Jo\xEBlle", "Jenna", "Evelien", "Nisa", "Lott", "Loa", "Daphne", "Dani", "Maysa", "Hidaya", "Hayley", "Gwen", "Esther", "Elize", "Dana", "Maxime", "Madelief", "Keet", "Jip", "Ize", "No\xEBlla", "Layla", "Hendrika", "Hafsa", "Giulia", "Eliza", "Bowie", "Marly", "Linn", "Jane", "Filou", "Zuzanna", "Leyla", "Fatima", "Evie", "Marley", "Kyra", "Hanne", "Jailey", "Ise", "Adriana", "Liza", "Doris", "Dina", "Amina", "Mina", "Aaliyah", "Romee", "Pippa", "Juliette", "Alicia", "Merle", "Lea", "Elina", "Sena", "Flore", "Riley", "Nour", "Lizz", "Jessie", "Cornelia", "Beau", "Valerie", "Silke", "Valentina", "Loua", "Vieve", "Vesper", "Ruby", "Nienke", "Jula", "Azra", "Myrthe", "Soof", "Juli\xEBtte", "Lexi", "Davina", "Liya", "Yasmin", "Esm\xE9e", "Amelia", "Niene", "Mette", "Ela", "Aim\xE9e", "Joy", "Ilse", "Zeynep", "Yfke", "Elizabeth", "Mare", "Isra", "Helena", "Stella", "Jinthe", "Meryem", "Janna", "Isabelle", "Maja", "Lieve", "Yuna", "Pien", "Faye", "Pleun", "Noortje", "Janne", "Novi", "Ava", "Sterre", "Maeve", "Elisabeth", "Bibi", "Ayla", "Liyana", "Mae", "Leah", "Marie", "Juna", "Lucy", "Josephine", "Victoria", "Indy", "Maryam", "Jaylinn", "Zoey", "Rosie", "Mira", "Nore", "Jinte", "Zara", "Bente", "Senna", "Pip", "Alina", "F\xE9line", "Aya", "Anouk", "Am\xE9lie", "Lou", "Nine", "Jet", "Robin", "Nikki", "June", "Fem", "Demi", "Mirthe", "Lana", "No\xEBlle", "Lise", "Lilly", "Jackie", "Benthe", "Bobbi", "Fiene", "Elisa", "Maya", "Jade", "Emilia", "Elif", "Romy", "Lot", "Jolie", "Guusje", "Mara", "Kate", "Marit", "Nola", "Louise", "Lola", "Laura", "Iris", "Philou", "Tessa", "Inaya", "Elise", "Eline", "Sam", "Evy", "Johanna", "Femke", "Charlie", "Livia", "Rosalie", "Suus", "Sanne", "Fay", "Fenne", "Linde", "Isabel", "Puck", "Lize", "Rosa", "Amira", "Lily", "Naomi", "Lizzy", "Liva", "Juul", "Jill", "Hanna", "Floor", "Amber", "Suze", "Veerle", "Merel", "Anne", "Cato", "Charlotte", "Kiki", "Lena", "Ivy", "Feline", "Jasmijn", "Liz", "Elena", "Maria", "Norah", "Lara", "Fien", "Isabella", "Luna", "Amy", "Sophia", "Hailey", "Bo", "Vera", "Julie", "Lisa", "Esmee", "Noa", "Ella", "Lina", "Mia", "Sofia", "Lo\xEFs", "Hannah", "Roos", "Emily", "Isa", "Fenna", "Elin", "Fleur", "Lynn", "Sarah", "Nova", "Nina", "Maud", "Sofie", "Milou", "Lauren", "Lotte", "Eva", "Noor", "Liv", "Yara", "Olivia", "Lieke", "Nora", "Saar", "Evi", "Anna", "Sara", "Tess", "Julia", "Zo\xEB", "Sophie", "Mila", "Emma"];
var R7 = ["Amber", "Anna", "Anne", "Anouk", "Bas", "Bram", "Britt", "Daan", "Emma", "Eva", "Femke", "Finn", "Fleur", "Iris", "Isa", "Jan", "Jasper", "Jayden", "Jesse", "Johannes", "Julia", "Julian", "Kevin", "Lars", "Lieke", "Lisa", "Lotte", "Lucas", "Luuk", "Maud", "Max", "Mike", "Milan", "Nick", "Niels", "Noa", "Rick", "Roos", "Ruben", "Sander", "Sanne", "Sem", "Sophie", "Stijn", "Sven", "Thijs", "Thomas", "Tim", "Tom"];
var G9 = ["Bakker", "Beek", "Berg", "Boer", "Bos", "Bosch", "Brink", "Broek", "Brouwer", "Bruin", "Dam", "Dekker", "Dijk", "Dijkstra", "Graaf", "Groot", "Haan", "Hendriks", "Heuvel", "Hoek", "Jacobs", "Jansen", "Janssen", "Jong", "Klein", "Kok", "Koning", "Koster", "Leeuwen", "Linden", "Maas", "Meer", "Meijer", "Mulder", "Peters", "Ruiter", "Schouten", "Smit", "Smits", "Stichting", "Veen", "Ven", "Vermeulen", "Visser", "Vliet", "Vos", "Vries", "Wal", "Willems", "Wit"];
var E7 = ["Tymon", "Steven", "Semih", "Seff", "Sabir", "Nico", "Naoufal", "Nadir", "Mirza", "Miguel", "Manoah", "Kenji", "Kenan", "Joseph", "Jordy", "Jeppe", "Diego", "Coen", "Can", "Bentley", "Yasin", "Tomas", "Sjoerd", "Savi", "Safouane", "Rapha\xEBl", "Mas", "Maes", "Louie", "Karam", "John", "Jelmer", "Jayvano", "Hein", "Giel", "Emin", "Deen", "Badr", "Arda", "Umut", "Teunis", "Silas", "Rayen", "Nikodem", "Mex", "Marius", "Kayden", "Jidde", "Glenn", "Frederik", "Foss", "Finnley", "Ensar", "Duco", "Dies", "Brenn", "Yousef", "Siep", "Rohan", "Osman", "Nox", "Natan", "Mathijs", "Marley", "Jaxon", "Jairo", "Jaimy", "Eray", "Don", "Chase", "Bruno", "Brian", "Anton", "Xander", "Senne", "Reza", "Oliwier", "Mitch", "Krijn", "Jorrit", "Jimi", "Dominik", "Devin", "Tobin", "Stefan", "Jakob", "Igor", "Giovanni", "Dylano", "Armin", "Adrian", "Youp", "Sebas", "Sander", "Robert", "Nils", "Mozes", "Micah", "Menno", "Jaylano", "Ilias", "Freek", "Flip", "Dion", "Christopher", "Ahmet", "Yassir", "Yannick", "Valentino", "Samu\xEBl", "Noam", "Mylan", "Kenzo", "Jona", "Danilo", "Bowie", "Zain", "Wolf", "Thije", "Theo", "Mylo", "Matz", "Lieuwe", "Joes", "Jacobus", "Idris", "Gideon", "Bruce", "Abdullah", "Zef", "Viktor", "Seb", "Rover", "Raphael", "Kacper", "Josh", "Jeremiah", "Deniz", "Aleksander", "Zev", "Yves", "Viggo", "Naoufel", "Matthew", "Keano", "Jaylen", "Bo", "Bjorn", "Anouar", "Abraham", "Storm", "Martin", "Manu", "Jefta", "Djayden", "Benyamin", "Benja", "Ahmad", "Nino", "Malik", "Junayd", "Isa", "Finley", "Ayman", "Zeyd", "Yassine", "Sev", "Rico", "Mels", "Maximilian", "Leendert", "Kick", "Enzo", "Sjors", "Silvan", "Peter", "Otto", "Milano", "Marijn", "Javi", "Yahya", "Wes", "Toon", "Tommy", "Loet", "Leonardo", "Len", "Kaan", "Dax", "Davy", "Adriaan", "Thiago", "Mustafa", "Merijn", "Kerem", "Johan", "Isaiah", "Bryan", "Bastiaan", "Axel", "Toby", "Thom", "Noan", "Marcus", "Ismail", "Davi", "Bodi", "Tieme", "Ole", "Nout", "Musa", "Moussa", "Luciano", "Liyam", "Kyano", "Dorian", "Bradley", "Wouter", "Siebe", "Ralph", "Quin", "Fender", "Arie", "Albert", "Zion", "Wessel", "Rick", "Miles", "Mahir", "Mads", "Klaas", "Flynn", "Dexx", "Anthony", "Tristan", "Mink", "Mehmet", "Maas", "Lyam", "Jorn", "Joost", "Christian", "Alparslan", "Tyler", "Maher", "Jakub", "Alan", "William", "Rafa\xEBl", "Jur", "Jimmy", "George", "Christiaan", "Brandon", "Ace", "Tibbe", "Sebastian", "Lorenzo", "Bilal", "Teije", "Joe", "Michael", "Louay", "Lou", "Levy", "Kevin", "Isaac", "Ilay", "Harvey", "Davey", "Younes", "Xem", "Tycho", "Seppe", "Riv", "Marinus", "Maarten", "Ayoub", "Ahmed", "Tuur", "Tijmen", "Kjeld", "Fynn", "Frenkie", "Dante", "Ayaz", "Abe", "Jackson", "Bart", "Xavier", "Ted", "Sebastiaan", "Safouan", "Midas", "Gabri\xEBl", "Fos", "Douwe", "Boet", "Berend", "Yassin", "Rowan", "Revi", "Maurits", "Marcel", "Ivo", "Eli", "Shane", "Rein", "Muhammad", "Lennox", "Ivar", "Huub", "Tijs", "Matthias", "Juda", "Dave", "Antoni", "Damin", "Colin", "Zakaria", "Vincent", "Sverre", "Mik", "Lennon", "Donny", "Thijn", "Novan", "Mart", "Bob", "Senna", "Olaf", "Mohammad", "Julan", "Riff", "Jaivey", "Collin", "Nouri", "No\xEBl", "Ferre", "Mert", "Boas", "Sten", "Gabriel", "Pelle", "Mark", "Leo", "Rafael", "Oskar", "Naud", "Aras", "Sami", "Kasper", "Jop", "Ethan", "Dirk", "Bodhi", "Eden", "Bobby", "Jordan", "Ivan", "Vinz", "Twan", "Odin", "Manuel", "Jesper", "Scott", "Raff", "Luke", "Brent", "Zayd", "Sil", "Miran", "Charlie", "Amin", "Valentijn", "Eymen", "Jules", "Kees", "Jayce", "Matteo", "Chris", "Quinten", "Mateo", "Lux", "Justin", "Joey", "Jay", "Ayden", "Laurens", "Luka", "Joah", "Gerrit", "Evan", "Ben", "Jari", "Mika", "Kian", "Ian", "Ilyas", "Jort", "Mike", "Maxim", "Ibrahim", "Vigo", "Victor", "Louis", "Jayson", "Florian", "Youssef", "Vic", "Raf", "Filip", "Yusuf", "Timo", "Vik", "Micha", "Matthijs", "Lasse", "Faas", "Riley", "Mace", "Daniel", "Jamie", "Fabian", "Nick", "Muhammed", "Luc", "Imran", "Jo\xEBl", "Niels", "Philip", "Milo", "Lewis", "Wout", "Leon", "Joas", "Jasper", "Seth", "Omar", "Koen", "Julius", "Beau", "Rens", "Mayson", "Kay", "Hamza", "Daley", "Robin", "Nolan", "Cornelis", "Bas", "Lukas", "Jonathan", "Jonas", "Ali", "Ravi", "Hendrik", "Sef", "Lex", "Thijmen", "Damian", "Arthur", "Aron", "Emir", "Jonah", "\xC3\x96mer", "Jelte", "Melle", "Jacob", "Alex", "Jim", "Elijah", "Stef", "Kaj", "Johannes", "Jelle", "Joris", "Jip", "Aaron", "Loek", "Logan", "Lev", "Dylan", "Simon", "Kyan", "Sep", "Moos", "Felix", "Job", "Elias", "Ezra", "Oscar", "Casper", "Duuk", "Sepp", "Pieter", "Rayan", "Aiden", "Joshua", "Dean", "Niek", "Lenn", "Tygo", "Jake", "Stan", "Kai", "Roan", "Mick", "Mohammed", "Dani", "Nathan", "Oliver", "Alexander", "Mohamed", "Hidde", "Samuel", "Zayn", "Amir", "Xavi", "Jurre", "Boris", "Senn", "Jason", "Pepijn", "Quinn", "Pim", "Jace", "Jax", "Tijn", "Tim", "Willem", "Jaxx", "Otis", "Fedde", "Tom", "Owen", "Ryan", "Tobias", "Floris", "Abel", "Jayden", "Sven", "Morris", "Cas", "Ties", "Dani\xEBl", "Joep", "Jan", "Jens", "Vince", "Dex", "Ruben", "Olivier", "Guus", "Thijs", "Stijn", "Jack", "David", "Teun", "Hugo", "Mats", "Gijs", "Lars", "Luca", "Siem", "Mason", "Julian", "Boaz", "Benjamin", "Thomas", "Max", "Adam", "Jesse", "Mees", "Sam", "Noud", "Bram", "Luuk", "Milan", "James", "Liam", "Finn", "Sem", "Levi", "Lucas", "Daan", "Noah"];
var T8 = ["{{name.prefix}} {{name.first_name}} {{name.last_name}}", "{{name.first_name}} {{name.last_name}} {{name.suffix}}", "{{name.first_name}} {{name.last_name}}", "{{name.first_name}} {{name.tussenvoegsel}} {{name.last_name}}"];
var z9 = ["Dhr.", "Mevr. Dr.", "Bsc", "Msc", "Prof."];
var N12 = ["Jr.", "Sr.", "I", "II", "III", "IV", "V"];
var O6 = ["van", "van de", "van den", "van 't", "van het", "de", "den"];
var X5 = { female_first_name: V7, first_name: R7, last_name: G9, male_first_name: E7, name: T8, prefix: z9, suffix: N12, tussenvoegsel: O6 };
var x11 = X5;
var P9 = ["(####) ######", "##########", "06########", "06 #### ####"];
var $4 = { formats: P9 };
var I7 = $4;
var ee3 = { title: "Dutch", address: k10, color: h13, commerce: B9, company: f13, date: b12, hacker: w8, internet: D12, lorem: J7, name: x11, phone_number: I7 };
var Ga = ee3;

// ../../node_modules/@faker-js/faker/dist/esm/chunk-5ZAQ2U6R.mjs
init_esm_shims();
var e14 = ["#", "##", "###", "###a", "###b", "###c"];
var r14 = ["{{address.city_prefix}}", "{{address.city_prefix}}{{address.city_suffix}}"];
var n14 = ["'s Herenelderen", "'s-Gravenvoeren", "'s-Gravenwezel", "Aaigem", "Aalbeke", "Aalst", "Aalter", "Aarschot", "Aarsele", "Aartrijke", "Aartselaar", "Achel", "Adegem", "Adinkerke", "Afsnee", "Alken", "Alsemberg", "Alveringem", "Antwerpen", "Anzegem", "Appels", "Appelterre-Eichem", "Ardooie", "Arendonk", "As", "Aspelare", "Asper", "Asse", "Assebroek", "Assenede", "Assent", "Astene", "Attenhoven", "Attenrode-Wever", "Avekapelle", "Avelgem", "Averbode", "Baaigem", "Baal", "Baardegem", "Baarle-Hertog", "Baasrode", "Bachte-Maria-Leerne", "Balegem", "Balen", "Bambrugge", "Bassevelde", "Batsheers", "Bavegem", "Bavikhove", "Bazel", "Beek", "Beerlegem", "Beernem", "Beerse", "Beersel", "Beerst", "Beert", "Beervelde", "Beerzel", "Begijnendijk", "Beigem", "Bekegem", "Bekkerzeel", "Bekkevoort", "Bellegem", "Bellem", "Bellingen", "Belsele", "Berbroek", "Berchem", "Berendrecht-Zandvliet-Lillo", "Berg", "Beringen", "Berlaar", "Berlare", "Berlingen", "Bertem", "Beselare", "Betekom", "Bevel", "Bever", "Bevere", "Beveren", "Beverlo", "Beverst", "Bierbeek", "Bikschote", "Bilzen", "Binderveld", "Binkom", "Bissegem", "Blaasveld", "Blanden", "Blankenberge", "Bocholt", "Boechout", "Boekhout", "Boekhoute", "Boezinge", "Bogaarden", "Bommershoven", "Bonheiden", "Booischot", "Booitshoeke", "Boom", "Boorsem", "Boortmeerbeek", "Borchtlombeek", "Borgerhout", "Borgloon", "Borlo", "Bornem", "Borsbeek", "Borsbeke", "Bossuit", "Bost", "Bottelare", "Boutersem", "Bouwel", "Bovekerke", "Brasschaat", "Brecht", "Bredene", "Bree", "Breendonk", "Brielen", "Broechem", "Broekom", "Brugge", "Brussegem", "Brustem", "Budingen", "Buggenhout", "Buizingen", "Buken", "Bulskamp", "Bunsbeek", "Burcht", "Burst", "Buvingen", "Dadizele", "Daknam", "Damme", "De Klinge", "De Moeren", "De Panne", "De Pinte", "Deerlijk", "Deftinge", "Deinze", "Denderbelle", "Denderhoutem", "Denderleeuw", "Dendermonde", "Denderwindeke", "Dentergem", "Dessel", "Desselgem", "Destelbergen", "Desteldonk", "Deurle", "Deurne", "Diegem", "Diepenbeek", "Diest", "Diets-Heur", "Dikkebus", "Dikkele", "Dikkelvenne", "Diksmuide", "Dilbeek", "Dilsen", "Doel", "Donk", "Dormaal", "Dranouter", "Drieslinter", "Drogenbos", "Drongen", "Dudzele", "Duffel", "Duisburg", "Duras", "Dworp", "Edegem", "Edelare", "Eeklo", "Eernegem", "Egem", "Eggewaartskapelle", "Eigenbilzen", "Eindhout", "Eine", "Eisden", "Eke", "Ekeren", "Eksaarde", "Eksel", "Elen", "Elene", "Elewijt", "Eliksem", "Elingen", "Ellikom", "Elsegem", "Elst", "Elverdinge", "Elversele", "Emblem", "Emelgem", "Ename", "Engelmanshoven", "Eppegem", "Erembodegem", "Erondegem", "Erpe", "Erps-Kwerps", "Ertvelde", "Erwetegem", "Esen", "Essen", "Essene", "Etikhove", "Ettelgem", "Everbeek", "Everberg", "Evergem", "Ezemaal", "Gaasbeek", "Galmaarden", "Gavere", "Geel", "Geetbets", "Gelinden", "Gellik", "Gelrode", "Geluveld", "Geluwe", "Genk", "Genoelselderen", "Gent", "Gentbrugge", "Geraardsbergen", "Gerdingen", "Gestel", "Gierle", "Gijverinkhove", "Gijzegem", "Gijzelbrechtegem", "Gijzenzele", "Gingelom", "Gistel", "Gits", "Glabbeek-Zuurbemde", "Godveerdegem", "Goeferdinge", "Goetsenhoven", "Gontrode", "Gooik", "Gors-Opleeuw", "Gorsem", "Gotem", "Gottem", "Grammene", "Grazen", "Grembergen", "Grimbergen", "Grimminge", "Grobbendonk", "Groot-Bijgaarden", "Groot-Gelmen", "Groot-Loon", "Grote-Brogel", "Grote-Spouwen", "Grotenberge", "Gruitrode", "Guigoven", "Gullegem", "Gutschoven", "Haacht", "Haaltert", "Haasdonk", "Haasrode", "Hakendover", "Halen", "Hallaar", "Halle", "Halle-Booienhoven", "Halmaal", "Hamme", "Hamont", "Handzame", "Hansbeke", "Harelbeke", "Hasselt", "Hechtel", "Heers", "Hees", "Heestert", "Heffen", "Heikruis", "Heindonk", "Heist", "Heist-op-den-Berg", "Hekelgem", "Heks", "Helchteren", "Heldergem", "Helen-Bos", "Helkijn", "Hemelveerdegem", "Hemiksem", "Hendrieken", "Henis", "Heppen", "Herderen", "Herdersem", "Herent", "Herentals", "Herenthout", "Herfelingen", "Herk-de-Stad", "Herne", "Herselt", "Herstappe", "Herten", "Hertsberge", "Herzele", "Heule", "Heurne", "Heusden", "Hever", "Heverlee", "Hillegem", "Hingene", "Hoboken", "Hoegaarden", "Hoeilaart", "Hoeke", "Hoelbeek", "Hoeleden", "Hoepertingen", "Hoeselt", "Hoevenen", "Hofstade", "Hollebeke", "Holsbeek", "Hombeek", "Hooglede", "Hoogstade", "Hoogstraten", "Horpmaal", "Houtave", "Houtem", "Houthalen", "Houthulst", "Houtvenne", "Houwaart", "Hove", "Huise", "Huizingen", "Huldenberg", "Hulshout", "Hulste", "Humbeek", "Hundelgem", "Ichtegem", "Iddergem", "Idegem", "Ieper", "Impe", "Ingelmunster", "Ingooigem", "Itegem", "Itterbeek", "Izegem", "Izenberge", "Jabbeke", "Jesseren", "Jeuk", "Kaaskerke", "Kachtem", "Kaggevinne", "Kalken", "Kallo", "Kalmthout", "Kampenhout", "Kanegem", "Kanne", "Kapelle-op-den-Bos", "Kapellen", "Kaprijke", "Kaster", "Kasterlee", "Kaulille", "Keerbergen", "Keiem", "Kemmel", "Kemzeke", "Kerkhove", "Kerkom", "Kerkom-bij-Sint-Truiden", "Kerksken", "Kermt", "Kerniel", "Kersbeek-Miskom", "Kessel", "Kessel-Lo", "Kessenich", "Kester", "Kieldrecht", "Kinrooi", "Klein-Gelmen", "Kleine-Brogel", "Kleine-Spouwen", "Klemskerke", "Klerken", "Kluizen", "Knesselare", "Knokke", "Kobbegem", "Koekelare", "Koersel", "Koksijde", "Koningshooikt", "Koninksem", "Kontich", "Kooigem", "Koolkerke", "Koolskamp", "Korbeek-Dijle", "Korbeek-Lo", "Kortemark", "Kortenaken", "Kortenberg", "Kortessem", "Kortijs", "Kortrijk", "Kortrijk-Dutsel", "Kozen", "Kraainem", "Krombeke", "Kruibeke", "Kruishoutem", "Kumtich", "Kuringen", "Kuttekoven", "Kuurne", "Kwaadmechelen", "Kwaremont", "Laar", "Laarne", "Lampernisse", "Lanaken", "Landegem", "Landen", "Landskouter", "Langdorp", "Langemark", "Lanklaar", "Lapscheure", "Lauw", "Lauwe", "Lebbeke", "Lede", "Ledeberg", "Ledegem", "Leefdaal", "Leerbeek", "Leest", "Leeuwergem", "Leffinge", "Leisele", "Leke", "Lembeek", "Lembeke", "Lemberge", "Lendelede", "Leopoldsburg", "Letterhoutem", "Leupegem", "Leut", "Leuven", "Lichtaart", "Lichtervelde", "Liedekerke", "Lieferinge", "Lier", "Liezele", "Lille", "Linden", "Linkebeek", "Linkhout", "Lint", "Lippelo", "Lissewege", "Lo", "Lochristi", "Loenhout", "Loker", "Lokeren", "Loksbergen", "Lombardsijde", "Lommel", "Londerzeel", "Loonbeek", "Loppem", "Lot", "Lotenhulle", "Lovendegem", "Lovenjoel", "Lubbeek", "Lummen", "Maarke-Kerkem", "Maaseik", "Machelen", "Mal", "Maldegem", "Malderen", "Mannekensvere", "Mariakerke", "Mariekerke", "Marke", "Markegem", "Martenslinde", "Massemen", "Massenhoven", "Mater", "Mazenzele", "Mechelen", "Mechelen-Bovelingen", "Mechelen-aan-de-Maas", "Meensel-Kiezegem", "Meer", "Meerbeek", "Meerbeke", "Meerdonk", "Meerhout", "Meerle", "Meeswijk", "Meetkerke", "Meeuwen", "Meigem", "Meilegem", "Meise", "Melden", "Meldert", "Melkwezer", "Melle", "Melsbroek", "Melsele", "Melsen", "Membruggen", "Mendonk", "Menen", "Merchtem", "Mere", "Merelbeke", "Merendree", "Merkem", "Merksem", "Merksplas", "Mesen", "Mespelare", "Messelbroek", "Mettekoven", "Meulebeke", "Michelbeke", "Middelburg", "Middelkerke", "Mielen-boven-Aalst", "Millen", "Minderhout", "Moelingen", "Moen", "Moerbeke", "Moere", "Moerkerke", "Moerzeke", "Mol", "Molenbeek-Wersbeek", "Molenbeersel", "Molenstede", "Mollem", "Montenaken", "Moorsel", "Moorsele", "Moorslede", "Moortsele", "Mopertingen", "Moregem", "Morkhoven", "Mortsel", "Muizen", "Mullem", "Munkzwalm", "Munsterbilzen", "Munte", "Nazareth", "Nederboelare", "Nederbrakel", "Nederename", "Nederhasselt", "Nederokkerzeel", "Nederzwalm-Hermelgem", "Neerglabbeek", "Neerharen", "Neerhespen", "Neerijse", "Neerlanden", "Neerlinter", "Neeroeteren", "Neerpelt", "Neerrepen", "Neervelp", "Neerwinden", "Neigem", "Nerem", "Nevele", "Niel", "Niel-bij-As", "Niel-bij-Sint-Truiden", "Nieuwenhove", "Nieuwenrode", "Nieuwerkerken", "Nieuwkapelle", "Nieuwkerke", "Nieuwkerken-Waas", "Nieuwmunster", "Nieuwpoort", "Nieuwrode", "Nijlen", "Ninove", "Nokere", "Noorderwijk", "Noordschote", "Nossegem", "Nukerke", "Oedelem", "Oekene", "Oelegem", "Oeren", "Oeselgem", "Oetingen", "Oevel", "Okegem", "Olen", "Olmen", "Olsene", "Onkerzele", "Onze-Lieve-Vrouw-Lombeek", "Onze-Lieve-Vrouw-Waver", "Ooigem", "Ooike", "Oombergen", "Oorbeek", "Oordegem", "Oostakker", "Oostduinkerke", "Oosteeklo", "Oostende", "Oosterzele", "Oostham", "Oostkamp", "Oostkerke", "Oostmalle", "Oostnieuwkerke", "Oostrozebeke", "Oostvleteren", "Oostwinkel", "Opbrakel", "Opdorp", "Opglabbeek", "Opgrimbie", "Ophasselt", "Opheers", "Ophoven", "Opitter", "Oplinter", "Opoeteren", "Oppuurs", "Opvelp", "Opwijk", "Ordingen", "Orsmaal-Gussenhoven", "Otegem", "Ottenburg", "Ottergem", "Oud-Heverlee", "Oud-Turnhout", "Oudegem", "Oudekapelle", "Oudenaarde", "Oudenaken", "Oudenburg", "Outer", "Outgaarden", "Outrijve", "Ouwegem", "Overboelare", "Overhespen", "Overijse", "Overmere", "Overpelt", "Overrepen", "Overwinden", "Paal", "Pamel", "Parike", "Passendale", "Paulatem", "Peer", "Pellenberg", "Pepingen", "Perk", "Pervijze", "Petegem-aan-de-Leie", "Petegem-aan-de-Schelde", "Peutie", "Piringen", "Pittem", "Poederlee", "Poeke", "Poelkapelle", "Poesele", "Pollare", "Pollinkhove", "Poperinge", "Poppel", "Proven", "Pulderbos", "Pulle", "Putte", "Puurs", "Ramsdonk", "Ramsel", "Ramskapelle", "Ransberg", "Ranst", "Ravels", "Reet", "Rekem", "Rekkem", "Relegem", "Remersdaal", "Reninge", "Reningelst", "Reppel", "Ressegem", "Retie", "Riemst", "Rijkel", "Rijkevorsel", "Rijkhoven", "Rijmenam", "Riksingen", "Rillaar", "Roborst", "Roesbrugge-Haringe", "Roeselare", "Roksem", "Rollegem", "Rollegem-Kapelle", "Romershoven", "Ronse", "Ronsele", "Roosbeek", "Rosmeer", "Rotem", "Rotselaar", "Rozebeke", "Ruddervoorde", "Ruien", "Ruisbroek", "Ruiselede", "Rukkelingen-Loon", "Rumbeke", "Rummen", "Rumsdorp", "Rumst", "Runkelen", "Rupelmonde", "Rutten", "Schaffen", "Schalkhoven", "Schelderode", "Scheldewindeke", "Schelle", "Schellebelle", "Schendelbeke", "Schepdaal", "Scherpenheuvel", "Schilde", "Schoonaarde", "Schore", "Schorisse", "Schoten", "Schriek", "Schuiferskapelle", "Schulen", "Semmerzake", "Serskamp", "Sijsele", "Sinaai", "Sint-Agatha-Rode", "Sint-Amands", "Sint-Amandsberg", "Sint-Andries", "Sint-Antelinks", "Sint-Baafs-Vijve", "Sint-Blasius-Boekel", "Sint-Denijs", "Sint-Denijs-Boekel", "Sint-Denijs-Westrem", "Sint-Eloois-Vijve", "Sint-Eloois-Winkel", "Sint-Genesius-Rode", "Sint-Gillis-Waas", "Sint-Gillis-bij-Dendermonde", "Sint-Goriks-Oudenhove", "Sint-Huibrechts-Hern", "Sint-Huibrechts-Lille", "Sint-Jacobskapelle", "Sint-Jan", "Sint-Jan-in-Eremo", "Sint-Job-in-'t-Goor", "Sint-Joris", "Sint-Joris-Weert", "Sint-Joris-Winge", "Sint-Katelijne-Waver", "Sint-Katherina-Lombeek", "Sint-Kornelis-Horebeke", "Sint-Kruis", "Sint-Kruis-Winkel", "Sint-Kwintens-Lennik", "Sint-Lambrechts-Herk", "Sint-Laureins", "Sint-Laureins-Berchem", "Sint-Lenaarts", "Sint-Lievens-Esse", "Sint-Lievens-Houtem", "Sint-Margriete", "Sint-Margriete-Houtem", "Sint-Maria-Horebeke", "Sint-Maria-Latem", "Sint-Maria-Lierde", "Sint-Maria-Oudenhove", "Sint-Martens-Bodegem", "Sint-Martens-Latem", "Sint-Martens-Leerne", "Sint-Martens-Lennik", "Sint-Martens-Lierde", "Sint-Martens-Voeren", "Sint-Michiels", "Sint-Niklaas", "Sint-Pauwels", "Sint-Pieters-Kapelle", "Sint-Pieters-Leeuw", "Sint-Pieters-Rode", "Sint-Pieters-Voeren", "Sint-Rijkers", "Sint-Stevens-Woluwe", "Sint-Truiden", "Sint-Ulriks-Kapelle", "Sleidinge", "Slijpe", "Sluizen", "Smeerebbe-Vloerzegem", "Smetlede", "Snaaskerke", "Snellegem", "Spalbeek", "Spiere", "Stabroek", "Staden", "Stalhille", "Stavele", "Steendorp", "Steenhuffel", "Steenhuize-Wijnhuize", "Steenkerke", "Steenokkerzeel", "Stekene", "Stene", "Sterrebeek", "Stevoort", "Stokkem", "Stokrooie", "Strijpen", "Strijtem", "Strombeek-Bever", "Stuivekenskerke", "Temse", "Teralfene", "Terhagen", "Ternat", "Tervuren", "Tessenderlo", "Testelt", "Teuven", "Tiegem", "Tielen", "Tielrode", "Tielt", "Tienen", "Tildonk", "Tisselt", "Tollembeek", "Tongeren", "Tongerlo", "Torhout", "Tremelo", "Turnhout", "Uikhoven", "Uitbergen", "Uitkerke", "Ulbeek", "Ursel", "Vaalbeek", "Val-Meer", "Varendonk", "Varsenare", "Vechmaal", "Veerle", "Veldegem", "Veldwezelt", "Velm", "Veltem-Beisem", "Velzeke-Ruddershove", "Verrebroek", "Vertrijk", "Veulen", "Veurne", "Viane", "Vichte", "Viersel", "Vilvoorde", "Vinderhoute", "Vinkem", "Vinkt", "Vissenaken", "Vladslo", "Vlamertinge", "Vlekkem", "Vlezenbeek", "Vliermaal", "Vliermaalroot", "Vlierzele", "Vlijtingen", "Vlimmeren", "Vlissegem", "Volkegem", "Vollezele", "Voorde", "Voormezele", "Voort", "Vorselaar", "Vorsen", "Vorst", "Vosselaar", "Vosselare", "Vossem", "Vrasene", "Vremde", "Vreren", "Vroenhoven", "Vucht", "Vurste", "Waanrode", "Waarbeke", "Waardamme", "Waarloos", "Waarmaarde", "Waarschoot", "Waasmont", "Waasmunster", "Wachtebeke", "Wakken", "Walem", "Walsbets", "Walshoutem", "Waltwilder", "Wambeek", "Wange", "Wannegem-Lede", "Wanzele", "Waregem", "Waterland-Oudeman", "Watervliet", "Watou", "Webbekom", "Wechelderzande", "Weelde", "Weerde", "Weert", "Welden", "Welle", "Wellen", "Wemmel", "Wenduine", "Werchter", "Werken", "Werm", "Wervik", "Wespelaar", "Westende", "Westerlo", "Westkapelle", "Westkerke", "Westmalle", "Westmeerbeek", "Westouter", "Westrem", "Westrozebeke", "Westvleteren", "Wetteren", "Wevelgem", "Wezemaal", "Wezembeek-Oppem", "Wezeren", "Wichelen", "Widooie", "Wiekevorst", "Wielsbeke", "Wieze", "Wijchmaal", "Wijer", "Wijgmaal", "Wijnegem", "Wijshagen", "Wijtschate", "Wilderen", "Willebringen", "Willebroek", "Wilrijk", "Wilsele", "Wilskerke", "Wimmertingen", "Wingene", "Winksele", "Wintershoven", "Woesten", "Wolvertem", "Wommelgem", "Wommersom", "Wondelgem", "Wontergem", "Wortegem", "Wortel", "Woubrechtegem", "Woumen", "Wulpen", "Wulvergem", "Wulveringem", "Wuustwezel", "Zaffelare", "Zandbergen", "Zande", "Zandhoven", "Zandvoorde", "Zarlardinge", "Zarren", "Zaventem", "Zedelgem", "Zegelsem", "Zele", "Zelem", "Zellik", "Zelzate", "Zemst", "Zepperen", "Zerkegem", "Zevekote", "Zeveneken", "Zeveren", "Zevergem", "Zichem", "Zichen-Zussen-Bolder", "Zillebeke", "Zingem", "Zoerle-Parwijs", "Zoersel", "Zolder", "Zomergem", "Zonhoven", "Zonnebeke", "Zonnegem", "Zottegem", "Zoutenaaie", "Zoutleeuw", "Zuidschote", "Zuienkerke", "Zulte", "Zulzeke", "Zutendaal", "Zwevegem", "Zwevezele", "Zwijnaarde", "Zwijndrecht"];
var o14 = ["gem", "tem", "vijve", "zele"];
var a14 = ["Belgi\xEB"];
var i14 = ["####"];
var l14 = ["1e verdieping", "2e verdieping", "3e verdieping"];
var t14 = ["West-Vlaanderen", "Oost-Vlaanderen", "Vlaams-Brabant", "Antwerpen", "Limburg", "Brussel"];
var s14 = ["WVL", "OVL", "VBR", "ANT", "LIM", "BRU"];
var m14 = ["{{name.first_name}}{{address.street_suffix}}", "{{name.last_name}}{{address.street_suffix}}"];
var k11 = { normal: "{{address.street}} {{address.buildingNumber}}", full: "{{address.street}} {{address.buildingNumber}} {{address.secondaryAddress}}" };
var d14 = ["straat", "laan", "weg", "dreef", "plein", "park"];
var K10 = { building_number: e14, city: r14, city_prefix: n14, city_suffix: o14, default_country: a14, postcode: i14, secondary_address: l14, state: t14, state_abbr: s14, street: m14, street_address: k11, street_suffix: d14 };
var u14 = K10;
var g13 = ["NV", "BVBA", "CVBA", "VZW"];
var O7 = { suffix: g13 };
var p14 = O7;
var b13 = ["be", "brussels", "vlaanderen", "com", "net", "org"];
var h14 = ["gmail.com", "yahoo.com", "hotmail.com", "skynet.be"];
var V8 = { domain_suffix: b13, free_email: h14 };
var v9 = V8;
var B10 = ["Lucas", "Liam", "Louis", "Noah", "Lars", "Arthur", "Mathis", "Kobe", "Wout", "Milan", "Alexander", "Daan", "Adam", "Vince", "Jules", "Victor", "Finn", "Stan", "Leon", "Seppe", "Senne", "Thomas", "Mats", "Robbe", "Matteo", "Ferre", "Nathan", "Warre", "Jasper", "Vic", "Elias", "Tuur", "Lowie", "Mauro", "Maxim", "Ruben", "Rune", "Mohamed", "Simon", "Rayan", "Lukas", "Lander", "Xander", "Emiel", "Siebe", "Jonas", "Sam", "Luca", "Arne", "Cas", "Felix", "Jack", "Mathias", "Jayden", "Quinten", "Tibo", "Lewis", "Sem", "Maxime", "Viktor", "Emile", "Sander", "Aaron", "Oscar", "Bas", "Niels", "Jef", "Nand", "Lou", "Tristan", "Gust", "David", "Brent", "Jelle", "Lenn", "Miel", "Wannes", "Gilles", "Jarne", "Alex", "Imran", "Lennert", "Milo", "Jens", "Matthias", "Dries", "Axel", "Juul", "Hamza", "Ilias", "Thibo", "Nicolas", "Bent", "Jesse", "Bram", "Maurice", "Ilyas", "Gabriel", "Robin", "Kasper", "Emma", "Louise", "Marie", "Elise", "Noor", "Ella", "Julie", "Lotte", "Lore", "Fien", "Lena", "Mila", "Olivia", "Amber", "Anna", "Elena", "Hanne", "Laura", "Charlotte", "Lina", "Nina", "Fleur", "Lisa", "Nora", "Juliette", "Luna", "Amelie", "Kato", "Sara", "Febe", "Axelle", "Janne", "Eline", "Helena", "Noa", "Camille", "Roos", "Lily", "Jade", "Nore", "Jana", "Manon", "Sarah", "Liv", "Am\xE9lie", "Lara", "Mona", "Alice", "Tess", "Kaat", "Femke", "Aya", "Eva", "Lien", "Bo", "Zoe", "Oona", "Sofia", "Leonie", "Linde", "Jolien", "Fran", "Pauline", "Laure", "Merel", "Marthe", "Yana", "Ren\xE9e", "Paulien", "Margot", "Yasmine", "Ines", "Elisa", "Emily", "Maya", "Floor", "Amy", "Lize", "Amina", "Lucie", "Julia", "Lise", "Hailey", "Hannah", "Alicia", "Norah", "Margaux", "Lieze", "Sien", "Zo\xEB", "Inaya", "Aline", "Amira", "Victoria", "Flore", "Lana", "Sterre", "Maud", "Chloe"];
var M10 = ["Claes", "Claeys", "Declerck", "Declercq", "Decock", "Decoster", "Desmet", "Devos", "Dewilde", "Gielen", "Goossens", "Hermans", "Jacobs", "Janssen", "Janssens", "Lemmens", "Maes", "Martens", "Mertens", "Michiels", "Peeters", "Smet", "Smets", "Thijs", "Vandamme", "Vandenberghe", "Vandenbroeck", "Vandevelde", "Verhaeghe", "Verstraete", "Willems", "Wouters"];
var S11 = ["{{name.prefix}} {{name.first_name}} {{name.last_name}}", "{{name.first_name}} {{name.last_name}} {{name.suffix}}", "{{name.first_name}} {{name.last_name}}"];
var L10 = ["Dr.", "Ir.", "Ing.", "Prof."];
var f14 = ["MBA", "Phd."];
var D13 = { first_name: B10, last_name: M10, name: S11, prefix: L10, suffix: f14 };
var c14 = D13;
var W6 = ["###/######", "###/## ## ##", "### ## ## ##", "###/### ###", "##########", "04##/### ###", "04## ## ## ##", "00324 ## ## ##", "+324 ## ## ## ##"];
var z10 = { formats: W6 };
var H10 = z10;
var A11 = { title: "Dutch (Belgium)", address: u14, company: p14, internet: v9, name: c14, phone_number: H10 };
var ze = A11;

// ../../node_modules/@faker-js/faker/dist/esm/chunk-ZJOZA6GK.mjs
init_esm_shims();
var e15 = ["###", "##", "##a", "##b", "##c", "#/#"];
var o15 = ["{{address.city_name}}"];
var r15 = ["Aleksandr\xF3w Kujawski", "Aleksandr\xF3w \u0141\xF3dzki", "Alwernia", "Andrych\xF3w", "Annopol", "August\xF3w", "Babimost", "Babor\xF3w", "Baran\xF3w Sandomierski", "Barcin", "Barczewo", "Bardo", "Barlinek", "Bartoszyce", "Barwice", "Be\u0142chat\xF3w", "Be\u0142\u017Cyce", "B\u0119dzin", "Bia\u0142a", "Bia\u0142a Piska", "Bia\u0142a Podlaska", "Bia\u0142a Rawska", "Bia\u0142obrzegi", "Bia\u0142ogard", "Bia\u0142y B\xF3r", "Bia\u0142ystok", "Biecz", "Bielawa", "Bielsk Podlaski", "Bielsko-Bia\u0142a", "Bieru\u0144", "Bierut\xF3w", "Bie\u017Cu\u0144", "Bi\u0142goraj", "Biskupiec", "Bisztynek", "Blachownia", "B\u0142aszki", "B\u0142a\u017Cowa", "B\u0142onie", "Bobolice", "Bobowa", "Bochnia", "Bodzentyn", "Bogatynia", "Boguchwa\u0142a", "Bogusz\xF3w-Gorce", "Bojanowo", "Boles\u0142awiec", "Bolk\xF3w", "Borek Wielkopolski", "Borne Sulinowo", "Braniewo", "Bra\u0144sk", "Brodnica", "Brok", "Brusy", "Brwin\xF3w", "Brzeg", "Brzeg Dolny", "Brzesko", "Brzeszcze", "Brze\u015B\u0107 Kujawski", "Brzeziny", "Brzostek", "Brzoz\xF3w", "Buk", "Bukowno", "Busko-Zdr\xF3j", "Bychawa", "Byczyna", "Bydgoszcz", "Bystrzyca K\u0142odzka", "Bytom", "Bytom Odrza\u0144ski", "Byt\xF3w", "Cedynia", "Che\u0142m", "Che\u0142mek", "Che\u0142mno", "Che\u0142m\u017Ca", "Ch\u0119ciny", "Chmielnik", "Chocian\xF3w", "Chociwel", "Chodecz", "Chodzie\u017C", "Chojna", "Chojnice", "Chojn\xF3w", "Choroszcz", "Chorzele", "Chorz\xF3w", "Choszczno", "Chrzan\xF3w", "Ciechanowiec", "Ciechan\xF3w", "Ciechocinek", "Cieszan\xF3w", "Cieszyn", "Ci\u0119\u017Ckowice", "Cybinka", "Czaplinek", "Czarna Bia\u0142ostocka", "Czarna Woda", "Czarne", "Czarnk\xF3w", "Czch\xF3w", "Czechowice-Dziedzice", "Czelad\u017A", "Czempi\u0144", "Czerniejewo", "Czersk", "Czerwie\u0144sk", "Czerwionka-Leszczyny", "Cz\u0119stochowa", "Cz\u0142opa", "Cz\u0142uch\xF3w", "Czy\u017Cew", "\u0106miel\xF3w", "Daleszyce", "Dar\u0142owo", "D\u0105bie", "D\u0105browa Bia\u0142ostocka", "D\u0105browa G\xF3rnicza", "D\u0105browa Tarnowska", "Debrzno", "D\u0119bica", "D\u0119blin", "D\u0119bno", "Dobczyce", "Dobiegniew", "Dobra", "Dobre Miasto", "Dobrodzie\u0144", "Dobrzany", "Dobrzy\u0144 nad Wis\u0142\u0105", "Dolsk", "Drawno", "Drawsko Pomorskie", "Drezdenko", "Drobin", "Drohiczyn", "Drzewica", "Dukla", "Duszniki-Zdr\xF3j", "Dyn\xF3w", "Dzia\u0142dowo", "Dzia\u0142oszyce", "Dzia\u0142oszyn", "Dzierzgo\u0144", "Dzier\u017Coni\xF3w", "Dziwn\xF3w", "Elbl\u0105g", "E\u0142k", "Frampol", "Frombork", "Garwolin", "G\u0105bin", "Gda\u0144sk", "Gdynia", "Gi\u017Cycko", "Glinojeck", "Gliwice", "G\u0142og\xF3w", "G\u0142og\xF3w Ma\u0142opolski", "G\u0142og\xF3wek", "G\u0142owno", "G\u0142ubczyce", "G\u0142ucho\u0142azy", "G\u0142uszyca", "Gniew", "Gniewkowo", "Gniezno", "Gogolin", "Golczewo", "Goleni\xF3w", "Golina", "Golub-Dobrzy\u0144", "Go\u0142a\u0144cz", "Go\u0142dap", "Goni\u0105dz", "Gorlice", "Gorz\xF3w \u015Al\u0105ski", "Gorz\xF3w Wielkopolski", "Gostynin", "Gosty\u0144", "Go\u015Bcino", "Gozdnica", "G\xF3ra", "G\xF3ra Kalwaria", "G\xF3rowo I\u0142aweckie", "G\xF3rzno", "Grab\xF3w nad Prosn\u0105", "Grajewo", "Grodk\xF3w", "Grodzisk Mazowiecki", "Grodzisk Wielkopolski", "Gr\xF3jec", "Grudzi\u0105dz", "Gryb\xF3w", "Gryfice", "Gryfino", "Gryf\xF3w \u015Al\u0105ski", "Gubin", "Hajn\xF3wka", "Halin\xF3w", "Hel", "Hrubiesz\xF3w", "I\u0142awa", "I\u0142owa", "I\u0142\u017Ca", "Imielin", "Inowroc\u0142aw", "I\u0144sko", "Iwonicz-Zdr\xF3j", "Izbica Kujawska", "Jab\u0142onowo Pomorskie", "Janikowo", "Janowiec Wielkopolski", "Jan\xF3w Lubelski", "Jarocin", "Jaros\u0142aw", "Jasie\u0144", "Jas\u0142o", "Jastarnia", "Jastrowie", "Jastrz\u0119bie-Zdr\xF3j", "Jawor", "Jaworzno", "Jaworzyna \u015Al\u0105ska", "Jedlicze", "Jedlina-Zdr\xF3j", "Jedwabne", "Jelcz-Laskowice", "Jelenia G\xF3ra", "Jeziorany", "J\u0119drzej\xF3w", "Jordan\xF3w", "J\xF3zef\xF3w", "Jutrosin", "Kalety", "Kalisz", "Kalisz Pomorski", "Kalwaria Zebrzydowska", "Ka\u0142uszyn", "Kamienna G\xF3ra", "Kamie\u0144 Kraje\u0144ski", "Kamie\u0144 Pomorski", "Kamie\u0144sk", "Ka\u0144czuga", "Karczew", "Kargowa", "Karlino", "Karpacz", "Kartuzy", "Katowice", "Kazimierz Dolny", "Kazimierza Wielka", "K\u0105ty Wroc\u0142awskie", "Kcynia", "K\u0119dzierzyn-Ko\u017Ale", "K\u0119pice", "K\u0119pno", "K\u0119trzyn", "K\u0119ty", "Kielce", "Kietrz", "Kisielice", "Kleczew", "Kleszczele", "Kluczbork", "K\u0142ecko", "K\u0142obuck", "K\u0142odawa", "K\u0142odzko", "Knur\xF3w", "Knyszyn", "Kobylin", "Koby\u0142ka", "Kock", "Kolbuszowa", "Kolno", "Kolonowskie", "Koluszki", "Ko\u0142aczyce", "Ko\u0142o", "Ko\u0142obrzeg", "Koniecpol", "Konin", "Konstancin-Jeziorna", "Konstantyn\xF3w \u0141\xF3dzki", "Ko\u0144skie", "Koprzywnica", "Korfant\xF3w", "Koronowo", "Korsze", "Kos\xF3w Lacki", "Kostrzyn", "Kostrzyn nad Odr\u0105", "Koszalin", "Ko\u015Bcian", "Ko\u015Bcierzyna", "Kowal", "Kowalewo Pomorskie", "Kowary", "Kozieg\u0142owy", "Kozienice", "Ko\u017Amin Wielkopolski", "Ko\u017Cuch\xF3w", "K\xF3rnik", "Krajenka", "Krak\xF3w", "Krapkowice", "Krasnobr\xF3d", "Krasnystaw", "Kra\u015Bnik", "Krobia", "Krosno", "Krosno Odrza\u0144skie", "Kro\u015Bniewice", "Krotoszyn", "Kruszwica", "Krynica Morska", "Krynica-Zdr\xF3j", "Krynki", "Krzanowice", "Krzepice", "Krzeszowice", "Krzywi\u0144", "Krzy\u017C Wielkopolski", "Ksi\u0105\u017C Wielkopolski", "Kudowa-Zdr\xF3j", "Kun\xF3w", "Kutno", "Ku\u017Ania Raciborska", "Kwidzyn", "L\u0105dek-Zdr\xF3j", "Legionowo", "Legnica", "Lesko", "Leszno", "Le\u015Bna", "Le\u015Bnica", "Lewin Brzeski", "Le\u017Cajsk", "L\u0119bork", "L\u0119dziny", "Libi\u0105\u017C", "Lidzbark", "Lidzbark Warmi\u0144ski", "Limanowa", "Lipiany", "Lipno", "Lipsk", "Lipsko", "Lubacz\xF3w", "Luba\u0144", "Lubart\xF3w", "Lubawa", "Lubawka", "Lubie\u0144 Kujawski", "Lubin", "Lublin", "Lubliniec", "Lubniewice", "Lubomierz", "Lubo\u0144", "Lubraniec", "Lubsko", "Lw\xF3wek", "Lw\xF3wek \u015Al\u0105ski", "\u0141abiszyn", "\u0141a\u0144cut", "\u0141apy", "\u0141asin", "\u0141ask", "\u0141askarzew", "\u0141aszcz\xF3w", "\u0141aziska G\xF3rne", "\u0141azy", "\u0141eba", "\u0141\u0119czna", "\u0141\u0119czyca", "\u0141\u0119knica", "\u0141obez", "\u0141ob\u017Cenica", "\u0141och\xF3w", "\u0141omianki", "\u0141om\u017Ca", "\u0141osice", "\u0141owicz", "\u0141\xF3d\u017A", "\u0141uk\xF3w", "Mak\xF3w Mazowiecki", "Mak\xF3w Podhala\u0144ski", "Malbork", "Ma\u0142ogoszcz", "Ma\u0142omice", "Margonin", "Marki", "Maszewo", "Miasteczko \u015Al\u0105skie", "Miastko", "Micha\u0142owo", "Miech\xF3w", "Miejska G\xF3rka", "Mielec", "Mierosz\xF3w", "Mieszkowice", "Mi\u0119dzyb\xF3rz", "Mi\u0119dzych\xF3d", "Mi\u0119dzylesie", "Mi\u0119dzyrzec Podlaski", "Mi\u0119dzyrzecz", "Mi\u0119dzyzdroje", "Miko\u0142ajki", "Miko\u0142\xF3w", "Mikstat", "Milan\xF3wek", "Milicz", "Mi\u0142akowo", "Mi\u0142om\u0142yn", "Mi\u0142os\u0142aw", "Mi\u0144sk Mazowiecki", "Miros\u0142awiec", "Mirsk", "M\u0142awa", "M\u0142ynary", "Mogielnica", "Mogilno", "Mo\u0144ki", "Mor\u0105g", "Mordy", "Mory\u0144", "Mosina", "Mr\u0105gowo", "Mrocza", "Mszana Dolna", "Mszczon\xF3w", "Murowana Go\u015Blina", "Muszyna", "Mys\u0142owice", "Myszk\xF3w", "Myszyniec", "My\u015Blenice", "My\u015Blib\xF3rz", "Nak\u0142o nad Noteci\u0105", "Na\u0142\u0119cz\xF3w", "Namys\u0142\xF3w", "Narol", "Nasielsk", "Nekla", "Nidzica", "Niemcza", "Niemodlin", "Niepo\u0142omice", "Nieszawa", "Nisko", "Nowa D\u0119ba", "Nowa Ruda", "Nowa Sarzyna", "Nowa S\xF3l", "Nowe", "Nowe Brzesko", "Nowe Miasteczko", "Nowe Miasto Lubawskie", "Nowe Miasto nad Pilic\u0105", "Nowe Skalmierzyce", "Nowe Warpno", "Nowogard", "Nowogrodziec", "Nowogr\xF3d", "Nowogr\xF3d Bobrza\u0144ski", "Nowy Dw\xF3r Gda\u0144ski", "Nowy Dw\xF3r Mazowiecki", "Nowy S\u0105cz", "Nowy Staw", "Nowy Targ", "Nowy Tomy\u015Bl", "Nowy Wi\u015Bnicz", "Nysa", "Oborniki", "Oborniki \u015Al\u0105skie", "Obrzycko", "Odolan\xF3w", "Ogrodzieniec", "Okonek", "Olecko", "Olesno", "Oleszyce", "Ole\u015Bnica", "Olkusz", "Olsztyn", "Olsztynek", "Olszyna", "O\u0142awa", "Opalenica", "Opat\xF3w", "Opoczno", "Opole", "Opole Lubelskie", "Orneta", "Orzesze", "Orzysz", "Osieczna", "Osiek", "Ostro\u0142\u0119ka", "Ostror\xF3g", "Ostrowiec \u015Awi\u0119tokrzyski", "Ostr\xF3da", "Ostr\xF3w Lubelski", "Ostr\xF3w Mazowiecka", "Ostr\xF3w Wielkopolski", "Ostrzesz\xF3w", "O\u015Bno Lubuskie", "O\u015Bwi\u0119cim", "Otmuch\xF3w", "Otwock", "Ozimek", "Ozork\xF3w", "O\u017Car\xF3w", "O\u017Car\xF3w Mazowiecki", "Pabianice", "Paczk\xF3w", "Paj\u0119czno", "Pako\u015B\u0107", "Parczew", "Pas\u0142\u0119k", "Pasym", "Pelplin", "Pe\u0142czyce", "Piaseczno", "Piaski", "Piast\xF3w", "Piechowice", "Piekary \u015Al\u0105skie", "Pieni\u0119\u017Cno", "Pie\u0144sk", "Pieszyce", "Pilawa", "Pilica", "Pilzno", "Pi\u0142a", "Pi\u0142awa G\xF3rna", "Pi\u0144cz\xF3w", "Pionki", "Piotrk\xF3w Kujawski", "Piotrk\xF3w Trybunalski", "Pisz", "Piwniczna-Zdr\xF3j", "Pleszew", "P\u0142ock", "P\u0142o\u0144sk", "P\u0142oty", "Pniewy", "Pobiedziska", "Podd\u0119bice", "Podkowa Le\u015Bna", "Pogorzela", "Polanica-Zdr\xF3j", "Polan\xF3w", "Police", "Polkowice", "Po\u0142aniec", "Po\u0142czyn-Zdr\xF3j", "Poniatowa", "Poniec", "Por\u0119ba", "Pozna\u0144", "Prabuty", "Praszka", "Prochowice", "Proszowice", "Pr\xF3szk\xF3w", "Pruchnik", "Prudnik", "Prusice", "Pruszcz Gda\u0144ski", "Pruszk\xF3w", "Przasnysz", "Przec\u0142aw", "Przedb\xF3rz", "Przedecz", "Przemk\xF3w", "Przemy\u015Bl", "Przeworsk", "Przysucha", "Pszczyna", "Psz\xF3w", "Puck", "Pu\u0142awy", "Pu\u0142tusk", "Puszczykowo", "Pyrzyce", "Pyskowice", "Pyzdry", "Rabka-Zdr\xF3j", "Raci\u0105\u017C", "Racib\xF3rz", "Radk\xF3w", "Radlin", "Rad\u0142\xF3w", "Radom", "Radomsko", "Radomy\u015Bl Wielki", "Radymno", "Radziej\xF3w", "Radzionk\xF3w", "Radzymin", "Radzy\u0144 Che\u0142mi\u0144ski", "Radzy\u0144 Podlaski", "Rajgr\xF3d", "Rakoniewice", "Raszk\xF3w", "Rawa Mazowiecka", "Rawicz", "Recz", "Reda", "Rejowiec Fabryczny", "Resko", "Reszel", "Rogo\u017Ano", "Ropczyce", "R\xF3\u017Can", "Ruciane-Nida", "Ruda \u015Al\u0105ska", "Rudnik nad Sanem", "Rumia", "Rybnik", "Rychwa\u0142", "Rydu\u0142towy", "Rydzyna", "Ryglice", "Ryki", "Ryman\xF3w", "Ryn", "Rypin", "Rzepin", "Rzesz\xF3w", "Rzg\xF3w", "Sandomierz", "Sanok", "Sejny", "Serock", "S\u0119dzisz\xF3w", "S\u0119dzisz\xF3w Ma\u0142opolski", "S\u0119popol", "S\u0119p\xF3lno Kraje\u0144skie", "Sian\xF3w", "Siechnice", "Siedlce", "Siemianowice \u015Al\u0105skie", "Siemiatycze", "Sieniawa", "Sieradz", "Sierak\xF3w", "Sierpc", "Siewierz", "Skalbmierz", "Ska\u0142a", "Skarszewy", "Skaryszew", "Skar\u017Cysko-Kamienna", "Skawina", "Sk\u0119pe", "Skierniewice", "Skocz\xF3w", "Skoki", "Sk\xF3rcz", "Skwierzyna", "S\u0142awa", "S\u0142awk\xF3w", "S\u0142awno", "S\u0142omniki", "S\u0142ubice", "S\u0142upca", "S\u0142upsk", "Sob\xF3tka", "Sochaczew", "Soko\u0142\xF3w Ma\u0142opolski", "Soko\u0142\xF3w Podlaski", "Sok\xF3\u0142ka", "Solec Kujawski", "Sompolno", "Sopot", "Sosnowiec", "So\u015Bnicowice", "Stalowa Wola", "Starachowice", "Stargard Szczeci\u0144ski", "Starogard Gda\u0144ski", "Stary S\u0105cz", "Stasz\xF3w", "Stawiski", "Stawiszyn", "St\u0105pork\xF3w", "St\u0119szew", "Stoczek \u0141ukowski", "Stronie \u015Al\u0105skie", "Strumie\u0144", "Stryk\xF3w", "Strzegom", "Strzelce Kraje\u0144skie", "Strzelce Opolskie", "Strzelin", "Strzelno", "Strzy\u017C\xF3w", "Sucha Beskidzka", "Sucha\u0144", "Suchedni\xF3w", "Suchowola", "Sulech\xF3w", "Sulej\xF3w", "Sulej\xF3wek", "Sul\u0119cin", "Sulmierzyce", "Su\u0142kowice", "Supra\u015Bl", "Sura\u017C", "Susz", "Suwa\u0142ki", "Swarz\u0119dz", "Syc\xF3w", "Szadek", "Szamocin", "Szamotu\u0142y", "Szczawnica", "Szczawno-Zdr\xF3j", "Szczebrzeszyn", "Szczecin", "Szczecinek", "Szczekociny", "Szczucin", "Szczuczyn", "Szczyrk", "Szczytna", "Szczytno", "Szepietowo", "Szklarska Por\u0119ba", "Szlichtyngowa", "Szprotawa", "Sztum", "Szubin", "Szyd\u0142owiec", "\u015Acinawa", "\u015Alesin", "\u015Amigiel", "\u015Arem", "\u015Aroda \u015Al\u0105ska", "\u015Aroda Wielkopolska", "\u015Awi\u0105tniki G\xF3rne", "\u015Awidnica", "\u015Awidnik", "\u015Awidwin", "\u015Awiebodzice", "\u015Awiebodzin", "\u015Awiecie", "\u015Awierad\xF3w-Zdr\xF3j", "\u015Awierzawa", "\u015Awi\u0119toch\u0142owice", "\u015Awinouj\u015Bcie", "Tarczyn", "Tarnobrzeg", "Tarnogr\xF3d", "Tarnowskie G\xF3ry", "Tarn\xF3w", "Tczew", "Terespol", "T\u0142uszcz", "Tolkmicko", "Tomasz\xF3w Lubelski", "Tomasz\xF3w Mazowiecki", "Toru\u0144", "Torzym", "Toszek", "Trzcianka", "Trzciel", "Trzci\u0144sko-Zdr\xF3j", "Trzebiat\xF3w", "Trzebinia", "Trzebnica", "Trzemeszno", "Tuchola", "Tuch\xF3w", "Tuczno", "Tuliszk\xF3w", "Turek", "Tuszyn", "Twardog\xF3ra", "Tychowo", "Tychy", "Tyczyn", "Tykocin", "Tyszowce", "Ujazd", "Uj\u015Bcie", "Ulan\xF3w", "Uniej\xF3w", "Ustka", "Ustro\u0144", "Ustrzyki Dolne", "Wadowice", "Wa\u0142brzych", "Wa\u0142cz", "Warka", "Warszawa", "Warta", "Wasilk\xF3w", "W\u0105brze\u017Ano", "W\u0105chock", "W\u0105growiec", "W\u0105sosz", "Wejherowo", "W\u0119gliniec", "W\u0119gorzewo", "W\u0119gorzyno", "W\u0119gr\xF3w", "Wi\u0105z\xF3w", "Wiele\u0144", "Wielichowo", "Wieliczka", "Wielu\u0144", "Wierusz\xF3w", "Wi\u0119cbork", "Wilamowice", "Wis\u0142a", "Witkowo", "Witnica", "Wle\u0144", "W\u0142adys\u0142awowo", "W\u0142oc\u0142awek", "W\u0142odawa", "W\u0142oszczowa", "Wodzis\u0142aw \u015Al\u0105ski", "Wojciesz\xF3w", "Wojkowice", "Wojnicz", "Wolb\xF3rz", "Wolbrom", "Wolin", "Wolsztyn", "Wo\u0142czyn", "Wo\u0142omin", "Wo\u0142\xF3w", "Wo\u017Aniki", "Wroc\u0142aw", "Wronki", "Wrze\u015Bnia", "Wschowa", "Wyrzysk", "Wysoka", "Wysokie Mazowieckie", "Wyszk\xF3w", "Wyszogr\xF3d", "Wy\u015Bmierzyce", "Zab\u0142ud\xF3w", "Zabrze", "Zag\xF3r\xF3w", "Zag\xF3rz", "Zakliczyn", "Zakopane", "Zakroczym", "Zalewo", "Zambr\xF3w", "Zamo\u015B\u0107", "Zator", "Zawadzkie", "Zawichost", "Zawid\xF3w", "Zawiercie", "Z\u0105bki", "Z\u0105bkowice \u015Al\u0105skie", "Zb\u0105szynek", "Zb\u0105szy\u0144", "Zduny", "Zdu\u0144ska Wola", "Zdzieszowice", "Zel\xF3w", "Zgierz", "Zgorzelec", "Zielona G\xF3ra", "Zielonka", "Zi\u0119bice", "Z\u0142ocieniec", "Z\u0142oczew", "Z\u0142otoryja", "Z\u0142ot\xF3w", "Z\u0142oty Stok", "Zwierzyniec", "Zwole\u0144", "\u017Babno", "\u017Baga\u0144", "\u017Barki", "\u017Bar\xF3w", "\u017Bary", "\u017Belech\xF3w", "\u017Berk\xF3w", "\u017Bmigr\xF3d", "\u017Bnin", "\u017Bory", "\u017Bukowo", "\u017Buromin", "\u017Bychlin", "\u017Byrard\xF3w", "\u017Bywiec"];
var n15 = ["Afganistan", "Albania", "Algieria", "Andora", "Angola", "Antigua i Barbuda", "Arabia Saudyjska", "Argentyna", "Armenia", "Australia", "Austria", "Azerbejd\u017Can", "Bahamy", "Bahrajn", "Bangladesz", "Barbados", "Belgia", "Belize", "Benin", "Bhutan", "Bia\u0142oru\u015B", "Birma", "Boliwia", "Bo\u015Bnia i Hercegowina", "Botswana", "Brazylia", "Brunei", "Bu\u0142garia", "Burkina Faso", "Burundi", "Chile", "Chiny", "Chorwacja", "Cypr", "Czad", "Czarnog\xF3ra", "Czechy", "Dania", "Demokratyczna Republika Konga", "Dominika", "Dominikana", "D\u017Cibuti", "Egipt", "Ekwador", "Erytrea", "Estonia", "Eswatini", "Etiopia", "Fid\u017Ci", "Filipiny", "Finlandia", "Francja", "Gabon", "Gambia", "Ghana", "Grecja", "Grenada", "Gruzja", "Gujana", "Gwatemala", "Gwinea", "Gwinea Bissau", "Gwinea R\xF3wnikowa", "Haiti", "Hiszpania", "Holandia", "Honduras", "Indie", "Indonezja", "Irak", "Iran", "Irlandia", "Islandia", "Izrael", "Jamajka", "Japonia", "Jemen", "Jordania", "Kambod\u017Ca", "Kamerun", "Kanada", "Katar", "Kazachstan", "Kenia", "Kirgistan", "Kiribati", "Kolumbia", "Komory", "Kongo", "Korea Po\u0142udniowa", "Korea P\xF3\u0142nocna", "Kostaryka", "Kuba", "Kuwejt", "Laos", "Lesotho", "Liban", "Liberia", "Libia", "Liechtenstein", "Litwa", "Luksemburg", "\u0141otwa", "Macedonia P\xF3\u0142nocna", "Madagaskar", "Malawi", "Malediwy", "Malezja", "Mali", "Malta", "Maroko", "Mauretania", "Mauritius", "Meksyk", "Mikronezja", "Mo\u0142dawia", "Monako", "Mongolia", "Mozambik", "Namibia", "Nauru", "Nepal", "Niemcy", "Niger", "Nigeria", "Nikaragua", "Norwegia", "Nowa Zelandia", "Oman", "Pakistan", "Palau", "Panama", "Papua-Nowa Gwinea", "Paragwaj", "Peru", "Polska", "Portugalia", "Republika Po\u0142udniowej Afryki", "Republika \u015Arodkowoafryka\u0144ska", "Republika Zielonego Przyl\u0105dka", "Rosja", "Rumunia", "Rwanda", "Saint Kitts i Nevis", "Saint Lucia", "Saint Vincent i Grenadyny", "Salwador", "Samoa", "San Marino", "Senegal", "Serbia", "Seszele", "Sierra Leone", "Singapur", "S\u0142owacja", "S\u0142owenia", "Somalia", "Sri Lanka", "Stany Zjednoczone", "Sudan", "Sudan Po\u0142udniowy", "Surinam", "Syria", "Szwajcaria", "Szwecja", "Tad\u017Cykistan", "Tajlandia", "Tanzania", "Timor Wschodni", "Togo", "Tonga", "Trynidad i Tobago", "Tunezja", "Turcja", "Turkmenistan", "Tuvalu", "Uganda", "Ukraina", "Urugwaj", "Uzbekistan", "Vanuatu", "Watykan", "Wenezuela", "W\u0119gry", "Wielka Brytania", "Wietnam", "W\u0142ochy", "Wybrze\u017Ce Ko\u015Bci S\u0142oniowej", "Wyspy Marshalla", "Wyspy Salomona", "Wyspy \u015Awi\u0119tego Tomasza i Ksi\u0105\u017C\u0119ca", "Zambia", "Zimbabwe", "Zjednoczone Emiraty Arabskie"];
var s15 = ["Polska"];
var t15 = ["p\xF3\u0142noc", "wsch\xF3d", "po\u0142udnie", "zach\xF3d", "p\xF3\u0142nocny wsch\xF3d", "po\u0142udniowy wsch\xF3d", "po\u0142udniowy zach\xF3d", "p\xF3\u0142nocny zach\xF3d"];
var k12 = ["pn.", "wsch.", "pd.", "zach.", "pn. wsch.", "pd. wsch.", "pd. zach.", "pn. zach."];
var c15 = ["##-###"];
var l15 = ["m. ###"];
var m15 = ["dolno\u015Bl\u0105skie", "kujawsko-pomorskie", "lubelskie", "lubuskie", "\u0142\xF3dzkie", "ma\u0142opolskie", "mazowieckie", "opolskie", "podkarpackie", "podlaskie", "pomorskie", "\u015Bl\u0105skie", "\u015Bwi\u0119tokrzyskie", "warmi\u0144sko-mazurskie", "wielkopolskie", "zachodniopomorskie"];
var z11 = ["DS", "KP", "LU", "LB", "LD", "MA", "MZ", "OP", "PK", "PD", "PM", "SL", "SK", "WN", "WP", "ZP"];
var u15 = ["{{address.street_prefix}} {{name.last_name}}"];
var y14 = { normal: "{{address.street}} {{address.buildingNumber}}", full: "{{address.street}} {{address.buildingNumber}} {{address.secondaryAddress}}" };
var w9 = ["al.", "bulw.", "droga", "ogr\xF3d", "os.", "park", "pl.", "rondo", "rynek", "skwer", "szosa", "ul.", "wyb.", "wyspa"];
var ea2 = { building_number: e15, city: o15, city_name: r15, country: n15, default_country: s15, direction: t15, direction_abbr: k12, postcode: c15, secondary_address: l15, state: m15, state_abbr: z11, street: u15, street_address: y14, street_prefix: w9 };
var d15 = ea2;
var b14 = ["Aegidienberger", "Albino", "Alt\xE9r real", "American Paint Horse", "American Saddlebred", "ameryka\u0144ski kuc szetlandzki", "angloarab sardy\u0144ski", "Angloarab Shagya", "Angloarab", "Appaloosa", "Australian Stock Horse", "Austriacki ko\u0144 gor\u0105cokrwisty", "Bali", "bawarski ko\u0144 gor\u0105cokrwisty", "belgijski ko\u0144 gor\u0105cokrwisty", "Brumby", "brytyjski ko\u0144 gor\u0105cokrwisty", "Caballo Chilen", "Camargue", "Campolina", "Canadian cutting horse", "Cavallino della Giara", "ci\u0119\u017Cki sakso\u0144ski ko\u0144 gor\u0105cokrwisty", "Cimarron", "Cleveland Bay", "Clydesdale", "Cob", "Colorado Ranger", "Comtois", "Criollo", "Crioulo", "czechos\u0142owacki ko\u0144 gor\u0105cokrwisty", "czechos\u0142owacki ko\u0144 zimnokrwisty", "D\xF6le Gudbrandsdal", "Einsiedle", "Falabella", "Freiberger", "Furioso", "Gelderl\xE4nder", "Gidran", "g\xF3rski konik bo\u015Bniacki", "Groningery", "Hack", "Hackney", "Haflinger", "Highland", "hispano", "holenderski ko\u0144 gor\u0105cokrwisty", "holenderski ko\u0144 zimnokrwisty", "Hunter", "indyjski ko\u0144 wojskowy", "Irish Draught", "Jaf", "jugos\u0142owia\u0144ski ko\u0144 zimnokrwisty", "Jutland", "karacabey", "Kasztanowy ko\u0144 szwarcwaldzki", "kathiawari", "kleppery esto\u0144skie", "kleppery \u0142otewskie i litewskie", "Knabstrub", "ko\u0144 abisy\u0144ski", "ko\u0144 acha\u0142-teki\u0144ski", "ko\u0144 afga\u0144ski i pakista\u0144ski", "ko\u0144 andaluzyjski", "ko\u0144 arde\u0144ski", "ko\u0144 aztecki", "ko\u0144 bade\u0144sko-wirtemberski", "ko\u0144 belgijski", "ko\u0144 berberyjski", "ko\u0144 breto\u0144ski", "ko\u0144 budionnowski", "Ko\u0144 bulo\u0144ski", "ko\u0144 burgundzki", "ko\u0144 czystej krwi arabskiej", "ko\u0144 Dongolavi", "ko\u0144 do\u0144ski", "ko\u0144 dunajski", "ko\u0144 fi\u0144ski", "ko\u0144 fiordzki", "ko\u0144 fryderyksborski", "ko\u0144 fryzyjski", "ko\u0144 hanowerski", "ko\u0144 heski", "ko\u0144 holszty\u0144ski", "ko\u0144 huculski", "ko\u0144 islandzki", "ko\u0144 jomudzki", "ko\u0144 Jonaguni", "ko\u0144 kabardy\u0144ski", "ko\u0144 kalabryjski", "ko\u0144 karabachski", "ko\u0144 kazachski", "ko\u0144 ki\u0144ski", "ko\u0144 kiwlendzki", "ko\u0144 kladrubski", "ko\u0144 kuzniecki", "ko\u0144 lipica\u0144sk", "ko\u0144 lokajski", "ko\u0144 ma\u0142opolski", "ko\u0144 meklemburski", "ko\u0144 mese\u0144ski", "ko\u0144 norycki (Pinzgauer)", "ko\u0144 nowokirgiski", "ko\u0144 oldenburski", "ko\u0144 peczorski", "ko\u0144 pe\u0142nej krwi angielskiej", "ko\u0144 plewe\u0144ski", "ko\u0144 poleski", "ko\u0144 pozna\u0144ski", "ko\u0144 p\xF3\u0142nocnoszwedzki", "ko\u0144 Przewalskiego", "ko\u0144 sok\xF3lski", "ko\u0144 szlachetny p\xF3\u0142krwi", "ko\u0144 szwajcarski", "ko\u0144 \u015Bl\u0105ski", "ko\u0144 terski", "ko\u0144 toryjski", "ko\u0144 trake\u0144ski", "ko\u0144 turkme\u0144ski", "ko\u0144 ukrai\u0144ski", "ko\u0144 westfalski", "ko\u0144 wielkopolski", "ko\u0144 w\u0142odzimierski", "ko\u0144 woroneski", "ko\u0144 wschodniobu\u0142garski", "ko\u0144 wschodniofryzyjski", "konie kaimanawa", "konik dulme\u0144ski", "konik polski", "konik \u017Cmudzki", "kuc ameryka\u0144ski-Americas", "kuc australijski", "kuc Bardigiano", "kuc Belear\xF3w", "kuc Connemara", "kuc Dales", "kuc Dartmoor", "Kuc Exmoor", "kuc feli\u0144ski", "kuc Fell", "kuc Fulani", "kuc Galiceno", "kuc galla", "kuc Garrano", "kuc Gharbaui", "kuc gotlandzki", "kuc Hackney", "kuc indyjski", "kuc jakucki", "kuc jawajski", "kuc kaspijski", "kuc kenijski", "kuc korsyka\u0144ski", "kuc Landais", "kuc Lewitzer", "kuc Merens", "kuc mongolski", "kuc New Forest", "kuc nigeryjski", "kuc Pindos", "kuc Pottok", "kuc Rocky Mountain", "kuc Sable Island", "kuc sardy\u0144ski (Achetta)", "kuc Skyrian", "kuc Skyros", "kuc somalijski", "kuc Sorraia", "kuc sycylijski", "kuc szetlandzki", "kuc Togo", "kuc tybeta\u0144ski", "kuc Zaniskari", "kuc \u017Cemajtuka", "kurdyjski", "k\u0142usak (i inochodziec) gor\u0105cokrwisty \u2013 Standardbred", "K\u0142usak ameryka\u0144ski", "k\u0142usak or\u0142owsk", "k\u0142usak rosyjsk", "litewski ko\u0144 zimnokrwisty", "Llareno", "Lusitano", "\u0141otewski ko\u0144 gor\u0105cokrwisty", "Mangalarga Marchador", "Mangalarga", "Maremmano", "Missouri Fox Trotter", "Morgan", "Murakozi", "murgese", "Mustang", "niemiecki kuc wierzchowy", "Nonius", "Noriker", "normandzki cob", "Paso Fino", "Paso Peruano", "perski ko\u0144 arabski", "Perszeron", "Pinto", "Poitevin", "polski ko\u0144 zimnokrwisty", "Quarter Horse", "radziecki ci\u0119\u017Cki ko\u0144 poci\u0105gowy", "re\u0144ski ko\u0144 gor\u0105cokrwisty", "re\u0144ski ko\u0144 zimnokrwisty", "Rosyjski ko\u0144 zimnokrwisty", "Salernitano", "Sanfratellano", "Schweike", "Selle fran\xE7ais", "Shiraz (Darashoori)", "Shire", "Siciliano", "Suffolk Punch", "syryjski ko\u0144 arabski", "szlezwicki ko\u0144 zimnokrwisty", "Szwedzki ko\u0144 gor\u0105cokrwisty", "Tarpan", "Tchenerani", "Tennessee Walker", "Tinker \u2013 Gypsy Vanner", "Waler", "Walijski kuc g\xF3rski", "walijski kuc g\xF3rski", "w\u0119gierski ko\u0144 sportowy", "Welsh Cob", "westfalski ko\u0144 zimnokrwisty", "Wiatka", "w\u0142oski ko\u0144 zimnokrwisty", "Zweibr\xFCcker"];
var oa = { horse: b14 };
var p15 = oa;
var g14 = ["50#-###-###", "51#-###-###", "53#-###-###", "57#-###-###", "60#-###-###", "66#-###-###", "69#-###-###", "72#-###-###", "73#-###-###", "78#-###-###", "79#-###-###", "88#-###-###"];
var ra = { formats: g14 };
var S12 = ra;
var h15 = ["be\u017Cowy", "bia\u0142y", "br\u0105zowy", "czarny", "czerwony", "fioletowy", "granatowy", "niebieski", "pomara\u0144czowy", "r\xF3\u017Cowy", "szary", "zielony", "\u017C\xF3\u0142ty"];
var na = { human: h15 };
var K11 = na;
var f15 = ["Adaptive", "Advanced", "Ameliorated", "Assimilated", "Automated", "Balanced", "Business-focused", "Centralized", "Cloned", "Compatible", "Configurable", "Cross-group", "Cross-platform", "Customer-focused", "Customizable", "Decentralized", "De-engineered", "Devolved", "Digitized", "Distributed", "Diverse", "Down-sized", "Enhanced", "Enterprise-wide", "Ergonomic", "Exclusive", "Expanded", "Extended", "Face to face", "Focused", "Front-line", "Fully-configurable", "Function-based", "Fundamental", "Future-proofed", "Grass-roots", "Horizontal", "Implemented", "Innovative", "Integrated", "Intuitive", "Inverse", "Managed", "Mandatory", "Monitored", "Multi-channelled", "Multi-lateral", "Multi-layered", "Multi-tiered", "Networked", "Object-based", "Open-architected", "Open-source", "Operative", "Optimized", "Optional", "Organic", "Organized", "Persevering", "Persistent", "Phased", "Polarised", "Pre-emptive", "Proactive", "Profit-focused", "Profound", "Programmable", "Progressive", "Public-key", "Quality-focused", "Reactive", "Realigned", "Re-contextualized", "Re-engineered", "Reduced", "Reverse-engineered", "Right-sized", "Robust", "Seamless", "Secured", "Self-enabling", "Sharable", "Stand-alone", "Streamlined", "Switchable", "Synchronised", "Synergistic", "Synergized", "Team-oriented", "Total", "Triple-buffered", "Universal", "Up-sized", "Upgradable", "User-centric", "User-friendly", "Versatile", "Virtual", "Visionary", "Vision-oriented"];
var P10 = ["clicks-and-mortar", "value-added", "vertical", "proactive", "robust", "revolutionary", "scalable", "leading-edge", "innovative", "intuitive", "strategic", "e-business", "mission-critical", "sticky", "one-to-one", "24/7", "end-to-end", "global", "B2B", "B2C", "granular", "frictionless", "virtual", "viral", "dynamic", "24/365", "best-of-breed", "killer", "magnetic", "bleeding-edge", "web-enabled", "interactive", "dot-com", "sexy", "back-end", "real-time", "efficient", "front-end", "distributed", "seamless", "extensible", "turn-key", "world-class", "open-source", "cross-platform", "cross-media", "synergistic", "bricks-and-clicks", "out-of-the-box", "enterprise", "integrated", "impactful", "wireless", "transparent", "next-generation", "cutting-edge", "user-centric", "visionary", "customized", "ubiquitous", "plug-and-play", "collaborative", "compelling", "holistic", "rich"];
var N13 = ["synergies", "web-readiness", "paradigms", "markets", "partnerships", "infrastructures", "platforms", "initiatives", "channels", "eyeballs", "communities", "ROI", "solutions", "e-tailers", "e-services", "action-items", "portals", "niches", "technologies", "content", "vortals", "supply-chains", "convergence", "relationships", "architectures", "interfaces", "e-markets", "e-commerce", "systems", "bandwidth", "infomediaries", "models", "mindshare", "deliverables", "users", "schemas", "networks", "applications", "metrics", "e-business", "functionalities", "experiences", "web services", "methodologies"];
var M11 = ["implement", "utilize", "integrate", "streamline", "optimize", "evolve", "transform", "embrace", "enable", "orchestrate", "leverage", "reinvent", "aggregate", "architect", "enhance", "incentivize", "morph", "empower", "envisioneer", "monetize", "harness", "facilitate", "seize", "disintermediate", "synergize", "strategize", "deploy", "brand", "grow", "target", "syndicate", "synthesize", "deliver", "mesh", "incubate", "engage", "maximize", "benchmark", "expedite", "reintermediate", "whiteboard", "visualize", "repurpose", "innovate", "scale", "unleash", "drive", "extend", "engineer", "revolutionize", "generate", "exploit", "transition", "e-enable", "iterate", "cultivate", "matrix", "productize", "redefine", "recontextualize"];
var j8 = ["24 hour", "24/7", "3rd generation", "4th generation", "5th generation", "6th generation", "actuating", "analyzing", "asymmetric", "asynchronous", "attitude-oriented", "background", "bandwidth-monitored", "bi-directional", "bifurcated", "bottom-line", "clear-thinking", "client-driven", "client-server", "coherent", "cohesive", "composite", "context-sensitive", "contextually-based", "content-based", "dedicated", "demand-driven", "didactic", "directional", "discrete", "disintermediate", "dynamic", "eco-centric", "empowering", "encompassing", "even-keeled", "executive", "explicit", "exuding", "fault-tolerant", "foreground", "fresh-thinking", "full-range", "global", "grid-enabled", "heuristic", "high-level", "holistic", "homogeneous", "human-resource", "hybrid", "impactful", "incremental", "intangible", "interactive", "intermediate", "leading edge", "local", "logistical", "maximized", "methodical", "mission-critical", "mobile", "modular", "motivating", "multimedia", "multi-state", "multi-tasking", "national", "needs-based", "neutral", "next generation", "non-volatile", "object-oriented", "optimal", "optimizing", "radical", "real-time", "reciprocal", "regional", "responsive", "scalable", "secondary", "solution-oriented", "stable", "static", "systematic", "systemic", "system-worthy", "tangible", "tertiary", "transitional", "uniform", "upward-trending", "user-facing", "value-added", "web-enabled", "well-modulated", "zero administration", "zero defect", "zero tolerance"];
var B11 = ["{{name.last_name}} {{company.suffix}}", "{{name.last_name}}-{{name.last_name}}", "{{name.last_name}}, {{name.last_name}} and {{name.last_name}}"];
var W7 = ["ability", "access", "adapter", "algorithm", "alliance", "analyzer", "application", "approach", "architecture", "archive", "artificial intelligence", "array", "attitude", "benchmark", "budgetary management", "capability", "capacity", "challenge", "circuit", "collaboration", "complexity", "concept", "conglomeration", "contingency", "core", "customer loyalty", "database", "data-warehouse", "definition", "emulation", "encoding", "encryption", "extranet", "firmware", "flexibility", "focus group", "forecast", "frame", "framework", "function", "functionalities", "Graphic Interface", "groupware", "Graphical User Interface", "hardware", "help-desk", "hierarchy", "hub", "implementation", "info-mediaries", "infrastructure", "initiative", "installation", "instruction set", "interface", "internet solution", "intranet", "knowledge user", "knowledge base", "local area network", "leverage", "matrices", "matrix", "methodology", "middleware", "migration", "model", "moderator", "monitoring", "moratorium", "neural-net", "open architecture", "open system", "orchestration", "paradigm", "parallelism", "policy", "portal", "pricing structure", "process improvement", "product", "productivity", "project", "projection", "protocol", "secured line", "service-desk", "software", "solution", "standardization", "strategy", "structure", "success", "superstructure", "support", "synergy", "system engine", "task-force", "throughput", "time-frame", "toolset", "utilisation", "website", "workforce"];
var C10 = ["S.A.", "z o.o", "Sp. j.", "Sp. p.", "Sp. k.", "SKA", "s.c."];
var sa = { adjective: f15, bs_adjective: P10, bs_noun: N13, bs_verb: M11, descriptor: j8, name_patterns: B11, noun: W7, suffix: C10 };
var D14 = sa;
var G10 = ["agro.pl", "auto.pl", "biz.pl", "com.pl", "edu.pl", "gmina.pl", "gov.pl", "info.pl", "miasta.pl", "net.pl", "nieruchomosci.pl", "org.pl", "pl", "powiat.pl", "priv.pl", "sklep.pl", "szkola.pl", "targi.pl", "turystyka.pl"];
var T9 = ["gmail.com", "yahoo.com", "hotmail.com"];
var ta = { domain_suffix: G10, free_email: T9 };
var R8 = ta;
var L11 = ["alias", "consequatur", "aut", "perferendis", "sit", "voluptatem", "accusantium", "doloremque", "aperiam", "eaque", "ipsa", "quae", "ab", "illo", "inventore", "veritatis", "et", "quasi", "architecto", "beatae", "vitae", "dicta", "sunt", "explicabo", "aspernatur", "odit", "fugit", "sed", "quia", "consequuntur", "magni", "dolores", "eos", "qui", "ratione", "sequi", "nesciunt", "neque", "dolorem", "ipsum", "dolor", "amet", "consectetur", "adipisci", "velit", "non", "numquam", "eius", "modi", "tempora", "incidunt", "ut", "labore", "dolore", "magnam", "aliquam", "quaerat", "enim", "ad", "minima", "veniam", "quis", "nostrum", "exercitationem", "ullam", "corporis", "nemo", "ipsam", "voluptas", "suscipit", "laboriosam", "nisi", "aliquid", "ex", "ea", "commodi", "autem", "vel", "eum", "iure", "reprehenderit", "in", "voluptate", "esse", "quam", "nihil", "molestiae", "iusto", "odio", "dignissimos", "ducimus", "blanditiis", "praesentium", "laudantium", "totam", "rem", "voluptatum", "deleniti", "atque", "corrupti", "quos", "quas", "molestias", "excepturi", "sint", "occaecati", "cupiditate", "provident", "perspiciatis", "unde", "omnis", "iste", "natus", "error", "similique", "culpa", "officia", "deserunt", "mollitia", "animi", "id", "est", "laborum", "dolorum", "fuga", "harum", "quidem", "rerum", "facilis", "expedita", "distinctio", "nam", "libero", "tempore", "cum", "soluta", "nobis", "eligendi", "optio", "cumque", "impedit", "quo", "porro", "quisquam", "minus", "quod", "maxime", "placeat", "facere", "possimus", "assumenda", "repellendus", "temporibus", "quibusdam", "illum", "fugiat", "nulla", "pariatur", "at", "vero", "accusamus", "officiis", "debitis", "necessitatibus", "saepe", "eveniet", "voluptates", "repudiandae", "recusandae", "itaque", "earum", "hic", "tenetur", "a", "sapiente", "delectus", "reiciendis", "voluptatibus", "maiores", "doloribus", "asperiores", "repellat"];
var ka = { words: L11 };
var A12 = ka;
var Z7 = ["Alternatywna", "Blues", "Country", "Disco polo", "Elektroniczna", "Funk", "Hip Hop", "Indie Pop", "Jazz", "Klasyczna", "Latynoska", "Ludowa", "Metal", "Pop", "Rap", "Reggae", "Rock", "Soul"];
var O8 = ["12 Groszy", "24.11.94", "51", "A To Co Mam", "Adriatyk, Ocean Gor\u0105cy", "Ale Jestem", "Aleja Gwiazd", "Arahja", "Autobiografia", "Autystyczny", "Bab\u0119 Zes\u0142a\u0142 B\xF3g", "Ballada 07", "Baranek", "Beksa", "Bema Pami\u0119ci \u017Ba\u0142obny - Rapsod", "Berlin Zachodni", "Bia\u0142a Armia", "Bia\u0142a Flaga", "Bia\u0142y Krzy\u017C", "Biegnij Dalej Sam", "Bieszczadzkie Anio\u0142y", "Bo Jeste\u015B Ty", "Bo Jo Cie Kochom", "Bombonierka", "Boskie Buenos", "Bracka", "Buka", "Butelki Z Benzyn\u0105 I Kamienie", "By\u0142am R\xF3\u017C\u0105", "By\u0142a\u015B Serca Biciem", "B\xF3g", "C'Est La Vie - Pary\u017C Z Poczt\xF3wki", "Celina", "Chcemy By\u0107 Sob\u0105", "Chcia\u0142bym Umrze\u0107 Z Mi\u0142o\u015Bci", "Chcia\u0142em By\u0107", "Chod\u017A, Pomaluj M\xF3j \u015Awiat", "Ch\u0142opcy", "Ciche Dni", "Cichosza", "Ciep\u0142y Wiatr", "Cie\u0144 Wielkiej G\xF3ry", "Ci\u0105gnik", "Co Mi Panie Dasz", "Cud Niepami\u0119ci", "Cykady Na Cykladach", "Czarne S\u0142o\u0144ca", "Czarny Blues O Czwartej Nad Ranem", "Czas Nas Uczy Pogody", "Czas O\u0142owiu", "Czerwony Jak Ceg\u0142a", "Cztery Pokoje", "Cz\u0142owiek Z Li\u015Bciem", "Deszcz", "Deszcz Na Betonie", "Deszcz W Cisnej", "Dla Ciebie", "Dmuchawce, Latawce, Wiatr", "Dni, Kt\xF3rych Nie Znamy", "Do Ani", "Do Ko\u0142yski", "Do Prostego Cz\u0142owieka", "Dom", "Doros\u0142e Dzieci", "Dwa Ognie", "Dwa Serca, Dwa Smutki", "Dzieci", "Dziewczyna Bez Z\u0119ba Na Przedzie", "Dzie\u0144 Dobry, Kocham Ci\u0119", "Dziwny Jest Ten \u015Awiat", "Dzi\u015B P\xF3\u017Ano P\xF3jd\u0119 Spa\u0107", "D\u0142ugo\u015B\u0107 D\u017Awi\u0119ku Samotno\u015Bci", "Elektryczny", "Eli Lama Sabachtani", "Ezoteryczny Pozna\u0144", "Filandia", "Film", "Flota Zjednoczonych Si\u0142", "Fotograf Brok", "Gdy Nie Ma Dzieci W Domu", "Gdybym", "Go\u0142\u0119bi Puch", "Granda", "Grande Valse Brillante", "Gra\u017Cka", "Groszki I R\xF3\u017Ce", "Harry", "Hej Wy", "Hej, Czy Nie Wiecie", "Hi-Fi", "Horses", "Hydropiek\u0142owst\u0105pienie", "I Ciebie Te\u017C, Bardzo", "I Nikomu Nie Wolno Si\u0119 Z Tego \u015Amia\u0107", "I Tak Warto \u017By\u0107", "I Wszystko Si\u0119 Mo\u017Ce Zdarzy\u0107", "IV Liceum", "Ja Sowa", "Ja Wysiadam", "Jaka R\xF3\u017Ca, Taki Cier\u0144", "Jask\xF3\u0142ka Uwi\u0119ziona", "Jednego Serca", "Jedwab", "Jedyne Co Mam", "Jej Portret", "Jenny", "Jest Taki Samotny Dom", "Jestem Bogiem", "Jestem W Niebie", "Jeste\u015B Lekiem Na Ca\u0142e Z\u0142o", "Jeste\u015Bmy Na Wczasach", "Jeszcze B\u0119dzie Przepi\u0119knie", "Jeszcze Si\u0119 Tam \u017Bagiel Bieli", "Jeszcze W Zielone Gramy", "Jezu Jak Si\u0119 Ciesz\u0119", "Je\u015Bli Wiesz Co Chc\u0119 Powiedzie\u0107", "Jolka, Jolka, Pami\u0119tasz", "Jutro Mo\u017Cemy By\u0107 Szcz\u0119\u015Bliwi", "Kapitan Polska", "Karuzela Z Madonnami", "Karwoski", "Kawa\u0142ek Pod\u0142ogi", "Kiedy By\u0142em Ma\u0142ym Ch\u0142opcem", "Kiedy Powiem Sobie Do\u015B\u0107", "King", "King Bruce Lee Karate Mistrz", "Klub Weso\u0142ego Szampana", "Kobiety Jak Te Kwiaty", "Kocham By\u0107 Z Tob\u0105", "Kocham Ci\u0119", "Kocham Ci\u0119 Jak Irlandi\u0119", "Kocham Ci\u0119 Kochanie Moje", "Kocham Wolno\u015B\u0107", "Kochana", "Kocha\u0107 Inaczej", "Koncert Jesienny Na Dwa \u015Awierszcze I Wiatr W Kominie", "Konstytucje", "Korow\xF3d", "Kosmiczne Energie", "Ko\u0142ysanka Dla Nieznajomej", "Krakowski Spleen", "Krak\xF3w", "Krew Boga", "Kryzysowa Narzeczona", "Kwiaty We W\u0142osach", "Lamparty", "Leszek \u017Bukowski", "Lewe Lewe Loff", "Lipstick On The Glass", "List", "List Do M.", "Los, Cebula I Krokodyle \u0141zy", "Lubi\u0119 M\xF3wi\u0107 Z Tob\u0105", "Lubi\u0119 Wraca\u0107 Tam Gdzie By\u0142em", "Lucciola", "Lucy Phere", "Malcziki", "Marchewkowe Pole", "Maszynka Do \u015Awierkania", "Ma\u0142e T\u0119sknoty", "Ma\u0142omiasteczkowy", "Meluzyna", "Mimo Wszystko", "Mississippi W Ogniu", "Mi\u0119dzy Cisz\u0105 A Cisz\u0105", "Mi\u0142o\u015B\u0107, Mi\u0142o\u015B\u0107", "Mniej Ni\u017C Zero", "Modlitwa", "Modlitwa III - Pozw\xF3l Mi", "Modlitwa O Wschodzie S\u0142o\u0144ca", "Mog\u0142o By\u0107 Nic", "Moja I Twoja Nadzieja", "Moja Krew", "Moje Bieszczady", "Mury", "M\xF3j Dom", "M\xF3wi\u0119 Ci \u017Be", "Na Falochronie", "Na Szczycie", "Na Zakr\u0119cie", "Nadzieja", "Naprawd\u0119 Nie Dzieje Si\u0119 Nic", "Nast\u0119pna Stacja", "Nasza Klasa", "Nic Nie Mo\u017Ce Wiecznie Trwa\u0107", "Nie Ma, Nie Ma Ciebie", "Nie Mam Dla Ciebie Mi\u0142o\u015Bci", "Nie Przeno\u015Bcie Nam Stolicy Do Krakowa", "Nie Pytaj O Polsk\u0119", "Nie P\u0142acz Ewka", "Nie Raj", "Nie Wierz Nigdy Kobiecie", "Niebo By\u0142o R\xF3\u017Cowe", "Niech \u017Byje Bal", "Niemi\u0142o\u015B\u0107", "Niepokonani", "Niewiele Ci Mog\u0119 Da\u0107", "Nieznajomy", "Niezwyci\u0119\u017Cony", "Nikt Tak Pi\u0119knie Nie M\xF3wi\u0142, \u017Be Si\u0119 Boi Mi\u0142o\u015Bci", "Nim Stanie Si\u0119 Tak, Jak Gdyby Nigdy Nic", "Nim Wstanie Dzie\u0144", "Noc Komety", "N\xF3\u017C", "O! Ela", "Objazdowe Nieme Kino", "Obud\u017A Si\u0119", "Ob\u0142awa", "Ocali\u0107 Od Zapomnienia", "Och \u017Bycie, Kocham Ci\u0119 Nad \u017Bycie", "Oczy Tej Ma\u0142ej", "Odchodz\u0105c", "Odkryjemy Mi\u0142o\u015B\u0107 Nieznan\u0105", "Ok, Boomer!", "Oni Zaraz Przyjd\u0105 Tu", "Orkiestra", "Ostatni", "Pami\u0119tajcie O Ogrodach", "Papierowy Ksi\u0119\u017Cyc", "Partyzant", "Pary\u017C - Moskwa 17.15", "Paw", "Peggy Brown", "Piosenka Jest Dobra Na Wszystko", "Piosenka Ksi\u0119\u017Cycowa", "Piosenka M\u0142odych Wio\u015Blarzy", "Pi\u0142a Tango", "Pi\u0142em W Spale, Spa\u0142em W Pile", "Plamy Na S\u0142o\u0144cu", "Plus I Minus", "Po Co Wolno\u015B\u0107", "Po Prostu B\u0105d\u017A", "Pocz\u0105tek", "Pod Niebem", "Pod Papugami", "Pod Pr\u0105d", "Podaruj Mi Troch\u0119 S\u0142o\u0144ca", "Pola", "Polska", "Polski", "Polsko", "Przebudzenie", "Prze\u017Cyj To Sam", "Pr\xF3cz Ciebie Nic", "Psalm Stoj\u0105cych W Kolejce", "P\u0142on\u0105 G\xF3ry, P\u0142on\u0105 Lasy", "Raz Na Milion Lat", "Rosemary'S Baby", "Rower", "Rzu\u0107 To Wszystko Co Z\u0142e", "R\xF3bmy Swoje", "Samba Przed Rozstaniem", "Scenariusz Dla Moich S\u0105siad\xF3w", "Sen", "Sen O Dolinie", "Sen O Victorii", "Sen O Warszawie", "Serce To Jest Muzyk", "Sie \u015Aciemnia", "Skazany Na Bluesa", "Sk\xF3ra", "Sk\u0142ama\u0142am", "Sobie I Wam", "Son Of The Blue Sky", "Sorry Polsko", "Spadam", "Spalam Si\u0119", "Spytaj Milicjanta", "Stare Drzewa", "Statki Na Niebie", "Strze\u017C Si\u0119 Tych Miejsc", "Syreny", "Szaror\xF3\u017Cowe", "Sza\u0142 Niebieskich Cia\u0142", "Szklana Pogoda", "Sztuka Latania", "S\u0142odkiego Mi\u0142ego \u017Bycia", "Ta Noc Do Innych Jest Niepodobna", "Tak Mi Si\u0119 Nie Chce", "Tak, Tak... To Ja", "Tam, Gdzie Nie Si\u0119ga Wzrok", "Taniec Eleny", "Te Smaki I Zapachy", "Teksa\u0144ski", "Telefony", 'Temat Serialu "Polskie Drogi"', "The Depth Of Self-Delusion", "To Co Czujesz, To Co Wiesz", "To Ostatnia Niedziela", "To Tylko Tango", "To Wychowanie", "Tolerancja / Na Mi\u0142y B\xF3g", "Transmission Into Your Heart", "Trudne \u017Byczenia", "Trudno Nie Wierzy\u0107 W Nic", "Trudno Tak (Razem By\u0107 Nam Ze Sob\u0105...)", "Trzy Zapa\u0142ki", "Tr\xF3jk\u0105ty I Kwadraty", "Tu\u017C Przed P\xF3\u0142noc\u0105", "Twoja Lorelei", "Tw\xF3j B\xF3l Jest Lepszy Ni\u017C M\xF3j", "Tyle S\u0142o\u0144ca W Ca\u0142ym Mie\u015Bcie", "Ucieczka Z Tropiku", "Uciekaj Moje Serce", "Varsovie", "W Deszczu Male\u0144kich \u017B\xF3\u0142tych Kwiat\xF3w", "W Dobr\u0105 Stron\u0119", "W Domach Z Betonu Nie Ma Wolnej Mi\u0142o\u015Bci", "W Moim Magicznym Domu", "W Moim Ogrodzie", "W Wielkim Mie\u015Bcie", "W \u017B\xF3\u0142tych P\u0142omieniach Li\u015Bci", "Warszawa", "Wataha", "Wci\u0105\u017C Bardziej Obcy", "Wehiku\u0142 Czasu", "Whisky", "Wie\u017Ca Rado\u015Bci, Wie\u017Ca Samotno\u015Bci", "Wind\u0105 Do Nieba", "Wiosna, Ach To Ty", "Wi\u015Bnia", "Wodymidaj", "Wojenka", "Wspomnienie", "Wszystko Czego Dzi\u015B Chc\u0119", "Wyj\u0105tkowo Zimny Maj", "Wymy\u015Bli\u0142em Ciebie", "Wyspa, Drzewo, Zamek", "W\u0142adza", "Z Imbirem", "Z Nim B\u0119dziesz Szcz\u0119\u015Bliwsza", "Z Tob\u0105 / Do Domu", "Z Tob\u0105 Chc\u0119 Ogl\u0105da\u0107 \u015Awiat", "Za Ostatni Grosz", "Zacznij Od Bacha", "Zanim P\xF3jd\u0119", "Zanim Zrozumiesz", "Zaopiekuj Si\u0119 Mn\u0105", "Zaprzepaszczone Si\u0142y Wielkiej Armii \u015Awi\u0119tych Znak\xF3w", "Zapytaj Mnie Czy Ci\u0119 Kocham", "Zawsze Tam Gdzie Ty", "Zazdro\u015B\u0107", "Za\u0142oga G", "Zegarmistrz \u015Awiat\u0142a", "Zn\xF3w W\u0119drujemy", "Zosta\u0144", "[Sic!]", "\u0141za Dla Cieni\xF3w Minionych", "\u015Alady", "\u015Amier\u0107 W Bikini", "\u015Apiewa\u0107 Ka\u017Cdy Mo\u017Ce", "\u015Apij Kochanie, \u015Apij", "\u015Awiecie Nasz", "\u017Byj\u0119 W Kraju"];
var ca = { genre: Z7, song_name: O8 };
var J8 = ca;
var a15 = ["Ada", "Adelajda", "Agata", "Agnieszka", "Agrypina", "Aida", "Aleksandra", "Alicja", "Alina", "Amanda", "Anastazja", "Angela", "And\u017Celika", "Angelina", "Anna", "Hanna", "Antonina", "Ariadna", "Aurora", "Barbara", "Beatrycze", "Berta", "Brygida", "Kamila", "Karolina", "Kornelia", "Katarzyna", "Cecylia", "Chloe", "Krystyna", "Klara", "Klaudia", "Klementyna", "Konstancja", "Koralia", "Daria", "Diana", "Dina", "Dorota", "Edyta", "Eleonora", "Eliza", "El\u017Cbieta", "Izabela", "Elwira", "Emilia", "Estera", "Eudoksja", "Eudokia", "Eugenia", "Ewa", "Ewelina", "Ferdynanda", "Florencja", "Franciszka", "Gabriela", "Gertruda", "Gloria", "Gracja", "Jadwiga", "Helena", "Henryka", "Nadzieja", "Ida", "Ilona", "Irena", "Irma", "Izolda", "Jakubina", "Joanna", "Janina", "\u017Baneta", "Ginewra", "J\xF3zefina", "Judyta", "Julia", "Julita", "Justyna", "Kira", "Cyra", "Kleopatra", "Larysa", "Laura", "Laurencja", "Laurentyna", "Lea", "Leila", "Liliana", "Lilianna", "Lilia", "Lilla", "Liza", "Ludwika", "Luiza", "\u0141ucja", "Lucja", "Lidia", "Amabela", "Magdalena", "Malwina", "Ma\u0142gorzata", "Greta", "Marianna", "Maryna", "Marta", "Martyna", "Maria", "Matylda", "Maja", "Melania", "Michalina", "Monika", "Noemi", "Natalia", "Nikola", "Nina", "Olga", "Olimpia", "Oliwia", "Ofelia", "Patrycja", "Paula", "Pelagia", "Penelopa", "Filipa", "Paulina", "Rachela", "Rebeka", "Regina", "Renata", "Rozalia", "R\xF3\u017Ca", "Roksana", "Rufina", "Ruta", "Sabina", "Sara", "Serafina", "Sybilla", "Sylwia", "Zofia", "Stella", "Stefania", "Zuzanna", "Tamara", "Tacjana", "Tekla", "Teodora", "Teresa", "Walentyna", "Waleria", "Wanesa", "Wiara", "Weronika", "Wiktoria", "Wirginia", "Bibiana", "Bibianna", "Wanda", "Wilhelmina", "Ksawera", "Ksenia", "Zoe"];
var i15 = ["Aaron", "Abraham", "Adam", "Adrian", "Atanazy", "Agaton", "Alan", "Albert", "Aleksander", "Aleksy", "Alfred", "Alwar", "Ambro\u017Cy", "Anatol", "Andrzej", "Antoni", "Apollinary", "Apollo", "Arkady", "Arkadiusz", "Archibald", "Arystarch", "Arnold", "Arseniusz", "Artur", "August", "Baldwin", "Bazyli", "Benedykt", "Beniamin", "Bernard", "Bertrand", "Bertram", "Borys", "Brajan", "Bruno", "Cezary", "Cecyliusz", "Karol", "Krystian", "Krzysztof", "Klarencjusz", "Klaudiusz", "Klemens", "Konrad", "Konstanty", "Konstantyn", "Kornel", "Korneliusz", "Korneli", "Cyryl", "Cyrus", "Damian", "Daniel", "Dariusz", "Dawid", "Dionizy", "Demetriusz", "Dominik", "Donald", "Dorian", "Edgar", "Edmund", "Edward", "Edwin", "Efrem", "Efraim", "Eliasz", "Eleazar", "Emil", "Emanuel", "Erast", "Ernest", "Eugeniusz", "Eustracjusz", "Fabian", "Feliks", "Florian", "Franciszek", "Fryderyk", "Gabriel", "Gedeon", "Galfryd", "Jerzy", "Gerald", "Gerazym", "Gilbert", "Gonsalwy", "Grzegorz", "Gwido", "Harald", "Henryk", "Herbert", "Herman", "Hilary", "Horacy", "Hubert", "Hugo", "Ignacy", "Igor", "Hilarion", "Innocenty", "Hipolit", "Ireneusz", "Erwin", "Izaak", "Izajasz", "Izydor", "Jakub", "Jeremi", "Jeremiasz", "Hieronim", "Joachim", "Jan", "Janusz", "Jonatan", "J\xF3zef", "Jozue", "Julian", "Juliusz", "Justyn", "Kalistrat", "Kazimierz", "Wawrzyniec", "Laurenty", "Laurencjusz", "\u0141azarz", "Leon", "Leonard", "Leonid", "Ludwik", "\u0141ukasz", "Lucjan", "Magnus", "Makary", "Marceli", "Marek", "Marcin", "Mateusz", "Maurycy", "Maksym", "Maksymilian", "Micha\u0142", "Miron", "Modest", "Moj\u017Cesz", "Natan", "Natanael", "Nazariusz", "Nazary", "Nestor", "Miko\u0142aj", "Nikodem", "Olaf", "Oleg", "Oliwier", "Onufry", "Orestes", "Oskar", "Ansgary", "Osmund", "Pankracy", "Pantaleon", "Patryk", "Patrycjusz", "Patrycy", "Pawe\u0142", "Piotr", "Filemon", "Filip", "Platon", "Polikarp", "Porfiry", "Porfiriusz", "Prokles", "Prokul", "Prokop", "Kwintyn", "Randolf", "Rafa\u0142", "Rajmund", "Reginald", "Rajnold", "Ryszard", "Robert", "Roderyk", "Roger", "Roland", "Roman", "Romeo", "Rudolf", "Samson", "Samuel", "Salwator", "Sebastian", "Serafin", "Sergiusz", "Seweryn", "Zygmunt", "Sylwester", "Szymon", "Salomon", "Spirydion", "Stanis\u0142aw", "Szczepan", "Stefan", "Terencjusz", "Teodor", "Tomasz", "Tymoteusz", "Tobiasz", "Walenty", "Walentyn", "Walerian", "Walery", "Wiktor", "Wincenty", "Witalis", "W\u0142odzimierz", "W\u0142adys\u0142aw", "B\u0142a\u017Cej", "Walter", "Walgierz", "Wac\u0142aw", "Wilfryd", "Wilhelm", "Ksawery", "Ksenofont", "Zachariasz", "Zachary"];
var v10 = [.../* @__PURE__ */ new Set([...a15, ...i15])];
var x12 = ["Genderqueer", "Hermafrodyta", "Inna", "Kobieta cis", "Kobieta cisp\u0142ciowa", "Kobieta interp\u0142ciowa", "Kobieta trans", "Kobieta", "Me\u017Cczyzna trans", "M\u0119\u017Cczyzna cis", "M\u0119\u017Cczyzna cisp\u0142ciowy", "M\u0119\u017Cczyzna interp\u0142ciowy", "M\u0119\u017Cczyzna", "Osoba agender", "Osoba bigender", "Osoba gender fluid", "Osoba interp\u0142ciowa", "Osoba niebinarna", "Osoba pangender", "Osoba polygender", "Osoba trans", "Transkobieta", "Transsekualista", "Transm\u0119\u017Cczyzna"];
var I8 = ["Adamczak", "Adamczyk", "Adamek", "Adamiak", "Adamiec", "Adamowicz", "Adamski", "Adamus", "Aleksandrowicz", "Andrzejczak", "Andrzejewski", "Antczak", "Augustyn", "Augustyniak", "Bagi\u0144ski", "Balcerzak", "Banach", "Banasiak", "Banasik", "Bana\u015B", "Baran", "Baranowski", "Bara\u0144ski", "Bartczak", "Bartkowiak", "Bartnik", "Bartosik", "Bednarczyk", "Bednarek", "Bednarski", "Bednarz", "Bia\u0142as", "Bia\u0142ek", "Bia\u0142kowski", "Biedrzy\u0144ski", "Bielak", "Bielawski", "Bielecki", "Bielski", "Bieniek", "Biernacki", "Biernat", "Bie\u0144kowski", "Bilski", "Bober", "Bochenek", "Bogucki", "Bogusz", "Borek", "Borkowski", "Borowiec", "Borowski", "Bo\u017Cek", "Broda", "Brzezi\u0144ski", "Brzozowski", "Buczek", "Buczkowski", "Buczy\u0144ski", "Budzi\u0144ski", "Budzy\u0144ski", "Bujak", "Bukowski", "Burzy\u0144ski", "B\u0105k", "B\u0105kowski", "B\u0142aszczak", "B\u0142aszczyk", "Cebula", "Chmiel", "Chmielewski", "Chmura", "Chojnacki", "Chojnowski", "Cholewa", "Chrzanowski", "Chudzik", "Cichocki", "Cicho\u0144", "Cichy", "Ciesielski", "Cie\u015Bla", "Cie\u015Blak", "Cie\u015Blik", "Ciszewski", "Cybulski", "Cygan", "Czaja", "Czajka", "Czajkowski", "Czapla", "Czarnecki", "Czech", "Czechowski", "Czekaj", "Czerniak", "Czerwi\u0144ski", "Czy\u017C", "Czy\u017Cewski", "Dec", "Dobosz", "Dobrowolski", "Dobrzy\u0144ski", "Domaga\u0142a", "Doma\u0144ski", "Dominiak", "Drabik", "Drozd", "Drozdowski", "Drzewiecki", "Dr\xF3\u017Cd\u017C", "Dubiel", "Duda", "Dudek", "Dudziak", "Dudzik", "Dudzi\u0144ski", "Duszy\u0144ski", "Dziedzic", "Dziuba", "D\u0105bek", "D\u0105bkowski", "D\u0105browski", "D\u0119bowski", "D\u0119bski", "D\u0142ugosz", "Falkowski", "Fija\u0142kowski", "Filipek", "Filipiak", "Filipowicz", "Flak", "Flis", "Florczak", "Florek", "Frankowski", "Fr\u0105ckowiak", "Fr\u0105czek", "Fr\u0105tczak", "Furman", "Gadomski", "Gajda", "Gajewski", "Gawe\u0142", "Gawlik", "Gawron", "Gawro\u0144ski", "Ga\u0142ka", "Ga\u0142\u0105zka", "Gil", "Godlewski", "Golec", "Go\u0142\u0105b", "Go\u0142\u0119biewski", "Go\u0142\u0119biowski", "Grabowski", "Graczyk", "Grochowski", "Grudzie\u0144", "Gruszczy\u0144ski", "Gruszka", "Grzegorczyk", "Grzelak", "Grzesiak", "Grzesik", "Grze\u015Bkowiak", "Grzyb", "Grzybowski", "Grzywacz", "Gutowski", "Guzik", "Gwo\u017Adzik", "Gw\xF3\u017Ad\u017A", "G\xF3ra", "G\xF3ral", "G\xF3recki", "G\xF3rka", "G\xF3rniak", "G\xF3rny", "G\xF3rski", "G\u0105sior", "G\u0105siorowski", "G\u0142ogowski", "G\u0142owacki", "G\u0142\u0105b", "Hajduk", "Herman", "Iwanowski", "Iwa\u0144ski", "Izdebski", "Jab\u0142o\u0144ski", "Jackowski", "Jagielski", "Jagie\u0142\u0142o", "Jagodzi\u0144ski", "Jakubiak", "Jakubowski", "Janas", "Janiak", "Janicki", "Janik", "Janiszewski", "Jankowiak", "Jankowski", "Janowski", "Janus", "Janusz", "Januszewski", "Jaros", "Jarosz", "Jarz\u0105bek", "Jasi\u0144ski", "Jastrz\u0119bski", "Jaworski", "Ja\u015Bkiewicz", "Jezierski", "Jurek", "Jurkiewicz", "Jurkowski", "Juszczak", "J\xF3\u017Awiak", "J\xF3\u017Awik", "J\u0119drzejczak", "J\u0119drzejczyk", "J\u0119drzejewski", "Kacprzak", "Kaczmarczyk", "Kaczmarek", "Kaczmarski", "Kaczor", "Kaczorowski", "Kaczy\u0144ski", "Kaleta", "Kalinowski", "Kalisz", "Kami\u0144ski", "Kania", "Kaniewski", "Kapusta", "Kara\u015B", "Karczewski", "Karpi\u0144ski", "Karwowski", "Kasperek", "Kasprzak", "Kasprzyk", "Kaszuba", "Kawa", "Kawecki", "Ka\u0142u\u017Ca", "Ka\u017Amierczak", "Kie\u0142basa", "Kisiel", "Kita", "Klimczak", "Klimek", "Kmiecik", "Kmie\u0107", "Knapik", "Kobus", "Kogut", "Kolasa", "Komorowski", "Konieczna", "Konieczny", "Konopka", "Kopczy\u0144ski", "Koper", "Kope\u0107", "Korzeniowski", "Kos", "Kosi\u0144ski", "Kosowski", "Kostecki", "Kostrzewa", "Kot", "Kotowski", "Kowal", "Kowalczuk", "Kowalczyk", "Kowalewski", "Kowalik", "Kowalski", "Koza", "Kozak", "Kozie\u0142", "Kozio\u0142", "Koz\u0142owski", "Ko\u0142akowski", "Ko\u0142odziej", "Ko\u0142odziejczyk", "Ko\u0142odziejski", "Krajewski", "Krakowiak", "Krawczyk", "Krawiec", "Kruk", "Krukowski", "Krupa", "Krupi\u0144ski", "Kruszewski", "Krysiak", "Krzemi\u0144ski", "Krzy\u017Canowski", "Kr\xF3l", "Kr\xF3likowski", "Ksi\u0105\u017Cek", "Kubacki", "Kubiak", "Kubica", "Kubicki", "Kubik", "Kuc", "Kucharczyk", "Kucharski", "Kuchta", "Kuci\u0144ski", "Kuczy\u0144ski", "Kujawa", "Kujawski", "Kula", "Kulesza", "Kulig", "Kulik", "Kuli\u0144ski", "Kurek", "Kurowski", "Ku\u015B", "Kwa\u015Bniewski", "Kwiatkowski", "Kwiecie\u0144", "Kwieci\u0144ski", "K\u0119dzierski", "K\u0119dziora", "K\u0119pa", "K\u0142os", "K\u0142osowski", "Lach", "Laskowski", "Lasota", "Lech", "Lenart", "Lesiak", "Leszczy\u0144ski", "Lewandowski", "Lewicki", "Le\u015Bniak", "Le\u015Bniewski", "Lipi\u0144ski", "Lipka", "Lipski", "Lis", "Lisiecki", "Lisowski", "Maciejewski", "Maci\u0105g", "Mackiewicz", "Madej", "Maj", "Majcher", "Majchrzak", "Majewski", "Majka", "Makowski", "Malec", "Malicki", "Malinowski", "Maliszewski", "Marchewka", "Marciniak", "Marcinkowski", "Marczak", "Marek", "Markiewicz", "Markowski", "Marsza\u0142ek", "Marzec", "Mas\u0142owski", "Matusiak", "Matuszak", "Matuszewski", "Matysiak", "Mazur", "Mazurek", "Mazurkiewicz", "Ma\u0107kowiak", "Ma\u0142ecki", "Ma\u0142ek", "Ma\u015Blanka", "Michalak", "Michalczyk", "Michalik", "Michalski", "Micha\u0142ek", "Micha\u0142owski", "Mielczarek", "Mierzejewski", "Mika", "Mikla\u015B", "Miko\u0142ajczak", "Miko\u0142ajczyk", "Mikulski", "Milczarek", "Milewski", "Miller", "Misiak", "Misztal", "Mi\u015Bkiewicz", "Modzelewski", "Molenda", "Morawski", "Motyka", "Mroczek", "Mroczkowski", "Mrozek", "Mr\xF3z", "Mucha", "Murawski", "Musia\u0142", "Muszy\u0144ski", "M\u0142ynarczyk", "Napiera\u0142a", "Nawrocki", "Nawrot", "Niedziela", "Niedzielski", "Nied\u017Awiecki", "Niemczyk", "Niemiec", "Niewiadomski", "Noga", "Nowacki", "Nowaczyk", "Nowak", "Nowakowski", "Nowicki", "Nowi\u0144ski", "Olczak", "Olejniczak", "Olejnik", "Olszewski", "Orzechowski", "Or\u0142owski", "Osi\u0144ski", "Ossowski", "Ostrowski", "Owczarek", "Paczkowski", "Paj\u0105k", "Paku\u0142a", "Palacz", "Paluch", "Panek", "Partyka", "Pasternak", "Paszkowski", "Pawelec", "Pawlak", "Pawlicki", "Pawlik", "Pawlikowski", "Paw\u0142owski", "Pa\u0142ka", "Piasecki", "Piechota", "Pieczek", "Piekarski", "Pietras", "Pietruszka", "Pietrzak", "Pietrzyk", "Pilarski", "Pilch", "Piotrowicz", "Piotrowski", "Piwowarczyk", "Pi\xF3rkowski", "Pi\u0105tek", "Pi\u0105tkowski", "Pi\u0142at", "Pluta", "Podg\xF3rski", "Polak", "Pop\u0142awski", "Por\u0119bski", "Prokop", "Prus", "Przybylski", "Przybysz", "Przyby\u0142", "Przyby\u0142a", "Ptak", "Puchalski", "Pytel", "P\u0142onka", "Raczy\u0144ski", "Radecki", "Radomski", "Rak", "Rakowski", "Ratajczak", "Robak", "Rogala", "Rogalski", "Rogowski", "Rojek", "Romanowski", "Rosa", "Rosiak", "Rosi\u0144ski", "Ruci\u0144ski", "Rudnicki", "Rudzi\u0144ski", "Rudzki", "Rusin", "Rutkowski", "Rybak", "Rybarczyk", "Rybicki", "Rzepka", "R\xF3\u017Ca\u0144ski", "R\xF3\u017Cycki", "Sadowski", "Sawicki", "Serafin", "Siedlecki", "Sienkiewicz", "Sieradzki", "Sikora", "Sikorski", "Sitek", "Siwek", "Skalski", "Skiba", "Skibi\u0144ski", "Skoczylas", "Skowron", "Skowronek", "Skowro\u0144ski", "Skrzypczak", "Skrzypek", "Sk\xF3ra", "Smoli\u0144ski", "Sobczak", "Sobczyk", "Sobieraj", "Sobolewski", "Socha", "Sochacki", "Soko\u0142owski", "Sok\xF3\u0142", "Sosnowski", "Sowa", "Sowi\u0144ski", "So\u0142tys", "So\u0142tysiak", "Sroka", "Stachowiak", "Stachowicz", "Stachura", "Stachurski", "Stanek", "Staniszewski", "Stanis\u0142awski", "Stankiewicz", "Stasiak", "Staszewski", "Stawicki", "Stec", "Stefaniak", "Stefa\u0144ski", "Stelmach", "Stolarczyk", "Stolarski", "Strzelczyk", "Strzelecki", "St\u0119pie\u0144", "St\u0119pniak", "Surma", "Suski", "Szafra\u0144ski", "Szatkowski", "Szczepaniak", "Szczepanik", "Szczepa\u0144ski", "Szczerba", "Szcze\u015Bniak", "Szczygie\u0142", "Szcz\u0119sna", "Szcz\u0119sny", "Szel\u0105g", "Szewczyk", "Szostak", "Szulc", "Szwarc", "Szwed", "Szyd\u0142owski", "Szyma\u0144ski", "Szymczak", "Szymczyk", "Szymkowiak", "Szyszka", "S\u0142awi\u0144ski", "S\u0142owik", "S\u0142owi\u0144ski", "Tarnowski", "Tkaczyk", "Tokarski", "Tomala", "Tomaszewski", "Tomczak", "Tomczyk", "Tomys", "Tracz", "Trojanowski", "Trzci\u0144ski", "Trzeciak", "Turek", "Twardowski", "Urban", "Urbanek", "Urbaniak", "Urbanowicz", "Urba\u0144czyk", "Urba\u0144ski", "Walczak", "Walkowiak", "Warcho\u0142", "Wasiak", "Wasilewski", "Wawrzyniak", "Weso\u0142owski", "Wieczorek", "Wierzbicki", "Wilczek", "Wilczy\u0144ski", "Wilk", "Winiarski", "Witczak", "Witek", "Witkowski", "Wi\u0105cek", "Wi\u0119cek", "Wi\u0119ckowski", "Wi\u015Bniewski", "Wnuk", "Wojciechowski", "Wojtas", "Wojtasik", "Wojtczak", "Wojtkowiak", "Wolak", "Woli\u0144ski", "Wolny", "Wolski", "Wo\u015B", "Wo\u017Aniak", "Wrona", "Wro\u0144ski", "Wr\xF3bel", "Wr\xF3blewski", "Wypych", "Wysocki", "Wyszy\u0144ski", "W\xF3jcicki", "W\xF3jcik", "W\xF3jtowicz", "W\u0105sik", "W\u0105sowski", "W\u0119grzyn", "W\u0142odarczyk", "W\u0142odarski", "Zaborowski", "Zab\u0142ocki", "Zag\xF3rski", "Zaj\u0105c", "Zaj\u0105czkowski", "Zakrzewski", "Zalewski", "Zaremba", "Zarzycki", "Zar\u0119ba", "Zawada", "Zawadzki", "Zdunek", "Zieli\u0144ski", "Zielonka", "Zi\xF3\u0142kowski", "Zi\u0119ba", "Zi\u0119tek", "Zwoli\u0144ski", "Zych", "Zygmunt", "\u0141api\u0144ski", "\u0141uczak", "\u0141ukasiewicz", "\u0141ukasik", "\u0141ukaszewski", "\u015Aliwa", "\u015Aliwi\u0144ski", "\u015Alusarczyk", "\u015Awiderski", "\u015Awierczy\u0144ski", "\u015Awi\u0105tek", "\u017Bak", "\u017Bebrowski", "\u017Bmuda", "\u017Buk", "\u017Bukowski", "\u017Burawski", "\u017Burek", "\u017By\u0142a"];
var F9 = ["{{name.prefix}} {{name.first_name}} {{name.last_name}}", "{{name.first_name}} {{name.last_name}}"];
var E8 = ["Pan", "Pani"];
var H11 = ["kobieta", "m\u0119\u017Cczyzna"];
var _11 = { descriptor: ["Lead", "Senior", "Direct", "Corporate", "Dynamic", "Future", "Product", "National", "Regional", "District", "Central", "Global", "Customer", "Investor", "International", "Legacy", "Forward", "Internal", "Human", "Chief", "Principal"], level: ["Solutions", "Program", "Brand", "Security", "Research", "Marketing", "Directives", "Implementation", "Integration", "Functionality", "Response", "Paradigm", "Tactics", "Identity", "Markets", "Group", "Division", "Applications", "Optimization", "Operations", "Infrastructure", "Intranet", "Communications", "Web", "Branding", "Quality", "Assurance", "Mobility", "Accounts", "Data", "Creative", "Configuration", "Accountability", "Interactions", "Factors", "Usability", "Metrics"], job: ["Supervisor", "Associate", "Executive", "Liaison", "Officer", "Manager", "Engineer", "Specialist", "Director", "Coordinator", "Administrator", "Architect", "Analyst", "Designer", "Planner", "Orchestrator", "Technician", "Developer", "Producer", "Consultant", "Assistant", "Facilitator", "Agent", "Representative", "Strategist"] };
var la = { female_first_name: a15, first_name: v10, gender: x12, last_name: I8, male_first_name: i15, name: F9, prefix: E8, sex: H11, title: _11 };
var U8 = la;
var q7 = ["12-###-##-##", "13-###-##-##", "14-###-##-##", "15-###-##-##", "16-###-##-##", "17-###-##-##", "18-###-##-##", "22-###-##-##", "23-###-##-##", "24-###-##-##", "25-###-##-##", "29-###-##-##", "32-###-##-##", "33-###-##-##", "34-###-##-##", "41-###-##-##", "42-###-##-##", "43-###-##-##", "44-###-##-##", "46-###-##-##", "48-###-##-##", "52-###-##-##", "54-###-##-##", "55-###-##-##", "56-###-##-##", "58-###-##-##", "59-###-##-##", "61-###-##-##", "62-###-##-##", "63-###-##-##", "65-###-##-##", "67-###-##-##", "68-###-##-##", "71-###-##-##", "74-###-##-##", "75-###-##-##", "76-###-##-##", "77-###-##-##", "81-###-##-##", "82-###-##-##", "83-###-##-##", "84-###-##-##", "85-###-##-##", "86-###-##-##", "87-###-##-##", "89-###-##-##", "91-###-##-##", "94-###-##-##", "95-###-##-##"];
var ma = { formats: q7 };
var V9 = ma;
var Q6 = Object.freeze([{ symbol: "H", name: "Wod\xF3r", atomicNumber: 1 }, { symbol: "He", name: "Hel", atomicNumber: 2 }, { symbol: "Li", name: "Lit", atomicNumber: 3 }, { symbol: "Be", name: "Beryl", atomicNumber: 4 }, { symbol: "B", name: "Bor", atomicNumber: 5 }, { symbol: "C", name: "W\u0119giel", atomicNumber: 6 }, { symbol: "N", name: "Azot", atomicNumber: 7 }, { symbol: "O", name: "Tlen", atomicNumber: 8 }, { symbol: "F", name: "Fluor", atomicNumber: 9 }, { symbol: "Ne", name: "Neon", atomicNumber: 10 }, { symbol: "Na", name: "S\xF3d", atomicNumber: 11 }, { symbol: "Mg", name: "Magnez", atomicNumber: 12 }, { symbol: "Al", name: "Glin", atomicNumber: 13 }, { symbol: "Si", name: "Krzem", atomicNumber: 14 }, { symbol: "P", name: "Fosfor", atomicNumber: 15 }, { symbol: "S", name: "Siarka", atomicNumber: 16 }, { symbol: "Cl", name: "Chlor", atomicNumber: 17 }, { symbol: "Ar", name: "Argon", atomicNumber: 18 }, { symbol: "K", name: "Potas", atomicNumber: 19 }, { symbol: "Ca", name: "Wap\u0144", atomicNumber: 20 }, { symbol: "Sc", name: "Skand", atomicNumber: 21 }, { symbol: "Ti", name: "Tytan", atomicNumber: 22 }, { symbol: "V", name: "Wanad", atomicNumber: 23 }, { symbol: "Cr", name: "Chrom", atomicNumber: 24 }, { symbol: "Mn", name: "Mangan", atomicNumber: 25 }, { symbol: "Fe", name: "\u017Belazo", atomicNumber: 26 }, { symbol: "Co", name: "Kobalt", atomicNumber: 27 }, { symbol: "Ni", name: "Nikiel", atomicNumber: 28 }, { symbol: "Cu", name: "Mied\u017A", atomicNumber: 29 }, { symbol: "Zn", name: "Cynk", atomicNumber: 30 }, { symbol: "Ga", name: "Gal", atomicNumber: 31 }, { symbol: "Ge", name: "German", atomicNumber: 32 }, { symbol: "As", name: "Arsen", atomicNumber: 33 }, { symbol: "Se", name: "Selen", atomicNumber: 34 }, { symbol: "Br", name: "Brom", atomicNumber: 35 }, { symbol: "Kr", name: "Krypton", atomicNumber: 36 }, { symbol: "Rb", name: "Rubid", atomicNumber: 37 }, { symbol: "Sr", name: "Stront", atomicNumber: 38 }, { symbol: "Y", name: "Itr", atomicNumber: 39 }, { symbol: "Zr", name: "Cyrkon", atomicNumber: 40 }, { symbol: "Nb", name: "Niob", atomicNumber: 41 }, { symbol: "Mo", name: "Molibden", atomicNumber: 42 }, { symbol: "Tc", name: "Technet", atomicNumber: 43 }, { symbol: "Ru", name: "Ruten", atomicNumber: 44 }, { symbol: "Rh", name: "Rod", atomicNumber: 45 }, { symbol: "Pd", name: "Pallad", atomicNumber: 46 }, { symbol: "Ag", name: "Srebro", atomicNumber: 47 }, { symbol: "Cd", name: "Kadm", atomicNumber: 48 }, { symbol: "In", name: "Ind", atomicNumber: 49 }, { symbol: "Sn", name: "Cyna", atomicNumber: 50 }, { symbol: "Sb", name: "Antymon", atomicNumber: 51 }, { symbol: "Te", name: "Tellur", atomicNumber: 52 }, { symbol: "I", name: "Jod", atomicNumber: 53 }, { symbol: "Xe", name: "Ksenon", atomicNumber: 54 }, { symbol: "Cs", name: "Cez", atomicNumber: 55 }, { symbol: "Ba", name: "Bar", atomicNumber: 56 }, { symbol: "La", name: "Lantan", atomicNumber: 57 }, { symbol: "Ce", name: "Cer", atomicNumber: 58 }, { symbol: "Pr", name: "Prazeodym", atomicNumber: 59 }, { symbol: "Nd", name: "Neodym", atomicNumber: 60 }, { symbol: "Pm", name: "Promet", atomicNumber: 61 }, { symbol: "Sm", name: "Samar", atomicNumber: 62 }, { symbol: "Eu", name: "Europ", atomicNumber: 63 }, { symbol: "Gd", name: "Gadolin", atomicNumber: 64 }, { symbol: "Tb", name: "Terb", atomicNumber: 65 }, { symbol: "Dy", name: "Dysproz", atomicNumber: 66 }, { symbol: "Ho", name: "Holm", atomicNumber: 67 }, { symbol: "Er", name: "Erb", atomicNumber: 68 }, { symbol: "Tm", name: "Tul", atomicNumber: 69 }, { symbol: "Yb", name: "Iterb", atomicNumber: 70 }, { symbol: "Lu", name: "Lutet", atomicNumber: 71 }, { symbol: "Hf", name: "Hafn", atomicNumber: 72 }, { symbol: "Ta", name: "Tantal", atomicNumber: 73 }, { symbol: "W", name: "Wolfram", atomicNumber: 74 }, { symbol: "Re", name: "Ren", atomicNumber: 75 }, { symbol: "Os", name: "Osm", atomicNumber: 76 }, { symbol: "Ir", name: "Iryd", atomicNumber: 77 }, { symbol: "Pt", name: "Platyna", atomicNumber: 78 }, { symbol: "Au", name: "Z\u0142oto", atomicNumber: 79 }, { symbol: "Hg", name: "Rt\u0119\u0107", atomicNumber: 80 }, { symbol: "Tl", name: "Tal", atomicNumber: 81 }, { symbol: "Pb", name: "O\u0142\xF3w", atomicNumber: 82 }, { symbol: "Bi", name: "Bizmut", atomicNumber: 83 }, { symbol: "Po", name: "Polon", atomicNumber: 84 }, { symbol: "At", name: "Astat", atomicNumber: 85 }, { symbol: "Rn", name: "Radon", atomicNumber: 86 }, { symbol: "Fr", name: "Frans", atomicNumber: 87 }, { symbol: "Ra", name: "Rad", atomicNumber: 88 }, { symbol: "Ac", name: "Aktyn", atomicNumber: 89 }, { symbol: "Th", name: "Tor", atomicNumber: 90 }, { symbol: "Pa", name: "Protaktyn", atomicNumber: 91 }, { symbol: "U", name: "Uran", atomicNumber: 92 }, { symbol: "Np", name: "Neptun", atomicNumber: 93 }, { symbol: "Pu", name: "Pluton", atomicNumber: 94 }, { symbol: "Am", name: "Ameryk", atomicNumber: 95 }, { symbol: "Cm", name: "Kiur", atomicNumber: 96 }, { symbol: "Bk", name: "Berkel", atomicNumber: 97 }, { symbol: "Cf", name: "Kaliforn", atomicNumber: 98 }, { symbol: "Es", name: "Einstein", atomicNumber: 99 }, { symbol: "Fm", name: "Ferm", atomicNumber: 100 }, { symbol: "Md", name: "Mendelew", atomicNumber: 101 }, { symbol: "No", name: "Nobel", atomicNumber: 102 }, { symbol: "Lr", name: "Lorens", atomicNumber: 103 }, { symbol: "Rf", name: "Rutherford", atomicNumber: 104 }, { symbol: "Db", name: "Dubn", atomicNumber: 105 }, { symbol: "Sg", name: "Seaborg", atomicNumber: 106 }, { symbol: "Bh", name: "Bohr", atomicNumber: 107 }, { symbol: "Hs", name: "Has", atomicNumber: 108 }, { symbol: "Mt", name: "Meitner", atomicNumber: 109 }, { symbol: "Ds", name: "Darmsztadt", atomicNumber: 110 }, { symbol: "Rg", name: "Roentgen", atomicNumber: 111 }, { symbol: "Cn", name: "Kopernik", atomicNumber: 112 }, { symbol: "Nh", name: "Nihon", atomicNumber: 113 }, { symbol: "Fl", name: "Flerow", atomicNumber: 114 }, { symbol: "Mc", name: "Moskow", atomicNumber: 115 }, { symbol: "Lv", name: "Liwermor", atomicNumber: 116 }, { symbol: "Ts", name: "Tenes", atomicNumber: 117 }, { symbol: "Og", name: "Oganeson", atomicNumber: 118 }]);
var Y7 = Object.freeze([{ name: "metr", symbol: "m" }, { name: "sekunda", symbol: "s" }, { name: "mol", symbol: "mol" }, { name: "amper", symbol: "A" }, { name: "kelwin", symbol: "K" }, { name: "kandela", symbol: "cd" }, { name: "kilogram", symbol: "kg" }, { name: "radian", symbol: "rad" }, { name: "herc", symbol: "Hz" }, { name: "niuton", symbol: "N" }, { name: "paskal", symbol: "Pa" }, { name: "d\u017Cul", symbol: "J" }, { name: "wat", symbol: "W" }, { name: "kulomb", symbol: "C" }, { name: "wolt", symbol: "V" }, { name: "om", symbol: "\u03A9" }, { name: "tesla", symbol: "T" }, { name: "stopie\u0144 Celsjusza", symbol: "\xB0C" }, { name: "lumen", symbol: "lm" }, { name: "bekerel", symbol: "Bq" }, { name: "grej", symbol: "Gy" }, { name: "siwert", symbol: "Sv" }]);
var za = { chemicalElement: Q6, unit: Y7 };
var X6 = za;
var $5 = ["{{team.prefix}} {{address.city}}"];
var aa3 = ["GKS", "G\xF3rnik", "KS", "LZS", "Piast", "Pogo\u0144", "Polonia", "Ruch", "Stal", "Unia", "Zjednoczenie"];
var ua = { name: $5, prefix: aa3 };
var ia2 = ua;
var ya = { title: "Polish", address: d15, animal: p15, cell_phone: S12, color: K11, company: D14, internet: R8, lorem: A12, music: J8, name: U8, phone_number: V9, science: X6, team: ia2 };
var he2 = ya;

// ../../node_modules/@faker-js/faker/dist/esm/chunk-BDWC2LEF.mjs
init_esm_shims();
var a16 = ["#####", "####", "###"];
var e16 = ["{{address.city_prefix}} {{name.firstName}}{{address.city_suffix}}", "{{address.city_prefix}} {{name.firstName}}", "{{name.firstName}}{{address.city_suffix}}", "{{name.lastName}}{{address.city_suffix}}"];
var i16 = [];
var o16 = [" do Descoberto", " de Nossa Senhora", " do Norte", " do Sul"];
var r16 = ["Afeganist\xE3o", "Alb\xE2nia", "Alg\xE9ria", "Samoa", "Andorra", "Angola", "Anguila", "Antigua and Barbada", "Argentina", "Arm\xEAnia", "Aruba", "Austr\xE1lia", "\xC1ustria", "Azerbaij\xE3o", "Bahamas", "Bar\xE9m", "Bangladesh", "Barbados", "B\xE9lgica", "Belize", "Benin", "Bermuda", "But\xE3o", "Bol\xEDvia", "B\xF4snia", "Botsuana", "Ilha Bouvet", "Brasil", "Arquip\xE9lago de Chagos", "Ilhas Virgens", "Brunei", "Bulg\xE1ria", "Burkina Faso", "Burundi", "Camboja", "Camar\xF5es", "Canad\xE1", "Cabo Verde", "Ilhas Caiman", "Rep\xFAblica da \xC1frica Central", "Chade", "Chile", "China", "Ilha do Natal", "Ilhas Cocos", "Col\xF4mbia", "Comores", "Congo", "Ilhas Cook", "Costa Rica", "Costa do Marfim", "Cro\xE1cia", "Cuba", "Chipre", "Rep\xFAblica Tcheca", "Dinamarca", "Jibuti", "Dominica", "Rep\xFAblica Dominicana", "Equador", "Egito", "El Salvador", "Guin\xE9 Equatorial", "Eritreia", "Est\xF4nia", "Eti\xF3pia", "Ilhas Faroe", "Malvinas", "Fiji", "Finl\xE2ndia", "Fran\xE7a", "Guin\xE9 Francesa", "Polin\xE9sia Francesa", "Gab\xE3o", "G\xE2mbia", "Georgia", "Alemanha", "Gana", "Gibraltar", "Gr\xE9cia", "Groel\xE2ndia", "Granada", "Guadalupe", "Guatemala", "Guernesey", "Guin\xE9", "Guin\xE9-Bissau", "Guiana", "Haiti", "Ilhas Heard e McDonald", "Vaticano", "Honduras", "Hong Kong", "Hungria", "Isl\xE2ndia", "\xCDndia", "Indon\xE9sia", "Ir\xE3", "Iraque", "Irlanda", "Ilha de Man", "Israel", "It\xE1lia", "Jamaica", "Jap\xE3o", "Jersey", "Jord\xE2nia", "Cazaquist\xE3o", "Qu\xEAnia", "Quiribati", "Coreia do Norte", "Coreia do Sul", "Kuwait", "Quirguist\xE3o", "Laos", "Latvia", "L\xEDbano", "Lesoto", "Lib\xE9ria", "L\xEDbia", "Liechtenstein", "Litu\xE2nia", "Luxemburgo", "Macao", "Maced\xF4nia", "Madagascar", "Malawi", "Mal\xE1sia", "Maldives", "Mali", "Malta", "Ilhas Marshall", "Martinica", "Maurit\xE2nia", "Maur\xEDcia", "Maiote", "M\xE9xico", "Micron\xE9sia", "Mold\xE1via", "M\xF4naco", "Mong\xF3lia", "Montenegro", "Montserrat", "Marrocos", "Mo\xE7ambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Antilhas Holandesas", "Holanda", "Nova Caledonia", "Nova Zel\xE2ndia", "Nicar\xE1gua", "Nig\xE9ria", "Niue", "Ilha Norfolk", "Marianas Setentrionais", "Noruega", "Om\xE3", "Paquist\xE3o", "Palau", "Territ\xF3rio da Palestina", "Panam\xE1", "Papua-Nova Guin\xE9", "Paraguai", "Peru", "Filipinas", "Pol\xF4nia", "Portugal", "Porto Rico", "Qatar", "Rom\xEAnia", "R\xFAssia", "Ruanda", "S\xE3o Bartolomeu", "Santa Helena", "Santa L\xFAcia", "S\xE3o Martinho", "S\xE3o Pedro e Miquel\xE3o", "S\xE3o Vicente e Granadinas", "San Marino", "Sao Tom\xE9 e Pr\xEDncipe", "Ar\xE1bia Saudita", "Senegal", "S\xE9rvia", "Seicheles", "Serra Leoa", "Singapura", "Eslov\xE1quia", "Eslov\xEAnia", "Ilhas Salom\xE3o", "Som\xE1lia", "\xC1frica do Sul", "Ilhas Ge\xF3rgia do Sul e Sandwich do Sul", "Espanha", "Sri Lanka", "Sud\xE3o", "Suriname", "Ilhas Svalbard & Jan Mayen", "Suazil\xE2ndia", "Su\xE9cia", "Su\xED\xE7a", "S\xEDria", "Taiwan", "Tajiquist\xE3o", "Tanz\xE2nia", "Tail\xE2ndia", "Timor-Leste", "Togo", "Toquelau", "Tonga", "Trinidad e Tobago", "Tun\xEDsia", "Turquia", "Turcomenist\xE3o", "Turcas e Caicos", "Tuvalu", "Uganda", "Ucr\xE2nia", "Emirados \xC1rabes Unidos", "Reino Unido", "Estados Unidos da Am\xE9rica", "Estados Unidos das Ilhas Virgens", "Uruguai", "Uzbequist\xE3o", "Vanuatu", "Venezuela", "Vietn\xE3", "Wallis e Futuna", "I\xEAmen", "Z\xE2mbia", "Zimb\xE1bue"];
var t16 = ["Brasil"];
var n16 = ["#####-###"];
var l16 = ["Apto. ###", "Sobrado ##", "Casa #", "Lote ##", "Quadra ##"];
var s16 = ["Acre", "Alagoas", "Amap\xE1", "Amazonas", "Bahia", "Cear\xE1", "Distrito Federal", "Esp\xEDrito Santo", "Goi\xE1s", "Maranh\xE3o", "Mato Grosso", "Mato Grosso do Sul", "Minas Gerais", "Par\xE1", "Para\xEDba", "Paran\xE1", "Pernambuco", "Piau\xED", "Rio de Janeiro", "Rio Grande do Norte", "Rio Grande do Sul", "Rond\xF4nia", "Roraima", "Santa Catarina", "S\xE3o Paulo", "Sergipe", "Tocantins"];
var u16 = ["AC", "AL", "AP", "AM", "BA", "CE", "DF", "ES", "GO", "MA", "MT", "MS", "MG", "PA", "PB", "PR", "PE", "PI", "RJ", "RN", "RS", "RO", "RR", "SC", "SP", "SE", "TO"];
var m16 = ["{{name.firstName}} {{address.street_suffix}}", "{{name.lastName}} {{address.street_suffix}}"];
var d16 = ["Rua", "Avenida", "Travessa", "Alameda", "Marginal", "Rodovia"];
var V10 = { building_number: a16, city: e16, city_prefix: i16, city_suffix: o16, country: r16, default_country: t16, postcode: n16, secondary_address: l16, state: s16, state_abbr: u16, street: m16, street_suffix: d16 };
var c16 = V10;
var p16 = ["amarelo", "\xE2mbar", "ametista", "azul", "azul celeste", "azul marinho", "azul petr\xF3leo", "a\xE7afr\xE3o", "bord\xF4", "bronze", "caramelo", "castanho ", "cenoura", "cinza", "cobre", "coral", "dourado", "escarlate", "esmeralda", "ferrugem", "fuligem", "f\xFAchsia", "gren\xE1", "\xEDndigo", "jade", "laranja", "lil\xE1s", "lim\xE3o", "madeira", "magenta", "marrom", "ouro", "pele", "prata", "preto", "p\xFArpura", "rosa", "roxo", "salm\xE3o", "turquesa", "verde", "verde lima", "verde-azulado", "vermelho", "violeta"];
var Q7 = { human: p16 };
var f16 = Q7;
var b15 = ["Livros", "Filmes", "M\xFAsica", "Jogos", "Eletr\xF4nicos", "Computadores", "Casa", "Jardim", "Ferramentas", "Mercearia", "Sa\xFAde", "Beleza", "Brinquedos", "Crian\xE7as", "Beb\xEA", "Roupas", "Sapatos", "J\xF3ias", "Esportes", "Turismo", "Automotivo", "Industrial"];
var M12 = { adjective: ["Pequeno", "Ergon\xF4mico", "R\xFAstico", "Inteligente", "Lindo", "Incr\xEDvel", "Fant\xE1stico", "Pr\xE1tico", "Lustroso", "Impressionante", "Gen\xE9rico", "Feito \xE0 m\xE3o", "Licenciado", "Refinado", "Sem marca", "Gostoso"], material: ["A\xE7o", "Madeira", "Concreto", "Pl\xE1stico", "Algod\xE3o", "Granito", "Borracha", "Metal", "Macio", "Fresco", "Congelado"], product: ["Cadeira", "Carro", "Computador", "Teclado", "Mouse", "Bicicleta", "Bola", "Luvas", "Cal\xE7as", "Camiseta", "Mesa", "Sapatos", "Chap\xE9u", "Toalhas", "Sabonete", "Atum", "Frango", "Peixe", "Queijo", "Bacon", "Pizza", "Salada", "Salsicha", "Salgadinhos"] };
var O9 = { department: b15, product_name: M12 };
var g15 = O9;
var S13 = ["{{name.last_name}} {{company.suffix}}", "{{name.last_name}}-{{name.last_name}}", "{{name.last_name}}, {{name.last_name}} e {{name.last_name}}"];
var A13 = ["S.A.", "LTDA", "EIRELI", "e Associados", "Com\xE9rcio"];
var j9 = { name_patterns: S13, suffix: A13 };
var C11 = j9;
var v11 = { wide: ["Janeiro", "Fevereiro", "Mar\xE7o", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"], wide_context: ["Janeiro", "Fevereiro", "Mar\xE7o", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"], abbr: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"], abbr_context: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"] };
var h16 = { wide: ["Domingo", "Segunda", "Ter\xE7a", "Quarta", "Quinta", "Sexta", "S\xE1bado"], wide_context: ["Domingo", "Segunda", "Ter\xE7a", "Quarta", "Quinta", "Sexta", "S\xE1bado"], abbr: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "S\xE1b"], abbr_context: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "S\xE1b"] };
var w10 = { month: v11, weekday: h16 };
var x13 = w10;
var L12 = ["br", "com", "biz", "info", "name", "net", "org"];
var D15 = ["gmail.com", "yahoo.com", "hotmail.com", "live.com", "bol.com.br"];
var U9 = { domain_suffix: L12, free_email: D15 };
var P11 = U9;
var q8 = ["alias", "consequatur", "aut", "perferendis", "sit", "voluptatem", "accusantium", "doloremque", "aperiam", "eaque", "ipsa", "quae", "ab", "illo", "inventore", "veritatis", "et", "quasi", "architecto", "beatae", "vitae", "dicta", "sunt", "explicabo", "aspernatur", "odit", "fugit", "sed", "quia", "consequuntur", "magni", "dolores", "eos", "qui", "ratione", "sequi", "nesciunt", "neque", "dolorem", "ipsum", "dolor", "amet", "consectetur", "adipisci", "velit", "non", "numquam", "eius", "modi", "tempora", "incidunt", "ut", "labore", "dolore", "magnam", "aliquam", "quaerat", "enim", "ad", "minima", "veniam", "quis", "nostrum", "exercitationem", "ullam", "corporis", "nemo", "ipsam", "voluptas", "suscipit", "laboriosam", "nisi", "aliquid", "ex", "ea", "commodi", "autem", "vel", "eum", "iure", "reprehenderit", "in", "voluptate", "esse", "quam", "nihil", "molestiae", "iusto", "odio", "dignissimos", "ducimus", "blanditiis", "praesentium", "laudantium", "totam", "rem", "voluptatum", "deleniti", "atque", "corrupti", "quos", "quas", "molestias", "excepturi", "sint", "occaecati", "cupiditate", "provident", "perspiciatis", "unde", "omnis", "iste", "natus", "error", "similique", "culpa", "officia", "deserunt", "mollitia", "animi", "id", "est", "laborum", "dolorum", "fuga", "harum", "quidem", "rerum", "facilis", "expedita", "distinctio", "nam", "libero", "tempore", "cum", "soluta", "nobis", "eligendi", "optio", "cumque", "impedit", "quo", "porro", "quisquam", "minus", "quod", "maxime", "placeat", "facere", "possimus", "assumenda", "repellendus", "temporibus", "quibusdam", "illum", "fugiat", "nulla", "pariatur", "at", "vero", "accusamus", "officiis", "debitis", "necessitatibus", "saepe", "eveniet", "voluptates", "repudiandae", "recusandae", "itaque", "earum", "hic", "tenetur", "a", "sapiente", "delectus", "reiciendis", "voluptatibus", "maiores", "doloribus", "asperiores", "repellat"];
var Y8 = { words: q8 };
var I9 = Y8;
var B12 = ["Alessandra", "Alice", "Aline", "Al\xEDcia", "Ana Clara", "Ana J\xFAlia", "Ana Laura", "Ana Luiza", "Antonella", "Beatriz", "Bruna", "Carla", "Cec\xEDlia", "Clara", "C\xE9lia", "Dalila", "Eduarda", "Elisa", "Elo\xE1", "Emanuelly", "Esther", "Fabr\xEDcia", "Fel\xEDcia", "Giovanna", "Helena", "Helo\xEDsa", "Isabel", "Isabela", "Isabella", "Isabelly", "Isis", "Jana\xEDna", "Joana", "J\xFAlia", "Karla", "Lara", "Larissa", "Laura", "Lav\xEDnia", "Liz", "Lorena", "Lorraine", "Luiza", "L\xEDvia", "Mait\xEA", "Manuela", "Marcela", "Margarida", "Maria", "Maria Alice", "Maria Cec\xEDlia", "Maria Clara", "Maria Eduarda", "Maria Helena", "Maria J\xFAlia", "Maria Luiza", "Mariana", "Marina", "Marli", "Meire", "Melissa", "Morgana", "M\xE1rcia", "M\xE9rcia", "Nat\xE1lia", "N\xFAbia", "Of\xE9lia", "Paula", "Rafaela", "Rebeca", "Roberta", "Sara", "Sarah", "Sophia", "Su\xE9len", "S\xEDlvia", "Talita", "Valentina", "Vit\xF3ria", "Yasmin"];
var _12 = ["Alessandra", "Alessandro", "Alexandre", "Alice", "Aline", "Al\xEDcia", "Ana Clara", "Ana J\xFAlia", "Ana Laura", "Ana Luiza", "Anthony", "Antonella", "Ant\xF4nio", "Arthur", "Beatriz", "Benjamin", "Ben\xEDcio", "Bernardo", "Breno", "Bruna", "Bryan", "Caio", "Calebe", "Carla", "Carlos", "Cau\xE3", "Cec\xEDlia", "Clara", "C\xE9lia", "C\xE9sar", "Dalila", "Daniel", "Danilo", "Davi", "Davi Lucca", "Deneval", "Eduarda", "Eduardo", "Elisa", "Elo\xE1", "El\xEDsio", "Emanuel", "Emanuelly", "Enzo", "Enzo Gabriel", "Esther", "Fabiano", "Fabr\xEDcia", "Fabr\xEDcio", "Feliciano", "Felipe", "Fel\xEDcia", "Frederico", "F\xE1bio", "F\xE9lix", "Gabriel", "Gael", "Giovanna", "Guilherme", "Gustavo", "G\xFAbio", "Heitor", "Helena", "Helo\xEDsa", "Henrique", "Hugo", "H\xE9lio", "Isaac", "Isabel", "Isabela", "Isabella", "Isabelly", "Isadora", "Isis", "Jana\xEDna", "Joana", "Joaquim", "Jo\xE3o", "Jo\xE3o Lucas", "Jo\xE3o Miguel", "Jo\xE3o Pedro", "J\xFAlia", "J\xFAlio", "J\xFAlio C\xE9sar", "Karla", "Kl\xE9ber", "Ladislau", "Lara", "Larissa", "Laura", "Lav\xEDnia", "Leonardo", "Liz", "Lorena", "Lorenzo", "Lorraine", "Lucas", "Lucca", "Luiza", "L\xEDvia", "Mait\xEA", "Manuela", "Marcela", "Marcelo", "Marcos", "Margarida", "Maria", "Maria Alice", "Maria Cec\xEDlia", "Maria Clara", "Maria Eduarda", "Maria Helena", "Maria J\xFAlia", "Maria Luiza", "Mariana", "Marina", "Marli", "Matheus", "Meire", "Melissa", "Miguel", "Morgana", "Murilo", "M\xE1rcia", "M\xE9rcia", "Nataniel", "Nat\xE1lia", "Nicolas", "Noah", "Norberto", "N\xFAbia", "Of\xE9lia", "Pablo", "Paula", "Paulo", "Pedro", "Pedro Henrique", "Pietro", "Rafael", "Rafaela", "Raul", "Rebeca", "Ricardo", "Roberta", "Roberto", "Salvador", "Samuel", "Sara", "Sarah", "Silas", "Sirineu", "Sophia", "Su\xE9len", "S\xEDlvia", "Talita", "Tertuliano", "Th\xE9o", "Valentina", "Vicente", "Vitor", "Vit\xF3ria", "V\xEDctor", "Warley", "Washington", "Yago", "Yango", "Yasmin", "Yuri", "\xCDgor"];
var E9 = ["Silva", "Souza", "Carvalho", "Santos", "Reis", "Xavier", "Franco", "Braga", "Macedo", "Batista", "Barros", "Moraes", "Costa", "Pereira", "Melo", "Saraiva", "Nogueira", "Oliveira", "Martins", "Moreira", "Albuquerque"];
var J9 = ["Alessandro", "Alexandre", "Anthony", "Ant\xF4nio", "Arthur", "Benjamin", "Ben\xEDcio", "Bernardo", "Breno", "Bryan", "Caio", "Calebe", "Carlos", "Cau\xE3", "C\xE9sar", "Daniel", "Danilo", "Davi", "Davi Lucca", "Deneval", "Eduardo", "El\xEDsio", "Emanuel", "Enzo", "Enzo Gabriel", "Fabiano", "Fabr\xEDcio", "Feliciano", "Felipe", "Frederico", "F\xE1bio", "F\xE9lix", "Gabriel", "Gael", "Guilherme", "Gustavo", "G\xFAbio", "Heitor", "Henrique", "Hugo", "H\xE9lio", "Isaac", "Joaquim", "Jo\xE3o", "Jo\xE3o Lucas", "Jo\xE3o Miguel", "Jo\xE3o Pedro", "J\xFAlio", "J\xFAlio C\xE9sar", "Kl\xE9ber", "Ladislau", "Leonardo", "Lorenzo", "Lucas", "Lucca", "Marcelo", "Marcos", "Matheus", "Miguel", "Murilo", "Nataniel", "Nicolas", "Noah", "Norberto", "Pablo", "Paulo", "Pedro", "Pedro Henrique", "Pietro", "Rafael", "Raul", "Ricardo", "Roberto", "Salvador", "Samuel", "Silas", "Sirineu", "Tertuliano", "Th\xE9o", "Vicente", "Vitor", "V\xEDctor", "Warley", "Washington", "Yago", "Yango", "Yuri", "\xCDgor"];
var G11 = ["{{name.prefix}} {{name.first_name}} {{name.last_name}}", "{{name.first_name}} {{name.last_name}} {{name.suffix}}", "{{name.first_name}} {{name.last_name}}", "{{name.male_first_name}} {{name.last_name}}", "{{name.female_first_name}} {{name.last_name}}"];
var F10 = ["Sr.", "Sra.", "Srta.", "Dr.", "Dra."];
var N14 = ["Feminino", "Masculino"];
var R9 = ["Jr.", "Neto", "Filho"];
var y15 = { descriptor: ["L\xEDder", "Senior", "Direto", "Corporativo", "Din\xE2mico", "Futuro", "Produto", "Nacional", "Regional", "Distrito", "Central", "Global", "Cliente", "Investidor", "International", "Legado", "Avan\xE7ar", "Interno", "Humano", "Chefe", "Principal"], level: ["Solu\xE7\xF5es", "Programa", "Marca", "Seguran\xE7a", "Pesquisar", "Marketing", "Diretivas", "Implementation", "Implementa\xE7\xE3o", "Funcionalidade", "Resposta", "Paradigma", "T\xE1ticas", "Identidade", "Mercados", "Grupo", "Divis\xE3o", "Aplica\xE7\xF5es", "Otimiza\xE7\xE3o", "Opera\xE7\xF5es", "Infraestrutura", "Intranet", "Comunica\xE7\xF5es", "Web", "Branding", "Qualidade", "Assurance", "Mobilidade", "Contas", "Dados", "Criativo", "Configuration", "Presta\xE7\xE3o de contas", "Intera\xE7\xF5es", "Fatores", "Usabilidade", "M\xE9tricas"], job: ["Supervisor", "Associado", "Executivo", "Atentende", "Policial", "Gerente", "Engenheiro", "Especialista", "Diretor", "Coordenador", "Administrador", "Arquiteto", "Analista", "Designer", "Planejador", "Orquestrador", "T\xE9cnico", "Desenvolvedor", "Produtor", "Consultor", "Assistente", "Facilitador", "Agente", "Representante", "Estrategista"] };
var k13 = { female_first_name: B12, first_name: _12, last_name: E9, male_first_name: J9, name: G11, prefix: F10, sex: N14, suffix: R9, title: y15 };
var z12 = k13;
var T10 = ["(##) ####-####", "+55 (##) ####-####", "(##) #####-####"];
var K12 = { formats: T10 };
var H12 = K12;
var W8 = { title: "Portuguese (Brazil)", address: c16, color: f16, commerce: g15, company: C11, date: x13, internet: P11, lorem: I9, name: z12, phone_number: H12 };
var De2 = W8;

// ../../node_modules/@faker-js/faker/dist/esm/chunk-7M4JXUUT.mjs
init_esm_shims();
var a17 = ["####", "###", "##", "#"];
var e17 = ["{{address.city_name}}"];
var o17 = ["Abrantes", "Agualva-Cac\xE9m", "\xC1gueda", "Albufeira", "Alc\xE1cer do Sal", "Alcoba\xE7a", "Alfena", "Almada", "Almeirim", "Amadora", "Amarante", "Amora", "Anadia", "Angra do Hero\xEDsmo", "Aveiro", "Barcelos", "Barreiro", "Beja", "Braga", "Bragan\xE7a", "Caldas da Rainha", "C\xE2mara de Lobos", "Cani\xE7o", "Cantanhede", "Cartaxo", "Castelo Branco", "Chaves", "Coimbra", "Costa da Caparica", "Covilh\xE3", "Elvas", "Entroncamento", "Ermesinde", "Esmoriz", "Espinho", "Esposende", "Estarreja", "Estremoz", "\xC9vora", "Fafe", "Faro", "F\xE1tima", "Felgueiras", "Fi\xE3es", "Figueira da Foz", "Freamunde", "Funchal", "Fund\xE3o", "Gafanha da Nazar\xE9", "Gandra", "Gondomar", "Gouveia", "Guarda", "Guimar\xE3es", "Horta", "\xCDlhavo", "Lagoa", "Lagos", "Lamego", "Leiria", "Lisbon", "Lixa", "Loul\xE9", "Loures", "Lourosa", "Macedo de Cavaleiros", "Machico", "Maia", "Mangualde", "Marco de Canaveses", "Marinha Grande", "Matosinhos", "Mealhada", "M\xEAda", "Miranda do Douro", "Mirandela", "Montemor-o-Novo", "Montijo", "Moura", "Odivelas", "Olh\xE3o da Restaura\xE7\xE3o", "Oliveira de Azem\xE9is", "Oliveira do Bairro", "Oliveira do Hospital", "Our\xE9m", "Ovar", "Pa\xE7os de Ferreira", "Paredes", "Penafiel", "Peniche", "Peso da R\xE9gua", "Pinhel", "Pombal", "Ponta Delgada", "Ponte de Sor", "Portalegre", "Portim\xE3o", "Porto", "P\xF3voa de Santa Iria", "P\xF3voa de Varzim", "Praia da Vit\xF3ria", "Quarteira", "Queluz", "Rebordosa", "Reguengos de Monsaraz", "Ribeira Grande", "Rio Maior", "Rio Tinto", "Sabugal", "Sacav\xE9m", "Santa Comba D\xE3o", "Santa Cruz", "Santa Maria da Feira", "Santana", "Santar\xE9m", "Santiago do Cac\xE9m", "Santo Tirso", "S\xE3o Jo\xE3o da Madeira", "S\xE3o Mamede de Infesta", "S\xE3o Salvador de Lordelo", "Seia", "Seixal", "Serpa", "Set\xFAbal", "Silves", "Sines", "Tarouca", "Tavira", "Tomar", "Tondela", "Torres Novas", "Torres Vedras", "Trancoso", "Trofa", "Valbom", "Vale de Cambra", "Valongo", "Valpa\xE7os", "Vendas Novas", "Viana do Castelo", "Vila Baleira (a.k.a. Porto Santo)", "Vila do Conde", "Vila Franca de Xira", "Vila Nova de Famalic\xE3o", "Vila Nova de Foz C\xF4a", "Vila Nova de Gaia", "Vila Nova de Santo Andr\xE9", "Vila Real", "Vila Real de Santo Ant\xF3nio", "Viseu", "Vizela"];
var r17 = [];
var i17 = [];
var n17 = ["\xC1frica do Sul", "\xC1ustria", "\xCDndia", "Afeganist\xE3o", "Alb\xE2nia", "Alemanha", "Andorra", "Angola", "Anguila", "Ant\xE1rctida", "Ant\xEDgua e Barbuda", "Antilhas Neerlandesas", "Ar\xE1bia Saudita", "Arg\xE9lia", "Argentina", "Arm\xE9nia", "Aruba", "Austr\xE1lia", "Azerbaij\xE3o", "B\xE9lgica", "B\xF3snia e Herzegovina", "Baamas", "Bangladeche", "Bar\xE9m", "Barbados", "Belize", "Benim", "Bermudas", "Bielorr\xFAssia", "Birm\xE2nia", "Bol\xEDvia", "Botsuana", "Brasil", "Brunei", "Bulg\xE1ria", "Bur\xFAndi", "Burquina Faso", "But\xE3o", "Cabo Verde", "Camar\xF5es", "Camboja", "Canad\xE1", "Catar", "Cazaquist\xE3o", "Chade", "Chile", "China", "Chipre", "Col\xF4mbia", "Comores", "Congo-Brazzaville", "Congo-Kinshasa", "Coreia do Norte", "Coreia do Sul", "Costa Rica", "Costa do Marfim", "Cro\xE1cia", "Cuba", "Dinamarca", "Dom\xEDnica", "Egipto", "Emiratos \xC1rabes Unidos", "Equador", "Eritreia", "Eslov\xE1quia", "Eslov\xE9nia", "Espanha", "Est\xF3nia", "Estados Unidos", "Eti\xF3pia", "Faro\xE9", "Fiji", "Filipinas", "Finl\xE2ndia", "Fran\xE7a", "G\xE2mbia", "Gab\xE3o", "Gana", "Ge\xF3rgia", "Ge\xF3rgia do Sul e Sandwich do Sul", "Gibraltar", "Gr\xE9cia", "Granada", "Gronel\xE2ndia", "Guadalupe", "Guame", "Guatemala", "Guiana", "Guiana Francesa", "Guin\xE9", "Guin\xE9 Equatorial", "Guin\xE9-Bissau", "Haiti", "Honduras", "Hong Kong", "Hungria", "I\xE9men", "Ilha Bouvet", "Ilha Norfolk", "Ilha do Natal", "Ilhas Caim\xE3o", "Ilhas Cook", "Ilhas Falkland", "Ilhas Heard e McDonald", "Ilhas Marshall", "Ilhas Menores Distantes dos Estados Unidos", "Ilhas Salom\xE3o", "Ilhas Turcas e Caicos", "Ilhas Virgens Americanas", "Ilhas Virgens Brit\xE2nicas", "Ilhas dos Cocos", "Indon\xE9sia", "Ir\xE3o", "Iraque", "Irlanda", "Isl\xE2ndia", "Israel", "It\xE1lia", "Jamaica", "Jap\xE3o", "Jibuti", "Jord\xE2nia", "Jugosl\xE1via", "Kuwait", "L\xEDbano", "L\xEDbia", "Laos", "Lesoto", "Let\xF3nia", "Lib\xE9ria", "Listenstaine", "Litu\xE2nia", "Luxemburgo", "M\xE9xico", "M\xF3naco", "Macau", "Maced\xF3nia", "Madag\xE1scar", "Mal\xE1sia", "Mal\xE1vi", "Maldivas", "Mali", "Malta", "Marianas do Norte", "Marrocos", "Martinica", "Maur\xEDcia", "Maurit\xE2nia", "Mayotte", "Micron\xE9sia", "Mo\xE7ambique", "Mold\xE1via", "Mong\xF3lia", "Monserrate", "N\xEDger", "Nam\xEDbia", "Nauru", "Nepal", "Nicar\xE1gua", "Nig\xE9ria", "Niue", "Noruega", "Nova Caled\xF3nia", "Nova Zel\xE2ndia", "Om\xE3", "Pa\xEDses Baixos", "Palau", "Panam\xE1", "Papua-Nova Guin\xE9", "Paquist\xE3o", "Paraguai", "Peru", "Pitcairn", "Pol\xF3nia", "Polin\xE9sia Francesa", "Porto Rico", "Portugal", "Qu\xE9nia", "Quirguizist\xE3o", "Quirib\xE1ti", "R\xFAssia", "Reino Unido", "Rep\xFAblica Centro-Africana", "Rep\xFAblica Checa", "Rep\xFAblica Dominicana", "Reuni\xE3o", "Rom\xE9nia", "Ruanda", "S\xE3o Crist\xF3v\xE3o e Neves", "S\xE3o Marinho", "S\xE3o Pedro e Miquelon", "S\xE3o Tom\xE9 e Pr\xEDncipe", "S\xE3o Vicente e Granadinas", "S\xEDria", "Salvador", "Samoa", "Samoa Americana", "Santa Helena", "Santa L\xFAcia", "Sara Ocidental", "Seicheles", "Senegal", "Serra Leoa", "Singapura", "Som\xE1lia", "Sri Lanca", "Su\xE9cia", "Su\xED\xE7a", "Suazil\xE2ndia", "Sud\xE3o", "Suriname", "Svalbard e Jan Mayen", "Tail\xE2ndia", "Taiwan", "Tajiquist\xE3o", "Tanz\xE2nia", "Territ\xF3rio Brit\xE2nico do Oceano \xCDndico", "Territ\xF3rios Austrais Franceses", "Timor Leste", "Togo", "Tokelau", "Tonga", "Trindade e Tobago", "Tun\xEDsia", "Turquemenist\xE3o", "Turquia", "Tuvalu", "Ucr\xE2nia", "Uganda", "Uruguai", "Usbequist\xE3o", "Vanuatu", "Vaticano", "Venezuela", "Vietname", "Wallis e Futuna", "Z\xE2mbia", "Zimbabu\xE9"];
var t17 = ["Portugal"];
var s17 = ["Norte", "Este", "Sul", "Oeste", "Nordeste", "Noroeste", "Sudeste", "Sodoeste"];
var l17 = ["####-###"];
var m17 = ["{{address.street_prefix}} {{name.first_name}} {{name.last_name}}", "N#", "N##", "N###", "N###-#"];
var u17 = { normal: "{{address.street}} {{address.buildingNumber}}", full: "{{address.street}} {{address.buildingNumber}} {{address.secondaryAddress}}" };
var d17 = ["Acesso", "Alameda", "Avenida", "Azinhaga", "Bairro", "Beco", "Cal\xE7ada", "Caminho", "Escadas", "Estrada", "Jardim", "Ladeira", "Largo", "Pra\xE7a", "Praceta", "Quinta", "Rua", "Travessa", "Urbaniza\xE7\xE3o", "Viela"];
var z13 = { building_number: a17, city: e17, city_name: o17, city_prefix: r17, city_suffix: i17, country: n17, default_country: t17, direction: s17, postcode: l17, street: m17, street_address: u17, street_prefix: d17 };
var c17 = z13;
var f17 = ["+351 91#######", "+351 93#######", "+351 96#######"];
var q9 = { formats: f17 };
var p17 = q9;
var M13 = ["vermelho", "verde", "azul", "amarelo", "roxo", "branco", "preto", "laranja", "rosa", "cinzento", "castanho", "violeta", "turquesa", "bronzeado", "salm\xE3o", "ameixa", "orqu\xEDdea", "magenta", "lima", "marfim", "\xEDndigo", "ouro", "f\xFAcsia", "ciano", "azure", "lavanda", "prata"];
var y16 = { human: M13 };
var g16 = y16;
var S14 = ["Livros", "Filmes", "M\xFAsica", "Jogos", "Electr\xF3nica", "Computadores", "Casa", "Jardim", "Ferramentas", "Mercearia", "Sa\xFAde", "Beleza", "Brinquedos", "Crian\xE7as", "Beb\xE9", "Roupas", "Sapatos", "J\xF3ias", "Desporto", "Ar Livre", "Autom\xF3veis", "Industrial"];
var C12 = { adjective: ["Pequeno", "Ergon\xF3mico", "R\xFAstico", "Inteligente", "Linda", "Incr\xEDvel", "Fant\xE1stico", "Pr\xE1tico", "Lustroso", "Impressionante", "Gen\xE9rico", "Artesanal", "Feito \xE0 M\xE3o", "Licenciado", "Refinado", "Sem Marca", "Saboroso"], material: ["A\xE7o", "Madeira", "Bet\xE3o", "Pl\xE1stico", "Algod\xE3o", "Granito", "Borracha", "Metal", "Suave", "Fresco", "Congelado"], product: ["Cadeira", "Carro", "Computador", "Teclado", "Rato", "Bicicleta", "Bola", "Luvas", "Cal\xE7as", "Camisa", "Mesa", "Sapatos", "Chap\xE9u", "Toalhas", "Sabonete", "Atum", "Frango", "Peixe", "Queijo", "Bacon", "Pizza", "Salada", "Salsichas", "Batatas Fritas"] };
var H13 = { department: S14, product_name: C12 };
var b16 = H13;
var v12 = { wide: ["Janeiro", "Fevereiro", "Mar\xE7o", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"], abbr: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"] };
var A14 = { wide: ["Segunda", "Ter\xE7a", "Quarta", "Quinta", "Sexta", "S\xE1bado", "Domingo"], abbr: ["Seg", "Ter", "Qua", "Qui", "Sex", "S\xE1b", "Dom"] };
var O10 = { month: v12, weekday: A14 };
var h17 = O10;
var L13 = ["pt", "gov.pt", "com.pt", "org.pt", "eu", "com", "biz", "info", "name", "net", "org"];
var x14 = ["gmail.com", "yahoo.com", "hotmail.com", "outlook.com", "live.com", "portugalmail.pt", "mail.pt", "sapo.pt", "aeiou.pt"];
var j10 = { domain_suffix: L13, free_email: x14 };
var B13 = j10;
var F11 = ["Adriana", "Alexandra", "Alice", "Am\xE9lia", "Ana", "Ariana", "\xC1urea", "Aurora", "B\xE1rbara", "Beatriz", "Benedita", "Bruna", "Caetana", "Camila", "Carla", "Carlota", "Carminho", "Carmo", "Carolina", "Catarina", "Cec\xEDlia", "C\xE9lia", "Clara", "Constan\xE7a", "Daniela", "D\xE9bora", "Diana", "Eduarda", "Elisa", "Ema", "Em\xEDlia", "\xC9rica", "Eva", "Fabiana", "Filipa", "Flor", "Francisca", "Frederica", "Gabriela", "Helena", "In\xEAs", "Irina", "\xCDris", "Isabel", "J\xE9ssica", "Joana", "J\xFAlia", "Juliana", "Julieta", "Lara", "Laura", "Leonor", "Let\xEDcia", "Lia", "Lorena", "Luana", "Luena", "Lu\xEDsa", "Luna", "Madalena", "Mafalda", "Mara", "M\xE1rcia", "Margarida", "Maria", "Mariana", "Marta", "Matilde", "Melissa", "Mia", "Miriam", "Nat\xE1lia", "Nicole", "N\xFAria", "Of\xE9lia", "Ol\xEDvia", "Paula", "Pilar", "Rafaela", "Raquel", "Rita", "Rosa", "Safira", "Sara", "S\xEDlvia", "Sofia", "Soraia", "Tatiana", "Teresa", "Valentina", "V\xE2nia", "Vera", "Vit\xF3ria"];
var P12 = ["Sra.", "Dra.", "Prof.\xAA", "Eng.\xAA"];
var R10 = ["Adriana", "Afonso", "Alexandra", "Alexandre", "Alice", "Am\xE9lia", "Ana", "Andr\xE9", "\xC2ngelo", "Ant\xF3nio", "Ariana", "Artur", "\xC1urea", "Aurora", "B\xE1rbara", "Beatriz", "Benedita", "Benjamim", "Bernardo", "Bruna", "Bruno", "Caetana", "Camila", "Carla", "Carlos", "Carlota", "Carminho", "Carmo", "Carolina", "Catarina", "Cec\xEDlia", "C\xE9lia", "C\xE9sar", "Clara", "Constan\xE7a", "Cristiano", "Daniel", "Daniela", "David", "D\xE9bora", "Diana", "Dinis", "Diogo", "Duarte", "Edgar", "Eduarda", "Eduardo", "Elias", "Elisa", "Ema", "Emanuel", "Em\xEDlia", "\xC9rica", "Eva", "Fabiana", "F\xE1bio", "Feliciano", "Fernando", "Filipa", "Filipe", "Flor", "Francisca", "Francisco", "Frederica", "Frederico", "Gabriel", "Gabriela", "Gaspar", "Gil", "Gon\xE7alo", "Guilherme", "Gustavo", "Helena", "H\xE9lio", "Henrique", "Hugo", "Igor", "\xCDgor", "In\xEAs", "Irina", "\xCDris", "Isabel", "Isac", "Ivan", "Ivo", "Jaime", "J\xE9ssica", "Joana", "Jo\xE3o", "Joaquim", "Jorge", "Jos\xE9", "Josu\xE9", "J\xFAlia", "Juliana", "Julieta", "J\xFAlio", "Lara", "Laura", "Leandro", "Leonardo", "Leonor", "Let\xEDcia", "Lia", "Lorena", "Louren\xE7o", "Luana", "Lucas", "Luena", "Lu\xEDs", "Lu\xEDsa", "Luna", "Madalena", "Mafalda", "Manel", "Manuel", "Mara", "Marcelo", "M\xE1rcia", "Marco", "Marcos", "Margarida", "Maria", "Mariana", "M\xE1rio", "Marta", "Martim", "Mateus", "Matias", "Matilde", "Mauro", "Melissa", "Mia", "Micael", "Miguel", "Miriam", "Mois\xE9s", "Nat\xE1lia", "Nicole", "Norberto", "Nuno", "N\xFAria", "Of\xE9lia", "Ol\xEDvia", "Paula", "Paulo", "Pedro", "Pilar", "Rafael", "Rafaela", "Raquel", "Raul", "Renato", "Ricardo", "Rita", "Roberto", "Rodrigo", "Romeu", "Rosa", "R\xFAben", "Rui", "Safira", "Salvador", "Samuel", "Sandro", "Santiago", "Sara", "Sebasti\xE3o", "S\xE9rgio", "S\xEDlvia", "Sim\xE3o", "Sofia", "Soraia", "Tatiana", "Teresa", "Tiago", "Tom\xE1s", "Tom\xE9", "Valentim", "Valentina", "Valter", "V\xE2nia", "Vasco", "Vera", "Vicente", "V\xEDtor", "Vit\xF3ria", "Xavier"];
var N15 = ["Abreu", "Albuquerque", "Almeida", "Alves", "Amaral", "Amorim", "Andrade", "Anjos", "Antunes", "Ara\xFAjo", "Assun\xE7\xE3o", "Azevedo", "Baptista", "Barbosa", "Barros", "Batista", "Borges", "Braga", "Branco", "Brito", "Campos", "Cardoso", "Carneiro", "Carvalho", "Castro", "Coelho", "Correia", "Costa", "Cruz", "Cunha", "Domingues", "Esteves", "Faria", "Fernandes", "Ferreira", "Figueiredo", "Fonseca", "Freitas", "Garcia", "Gaspar", "Gomes", "Gon\xE7alves", "Guerreiro", "Henriques", "Jesus", "Leal", "Leite", "Lima", "Lopes", "Loureiro", "Louren\xE7o", "Macedo", "Machado", "Magalh\xE3es", "Maia", "Marques", "Martins", "Matias", "Matos", "Melo", "Mendes", "Miranda", "Monteiro", "Morais", "Moreira", "Mota", "Moura", "Nascimento", "Neto", "Neves", "Nobre", "Nogueira", "Nunes", "Oliveira", "Pacheco", "Paiva", "Pereira", "Pinheiro", "Pinho", "Pinto", "Pires", "Ramos", "Raposo", "Reis", "Ribeiro", "Rocha", "Rodrigues", "Santos", "Saraiva", "Silva", "Sim\xF5es", "Soares", "Sousa", "S\xE1", "Tavares", "Teixeira", "Torres", "Valente", "Vaz", "Vicente", "Vieira"];
var V11 = ["Afonso", "Alexandre", "Andr\xE9", "\xC2ngelo", "Ant\xF3nio", "Artur", "Benjamim", "Bernardo", "Bruno", "Carlos", "C\xE9sar", "Cristiano", "Daniel", "David", "Dinis", "Diogo", "Duarte", "Edgar", "Eduardo", "Elias", "Emanuel", "F\xE1bio", "Feliciano", "Fernando", "Filipe", "Francisco", "Frederico", "Gabriel", "Gaspar", "Gil", "Gon\xE7alo", "Guilherme", "Gustavo", "H\xE9lio", "Henrique", "Hugo", "Igor", "\xCDgor", "Isac", "Ivan", "Ivo", "Jaime", "Jo\xE3o", "Joaquim", "Jorge", "Jos\xE9", "Josu\xE9", "J\xFAlio", "Leandro", "Leonardo", "Louren\xE7o", "Lucas", "Lu\xEDs", "Manel", "Manuel", "Marcelo", "Marco", "Marcos", "M\xE1rio", "Martim", "Mateus", "Matias", "Mauro", "Micael", "Miguel", "Mois\xE9s", "Norberto", "Nuno", "Paulo", "Pedro", "Rafael", "Raul", "Renato", "Ricardo", "Roberto", "Rodrigo", "Romeu", "R\xFAben", "Rui", "Salvador", "Samuel", "Sandro", "Santiago", "Sebasti\xE3o", "S\xE9rgio", "Sim\xE3o", "Tiago", "Tom\xE1s", "Tom\xE9", "Valentim", "Valter", "Vasco", "Vicente", "V\xEDtor", "Xavier"];
var D16 = ["Sr.", "Dr.", "Prof.", "Eng.\xBA"];
var G12 = ["{{name.first_name}} {{name.last_name}}", "{{name.male_first_name}} {{name.last_name}}", "{{name.female_first_name}} {{name.last_name}}", "{{name.male_prefix}} {{name.male_first_name}} {{name.last_name}}", "{{name.female_prefix}} {{name.female_first_name}} {{name.last_name}}"];
var T11 = ["{{name.female_prefix}}", "{{name.male_prefix}}"];
var _13 = [];
var Q8 = { female_first_name: F11, female_prefix: P12, first_name: R10, last_name: N15, male_first_name: V11, male_prefix: D16, name: G12, prefix: T11, suffix: _13 };
var E10 = Q8;
var I10 = ["+351 2########", "+351 3########", "+351 91#######", "+351 92#######", "+351 93#######", "+351 96#######"];
var U10 = { formats: I10 };
var J10 = U10;
var k14 = { title: "Portuguese (Portugal)", address: c17, cell_phone: p17, color: g16, commerce: b16, date: h17, internet: B13, name: E10, phone_number: J10 };
var Me = k14;

// ../../node_modules/@faker-js/faker/dist/esm/chunk-FCSWVLM3.mjs
init_esm_shims();
var a18 = ["Bloc ##"];
var i18 = ["{{address.city_prefix}} {{name.firstName}}{{address.city_suffix}}", "{{address.city_prefix}} {{name.firstName}}", "{{name.firstName}}{{address.city_suffix}}", "{{name.lastName}}{{address.city_suffix}}", "{{address.city_name}}"];
var e18 = ["Bucure\u0219ti", "Cluj-Napoca", "Timi\u0219oara", "Ia\u0219i", "Constan\u021Ba", "Craiova", "Bra\u0219ov", "Gala\u021Bi", "Ploie\u0219ti", "Oradea", "Br\u0103ila", "Arad", "Pite\u0219ti", "Sibiu", "Bac\u0103u", "T\xE2rgu Mure\u0219", "Baia Mare", "Buz\u0103u", "Boto\u0219ani", "Satu Mare", "R\xE2mnicu V\xE2lcea", "Drobeta-Turnu Severin", "Suceava", "Piatra Neam\u021B", "T\xE2rgu Jiu", "T\xE2rgovi\u0219te", "Foc\u0219ani", "Bistri\u021Ba", "Re\u0219i\u021Ba", "Tulcea", "C\u0103l\u0103ra\u0219i", "Alba Iulia", "Giurgiu", "Deva", "Hunedoara", "Zal\u0103u", "Sf\xE2ntu Gheorghe", "B\xE2rlad", "Vaslui", "1387", "Slobozia", "Turda", "Media\u0219", "Voluntari", "Lugoj", "Medgidia", "One\u0219ti", "Miercurea Ciuc", "Sighetu Marma\u021Biei", "Petro\u0219ani", "Mangalia", "Tecuci", "R\xE2mnicu S\u0103rat", "Pa\u0219cani", "Dej", "Reghin", "N\u0103vodari", "Odorheiu Secuiesc", "C\xE2mpina", "Mioveni", "C\xE2mpulung", "Caracal", "S\u0103cele", "F\u0103g\u0103ra\u0219", "Fete\u0219ti", "Sighi\u0219oara", "Bor\u0219a", "Ro\u0219iorii de Vede", "Curtea de Arge\u0219", "Sebe\u0219", "Hu\u0219i", "F\u0103lticeni", "Pantelimon", "Olteni\u021Ba", "Turnu M\u0103gurele", "Caransebe\u0219", "Dorohoi", "R\u0103d\u0103u\u021Bi", "Z\u0103rne\u0219ti", "Lupeni", "Aiud", "Petrila", "Buftea", "Moine\u0219ti", "T\xE2rn\u0103veni", "C\xE2mpia Turzii", "Pope\u0219ti-Leordeni", "Gherla", "Carei", "Cugir", "Blaj", "Codlea", "Com\u0103ne\u0219ti", "T\xE2rgu Neam\u021B", "Motru", "T\xE2rgu Secuiesc", "Moreni", "Gheorgheni", "B\u0103icoi", "Or\u0103\u0219tie", "Salonta", "Bal\u0219", "Dr\u0103g\u0103\u0219ani", "B\u0103ile\u0219ti", "Calafat", "Filia\u0219i", "Cernavod\u0103", "C\xE2mpulung Moldovenesc", "Breaza", "Marghita", "Baia Sprie", "Ludu\u0219", "Corabia", "Adjud", "Vi\u0219eu de Sus", "Bragadiru", "Boc\u0219a", "R\xE2\u0219nov", "Urziceni", "Pucioasa", "Vatra Dornei", "Cisn\u0103die", "Mizil", "Topli\u021Ba", "Chitila", "\u0218imleu Silvaniei", "Buhu\u0219i", "Vicovu de Sus", "Zimnicea", "G\u0103e\u0219ti", "Gura Humorului", "Otopeni", "Ocna Mure\u0219", "Avrig", "Simeria", "Pecica", "D\u0103buleni", "Bolintin-Vale", "Rovinari", "Comarnic", "V\u0103lenii de Munte", "S\xE2nnicolau Mare", "D\u0103rm\u0103ne\u0219ti", "Moldova Nou\u0103", "T\xE2rgu L\u0103pu\u0219", "S\u0103cueni", "Videle", "Scornice\u0219ti", "Bolde\u0219ti-Sc\u0103eni", "S\xE2ntana", "T\xE2rgu Ocna", "M\u0103gurele", "C\u0103lan", "Beclean", "\u021A\u0103nd\u0103rei", "Sovata", "Oravi\u021Ba", "Jibou", "Urla\u021Bi", "H\xE2rl\u0103u", "Beiu\u0219", "Ianca", "Jimbolia", "Topoloveni", "Dr\u0103g\u0103ne\u0219ti-Olt", "Sinaia", "Nehoiu", "Covasna", "Negre\u0219ti-Oa\u0219", "Strehaia", "Dolhasca", "Or\u0219ova", "Valea lui Mihai", "Murfatlar", "Ale\u0219d", "Darabani", "Cristuru Secuiesc", "Fl\u0103m\xE2nzi", "M\u0103r\u0103\u0219e\u0219ti", "S\xE2ngeorz-B\u0103i", "Liteni", "T\xE2rgu Frumos", "Titu", "Ha\u021Beg", "O\u021Belu Ro\u0219u", "Ineu", "N\u0103s\u0103ud", "Huedin", "Odobe\u0219ti", "H\xE2r\u0219ova", "Bumbe\u0219ti-Jiu", "Seini", "Salcea", "Podu Iloaiei", "Eforie", "Uricani", "Baraolt", "Bu\u0219teni", "T\u0103\u0219nad", "Iernut", "Agnita", "Babadag", "B\u0103beni", "T\xE2rgu C\u0103rbune\u0219ti", "Negre\u0219ti", "Reca\u0219", "Siret", "M\u0103cin", "Chi\u0219ineu-Cri\u0219", "Plopeni", "Mih\u0103ile\u0219ti", "\u0218omcuta Mare", "Fieni", "\xCEntorsura Buz\u0103ului", "C\u0103lim\u0103ne\u0219ti", "Panciu", "N\u0103dlac", "Zlatna", "P\u0103t\xE2rlagele", "Cehu Silvaniei", "Amara", "Bude\u0219ti", "Anina", "Dumbr\u0103veni", "C\xE2mpeni", "Pogoanele", "T\u0103u\u021Bii-M\u0103gher\u0103u\u0219", "Tismana", "Curtici", "Techirghiol", "S\u0103rma\u0219u", "Vl\u0103hi\u021Ba", "Cajvana", "S\u0103veni", "Segarcea", "P\xE2ncota", "R\u0103cari", "F\u0103get", "T\u0103lmaciu", "Buzia\u0219", "Fundulea", "Murgeni", "Teiu\u0219", "\xCEnsur\u0103\u021Bei", "Bicaz", "T\xE2rgu Bujor", "\u0218tei", "Lehliu Gar\u0103", "Horezu", "Deta", "Sl\u0103nic", "Piatra-Olt", "Ardud", "B\u0103lan", "Sebi\u0219", "Brezoi", "Potcoava", "G\u0103taia", "Novaci", "Miercurea Nirajului", "Baia de Aram\u0103", "Cop\u0219a Mic\u0103", "V\xE2nju Mare", "S\xE2ngeorgiu de P\u0103dure", "Geoagiu", "S\u0103li\u0219te", "Ciacova", "Rupea", "Mili\u0219\u0103u\u021Bi", "Isaccea", "Abrud", "Fierbin\u021Bi-T\xE2rg", "Cavnic", "S\u0103li\u0219tea de Sus", "B\u0103ile Herculane", "B\u0103lce\u0219ti", "Berbe\u0219ti", "Ghimbav", "Predeal", "\u021Aicleni", "Azuga", "Aninoasa", "Bucecea", "B\u0103ile Ol\u0103ne\u0219ti", "Sl\u0103nic Moldova", "Miercurea Sibiului", "Sulina", "Baia de Arie\u0219", "F\u0103urei", "Ocna Sibiului", "Bechet", "C\u0103z\u0103ne\u0219ti", "Ocnele Mari", "Bere\u0219ti", "Borsec", "B\u0103ile Govora", "Va\u0219c\u0103u", "Nucet", "Solca", "B\u0103ile Tu\u0219nad"];
var r18 = ["Alba", "Arad", "Arges", "Bacau", "Bihor", "Bistrita-Nasaud", "Botosani", "Braila", "Brasov", "Bucuresti", "Buzau", "Calarasi", "Caras-Severin", "Cluj", "Constanta", "Covasna", "Dambovita", "Dolj", "Galati", "Giurgiu", "Gorj", "Harghita", "Hunedoara", "Ialomita", "Iasi", "Ilfov", "Maramures", "Mehedinti", "Mures", "Neamt", "Olt", "Prahova", "Salaj", "Satu-Mare", "Sibiu", "Suceava", "Teleorman", "Timis", "Tulcea", "Valcea", "Vaslui", "Vrancea"];
var n18 = ["Rom\xE2nia"];
var o18 = ["######"];
var u18 = ["Ap. ##", "Ap. ###"];
var t18 = ["Alba", "Arad", "Arges", "Bacau", "Bihor", "Bistrita-Nasaud", "Botosani", "Braila", "Brasov", "Bucuresti", "Buzau", "Calarasi", "Caras-Severin", "Cluj", "Constanta", "Covasna", "Dambovita", "Dolj", "Galati", "Giurgiu", "Gorj", "Harghita", "Hunedoara", "Ialomita", "Iasi", "Ilfov", "Maramures", "Mehedinti", "Mures", "Neamt", "Olt", "Prahova", "Salaj", "Satu-Mare", "Sibiu", "Suceava", "Teleorman", "Timis", "Tulcea", "Valcea", "Vaslui", "Vrancea"];
var l18 = ["AB", "AR", "AG", "BC", "BH", "BN", "BT", "BR", "BV", "B", "BZ", "CL", "CS", "CJ", "CT", "CV", "DB", "DJ", "GL", "GR", "GJ", "HR", "HD", "IL", "IS", "IF", "MM", "MH", "MS", "NT", "OT", "PH", "SJ", "SM", "SB", "SV", "TR", "TM", "TL", "VL", "VS", "VN"];
var c18 = ["{{address.street_suffix}} {{address.street_name}}"];
var m18 = { normal: "{{address.street}}, {{address.buildingNumber}}", full: "{{address.street}}, {{address.buildingNumber}}, {{address.secondaryAddress}}" };
var s18 = ["Capalna", "Gheorghe Duca", "Acvila", "Lisabona", "Campulung", "Ilie Gurita", "Succesului", "Siret", "Mihai Viteazul", "Complexului", "Chihlimbarului", "Prahova", "George Cosbuc", "Bobalna", "Eroina De La Jiu", "Cucuzel Ion", "Sergent Turturica", "Timisul De Sus", "Tuberozelor", "Rulmentului", "Soldat Polosca Tanase", "Nabucului", "Flautului", "Poiana Codrului", "Daia", "Soldat Dima Dumitru", "Bulandra Tony", "Pastravilor", "Eternitatii", "Tufanilor", "Discului", "Garnitei", "Costaforu", "Aerogarii", "Preluca", "Delureni", "Soldat Velicu Stefan", "Ocalei", "Calboranu George", "Cercelus", "Timocului", "Alexandru Locusteanu", "Pumnul Aron", "Migdalului", "Valului", "Inginer Radu Elie", "Cricovului", "Mavrogheni", "Bauxitei", "Movilitei", "Pictor Hentia Sava", "Abus", "Fieni", "Zambetului", "Izvorul Muresului", "Rolei", "Utiesului", "Gheorghe Popescu", "Radulescu Drumea", "Sacele", "Soimarestilor", "Romeo", "Voicesti", "Carada Eugeniu", "Barometrului", "Tudorache Gheorghe", "Morii", "Jules Michelet", "Nicolae G. Caranfil", "Sergent Anghel Gheorghe", "Reconstructiei", "Vespasian", "Tincani", "Stirbei Voda", "Ariesu Mare", "Penelului", "Piscul Vechi", "Natiunile Unite", "Doctor Tanasescu Ion", "Stefan Greceanu", "Banul Scarlat", "Crinului", "Domnita Florica", "Plutonier Nita Ion", "Soldat Ionita Stere", "Rovine", "Tropicelor", "Matei Millo", "Veronica Micle", "Pictor Iser Iosif", "Mitropolit Nifon", "Locotenent Victor Manu", "Studioului", "Piatra Morii", "Valea Lupului", "Episcop Chesarie", "Sergent Major Drag Marin", "Bega", "Dobrun", "Fulgeresti"];
var d18 = ["Aleea", "Bulevardul", "Intrarea"];
var x15 = { building_number: a18, city: i18, city_name: e18, county: r18, default_country: n18, postcode: o18, secondary_address: u18, state: t18, state_abbr: l18, street: c18, street_address: m18, street_name: s18, street_suffix: d18 };
var M14 = x15;
var f18 = ["0726######", "0723######", "0722######", "0721######", "0720######", "0728######", "0729######", "0730######", "0739######", "0738######", "0737######", "0736######", "0735######", "0734######", "0733######", "0732######", "0731######", "0780######", "0788######", "0753######", "0754######", "0755######", "0756######", "0757######", "0758######", "0759######", "0748######", "0747######", "0746######", "0740######", "0741######", "0742######", "0743######", "0744######", "0745######", "0711######", "0727######", "0725######", "0724######", "0786######", "0760######", "0761######", "0762######", "0763######", "0764######", "0765######", "0766######", "0767######", "0785######", "0768######", "0769######", "0784######", "0770######", "0772######", "0771######", "0749######", "0750######", "0751######", "0752######"];
var L14 = { formats: f18 };
var S15 = L14;
var C13 = { wide: ["Ianuarie", "Februarie", "Martie", "Aprilie", "Mai", "Iunie", "Iulie", "August", "Septembrie", "Octombrie", "Noiembrie", "Decembrie"], wide_context: ["Ianuarie", "Februarie", "Martie", "Aprilie", "Mai", "Iunie", "Iulie", "August", "Septembrie", "Octombrie", "Noiembrie", "Decembrie"], abbr: ["Ian", "Feb", "Mar", "Apr", "Mai", "Iun", "Iul", "Aug", "Sep", "Oct", "Noi", "Dec"], abbr_context: ["Ian", "Feb", "Mar", "Apr", "Mai", "Iun", "Iul", "Aug", "Sep", "Oct", "Noi", "Dec"] };
var g17 = { wide: ["Luni", "Mar\u021Bi", "Miercuri", "Joi", "Vineri", "S\xE2mb\u0103t\u0103", "Duminic\u0103"], wide_context: ["Luni", "Mar\u021Bi", "Miercuri", "Joi", "Vineri", "S\xE2mb\u0103t\u0103", "Duminic\u0103"], abbr: ["Luni", "Mar\u021Bi", "Miercuri", "Joi", "Vineri", "S\xE2mb\u0103t\u0103", "Duminic\u0103"], abbr_context: ["Luni", "Mar\u021Bi", "Miercuri", "Joi", "Vineri", "S\xE2mb\u0103t\u0103", "Duminic\u0103"] };
var R11 = { month: C13, weekday: g17 };
var A15 = R11;
var p18 = ["com", "biz", "info", "name", "net", "org", "ro", "com.ro", "org.ro", "tm.ro", "store.ro", "info.ro", "nom.ro", "nt.ro", "firm.ro", "www.ro", "arts.ro", "rec.ro"];
var b17 = ["gmail.com", "yahoo.com", "hotmail.com"];
var _14 = { domain_suffix: p18, free_email: b17 };
var D17 = _14;
var h18 = ["Ada", "Adela", "Adelaida", "Adelina", "Adina", "Adriana", "Agata", "Aglaia", "Agripina", "Aida", "Alberta", "Albertina", "Alexandra", "Alexandrina", "Alida", "Alina", "Alice", "Alis", "Alma", "Amalia", "Amelia", "Amanda", "Ana", "Anabela", "Anaida", "Anamaria", "Anastasia", "Anca", "Ancu\u021Ba", "Anda", "Andra", "Andrada", "Andreea", "Anemona", "Aneta", "Angela", "Anghelina", "Anica", "Ani\u0219oara", "Antoaneta", "Antonia", "Antonela", "Anu\u021Ba", "Ariadna", "Ariana", "Arina", "Aristi\u021Ba", "Artemisa", "Astrid", "Atena", "Augustina", "Aura", "Aurelia", "Aureliana", "Aurica", "Aurora", "Beatrice", "Betina", "Bianca", "Blanduzia", "Bogdana", "Br\xE2ndu\u0219a", "Camelia", "Carina", "Carla", "Carmen", "Carmina", "Carolina", "Casandra", "Casiana", "Caterina", "Catinca", "Catrina", "Catrinel", "C\u0103t\u0103lina", "Cecilia", "Celia", "Cerasela", "Cezara", "Cipriana", "Clara", "Clarisa", "Claudia", "Clementina", "Cleopatra", "Codrina", "Codru\u021Ba", "Constantina", "Constan\u021Ba", "Consuela", "Coralia", "Corina", "Cornelia", "Cosmina", "Crengu\u021Ba", "Crina", "Cristina", "Daciana", "Dafina", "Daiana", "Dalia", "Dana", "Daniela", "Daria", "Dariana", "Delia", "Demetra", "Denisa", "Despina", "Diana", "Dida", "Didina", "Dimitrina", "Dina", "Dochia", "Doina", "Domnica", "Dora", "Doriana", "Dorina", "Dorli", "Draga", "Dumitra", "Dumitrana", "Ecaterina", "Eftimia", "Elena", "Eleonora", "Eliana", "Elisabeta", "Elisaveta", "Eliza", "Elodia", "Elvira", "Emilia", "Emanuela", "Erica", "Estera", "Eufrosina", "Eugenia", "Eusebia", "Eva", "Evanghelina", "Evelina", "Fabia", "Fabiana", "Felicia", "Filofteia", "Fiona", "Flavia", "Floare", "Floarea", "Flora", "Floriana", "Florica", "Florina", "Florentina", "Floren\u021Ba", "Francesca", "Frusina", "Gabriela", "Geanina", "Gen\u021Biana", "Georgeta", "Georgia", "Georgiana", "Geta", "Gherghina", "Gianina", "Gina", "Giorgiana", "Gra\u021Biana", "Gra\u021Biela", "Hortensia", "Henrieta", "Heracleea", "Iasmina", "Ica", "Ileana", "Ilinca", "Ilona", "Ina", "Ioana", "Ioanina", "Iolanda", "Ionela", "Ionelia", "Iosefina", "Irina", "Iridenta", "Iris", "Isabela", "Iulia", "Iuliana", "Iustina", "Ivona", "Izabela", "Jana", "Janeta", "Janina", "Jasmina", "Jeana", "Julia", "Julieta", "Larisa", "Laura", "Lauren\u021Bia", "Lavinia", "L\u0103cr\u0103mioara", "Leana", "Lelia", "Leontina", "Leopoldina", "Leti\u021Bia", "Lia", "Liana", "Lidia", "Ligia", "Lili", "Liliana", "Lioara", "Livia", "Loredana", "Lorelei", "Lorena", "Luana", "Lucia", "Luciana", "Lucre\u021Bia", "Ludovica", "Ludmila", "Luiza", "Lumini\u021Ba", "Magdalena", "Maia", "Manuela", "Mara", "Marcela", "Marga", "Margareta", "Marcheta", "Maria", "Mariana", "Maricica", "Marilena", "Marina", "Marinela", "Marioara", "Marta", "Matilda", "Malvina", "M\u0103d\u0103lina", "M\u0103lina", "M\u0103rioara", "M\u0103riuca", "Melania", "Melina", "Mihaela", "Milena", "Mina", "Minodora", "Mioara", "Mirabela", "Mirela", "Mirona", "Miruna", "Mona", "Monalisa", "Monica", "Nadia", "Narcisa", "Natalia", "Nata\u0219a", "Noemi", "Nicoleta", "Niculina", "Nidia", "Nora", "Norica", "Oana", "Octavia", "Octaviana", "Ofelia", "Olga", "Olimpia", "Olivia", "Ortansa", "Otilia", "Ozana", "Pamela", "Paraschiva", "Paula", "Paulica", "Paulina", "Patricia", "Petronela", "Petru\u021Ba", "Pompilia", "Profira", "Rada", "Rafila", "Raluca", "Ramona", "Rebeca", "Renata", "Rica", "Roberta", "Robertina", "Rodica", "Romani\u021Ba", "Romina", "Roza", "Rozalia", "Roxana", "Roxelana", "Ruxanda", "Ruxandra", "Sabina", "Sabrina", "Safta", "Salomea", "Sanda", "Saveta", "Savina", "S\xE2nziana", "Semenica", "Severina", "Sidonia", "Silvia", "Silvana", "Silviana", "Simina", "Simona", "Smaranda", "Sofia", "Sonia", "Sorana", "Sorina", "Speran\u021Ba", "Stana", "Stanca", "Stela", "Steliana", "Stelu\u021Ba", "Suzana", "Svetlana", "\u0218tefana", "\u0218tefania", "Tamara", "Tania", "Tatiana", "Teea", "Teodora", "Teodosia", "Teona", "Tiberia", "Timea", "Tinca", "Tincu\u021Ba", "Tudora", "Tudori\u021Ba", "Tudosia", "Valentina", "Valeria", "Vanesa", "Varvara", "Vasilica", "Venera", "Vera", "Veronica", "Veta", "Vicen\u021Bia", "Victoria", "Violeta", "Viorela", "Viorica", "Virginia", "Viviana", "Voichi\u021Ba", "Xenia", "Zaharia", "Zamfira", "Zaraza", "Zenobia", "Zenovia", "Zina", "Zoe"];
var v13 = ["Achim", "Adam", "Albu", "Aldea", "Alexa", "Alexandrescu", "Alexandru", "Alexe", "Andrei", "Anghel", "Antal", "Anton", "Apostol", "Ardelean", "Ardeleanu", "Avram", "Baciu", "Badea", "Balan", "Balint", "Banica", "Banu", "Barbu", "Barbulescu", "Bejan", "Biro", "Blaga", "Boboc", "Bodea", "Bogdan", "Bota", "Botezatu", "Bratu", "Bucur", "Buda", "Bunea", "Burlacu", "Calin", "Catana", "Cazacu", "Chiriac", "Chirila", "Chirita", "Chis", "Chivu", "Ciobanu", "Ciocan", "Cojocaru", "Coman", "Constantin", "Constantinescu", "Cornea", "Cosma", "Costache", "Costea", "Costin", "Covaci", "Cozma", "Craciun", "Cretu", "Crisan", "Cristea", "Cristescu", "Croitoru", "Cucu", "Damian", "Dan", "Danciu", "Danila", "Dascalu", "David", "Diaconescu", "Diaconu", "Dima", "Dinca", "Dinu", "Dobre", "Dobrescu", "Dogaru", "Dragan", "Draghici", "Dragoi", "Dragomir", "Dumitrache", "Dumitrascu", "Dumitrescu", "Dumitriu", "Dumitru", "Duta", "Enache", "Ene", "Farcas", "Filimon", "Filip", "Florea", "Florescu", "Fodor", "Fratila", "Gabor", "Gal", "Ganea", "Gavrila", "Georgescu", "Gheorghe", "Gheorghita", "Gheorghiu", "Gherman", "Ghita", "Giurgiu", "Grecu", "Grigoras", "Grigore", "Grigorescu", "Grosu", "Groza", "Horvath", "Iacob", "Iancu", "Ichim", "Ignat", "Ilie", "Iliescu", "Ion", "Ionescu", "Ionita", "Iordache", "Iorga", "Iosif", "Irimia", "Ispas", "Istrate", "Ivan", "Ivascu", "Kiss", "Kovacs", "Lazar", "Luca", "Lungu", "Lupu", "Macovei", "Maftei", "Man", "Manea", "Manolache", "Manole", "Marcu", "Marginean", "Marian", "Marin", "Marinescu", "Martin", "Mateescu", "Matei", "Maxim", "Mazilu", "Micu", "Mihai", "Mihaila", "Mihailescu", "Mihalache", "Mihalcea", "Milea", "Militaru", "Mircea", "Mirea", "Miron", "Miu", "Mocanu", "Moga", "Moise", "Moldovan", "Moldoveanu", "Molnar", "Morar", "Moraru", "Muntean", "Munteanu", "Muresan", "Musat", "Nagy", "Nastase", "Neacsu", "Neagoe", "Neagu", "Neamtu", "Nechita", "Necula", "Nedelcu", "Negoita", "Negrea", "Negru", "Nemes", "Nica", "Nicoara", "Nicolae", "Nicolescu", "Niculae", "Niculescu", "Nistor", "Nita", "Nitu", "Oancea", "Olariu", "Olaru", "Oltean", "Olteanu", "Oprea", "Opris", "Paduraru", "Pana", "Panait", "Paraschiv", "Parvu", "Pasca", "Pascu", "Patrascu", "Paun", "Pavel", "Petcu", "Peter", "Petre", "Petrea", "Petrescu", "Pintea", "Pintilie", "Pirvu", "Pop", "Popa", "Popescu", "Popovici", "Preda", "Prodan", "Puiu", "Radoi", "Radu", "Radulescu", "Roman", "Rosca", "Rosu", "Rotaru", "Rus", "Rusu", "Sabau", "Sandor", "Sandu", "Sarbu", "Sava", "Savu", "Serban", "Sima", "Simion", "Simionescu", "Simon", "Sirbu", "Soare", "Solomon", "Staicu", "Stan", "Stanciu", "Stancu", "Stanescu", "Stefan", "Stefanescu", "Stoian", "Stoica", "Stroe", "Suciu", "Szabo", "Szasz", "Szekely", "Tamas", "Tanase", "Tataru", "Teodorescu", "Toader", "Toma", "Tomescu", "Toth", "Trandafir", "Trif", "Trifan", "Tudor", "Tudorache", "Tudose", "Turcu", "Ungureanu", "Ursu", "Vaduva", "Varga", "Vasile", "Vasilescu", "Vasiliu", "Veres", "Vintila", "Visan", "Vlad", "Voicu", "Voinea", "Zaharia", "Zamfir"];
var B14 = ["Achim", "Adam", "Adelin", "Adonis", "Adrian", "Adi", "Agnos", "Albert", "Alex", "Alexandru", "Alexe", "Aleodor", "Alin", "Alistar", "Amedeu", "Amza", "Anatolie", "Andrei", "Angel", "Anghel", "Antim", "Anton", "Antonie", "Antoniu", "Arian", "Aristide", "Arsenie", "Augustin", "Aurel", "Aurelian", "Auric\u0103", "Avram", "Axinte", "Barbu", "Bartolomeu", "Basarab", "B\u0103nel", "Bebe", "Beniamin", "Benone", "Bernard", "Bogdan", "Br\u0103du\u021B", "Bucur", "Caius", "Camil", "Cantemir", "Carol", "Casian", "Cazimir", "C\u0103lin", "C\u0103t\u0103lin", "Cedrin", "Cezar", "Ciprian", "Claudiu", "Codin", "Codrin", "Codru\u021B", "Cornel", "Corneliu", "Corvin", "Constantin", "Cosmin", "Costache", "Costel", "Costin", "Crin", "Cristea", "Cristian", "Cristobal", "Cristofor", "Dacian", "Damian", "Dan", "Daniel", "Darius", "David", "Decebal", "Denis", "Dinu", "Dominic", "Dorel", "Dorian", "Dorin", "Dorinel", "Doru", "Drago\u0219", "Ducu", "Dumitru", "Edgar", "Edmond", "Eduard", "Eftimie", "Emil", "Emilian", "Emanoil", "Emanuel", "Emanuil", "Eremia", "Eric", "Ernest", "Eugen", "Eusebiu", "Eusta\u021Biu", "Fabian", "Felix", "Filip", "Fiodor", "Flaviu", "Florea", "Florentin", "Florian", "Florin", "Francisc", "Frederic", "Gabi", "Gabriel", "Gelu", "George", "Georgel", "Georgian", "Ghenadie", "Gheorghe", "Gheorghi\u021B\u0103", "Ghi\u021B\u0103", "Gic\u0103", "Gicu", "Giorgian", "Gra\u021Bian", "Gregorian", "Grigore", "Haralamb", "Haralambie", "Hora\u021Biu", "Horea", "Horia", "Iacob", "Iancu", "Ianis", "Ieremia", "Ilarie", "Ilarion", "Ilie", "Inocen\u021Biu", "Ioan", "Ion", "Ionel", "Ionic\u0103", "Ionu\u021B", "Iosif", "Irinel", "Iulian", "Iuliu", "Iurie", "Iustin", "Iustinian", "Ivan", "Jan", "Jean", "Jenel", "Ladislau", "Lasc\u0103r", "Lauren\u021Biu", "Laurian", "Laz\u0103r", "Leonard", "Leontin", "Lic\u0103", "Liviu", "Lorin", "Luca", "Lucen\u021Biu", "Lucian", "Lucre\u021Biu", "Ludovic", "Manole", "Marcel", "Marcu", "Marian", "Marin", "Marius", "Martin", "Matei", "Maxim", "Maximilian", "M\u0103d\u0103lin", "Mihai", "Mihail", "Mihnea", "Mircea", "Miron", "Mitic\u0103", "Mitru\u021B", "Mugur", "Mugurel", "Nae", "Narcis", "Nechifor", "Nelu", "Nichifor", "Nicoar\u0103", "Nicodim", "Nicolae", "Nicolaie", "Nicu", "Nicu\u021B\u0103", "Niculi\u021B\u0103", "Nicu\u0219or", "Norbert", "Norman", "Octav", "Octavian", "Octaviu", "Olimpian", "Olimpiu", "Oliviu", "Ovidiu", "Pamfil", "Panait", "Panagachie", "Paul", "Pavel", "P\u0103tru", "Petre", "Petric\u0103", "Petri\u0219or", "Petru", "Petru\u021B", "Pompiliu", "Radu", "Rafael", "Rare\u0219", "Raul", "R\u0103ducu", "R\u0103zvan", "Relu", "Remus", "Robert", "Romeo", "Romulus", "Sabin", "Sandu", "Sava", "Sebastian", "Sergiu", "Sever", "Severin", "Silvian", "Silviu", "Simi", "Simion", "Sinic\u0103", "Sorin", "Stan", "Stancu", "Stelian", "\u0218erban", "\u0218tefan", "Teodor", "Teofil", "Teohari", "Theodor", "Tiberiu", "Timotei", "Titus", "Todor", "Toma", "Traian", "Tudor", "Valentin", "Valeriu", "Valter", "Vasile", "Vasilic\u0103", "Veniamin", "Vicen\u021Biu", "Victor", "Vincen\u021Biu", "Viorel", "Visarion", "Vlad", "Vladimir", "Vlaicu", "Voicu", "Zamfir", "Zeno"];
var I11 = ["{{name.male_first_name}} {{name.last_name}}", "{{name.last_name}} {{name.male_first_name}}", "{{name.prefix}} {{name.male_first_name}} {{name.last_name}}", "{{name.male_first_name}} {{name.last_name}}, {{name.suffix}}", "{{name.prefix}} {{name.male_first_name}} {{name.last_name}}, {{name.suffix}}", "{{name.female_first_name}} {{name.last_name}}", "{{name.last_name}} {{name.female_first_name}}", "{{name.prefix}} {{name.female_first_name}} {{name.last_name}}"];
var T12 = ["Dl", "Dna", "Dra"];
var N16 = ["Jr.", "Sr."];
var F12 = { female_first_name: h18, last_name: v13, male_first_name: B14, name: I11, prefix: T12, suffix: N16 };
var P13 = F12;
var V12 = ["021######", "031######", "0258######", "0358######", "0257######", "0357######", "0248######", "0348######", "0234######", "0334######", "0259######", "0359######", "0263######", "0363######", "0231######", "0331######", "0239######", "0339######", "0268######", "0368######", "0238######", "0338######", "0242######", "0342######", "0255######", "0355######", "0264######", "0364######", "0241######", "0341######", "0267######", "0367######", "0245######", "0345######", "0251######", "0351######", "0236######", "0336######", "0246######", "0346######", "0253######", "0353######", "0266######", "0366######", "0254######", "0354######", "0243######", "0343######", "0232######", "0332######", "0262######", "0362######", "0252######", "0352######", "0265######", "0365######", "0233######", "0333######", "0249######", "0349######", "0244######", "0344######", "0260######", "0360######", "0261######", "0361######", "0269######", "0369######", "0230######", "0330######", "0247######", "0347######", "0256######", "0356######", "0240######", "0340######", "0250######", "0350######", "0235######", "0335######", "0237######", "0337######"];
var O11 = { formats: V12 };
var G13 = O11;
var z14 = { title: "Romanian", address: M14, cell_phone: S15, date: A15, internet: D17, name: P13, phone_number: G13 };
var ka2 = z14;

// ../../node_modules/@faker-js/faker/dist/esm/chunk-NOKPGS4X.mjs
init_esm_shims();
var s19 = ["Abesszin", "Alpine lynx", "American lynx", "Amerikai csonkafark\xFA", "Amerikai dr\xF3tsz\u0151r\u0171", "Amerikai g\xF6rbef\xFCl\u0171", "Amerikai keuda", "Amerikai r\xF6vid sz\u0151r\u0171", "Anatoli", "Ausztr\xE1l k\xF6d", "Ausztr\xE1l Tiffanie", "Balin\xE9z", "Beng\xE1li", "Birman", "Bohemian rex", "Bombay", "Bristol", "Brit hossz\xFA sz\u0151r\u0171", "Brit r\xF6vidsz\u0151r\u0171", "Burma", "Burmilla", "Chausie", "Cheetoh", "Colorpoint r\xF6vid sz\u0151r\u0171", "Colourpoint", "Cornish rex", "Cymric", "Desert lynx", "Devon rex", "Doni szfinx", "Egyiptomi mau", "Eur\xF3pai r\xF6vidsz\u0151r\u0171", "Exotic", "Foldex", "German rex", "Havanna", "Highland lynx", "H\xF3cip\u0151s", "Jap\xE1n csonkafark\xFA", "J\xE1vai", "Kaliforniai pettyes macska", "Kanaani", "Karthauzi", "Keleti r\xF6vid sz\u0151r\u0171", "Korat", "Kuril-szigeti csonkafark\xFA", "La Perm", "Maine Coon", "Manx", "Munchkin", "Nebelung", "Neva Masquarade", "Norv\xE9g erdei macska", "Ocicat", "Ojos Azules", "Orosz k\xE9k", "Perzsa", "Peterbald", "Pixiebob", "RagaMuffin", "Ragdoll", "Selkirk rex", "Sk\xF3t l\xF3g\xF3f\xFCl\u0171", "Sokoke", "Szafari", "Szavanna", "Szerengeti", "Szfinx", "Szi\xE1mi macska", "Szib\xE9riai", "Szingapura", "Szom\xE1li", "Thai", "Tiffany", "Tonkin\xE9z", "Toyger", "T\xF6r\xF6k ang\xF3ramacska", "T\xF6r\xF6k Van", "Ural rex", "Vienna Woods", "York"];
var l19 = ["Abruzz\xF3i juh\xE1szkutya", "Affenpinscher", "Afg\xE1n ag\xE1r", "Afrikai oroszl\xE1nkutya", "Airedale terrier", "Akbash", "Akita inu", "Alaszkai malamut", "Alentejo masztiff", "Alopekisz", "Alpesi tacsk\xF3kop\xF3", "Altdeutscher H\xFCtehunde", "Amerikai akita inu", "Amerikai Bulldog", "Amerikai cocker sp\xE1niel", "Amerikai eszkim\xF3 kutya", "Amerikai meztelen terrier", "Amerikai pitbull terrier", "Amerikai r\xF3kakop\xF3", "Amerikai staffordshire terrier", "Amerikai v\xEDzisp\xE1niel", "Amerikai-kanadai feh\xE9r juh\xE1szkutya (White Shepherd Dog)", "Anat\xF3liai juh\xE1szkutya", "Angol ag\xE1r", "Angol bulldog", "Angol cocker sp\xE1niel", "Angol juh\xE1szkutya (English Shepherd)", "Angol masztiff", "Angol mos\xF3medvekop\xF3 (English Coonhound)", "Angol pointer", "Angol r\xF3kakop\xF3", "Angol springer sp\xE1niel", "Angol szetter", "Angol v\xE9reb", "Angol-francia falkavad\xE1sz kop\xF3 (Anglo-fran\xE7ais de petite v\xE9nerie)", "Appenzelli havasi kutya", "Arab ag\xE1r", "Ardenneki p\xE1sztorkutya", "Argentin dog", "Ari\xE9ge-i kop\xF3", "Ari\xE9ge-i vizsla", "Armant", "Artois-i kop\xF3", "Atlaszi hegyikutya", "Ausztr\xE1l csonkafark\xFA p\xE1sztorkutya", "Ausztr\xE1l juh\xE1szkutya", "Ausztr\xE1l kelpie", "Ausztr\xE1l p\xE1sztorkutya", "Ausztr\xE1l selyemsz\u0151r\u0171 terrier", "Ausztr\xE1l terrier", "Auvergne-i vizsla", "Azawakh", "Azori-szigeteki kutya (C\xE3o Fila de S\xE3o Miguel)", "Bajor hegyi v\xE9reb", "Bali hegyikutya (Kintamani)", "Bandog", "Barbet", "Basenji", "Basset hound", "Beagle  Egyes\xFClt Kir\xE1lys\xE1g", "Beagle harrier", "Beagle", "Bearded collie  Egyes\xFClt Kir\xE1lys\xE1g", "Beauce-i juh\xE1szkutya", "Bedlington terrier", "Belga griffon", "Belga juh\xE1szkutya", "Belga masztiff (Chien de Trait Belge)", "Belga vizsla (Braque Belge)", "Bergam\xF3i juh\xE1szkutya", "Bern\xE1thegyi", "Berni kop\xF3 (Bernese Laufhund)", "Berni kop\xF3", "Berni p\xE1sztorkutya", "Bichon bolognese", "Bichon fris\xE9", "Bichon havanese", "Biewer yorkshire terrier (Biewer Yorkshire Terrier)", "Billy", "Black mouth cur", "Blue lacy", "Boerboel", "Bolognai pincs", "bolonka cvetna", "bolonka francuska", "Bordeaux-i dog", "Border collie  Egyes\xFClt Kir\xE1lys\xE1g", "Border terrier", "Boston terrier", "Boszniai kop\xF3", "Bourbonnais-i vizsla", "Boxer", "Boykin sp\xE1niel", "B\u0151rtokos kalipp\xF3", "Braban\xE7on", "Brabanti kis griffon", "Brazil kop\xF3 (Rastreador Brasileiro)", "Brazil masztiff", "Brazil terrier", "Bretagne-i csersz\xEDn\u0171 basset", "Bretagne-i csersz\xEDn\u0171 griffon", "Breton sp\xE1niel", "Brie-i juh\xE1szkutya", "Broholmer", "Br\xFCsszeli griffon", "Bukovinai p\xE1sztorkutya", "Bulldog  Egyes\xFClt Kir\xE1lys\xE1g", "Bullmasztiff", "Bullterrier  Egyes\xFClt Kir\xE1lys\xE1g", "Bullterrier", "Burgosi vizsla", "Cairn terrier", "Cane corso", "Cardigan welsh corgi (Welsh Corgi Cardigan)", "Cardigan welsh corgi", "Carolina kutya (Karolina kutya)", "Castro Laboreiro-i p\xE1sztorkutya", "Catahoulai leop\xE1rdkutya", "Cavalier King Charles sp\xE1niel", "Chesapeake Bay retriever", "Chinook", "Chippiparai", "Cimarr\xF3n Uruguayo", "Cirneco dell\u2019Etna", "Clumber sp\xE1niel", "Coton de tul\xE9ar", "Csau csau", "Cseh juh\xE1szkutya", "Cseh sz\xE1lk\xE1s szak\xE1ll\xFA vizsla", "Cseh terrier", "Csehszlov\xE1k farkaskutya", "Csivava", "Dalmata", "Dandie Dinmont-terrier", "D\xE1n-sv\xE9d \u0151rkutya", "D\xE9lorosz juh\xE1szkutya", "Dobermann", "Drenti vizsla", "Drever", "Dr\xF3tsz\u0151r\u0171 foxterrier", "Dr\xF3tsz\u0151r\u0171 griffon", "Dr\xF3tsz\u0151r\u0171 isztriai kop\xF3", "Dr\xF3tsz\u0151r\u0171 magyar vizsla", "Dr\xF3tsz\u0151r\u0171 n\xE9met vizsla", "Dr\xF3tsz\u0151r\u0171 portug\xE1l kop\xF3", "Dunker", "Entlebuchi havasi kutya", "Erd\xE9lyi kop\xF3  Magyarorsz\xE1g", "Erd\xE9lyi kop\xF3", "Estrelai hegyikutya", "\xC9szak-amerikai juh\xE1szkutya", "Eszkim\xF3 kutya", "\xC9szt kop\xF3", "Eur\xE1zsiai", "F\xE1ra\xF3kutya", "Feh\xE9r-cser francia kop\xF3", "Feh\xE9r-cser nagy angol-francia kop\xF3", "Feh\xE9r-fekete francia kop\xF3", "Feh\xE9r-fekete nagy angol-francia kop\xF3", "Feh\xE9rorosz juh\xE1szkutya", "Fekete norv\xE9g elghund", "Fekete sery", "Fekete-cser mos\xF3medvekop\xF3", "F\xE9lhossz\xFAsz\u0151r\u0171 pireneusi juh\xE1szkutya", "Fiatal Mioritic p\xE1sztorkutya", "Field sp\xE1niel", "Finn kop\xF3", "Finn lapphund", "Finn spicc", "Flandriai p\xE1sztorkutya", "Foxterrier", "Francia bulldog", "Francia kop\xF3", "Francia sp\xE1niel", "Francia vizsla", "Fr\xEDz v\xEDzikutya", "Fr\xEDz vizsla", "Gascogne-i francia vizsla", "Gascogne-i k\xE9k basset", "Gascogne-i k\xE9k griffon", "Glen of Imaal terrier", "Golden retriever", "Gordon szetter", "G\xF6nd\xF6rsz\u0151r\u0171 retriever", "G\xF6r\xF6g kop\xF3", "Griffon", "Groenendael", "Gr\xF6nlandi kutya", "Hahoawu", "Halden kop\xF3", "Hamilton-kop\xF3", "Hannoveri v\xE9reb", "Harlekin pincser", "Harrier (Ny\xFAl\xE1szkop\xF3)", "Havannai pincs", "Hertha pointer", "Himal\xE1jai p\xE1sztorkutya", "Hokkaido inu", "Holland juh\xE1szkutya", "Holland smoushond", "Hortaye Borzaya (Chortaj)", "Horv\xE1t juh\xE1szkutya", "Hossz\xFAsz\u0151r\u0171 n\xE9met vizsla", "Hossz\xFAsz\u0151r\u0171 pireneusi juh\xE1szkutya", "Hossz\xFAsz\u0151r\u0171 sk\xF3t juh\xE1szkutya", "Hovawart", "Husky", "Hygen kop\xF3", "Ibizai kop\xF3", "Inka kopasz kutya", "\xCDr farkaskutya", "\xCDr szetter", "\xCDr terrier", "\xCDr v\xEDzisp\xE1niel", "Isztriai kop\xF3", "Izlandi juh\xE1szkutya", "Jack Russell terrier", "J\xE4mthund", "Jap\xE1n csin", "Jap\xE1n spicc", "Jap\xE1n spitz", "Jap\xE1n terrier", "Jurai kop\xF3", "Kai ken", "Kalag Tazi", "Kaliba kutya", "K\xE1na\xE1n kutya", "Kanadai eszkim\xF3 kutya", "Kan\xE1ri-szigeteki kop\xF3", "Kan\xE1ri-szigeteki kutya", "Kangal", "Kangaroo Dog", "Kanni", "Kar\xE9liai medvekutya", "K\xE1rp\xE1ti p\xE1sztorkutya", "Karszti p\xE1sztorkutya", "Katal\xE1n p\xE1sztorkutya", "Kauk\xE1zusi juh\xE1szkutya", "Keeshond", "kelet-eur\xF3pai juh\xE1szkutya", "Kelet-szib\xE9riai lajka", "Kerry blue terrier", "K\xEDnai kopasz kutya", "King Charles sp\xE1niel", "King Shepherd", "Kis angol ag\xE1r (Whippet)", "Kis angol ag\xE1r", "Kis angol terrier", "Kis angol-francia r\xF3kakop\xF3", "Kis berni kop\xF3", "Kis gascogne-i k\xE9k kop\xF3", "Kis gascon-saintonge-i kop\xF3", "Kis jurai kop\xF3", "Kis luzerni kop\xF3", "Kis m\xFCnsterlandi vizsla", "Kis oroszl\xE1nkutya", "Kis schwyzi kop\xF3", "Kis sv\xE1jci kop\xF3", "Kis vend\xE9e-i griffon basset", "Kishu ken", "Kisspitz", "Komondor  Magyarorsz\xE1g", "Komondor", "Kooikerhondje", "Koreai jindo kutya", "K\xF6z\xE9p schnauzer", "K\xF6z\xE9p uszk\xE1r", "K\xF6z\xE9p-\xE1zsiai juh\xE1szkutya", "K\xF6z\xE9pspitz", "Kras-medencei juh\xE1szkutya", "Kromfohrlandi", "Kunming kutya", "Kuvasz  Magyarorsz\xE1g", "Kuvasz", "Kyi leo", "Labrador retriever", "Laekenois", "Lagotto romagnolo", "Lajka", "Lakeland terrier", "Lancashire heeler", "Landseer", "Lapp p\xE1sztorkutya", "Lengyel ag\xE1r", "Lengyel alf\xF6ldi juh\xE1szkutya", "Lengyel hegyi juh\xE1szkutya", "Lengyel kop\xF3", "Lengyel vad\xE1szkutya(az FCI v\xE1r\xF3list\xE1j\xE1n)", "Leonbergi", "Leopard cur", "Lhasa apso", "Longdog", "Lucas terrier", "Lundehund", "Lurcher", "Luzerni kop\xF3", "Magyar ag\xE1r", "Magyar vizsla", "Majestic tree hound", "Malinois", "Mallorcai masztiff", "Mallorcai p\xE1sztorkutya", "M\xE1ltai selyemkutya", "Manchester terrier", "Markiesje", "Mexik\xF3i meztelen kutya (Xoloitzcuintle)", "Mexik\xF3i meztelen kutya", "Mioritic p\xE1sztorkutya (az FCI v\xE1r\xF3list\xE1j\xE1n)", "Montenegr\xF3i hegyikop\xF3", "Mopsz", "Moszkvai hossz\xFA sz\u0151r\u0171 toy terrier", "Moszkvai \u0151rkutya", "Mountain cur", "Mudhol Hound", "Mudi", "M\xFCnsterlandi vizsla", "Nagy angol-francia kop\xF3", "Nagy gascogne-i k\xE9k kop\xF3", "Nagy gascon-saintonge-i kop\xF3", "Nagy m\xFCnsterlandi vizsla", "Nagy sv\xE1jci havasi kutya", "Nagy vend\xE9e-i griffon basset", "Nagy vend\xE9e-i griffon", "Nagyspitz", "N\xE1polyi masztiff", "N\xE9met dog", "N\xE9met f\xFCrj\xE9szeb", "N\xE9met juh\xE1szkutya", "N\xE9met kop\xF3", "N\xE9met pinscher", "N\xE9met spicc", "N\xE9met vad\xE1szterrier (Jagd terrier)", "N\xE9met vizsla", "Nivernais-i griffon", "Norfolk terrier", "Norrbotteni spicc", "Norv\xE9g buhund", "Norv\xE9g elghund", "Norv\xE9g lundehund", "Norwich terrier", "Nyugat-orosz ag\xE1r (k\xE9t t\xEDpus: cortaj \xE9s szteppei ag\xE1r)", "Nyugat-szib\xE9riai lajka", "\xD3angol juh\xE1szkutya", "Olasz ag\xE1r", "Olasz griffon", "Olasz kop\xF3", "Olasz vizsla", "Olasz volpino", "\xD3n\xE9met juh\xE1szkutya", "\xD3ri\xE1s schnauzer", "\xD3ri\xE1s uszk\xE1r", "Orosz ag\xE1r", "Orosz fekete terrier", "Orosz toy terrier(az FCI v\xE1r\xF3list\xE1j\xE1n)", "Orosz-eur\xF3pai lajka", "Osztr\xE1k kop\xF3", "Osztr\xE1k pinscher", "\u0150si d\xE1n vizsla", "Padilokoon", "Papillon", "Patterdale terrier", "Pekingi palotakutya", "Pembroke welsh corgi", "Perui meztelen kutya", "Perzsa ag\xE1r", "Phal\xE8ne", "Phu-quoc kutya", "Pik\xE1rdiai juh\xE1szkutya", "Pik\xE1rdiai k\xE9k sp\xE1niel", "Pik\xE1rdiai sp\xE1niel", "Pireneusi francia vizsla", "Pireneusi hegyikutya", "Pireneusi juh\xE1szkutya", "Pireneusi masztiff", "Pointer", "Poitevin", "Pomer\xE1niai t\xF6rpespicc", "Pont-Audemer-i sp\xE1niel", "Porcel\xE1nkop\xF3", "Portug\xE1l juh\xE1szkutya", "Portug\xE1l kop\xF3", "Portug\xE1l v\xEDzikutya", "Portug\xE1l vizsla", "Pudelpointer", "Puli", "Pumi", "Rajapalayam", "Rampur ag\xE1r", "Rat terrier", "Rhodesian ridgeback (Afrikai oroszl\xE1nkutya)", "Rom\xE1n p\xE1sztor kutya", "Rottweiler", "Rouilers-i p\xE1szorkutya", "R\xF6vidsz\u0151r\u0171 isztriai kop\xF3", "R\xF6vidsz\u0151r\u0171 magyar vizsla", "R\xF6vidsz\u0151r\u0171 n\xE9met vizsla", "R\xF6vidsz\u0151r\u0171 sk\xF3t juh\xE1szkutya", "Saage kochee", "Saarloosi farkaskutya", "Saint-germaini vizsla", "Sarplaninai juh\xE1szkutya", "Savoye-i p\xE1sztorkutya", "Schapendoes", "Schiller-kop\xF3", "Schipperke", "Schnauzer", "Schwyzi kop\xF3", "Sealyham terrier", "Shar pei", "Shetlandi juh\xE1szkutya", "Shikoku inu", "Shiloh juh\xE1szkutya", "Siba inu", "Sibaken", "Si-cu", "Silken Windhound", "Simasz\u0151r\u0171 foxterrier", "Simasz\u0151r\u0171 portug\xE1l kop\xF3", "Simasz\u0151r\u0171 retriever", "Sinka", "Sk\xF3t juh\xE1szkutya", "Sk\xF3t szarvasag\xE1r", "Sk\xF3t terrier", "Skye terrier", "Sm\xE5landi kop\xF3", "Soft coated wheaten terrier", "Sp\xE1niel", "Spanyol ag\xE1r", "Spanyol kop\xF3", "Spanyol masztiff", "Spanyol v\xEDzikutya", "Staffordshire bullterrier", "St\xE1jeri dr\xF3tsz\u0151r\u0171 kop\xF3", "Sussexi sp\xE1niel", "Sv\xE1jci feh\xE9r juh\xE1szkutya", "Sv\xE1jci kop\xF3", "Sv\xE9d juh\xE1szspitz", "Sv\xE9d lapphund", "Sz\xE1lk\xE1ssz\u0151r\u0171 n\xE9met vizsla", "Szamoj\xE9d", "Sz\xE1vav\xF6lgyi kop\xF3", "Szerb kop\xF3", "Szerb trikolor kop\xF3", "Szetter", "Szib\xE9riai husky", "Sz\xEDriai p\xE1sztorkutya", "Szlov\xE1k csuvacs", "Szlov\xE1k dr\xF3tsz\u0151r\u0171 vizsla", "Szlov\xE1k kop\xF3", "Sz\xFCrke norv\xE9g elghund", "Tacsk\xF3", "Taigan (Kirgiz barzoj)", "Tajvani kutya", "Tasi (Kelet-\xE1zsiai barzoj)", "T\xE1trai juh\xE1szkutya", "Telomian", "Tervueren (Belga juh\xE1szkutya)", "Tervueren", "Thai ridgeback", "Tibeti masztiff", "Tibeti sp\xE1niel", "Tibeti terrier", "Tiroli kop\xF3", "Tornjak", "Tosza inu", "Toy uszk\xE1r", "T\xF6rpe pinscher", "T\xF6rpe schnauzer", "T\xF6rpe uszk\xE1r", "T\xF6rpespicc", "T\xF6rpespitz", "Trikolor francia kop\xF3", "Trikolor nagy angol-francia kop\xF3", "\xDAjfundlandi", "\xDAj-guineai \xE9nekl\u0151 kutya", "Uszk\xE1r", "Utonagan", "Vadkacsavad\xE1sz retriever", "Vend\xE9e-i griffon basset", "Vend\xE9e-i griffonkop\xF3", "Vesztf\xE1liai tacsk\xF3kop\xF3", "Vidrakop\xF3", "Vizsla", "V\xF6r\xF6s \xEDr szetter", "V\xF6r\xF6s-feh\xE9r \xEDr szetter", "Weimari vizsla", "Welsh corgi", "Welsh springer sp\xE1niel", "Welsh terrier", "West highland white terrier", "Wetterhoun", "Whippet", "Wolfspitz", "Yorkshire terrier"];
var t19 = ["Abaco vadl\xF3", "Abtenauer", "Aegidienbergi", "Adaj", "Akhal tekini", "Alb\xE1n l\xF3", "Alb\xEDn\xF3 l\xF3", "Al Khamsa", "Altai l\xF3", "Alter Real", "Altmarki", "American Cream Draft", "American Saddlebred Horse", "Amerikai foltos l\xF3", "American Quarter Horse", "Amerikai melegv\xE9r\u0171", "Amerikai teliv\xE9r", "Anatolian Native", "Andal\xFAz", "Andravida", "Anglo Kabardin", "Anglo-Arab", "Angol teliv\xE9r", "Appaloosa", "Appendix", "Arab f\xE9lv\xE9r", "Arab teliv\xE9r", "Arab", "Aralusian", "Arany Amerikai H\xE1tasl\xF3", "Ardenni", "Argentine Criollo", "Ariegeois", "Asturian", "Ausztr\xE1liai Brumby", "Auxois", "Avelignese", "Azt\xE9k l\xF3", "Bajor melegv\xE9r\u0171 - melegv\xE9r\u0171 l\xF3fajta", "Bali(l\xF3) - melegv\xE9r\u0171 l\xF3fajta", "Ban-ei -", "Bazut\xF3 p\xF3ni \u2013 melegv\xE9r\u0171 l\xF3fajta", "Belga hidegv\xE9r\u0171 - hidegv\xE9r\u0171 l\xF3fajta", "Belga melegv\xE9r\u0171 - melegv\xE9r\u0171 l\xF3fajta", "Belorusz fogatl\xF3", "Berber l\xF3", "Bhutia p\xF3ni", "Bitjug", "Blazer", "Boer", "Boszniai p\xF3ni", "Boulonnais", "Bourguignon - kihalt fajta", "Brandenburger - melegv\xE9r\u0171 l\xF3fajta", "Bret\xF3 Cerda", "Breton(l\xF3) \u2013 hidegv\xE9r\u0171 l\xF3fajta", "Brindle Horse", "Brit Sport l\xF3", "Brit melegv\xE9r\u0171 \u2013 melegv\xE9r\u0171 l\xF3fajta", "Brumby-l\xF3 \u2013 Ausztr\xE1lia vadlova", "Buckskin", "Bugyonnij", "Bulgarer", "Burguete", "Buryat", "Caballo Chileno", "Calabrese (l\xF3fajta)", "Camargue-i l\xF3 - melegv\xE9r\u0171 l\xF3fajta", "Campolino", "Cayuse Indi\xE1n P\xF3ni - l\xF3fajta", "Charollais", "Charantais", "Cheju", "Chickasaw", "Cleveland bay - melegv\xE9r\u0171 l\xF3fajta", "Clydesdale - hidegv\xE9r\u0171 l\xF3fajta", "Comtois", "Crioulo", "Cseh hidegv\xE9r\u0171", "Cseh melegv\xE9r\u0171", "D\xE1n melegv\xE9r\u0171", "Danube", "Deliboz", "D\xE9ln\xE9met hidegv\xE9r\u0171 - hidegv\xE9r\u0171 l\xF3fajta", "Dole", "Doni l\xF3 - melegv\xE9r\u0171 l\xF3fajta", "Dongola", "D\xF6le \xFCget\u0151", "Egyiptomi(l\xF3fajta)", "\xC9szak-Amerikai poroszk\xE1l\xF3 l\xF3", "\xC9szak-Sv\xE9d l\xF3", "\xC9szaki h\xE1tasl\xF3", "\xC9szaki ig\xE1sl\xF3", "\xC9szakkeleti l\xF3", "\xC9sztorsz\xE1gi Nat\xEDv", "Finn hidegv\xE9r\u0171", "Finn l\xF3", "Fjord p\xF3ni", "Fleuve", "Fouta", "Francia \xFCget\u0151", "Francia F\xE9lv\xE9r", "Frederiksborgi", "Freiberger", "Francia h\xE1tasl\xF3", "Fr\xEDz l\xF3", "Furioso-north star", "Galiceno", "Garrano \u2013 melegv\xE9r\u0171 l\xF3fajta", "Gelderlander", "Georgiai Grand l\xF3", "Gidr\xE1n", "Groningen", "Hackney", "Hannoveri", "Haflingi", "Hegu", "Hess \xE9s rajnai l\xF3", "Hesszeni", "Hirzai", "Holland melegv\xE9r\u0171", "Holland ig\xE1sl\xF3", "Holsteini l\xF3", "Hucul l\xF3", "Hunter", "Indiai l\xF3", "Iomud", "Izraeli l\xF3", "\xCDr hobbil\xF3", "\xCDr ig\xE1sl\xF3", "\xCDr sportl\xF3", "Jinzhou", "J\xFCtland l\xF3", "Kabardini", "Kalmyk", "Kanadai l\xF3", "Kanadai Sport l\xF3", "Karabakh", "Karabair", "Karelian", "Karth\xFAsiai l\xF3", "Kathiawari", "Kazakh", "Kelet Bolg\xE1r l\xF3", "Keletfr\xEDz l\xF3", "Kentucky hegyi h\xE1tasl\xF3", "Kinsky", "Kisb\xE9ri f\xE9lv\xE9r", "Kiso", "Kladrubi", "Kuhaylan", "Kunfak\xF3", "Kushum", "Kustanair", "Lett l\xF3", "Lett hidegv\xE9r\u0171", "Limousin l\xF3", "Lipicai l\xF3", "Lippit Morgan", "Litv\xE1niai l\xF3", "Llanero", "Lokai", "Losino", "Luzit\xE1n l\xF3", "Magyar f\xE9lv\xE9r", "Magyar sportl\xF3", "Magyar hidegv\xE9r\u0171", "Magyar \xFCget\u0151", "Malopolski", "Mangalarga", "Mangalarga Marchador", "Maremann", "Marismeno", "Marokk\xF3i Berber l\xF3", "Marwari", "Masuren", "Mez\u0151hegyesi sportl\xF3", "Mecklenburgi", "Mecklenburgi hidegv\xE9r\u0171", "Medicine Hat horse", "Menorquin", "Messara", "Mezen", "Miharu - kihalt l\xF3fajta", "Mingrelian", "Minusinsk", "Muszt\xE1ng", "Misaki", "Missouri fox trotter", "Miyako", "Mongol l\xF3", "Montana Travler", "Morab", "Morgan horse", "Morocco Spotted Horse", "Morochuco", "Mountain Pleasure Horse", "Moyle", "Murak\xF6zi", "Murgese", "N\xE1polyi (l\xF3fajta)", "Narraganset Pacer", "National Show l\xF3", "National Spotted Saddle horse", "Nez Perce", "N\xE9met sportl\xF3", "Nig\xE9riai l\xF3", "Nokota", "N\xF3ri l\xF3", "Noma", "N\xF3niusz", "Norman cob", "Norfolk \xFCget\u0151", "Nyugat-Afrikai Berber", "Obua kihalt fajta", "Ocracoke", "Olasz h\xE1tasl\xF3", "Olasz hidegv\xE9r\u0171", "Oldenburgi", "Orlov \xFCget\u0151", "Orosz h\xE1tasl\xF3", "Orosz ig\xE1sl\xF3", "\xD6szv\xE9r", "Pahlavan", "Palomino", "Pampa", "Pantaneiro", "Paso", "Paso fino", "Percheron", "Persano", "Perzsa Arab", "Pintabian", "Pinto (amerikai foltos l\xF3)", "Pinzgauer", "Pleveni l\xF3", "Poitou l\xF3", "Polesian", "Posavac", "Pozan (l\xF3fajta)", "Przewalski-l\xF3", "Qatgani", "QuArab", "Quariesian", "Quarter horse", "Rajnai melegv\xE9r\u0171", "Rajnai-N\xE9met hidegv\xE9r\u0171", "Ranchero Stock horse", "Renano", "Riding Horse", "Rijpaard", "Rocky mountain p\xF3ni", "Rom\xE1n sportl\xF3", "Rottal", "Sadecki", "Saddlebred", "Salerno (l\xF3fajta)", "Sanhe", "Schleswigi hidegv\xE9r\u0171", "Schwarzwaldi", "Semigreu Romanesc", "Senne", "Shagya-arab", "Shirazi", "Shire", "Slaski", "Slatinany", "Sok\xF3lsk", "Sorraia p\xF3ni", "Spanyol Berber", "Spanyol l\xF3", "Spanyol Muszt\xE1ng", "Spanyol-Norman l\xF3", "Spanyol Jennet l\xF3", "Spotted horse", "Standardbred", "Stuhm", "Strelet Arab", "Suffolk Punch", "Sulphur", "Sulphur Springs Muszt\xE1ng", "Sv\xE9d ardenni", "Sv\xE9d f\xE9lv\xE9r", "Sv\xE9d melegv\xE9r\u0171", "Sv\xE1jci melegv\xE9r\u0171", "Szard\xEDniai l\xF3", "Szic\xEDliai l\xF3", "Szil\xE9ziai N\xF3ri", "Sz\xEDriai l\xF3", "Szlov\xE9n hidegv\xE9r\u0171", "Szovjet ig\xE1sl\xF3", "Szud\xE1n l\xF3", "Taishu", "Tarp\xE1n -Tal\xE1n a Przewalski-l\xF3nak az alfaja", "Tawleed", "Tchenarani", "Tennessee s\xE9t\xE1l\xF3 l\xF3", "Tennuvian", "Tersk l\xF3", "Thessz\xE1liai l\xF3", "Tigris l\xF3", "Tolfetano", "Torij(\xC9szt hidegv\xE9r\u0171)", "Torik (\xC9szt melegv\xE9r\xFC)", "Tosa - kihalt faj", "Trakehneni", "Tuigpaard", "Tundra l\xF3 - kihalt faj", "T\xFCrkm\xE9n l\xF3", "Tyerszki l\xF3", "Ukrajnai Saddle", "Vend\xE9en", "Vesztf\xE1liai hidegv\xE9r\u0171", "Viatka", "Virginia Highlander", "Vlaamperd", "Vladimir l\xF3", "Walkaloosa", "Westf\xE1liai (l\xF3fajta)", "Wielkopolski", "W\xFCrttembergi (l\xF3fajta)", "Wilbur-Cruce Spanish", "Xilongol", "Yabou", "Yili (l\xF3fajta)", "Yorkshire kocsil\xF3", "Zeeland", "Zweibr\xFCckeni (l\xF3fajta)"];
var L15 = { cat: s19, dog: l19, horse: t19 };
var r19 = L15;
var i19 = ["piros", "z\xF6ld", "k\xE9k", "s\xE1rga", "lila", "mentaz\xF6ld", "z\xF6ldesk\xE9k", "feh\xE9r", "fekete", "narancss\xE1rga", "r\xF3zsasz\xEDn", "sz\xFCrke", "gesztenyebarna", "ibolya", "t\xFCrkiz", "csersz\xEDn", "\xE9gsz\xEDnk\xE9k", "lazac", "szilva", "orchidea", "olajz\xF6ld", "magenta", "csontsz\xEDn", "indig\xF3", "arany", "fuksziasz\xEDn", "ci\xE1nk\xE9k", "levendula", "ez\xFCst"];
var o19 = ["K\xF6nyv", "Film", "Zene", "J\xE1t\xE9k", "Elektronika", "Sz\xE1m\xEDt\xF3g\xE9p", "Otthon", "Kert", "Szersz\xE1m", "\xC9lelmiszer", "Eg\xE9szs\xE9g", "Sz\xE9ps\xE9g", "J\xE1t\xE9kszer", "Gyermek", "Baba", "Ruh\xE1zat", "Cip\u0151", "\xC9kszer", "Sport", "Szabadban", "Aut\xF3", "Ipari"];
var n19 = ["Ergonomikus f\u0151n\xF6ki sz\xE9k ragasztott fekete b\u0151rrel \xE9s PVC p\xE1rn\xE1zott \xFCl\xE9ssel \xE9s h\xE1tt\xE1ml\xE1val az eg\xE9sz napos k\xE9nyelem\xE9rt \xE9s t\xE1mogat\xE1s\xE9rt", "Az aut\xF3 elrendez\xE9se az els\u0151 motorb\xF3l \xE1ll, a motor h\xE1tulj\xE1ra szerelt \xE1thelyezett kard\xE1ntengely\u0171 t\xEDpus\xFA sebess\xE9gv\xE1lt\xF3kkal \xE9s n\xE9gyker\xE9k-hajt\xE1ssal", "\xDAj ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Grafika, OS 10 Home, OS Office A & J 2016", "A Dev Byte v\xE9kony \xE9s egyszer\u0171 Maple Gaming billenty\u0171zete eleg\xE1ns testtel \xE9s 7 sz\xEDn\u0171 RGB LED-es h\xE1tt\xE9rvil\xE1g\xEDt\xE1ssal rendelkezik az intelligens funkcionalit\xE1s \xE9rdek\xE9ben", "Az Apollotech B340 egy megfizethet\u0151 vezet\xE9kmentes eg\xE9r, megb\xEDzhat\xF3 kapcsolattal, 12 h\xF3napos akkumul\xE1torid\u0151vel \xE9s modern diz\xE1jnnal", "A Nagasaki Lander t\xF6bb Nagasaki sportker\xE9kp\xE1r-sorozat v\xE9djegyzett neve, amelyek az 1984-es ABC800J-vel indultak", "A futball edz\xE9sre \xE9s szabadid\u0151s c\xE9lokra is j\xF3", "A karbonith\xE1l\xF3s kapuskeszty\u0171k ergonomikus kialak\xEDt\xE1s\xFAak, hogy k\xF6nnyen illeszkedjenek", "Boston legfejlettebb kompresszi\xF3s-viselet technol\xF3gi\xE1ja n\xF6veli az izmok oxig\xE9nell\xE1t\xE1s\xE1t, stabiliz\xE1lja az akt\xEDv izmokat", "A form\xE1lis ingek \xFAj sorozat\xE1t \xD6nt szem el\u0151tt tartva tervezt\xFCk. Illeszked\xE9ssel \xE9s st\xEDlussal, amellyel kit\u0171nik a t\xF6megb\u0151l", "Az Apple Natural\xE9 term\xE9kcsal\xE1dja, amely term\xE9szetes \xF6sszetev\u0151k izgalmas kever\xE9k\xE9t tartalmazza. 100%-ban term\xE9szetes \xF6sszetev\u0151kkel", "Az Andy cip\u0151ket a tart\xF3ss\xE1got \xE9s a trendeket szem el\u0151tt tartva tervezt\xE9k, a cip\u0151k \xE9s szand\xE1lok legst\xEDlusosabb v\xE1laszt\xE9ka"];
var k15 = { adjective: ["Kicsi", "Ergonomikus", "Rusztikus", "Intelligens", "Gy\xF6ny\xF6r\u0171", "Hihetetlen", "Fantasztikus", "Praktikus", "Sima", "Csod\xE1s", "\xC1ltal\xE1nos", "K\xE9zm\u0171ves", "K\xE9zzel k\xE9sz\xEDtett", "Enged\xE9lyezett", "Kifinomult", "M\xE1rka n\xE9lk\xFCli", "Finom"], material: ["Ac\xE9l", "Fa", "Beton", "M\u0171anyag", "Pamut", "Gr\xE1nit", "Gumi", "F\xE9m", "Puha", "Friss", "Fagyott"], product: ["Sz\xE9k", "Aut\xF3", "Sz\xE1m\xEDt\xF3g\xE9p", "Billenty\u0171zet", "Eg\xE9r", "Bicikli", "Labda", "Keszty\u0171", "Nadr\xE1g", "Ing", "Asztal", "Cip\u0151", "Kalap", "T\xF6r\xF6lk\xF6z\u0151", "Szappan", "Tonhal", "Csirke", "Hal", "Sajt", "Szalonna", "Pizza", "Sal\xE1ta", "Virsli", "Csipsz"] };
var H14 = { color: i19, department: o19, product_description: n19, product_name: k15 };
var z15 = H14;
var g18 = { wide: ["janu\xE1r", "febru\xE1r", "m\xE1rcius", "\xE1prilis", "m\xE1jus", "j\xFAnius", "j\xFAlius", "augusztus", "szeptember", "okt\xF3ber", "november", "december"], wide_context: ["janu\xE1r", "febru\xE1r", "m\xE1rcius", "\xE1prilis", "m\xE1jus", "j\xFAnius", "j\xFAlius", "augusztus", "szeptember", "okt\xF3ber", "november", "december"], abbr: ["jan.", "febr.", "m\xE1rc.", "\xE1pr.", "m\xE1j.", "j\xFAn.", "j\xFAl.", "aug.", "szept.", "okt.", "nov.", "dec."], abbr_context: ["jan.", "febr.", "m\xE1rc.", "\xE1pr.", "m\xE1j.", "j\xFAn.", "j\xFAl.", "aug.", "szept.", "okt.", "nov.", "dec."] };
var m19 = { wide: ["h\xE9tf\u0151", "kedd", "szerda", "cs\xFCt\xF6rt\xF6k", "p\xE9ntek", "szombat", "vas\xE1rnap"], wide_context: ["h\xE9tf\u0151", "kedd", "szerda", "cs\xFCt\xF6rt\xF6k", "p\xE9ntek", "szombat", "vas\xE1rnap"], abbr: ["H\xE9", "Ke", "Sze", "Cs\xFCt", "P\xE9", "Szo", "Va"], abbr_context: ["H\xE9", "Ke", "Sze", "Cs\xFCt", "P\xE9", "Szo", "Va"] };
var T13 = { month: g18, weekday: m19 };
var d19 = T13;
var b18 = ["Fizet\xE9si", "Megtakarit\xE1s", "Money Market", "Befektet\xE9s", "Lak\xE1shitel", "Hitelk\xE1rtya", "G\xE9pj\xE1rm\u0171 k\xF6lcs\xF6n", "Szem\xE9lyi k\xF6lcs\xF6n"];
var y17 = ["p\xE9nzbefizet\xE9s", "p\xE9nzfelv\xE9tel", "fizet\xE9s", "sz\xE1ml\xE1z\xE1s"];
var w11 = { account_type: b18, transaction_type: y17 };
var v14 = w11;
var p19 = ["com", "hu", "eu", "net", "org"];
var f19 = ["gmail.com", "hotmail.hu", "hotamil.com", "freemail.hu", "citromail.hu", "outlook.com", "outlook.hu"];
var R12 = { domain_suffix: p19, free_email: f19 };
var u19 = R12;
var e19 = ["Hanna", "Anna", "Zo\xE9", "L\xE9na", "Luca", "Emma", "Zs\xF3fia", "Bogl\xE1rka", "Lili", "Mira", "Lilien", "N\xF3ra", "Laura", "Lara", "Maja", "Fanni", "J\xE1zmin", "Izabella", "Ol\xEDvia", "S\xE1ra", "Gr\xE9ta", "Al\xEDz", "Ad\xE9l", "Lilla", "Liza", "Fl\xF3ra", "Dorka", "Zselyke", "D\xF3ra", "Csenge", "Janka", "Lili\xE1na", "Vikt\xF3ria", "Szofia", "R\xE9ka", "Panna", "Petra", "Dorina", "Natasa", "Blanka", "Eszter", "No\xE9mi", "Em\xEDlia", "Bianka", "Kamilla", "Sz\xF3fia", "Vivien", "Rebeka", "Elizabet", "Linett", "Szofi", "J\xFAlia", "Szonja", "Abig\xE9l", "Mia", "Bella", "Lia", "Nat\xE1lia", "Tamara", "Lotti", "R\xF3za", "Amira", "Eliza", "Panka", "Milla", "Zorka", "Hanga", "Nara", "Norina", "Fruzsina", "Mirella", "Dorottya", "Bor\xF3ka", "Emili", "Regina", "Johanna", "Alexandra", "Di\xE1na", "Elena", "Kinga", "H\xE9di", "Borb\xE1la", "Emese", "B\xEDborka", "Barbara", "Let\xEDcia", "Lujza", "Zita", "Kincs\u0151", "Nina", "Vanda", "Veronika", "Zara", "Lana", "Lora", "Kiara", "L\xEDvia", "Rozina", "Zejnep", "Vir\xE1g"];
var a19 = ["Bence", "M\xE1t\xE9", "Dominik", "Levente", "Noel", "D\xE1niel", "Zal\xE1n", "Marcell", "Oliv\xE9r", "\xC1d\xE1m", "Mil\xE1n", "D\xE1vid", "Botond", "Benett", "\xC1ron", "Zsombor", "Bal\xE1zs", "M\xE1rk", "P\xE9ter", "Krist\xF3f", "Z\xE9t\xE9ny", "Nimr\xF3d", "L\xE1szl\xF3", "Benedek", "Tam\xE1s", "Gerg\u0151", "Patrik", "Zente", "B\xE1lint", "Andr\xE1s", "Zolt\xE1n", "Attila", "Barnab\xE1s", "M\xE1rton", "Hunor", "Korn\xE9l", "Martin", "\xC1kos", "G\xE1bor", "Alex", "Istv\xE1n", "Vince", "\xC1bel", "Kriszti\xE1n", "Zsolt", "J\xE1nos", "Nolen", "Erik", "Bendeg\xFAz", "S\xE1ndor", "J\xF3zsef", "N\xE1ndor", "Rich\xE1rd", "Benj\xE1min", "Soma", "\xC1rmin", "Csaba", "Kevin", "R\xF3bert", "Ferenc", "M\xE1ty\xE1s", "Norbert", "Roland", "Vencel", "Viktor", "Csongor", "Szabolcs", "Mih\xE1ly", "Boldizs\xE1r", "Benjamin", "Simon", "Gergely", "Bertalan", "Tibor", "Z\xE9n\xF3", "Adri\xE1n", "Mikl\xF3s", "Nikolasz", "Vilmos", "Kende", "Imre", "Gell\xE9rt", "Krisztofer", "Don\xE1t", "Vendel", "Bende", "Br\xE1jen", "Dori\xE1n", "Denisz", "S\xE1muel", "No\xE9", "Csan\xE1d", "Lajos", "Kolos", "Alexander", "Laurent", "Mirk\xF3", "Gy\xF6rgy", "N\xE1t\xE1n", "Iv\xE1n"];
var h19 = [.../* @__PURE__ */ new Set([...e19, ...a19])];
var c19 = ["Nagy", "Kov\xE1cs", "T\xF3th", "Szab\xF3", "Horv\xE1th", "Varga", "Kiss", "Moln\xE1r", "N\xE9meth", "Farkas", "Balogh", "Papp", "Tak\xE1cs", "Juh\xE1sz", "Lakatos", "M\xE9sz\xE1ros", "Ol\xE1h", "Simon", "R\xE1cz", "Fekete", "Szil\xE1gyi", "T\xF6r\xF6k", "Feh\xE9r", "Bal\xE1zs", "G\xE1l", "Kis", "Sz\u0171cs", "Kocsis", "Ors\xF3s", "Pint\xE9r", "Fodor", "Szalai", "Sipos", "Magyar", "Luk\xE1cs", "Guly\xE1s", "Bir\xF3", "Kir\xE1ly", "L\xE1szl\xF3", "Katona", "Jakab", "Bogd\xE1n", "Balog", "S\xE1ndor", "Boros", "Fazekas", "Kelemen", "V\xE1radi", "Antal", "Somogyi", "Orosz", "F\xFCl\xF6p", "Veres", "Vincze", "Heged\u0171s", "Budai", "De\xE1k", "Pap", "B\xE1lint", "P\xE1l", "Ill\xE9s", "Vass", "Sz\u0151ke", "V\xF6r\xF6s", "Bogn\xE1r", "F\xE1bi\xE1n", "Lengyel", "Bodn\xE1r", "Sz\xFCcs", "Hajdu", "Hal\xE1sz", "J\xF3n\xE1s", "M\xE1t\xE9", "Sz\xE9kely", "Kozma", "G\xE1sp\xE1r", "P\xE1sztor", "Bakos", "Dud\xE1s", "Major", "Orb\xE1n", "Heged\xFCs", "Vir\xE1g", "Barna", "Nov\xE1k", "So\xF3s", "Tam\xE1s", "Nemes", "Pataki", "Balla", "Farag\xF3", "Kerekes", "Borb\xE9ly", "Barta", "P\xE9ter", "Szekeres", "Csonka", "Mezei", "M\xE1rton", "S\xE1rk\xF6zi"];
var j11 = ["{{name.prefix}} {{name.last_name}} {{name.first_name}}", "{{name.last_name}} {{name.first_name}}"];
var x16 = ["Dr.", "Prof."];
var G14 = { female_first_name: e19, first_name: h19, last_name: c19, male_first_name: a19, name: j11, prefix: x16 };
var S16 = G14;
var B15 = ["+3620#######", "+3630#######", "+3650#######", "+3670#######", "0620#######", "0630#######", "0650#######", "0670#######", "+36 20/###-####", "+36 30/###-####", "+36 50/###-####", "+36 70/###-####", "003620#######", "003630#######", "003650#######", "003670#######"];
var E11 = { formats: B15 };
var A16 = E11;
var K13 = ["abajd\xF3c", "ab\xE1lt", "abaposzt\xF3", "\xE1b\xE9c\xE9s", "aberdeeni", "aberr\xE1lt", "abesszin", "abessz\xEDniai", "abh\xE1z", "abidjani", "abiog\xE9n", "abiotikus", "ablakmos\xF3", "ablakos", "ablaktalan", "ablaktiszt\xEDt\xF3", "ablakt\xF6rl\u0151", "ablak\xFA", "abnorm\xE1lis", "abnormis", "abolicionista", "abonamentes", "abor\xE1lis", "abortuszp\xE1rti", "\xE1brah\xE1mi", "abrakos", "\xE1br\xE1ndkerget\u0151", "\xE1br\xE1ndos", "\xE1br\xE1ndoz\xF3", "\xE1br\xE1zol\xF3", "abroncsos", "abszol\xFAt", "abszolutista", "abszolutisztikus", "abszol\xFAtum", "abszorpci\xF3s", "absztinens", "absztrakt", "abszurd", "ac\xE9ler\u0151s", "ac\xE9lk\xE9k", "ac\xE9lkeret\u0171", "ac\xE9lnemes\xEDt\u0151", "ac\xE9los", "ac\xE9lozott", "ac\xE9lsz\xEDn\u0171", "ac\xE9lsz\xEDv\u0171", "ac\xE9lsz\xFCrke", "ac\xE9lv\xE1zas", "acidofil", "\xE1csol\xE1s", "adagol\xF3", "adakoz\xF3", "adand\xF3", "adangme", "adapt\xEDv", "ad\xE1sv\xE9teli", "adatgazdag", "adatszer\u0171", "adatv\xE9delmi", "\xE1d\xE1z", "addigi", "addikt\xEDv", "addit\xEDv", "adekv\xE1t", "adiabatikus", "adigei", "adjuv\xE1ns", "adminisztr\xE1ci\xF3s", "adminisztrat\xEDv", "ad\xF3", "adogat\xF3", "ad\xF3k\xF6teles", "ad\xF3k\xF6telezett", "adom\xE1nyos", "adom\xE1nyoz\xF3", "adom\xE1s", "ad\xF3mentes", "ad\xF3s", "ad\xF3ss\xE1gmentes", "adott", "ad\xF3-vev\u0151", "ad\xF3z\xE1si", "ad\xF3zatlan", "ad\xF3z\xF3", "adrenerg", "adriai", "adventi kalend\xE1rium", "adventi", "adventista", "affekta", "affekt\xE1l\xF3", "affekt\xE1lt", "affekt\xEDv", "afferens", "afg\xE1n", "afganiszt\xE1ni", "aforisztikus", "afrikaans", "afrikai", "afroamerikai", "afro\xE1zsiai", "agancsnyel\u0171", "agancsos", "\xE1gas", "\xE1gas-bogas", "\xE1gaskod\xF3", "\xE1gazati", "\xE1gazatos", "\xE1gbogas", "\xE1g-bogas", "agg", "agg\xE1lyos", "aggaszt\xF3", "aggat\xF3", "aggkori", "agglutin\xE1l\xF3", "aggodalmas", "aggodalmaskod\xF3", "aggodalomkelt\u0151", "agg\xF3d\xF3", "aggott", "aggreg\xE1lt", "agilis", "agit\xE1ci\xF3s", "agnosztikus", "\xE1gnyes\u0151", "agr\xE1r", "agr\xE1rius", "agr\xE1rszocialista", "agressz\xEDv", "\xE1gr\xF3lszakadt", "\xE1g\xFA", "agyaf\xFArt", "agyagos", "agyags\xE1rga", "agyal\xE1gyult", "agyalapi", "\xE1gyash\xE1z", "agyatlan", "agybajos", "\xE1gyban fekv\u0151", "agybeli", "\xE1gybeli", "\xE1gy\xE9ki", "\xE1gy\xE9kt\xE1ji", "agyi", "\xE1gyi", "agyk\xE1rosodott", "agyk\xE9rgi", "agyoncs\xE9pelt", "agyond\xEDsz\xEDtett", "agyondolgozott", "agyonhajszolt", "agyonhaszn\xE1lt", "agyonhordott", "agyonizzadt", "agyonj\xE1tszott", "agyonmosott", "\xE1gy\xFAs", "agyzsibbaszt\xF3", "\xE1h\xEDtatos", "ajakos", "aj\xE1nd\xE9koz\xF3", "aj\xE1nlatk\xE9r\u0151", "aj\xE1nlatos", "aj\xE1nlattev\u0151", "aj\xE1nlhat\xF3", "aj\xE1nl\xF3", "aj\xE1nlott", "\xE1jtatos", "ajt\xF3nagys\xE1g\xFA", "\xE1jult", "akad\xE1lymentes", "akad\xE1lymentes\xEDtett", "akad\xE1lyozatlan", "akad\xE1lytalan", "akad\xE9kos", "akad\xE9koskod\xF3", "akad\xE9miai", "akad\xE9mikus", "akad\xE9mista", "akadoz\xF3", "akarati", "akaratk\xE9ptelen", "akaratlan", "akaratos", "akarattal", "akarattalan", "akarat\xFA", "akaszt\xF3", "akaszt\xF3s", "akasztott", "akcept\xE1lhat\xF3", "akci\xF3k\xE9pes", "akci\xF3s", "akkori", "akkredit\xE1lt", "akkur\xE1tus", "akn\xE1s", "akrobatikus", "aktat\xE1sk\xE1s", "akt\xEDv", "aktiv\xE1lt", "aktu\xE1lis", "akusztikai", "akusztikus", "akut", "akvarista", "al\xE1bbi", "alacsony", "alacsonyrend\u0171", "alacsonyszint\u0171", "al\xE1d\xFAcolt", "alagsori", "alag\xFAtszer\u0171", "al\xE1\xEDratlan", "al\xE1\xEDr\xF3", "al\xE1\xEDrt", "alakh\u0171", "alaki", "alak\xEDt\xE1si", "alak\xEDthat\xF3", "alak\xEDt\xF3", "alakos", "alakoskod\xF3", "alakszer\u0171", "alaktalan", "alaktani", "alaktart\xF3", "alak\xFA", "alamizsn\xE1s", "alamuszi", "alantas", "alanyi", "alap\xE9rtelmezett", "alapfok\xFA", "alapi", "alap\xEDt\xF3", "alapos", "alaptalan", "alap\xFA", "alapvet\u0151", "\xE1larcos", "\xE1larcszer\u0171", "al\xE1rendel\u0151", "al\xE1rendelt", "alaszkai", "alatti", "alattomos", "al\xE1val\xF3", "al\xE1vetett", "al\xE1zatos", "al\xE1zatoskod\xF3", "alb\xE1n", "albet\xE9tes\xEDtett", "alb\xEDn\xF3", "\xE1lb\xF6lcs", "\xE1lc\xE1zott", "\xE1ld\xE1sos", "\xE1ldatlan", "\xE1ld\xF3", "\xE1ldott", "\xE1ldozati", "\xE1ldozatk\xE9sz", "\xE1ldozatos", "\xE1ldoz\xF3", "al\xE9lt", "aleut", "alfabetikus", "alfanumerikus", "algebrai", "alg\xE9riai", "algoritmikus", "aliciklusos", "aljas", "alk\xE1li", "alkalikus", "alkalmas", "alkalmass\xE1gi", "alkalmatlan", "alkalmatos", "alkalmaz\xE1si", "alkalmazhat\xF3", "alkalmazkod\xF3", "alkalmaz\xF3", "alkalmazott", "alkalmi", "alkalomszer\u0171", "alkati", "alk\xEDmiai", "alkir\xE1lyi", "alkoholellenes", "alkoholf\xFCgg\u0151", "alkoholista", "alkoholmentes", "alkoholos", "alkoholtartalm\xFA", "alkonyati", "alkonyi", "alkotm\xE1nyellenes", "alkotm\xE1nyos", "alkotm\xE1nyoz\xF3", "alkotm\xE1nys\xE9rt\u0151", "alkot\xF3", "alkot\xF3er\u0151", "alkot\xF3h\xE1z", "alkot\xF3i", "alkot\xF3kedv", "alkot\xF3k\xE9pess\xE9g", "alkot\xF3k\xF6z\xF6ss\xE9g", "alkot\xF3munka", "\xE1llamalkot\xF3", "\xE1llambiztons\xE1gi", "\xE1llamellenes", "\xE1llamfelforgat\xF3", "\xE1llamf\xE9rfi\xFAi", "\xE1llamfogoly", "\xE1llami", "\xE1llamk\xF6zi", "\xE1llammonopolista", "\xE1llampolg\xE1ri", "\xE1lland\xF3", "\xE1llapotos", "\xE1ll\xE1shalmoz\xF3", "\xE1ll\xE1sn\xE9lk\xFCli", "\xE1ll\xE1stalan", "\xE1llatbar\xE1t", "\xE1llath\xEDvogat\xF3", "\xE1llati", "\xE1llatias", "\xE1llatkedvel\u0151", "\xE1llat\xF3ri\xE1s", "\xE1llatorvosi", "\xE1llat\xF6vi", "\xE1llattani", "\xE1llatterel\u0151", "allegorikus", "allergi\xE1s", "\xE1llhatatlan", "\xE1llhatatos", "\xE1ll\xEDthat\xF3", "\xE1ll\xEDt\xF3", "\xE1ll\xEDt\xF3lag", "\xE1ll\xEDt\xF3lagos", "\xE1llkapcs\xFA", "\xE1ll\xF3", "\xE1ll\xF3k\xE9pes", "\xE1llom\xE1soz\xF3", "\xE1ll\xF3motor", "\xE1ll\xF3\xF3ra", "\xE1ll\xF3rajt", "\xE1ll\xF3r\xE9sz", "alloszt\xE9rikus", "\xE1llott", "\xE1ll\xF3t\xFCk\xF6r", "\xE1ll\xF3v\xEDz", "alluvi\xE1lis", "\xE1llv\xE1nyos", "\xE1llv\xE1nyoz\xF3", "alm\xE1s", "almaszag\xFA", "almaszed\u0151", "almaszer\u0171", "alm\xE1ssz\xFCrke", "\xE1lmatag", "almaterm\xE9s\u0171", "\xE1lmatlan", "almaz\xF6ld", "\xE1lm\xE9lkod\xF3", "\xE1lmodoz\xF3", "\xE1lmos", "\xE1lmos\xEDt\xF3", "aln\xE9met", "\xE1lnok", "\xE1lombeli", "\xE1lomittas", "\xE1lomsz\xE9p", "\xE1lomszer\u0171", "\xE1lomszusz\xE9k", "alpakka", "alp\xE1ri", "alperesi", "alpesi", "\xE1ls\xE1gos", "als\xF3", "als\xF3bbrend\u0171", "als\xF3-sz\xE1szorsz\xE1gi", "als\xF3szorb", "\xE1lszem\xE9rmes", "\xE1lszent", "\xE1lszentesked\u0151", "alt", "altaji", "\xE1ltal\xE1nos", "altat\xF3", "altern\xE1l\xF3", "alternat\xEDv", "altruista", "alulexpon\xE1lt", "alulfinansz\xEDrozott", "alul\xEDrott", "alult\xE1pl\xE1lt", "alusz\xE9kony", "alveol\xE1ris", "alvil\xE1gi", "alv\xF3", "alv\xF3baba", "alv\xF3szoba", "amat\u0151rbajnoks\xE1g", "amat\u0151rcsapat", "amat\u0151rcsoport", "ambici\xF3zus", "ambivalens", "\xE1mbr\xE1s", "ambul\xE1ns", "amcsi", "ameliorat\xEDv", "amerikai", "amm\xF3ni\xE1s", "ammonita", "amond\xF3", "amorf", "\xE1mul\xF3", "anabolikus", "anaerob", "anakre\xF3ni", "anakronisztikus", "analeptikus", "analgetikus", "an\xE1lis", "analitikai", "analitikus", "anal\xF3g", "analogikus", "anarchista", "anat\xF3miai", "andalg\xF3", "andal\xEDt\xF3", "andal\xFAz", "andorrai", "androgin", "androg\xFCn", "anglik\xE1n", "angol", "angolai", "angolajk\xFA", "angolk\xF3ros", "angolsz\xE1sz", "angyalarc\xFA", "angyalb\xF6gy\xF6r\u0151", "angyalb\u0151r", "angyalcsin\xE1l\xF3", "angyali", "angyalsz\xE9p", "anim\xE1ci\xF3s", "animista", "anizotrop", "\xE1nizsos", "antian\xE9mi\xE1s", "antiaritmi\xE1s", "antibakteri\xE1lis", "antibiotikus", "antibolsevista", "antidemokratikus", "antidepressz\xE1ns", "antidiabetikus", "antidialektus", "antidiszkrimin\xE1ci\xF3s", "antiepileptikus", "antifasiszta", "antifeud\xE1lis", "antif\xF3nia", "antihipertenz\xEDv", "antiimperialista", "antiinfl\xE1ci\xF3s", "antik", "antikapitalista", "antiklerik\xE1lis", "antiklin\xE1lis", "antikomintern", "antikv\xE1r", "antimarxista", "antimikrobi\xE1lis", "antimilitarista", "antioxid\xE1ns", "anti\xF6sztrog\xE9n", "antipatikus", "antiszemita", "antiszepszis", "antiszeptikus", "antiszimmetrikus", "antiszoci\xE1lis", "antisztatikus", "antropog\xE9n", "antropol\xF3giai", "anyagelv\u0171", "anyagi", "anyagias", "anyagtakar\xE9kos", "anyai", "anyajogi", "anyajog\xFA", "anyak\xF6nyvi", "anyanyelvi", "any\xE1nyi", "any\xE1s", "anyas\xE1gi", "any\xE1skod\xF3", "anyaszer\u0171", "anyasz\xFClt", "anyasz\xFClte", "any\xE1tlan", "apacs", "apai", "apajog\xFA", "apas\xE1gi", "ap\xE1ti", "apatikus", "ap\xE1tlan", "ap\xE1ts\xE1gi", "apik\xE1lis", "apiko-labi\xE1lis", "aplasztikus", "apokaliptikus", "\xE1polatlan", "apolitikus", "\xE1pol\xF3", "\xE1polt", "\xE1porodott", "apostoli", "aposzematikus", "\xE1prilisi", "apr\xEDtott", "apr\xF3", "apr\xF3birtok", "apr\xF3-csepr\u0151", "apr\xF3cska", "apr\xF3fej\u0171", "apr\xF3l\xE9kos", "apr\xF3n\xE9p", "apr\xF3sz\xE9n", "apr\xF3vadas", "arab", "\xE1radoz\xF3", "arameus", "\xE1ramfejleszt\u0151", "ar\xE1mi", "\xE1raml\xF3", "\xE1ramtalan", "\xE1ramtalan\xEDt\xF3", "\xE1ramvonalas", "arany", "aranybarna", "aranycsin\xE1l\xF3", "arany\xE9rmes", "aranyf\xE9ny\u0171", "aranykal\xE1szos", "aranykeretes", "aranykez\u0171", "aranykoszor\xFAs", "aranykulcsos", "aranyl\xE1b\xFA", "aranyos", "ar\xE1nyos", "aranyozott", "aranys\xE1rga", "aranysarkanty\xFAs", "aranyszab\xE1ly", "aranysz\xE1j\xFA", "aranysz\xEDn", "aranysz\xEDn\u0171", "aranysz\xEDv\u0171", "aranysz\u0151ke", "aranysz\u0151r\u0171", "ar\xE1nytalan", "aranytartalm\xFA", "arasznyi", "araszolva", "arat\xF3", "arc\xE1tlan", "archaikus", "archeol\xF3giai", "arcpir\xEDt\xF3", "argentin", "ari", "ari\xE1nus", "arisztokrata", "arisztokratikus", "arisztotel\xE9szi", "aritmetikai", "\xE1rjelz\xE9s", "\xE1rk\xE1dos", "arkhim\xE9d\xE9szi", "arktikus", "\xE1rm\xE1nyos", "armini\xE1nus", "\xE1rnyalatnyi", "\xE1rnyalt", "\xE1rnyas", "\xE1rny\xE9kad\xF3", "\xE1rny\xE9kolatlan", "\xE1rny\xE9kolt", "\xE1rny\xE9kos", "\xE1rny\xE9kszer\u0171", "\xE1rny\xE9ktalan", "\xE1rnyszer\u0171", "arom\xE1n", "arom\xE1s", "arraval\xF3", "arrog\xE1ns", "\xE1rtalmas", "\xE1rtalmatlan", "\xE1rtatlan", "art\xE9ri\xE1s", "art\xE9zi", "artikul\xE1latlan", "artikul\xE1lt", "\xE1rt\xF3", "\xE1rulkod\xF3", "\xE1rurejteget\u0151", "\xE1rus\xEDt\xF3", "\xE1rutermel\u0151", "\xE1rva", "\xE1rver\xE9si", "\xE1rverez\u0151", "\xE1satag", "\xE1s\xEDt\xF3", "asken\xE1zi", "\xE1sv\xE1nyi", "\xE1sv\xE1nyolaj", "\xE1sv\xE1nyos", "\xE1sv\xE1nyvizes", "aszal\xF3", "aszalt", "aszeptikus", "aszexu\xE1lis", "aszfaltbety\xE1r", "aszfaltkoptat\xF3", "aszfaltoz\xF3", "aszfaltozott", "aszimmetrikus", "aszimptotikus", "aszinkron", "aszketikus", "aszoci\xE1lis", "aszott", "assz\xE1mi", "asszert\xEDv", "assz\xEDr", "asszoci\xE1ci\xF3s", "asszociat\xEDv", "asszonygy\u0171l\xF6l\u0151", "asszonyi", "asszonyos", "asztali", "aszt\xE9ni\xE1s", "asztm\xE1s", "asztmatikus", "asztrah\xE1n", "asztr\xE1lis", "asztrol\xF3giai", "asztron\xF3miai", "aszt\xFAriai", "asz\xFAs", "\xE1tad\xF3", "\xE1talak\xEDt\xF3", "\xE1talak\xEDtott", "atavisztikus", "\xE1t\xE1zott", "\xE1tdolgozott", "ateista", "\xE1tellenes", "\xE1tereszt\u0151", "\xE1tfagyott", "\xE1tfog\xF3", "\xE1tfut\xE1si", "\xE1tfut\xF3", "\xE1tgondolt", "\xE1th\xE1ghatatlan", "\xE1that\xF3", "\xE1thatolhatatlan", "ath\xE9ni", "\xE1thidalhatatlan", "at\xEDpusos", "\xE1t\xEDr\xF3", "\xE1titat\xF3dott", "\xE1titatott", "\xE1tizzadt", "atka\xF6l\u0151", "\xE1tkarol\xF3", "\xE1tkos", "\xE1tkozott", "\xE1tlagos", "atlanti", "Atlanti", "\xE1tl\xE1thatatlan", "\xE1tl\xE1that\xF3", "\xE1tl\xE1tszatlan", "\xE1tl\xE1tsz\xF3", "\xE1tl\xE9nyeg\xEDt\u0151", "atl\xE9tikai", "atl\xE9tikus", "\xE1tl\xF3s", "\xE1tmeneti", "\xE1tmen\u0151", "\xE1tnedvesedett", "\xE1tn\xE9zett", "\xE1tn\u0151", "atombiztos", "atomhajt\xE1s\xFA", "atomi", "atommeghajt\xE1s\xFA", "atomos", "aton\xE1lis", "\xE1t\xF6r\xF6kl\xF6tt", "\xE1truh\xE1zhatatlan", "\xE1truh\xE1zhat\xF3", "\xE1tszellem\xFClt", "\xE1tsz\u0151tt", "\xE1ttekinthetetlen", "\xE1ttekinthet\u0151", "\xE1tt\xE9rt", "\xE1ttetsz\u0151", "attikai", "\xE1tt\xF6rt", "attrakt\xEDv", "\xE1tutal\xE1si", "\xE1tutaz\xF3", "\xE1t\xFCt\u0151", "\xE1tvihet\u0151", "\xE1tvitt", "atyai", "audio", "audiovizu\xE1lis", "augusztusi", "aulikus", "ausztr\xE1l", "ausztriai", "autentikus", "authentik\xE1lt", "autochton", "autodidakta", "autog\xE9n", "autog\xE9nv\xE1g\xF3", "autogramgy\u0171jt\u0151", "autogramvad\xE1sz", "automatikus", "automatiz\xE1lt", "auton\xF3m", "autoriter", "aut\xF3s", "autotr\xF3f", "avantg\xE1rd", "avar", "avarsz\xEDn\u0171", "avas", "av\xEDtt", "axi\xE1lis", "axiomatikus", "axonometrikus", "azeri", "azonnali", "azonos", "azonos\xEDthat\xF3", "azonos\xEDt\xF3", "azonos\xEDtott", "\xE1zott", "\xE1ztat\xF3", "azt\xE9k", "az\xFAr", "az\xFArk\xE9k", "\xE1zsiai", "baba", "b\xE1beli", "babiloni", "b\xE1bj\xE1t\xE9kos", "b\xE1bj\xE1tsz\xF3", "babon\xE1s", "babos", "bacchusi", "bacilushordoz\xF3", "bacilusmentes", "b\xE1cskai", "badar", "b\xE1doghang\xFA", "b\xE1dogos", "bagatell", "bag\xF3les\u0151", "bag\xF3s", "b\xE1gyadt", "b\xE1gyaszt\xF3", "bajor", "bajororsz\xE1gi", "bajos", "b\xE1jos", "bajszerz\u0151", "b\xE1jtalan", "bajt\xE1rsi", "bajt\xE1rsias", "bajt\xE1rsiass\xE1g", "bajt\xE1rsiatlan", "bajuszos", "bajusztalan", "bakteri\xE1lis", "bakt\xE9riumellenes", "bakt\xE9rium\xF6l\u0151", "bal", "balcsillag", "balcsillagzat", "balesetmentes", "balesetvesz\xE9lyes", "balfasz", "balfedezet", "balf\xE9k", "balga", "balgatag", "balhiedelem", "balhit", "balin\xE9z", "bal\xEDt\xE9let", "balj\xF3s", "balj\xF3slat\xFA", "balk\xE1ni", "balkezes", "balk\xF6rm\u0171", "balk\xF6z\xE9p", "ball\xE1bas", "ballag\xF3", "ballib", "ballisztikai", "ballisztikus", "baloldali", "balszerencs\xE9s", "balti", "balzsamos", "bamba", "b\xE1mulatos", "ban\xE1lis", "b\xE1natos", "bandzsa", "bandzsi", "bangladesi", "banki", "bankjegykiad\xF3", "bankk\xE9pes", "b\xE1ntalmaz\xF3", "b\xE1ntatlan", "b\xE1nt\xF3", "b\xE1nyament\u0151", "b\xE1nyar\xE9szv\xE9nyes", "b\xE1ny\xE1szati", "baptista", "barakklak\xF3", "b\xE1r\xE1nyszel\xEDd", "bar\xE1ti", "bar\xE1tkoz\xF3", "bar\xE1tkoz\xF3s", "bar\xE1tos", "bar\xE1ts\xE1gos", "bar\xE1ts\xE1gtalan", "bar\xE1zd\xE1lt", "bar\xE1zd\xE1s", "barb\xE1r", "barbitursav", "b\xE1rdolatlan", "b\xE1rgy\xFA", "bariton", "barlangi", "barlangkutat\xF3", "barlanglak\xF3", "barna", "barnamez\u0151s", "barn\xE1s", "barn\xE1sfeh\xE9r", "barn\xE1sfekete", "barn\xE1slila", "barn\xE1spiros", "barn\xE1sv\xF6r\xF6s", "barn\xE1sv\xF6r\xF6ses", "barn\xE1sz\xF6ld", "bar\xF3", "b\xE1r\xF3i", "barokk", "baromi", "b\xE1rsonyfekete", "b\xE1rsonyos", "b\xE1rsonypuha", "bas\xE1skod\xF3", "bask\xEDr", "baszk", "b\xE1tor", "b\xE1tor\xEDt\xF3", "b\xE1tortalan", "Bayes-f\xE9le", "baz\xE1lis", "bazaltkem\xE9nys\xE9g\u0171", "b\xE1zikus", "be\xE1ll\xEDthat\xF3", "be\xE1ll\xEDtott", "be\xE1ll\xEDtotts\xE1g\xFA", "be\xE1ll\xF3", "beavatott", "beb\xF6rt\xF6nz\xF6tt", "becsapott", "becser\xE9lhet\u0151", "becses", "b\xE9csi", "becs\xEDpett", "becsm\xE9rl\u0151", "becstelen", "becs\xFCletbeli", "becs\xFCletes", "becs\xFCletrabl\xF3", "becs\xFClets\xE9rt\u0151", "becs\xFClt", "becsv\xE1gy\xF3", "bedrogozott", "be\xE9p\xEDtett", "be\xE9p\xEDthet\u0151", "beesett", "befejezetlen", "befejezett", "befejez\u0151", "befektet\xE9si", "befektet\u0151", "befogad\xF3", "befog\xF3", "befoly\xE1solhat\xF3", "befoly\xE1sol\xF3", "befoly\xE1sos", "bef\u0151ttes", "bef\u0151z\xF6tt", "b\xE9get\u0151", "begyepesedett", "begy\xF6p\xF6s\xF6d\xF6tt", "behat\xF3", "behat\xF3an", "behavazott", "behem\xF3t", "beh\xEDzelg\u0151", "behozatali", "beijedt", "be\xEDrt", "beismer\u0151", "bej\xE1r\xF3", "bejegyzett", "bejelent\u0151", "bej\xF6v\u0151", "b\xE9kany\xFAz\xF3", "b\xE9kebar\xE1t", "b\xE9kebeli", "b\xE9keellenes", "b\xE9k\xE9ltet\u0151", "bek\xE9pzelt", "beker\xEDtett", "b\xE9k\xE9s", "b\xE9keszeg\u0151", "b\xE9keszeret\u0151", "b\xE9k\xE9tlen", "b\xE9ket\u0171r\u0151", "bek\xF6lt\xF6zhet\u0151", "bek\xF6t\xF6tt", "b\xE9k\xFCl\xE9keny", "bel", "belarusz", "bel\xE1thatatlan", "bel\xE1t\xF3", "belebonyol\xF3dott", "bele\xE9rtve", "belefeledkezett", "beleiv\xF3dott", "b\xE9lelt", "belenyugv\xF3", "bel\xE9p\u0151", "belesz\xE1m\xEDtott", "belf\xF6ldi", "belga", "belgiumi", "beli", "b\xE9lpoklos", "belpolitikai", "bels\u0151", "bels\u0151\xE9g\xE9s\u0171", "b\xE9ltiszt\xEDt\xF3", "belv\xE1rosi", "b\xE9lyeges", "b\xE9lyegk\xF6teles", "b\xE9lyegmentes", "bemen\u0151", "bemond\xF3", "bemutat\xF3", "b\xE9na", "benc\xE9s", "ben\xE9pes\xEDtett", "benga", "beng\xE1li", "benini", "bennfoglaltatik", "bennsz\xFCl\xF6tt", "bens\u0151", "bens\u0151s\xE9ges", "benti", "b\xE9nult", "benzinkutas", "benzin\xFCzem\u0171", "beny\xEDl\xF3", "beoszt\xF3", "beosztott", "berakott", "b\xE9rcsal\xF3", "b\xE9relt", "b\xE9rletes", "b\xE9rleti", "b\xE9rlettulajdonos", "berlini", "b\xE9rl\u0151", "b\xE9rmentes", "berozsd\xE1sodott", "ber\xFAgott", "besorozott", "beste", "besti\xE1lis", "bes\xFAg\xF3", "besz\xE1m\xEDthatatlan", "besz\xE1m\xEDthat\xF3", "besz\xE1mol\xF3", "beszari", "besz\xE9des", "besz\xE9dhib\xE1s", "besz\xE9dk\xE9ptelen", "besz\xE9d\u0171", "besz\xE9l\u0151", "beszerezhetetlen", "beszerz\xE9si", "besziv\xE1rg\xF3", "beteg    beteges", "betegesked\u0151", "beteglelk\u0171", "betegseg\xE9lyz\u0151", "betegsz\xE1ll\xEDt\xF3", "beteljes\xEDtetlen", "beteljes\xFCletlen", "beteljes\xFClt", "bet\xE9ti", "betiltott", "betint\xE1zott", "betlehemes", "betolakod\xE1s", "betolakod\xF3", "betonkem\xE9ny", "bet\u0171rendes", "bet\u0171rendi", "bet\u0171z\xE9si", "bety\xE1ros", "beugrat\xF3", "beugr\xF3", "be\xFCl\u0151", "bevakolt", "bevallott", "bev\xE1s\xE1rl\xF3", "bevehetetlen", "bev\xE9sett", "bevezet\u0151", "bevont", "bewusstlos", "bez\xE1rt", "b\xE9zssz\xEDn\u0171", "bibircs\xF3kos", "bibliai", "bibliakutat\xF3", "biblianyom\xF3", "biblikus", "b\xEDbor", "b\xEDborpiros", "b\xEDborszeg\xE9lyes", "b\xEDborsz\xEDn", "b\xEDborv\xF6r\xF6s", "biciklik\xF6lcs\xF6nz\u0151", "bicskanyitogat\xF3", "bifok\xE1lis", "big\xE1mista", "bigott", "bihari", "bih\xE1ri", "bijekt\xEDv", "bikaer\u0151s", "bikanyak\xFA", "bikavad\xEDt\xF3", "bikonvex", "bilabi\xE1lis", "bilater\xE1lis", "bilingv\xE1lis", "bilis", "billeget\u0151", "bimb\xF3s", "bimb\xF3z\xF3", "bin\xE1ris", "binokul\xE1ris", "binomi\xE1lis", "biok\xE9miai", "biol\xF3giai", "bipol\xE1ris", "b\xEDr\xE1l\xF3", "birk\xF3z\xF3", "birodalmi", "b\xEDr\xF3i", "b\xEDr\xF3s\xE1gi", "birtokl\xE1si", "birtokos", "birtokosi", "biszexu\xE1lis", "bitang", "bivalens", "bizakod\xF3", "bizalmas", "bizalmatlan", "bizalomra m\xE9lt\xF3", "biz\xE1nci", "bizantiniz\xE1l\xF3", "bizarr", "bizom\xE1nyi", "bizony\xEDthat\xF3", "bizony\xEDt\xF3", "bizony\xEDtott", "bizonyos", "bizonytalan", "biztat\xF3", "biztons\xE1gi", "biztons\xE1gos", "biztos", "biztos\xEDt\xE1si", "biztos\xEDt\xF3", "biztos\xEDtott", "blaz\xEDrt", "blokkol\xF3", "b\xF3d\xEDt\xF3", "bodor", "bodri", "bodros", "b\xF3dult", "bog\xE1ncsos", "bogaras", "bog\xE1rfekete", "boglyas", "bogos", "boh\xE9m", "boh\xF3", "boh\xF3k\xE1s", "bojtos", "bokorugr\xF3", "bokros", "bokszol\xF3", "bokszos", "boldog", "boldogtalan", "bolg\xE1r", "bolhacs\xEDpett", "bolhairt\xF3", "bol\xEDviai", "bolognai", "bolond", "bolondos", "bolti", "bolt\xEDves", "boltozatos", "bolyg\xF3k\xF6zi", "bolyhos", "bomba", "bombabiztos", "bombas\xE9r\xFClt", "bombasztikus", "bomb\xE1z\xF3", "boncol\xF3", "bonctani", "bont\xF3", "bonyodalmas", "bonyolult", "bor\xE1szati", "borb\xE1t", "bordai", "bordak\xF6zi", "bord\xE1s", "bord\xE1zott", "bord\xF3", "bord\xF3v\xF6r\xF6s", "borissza", "bor\xEDt\xF3", "bor\xEDz\u0171", "borkedvel\u0151", "borm\xE9r\u0151", "born\xEDrt", "borong\xF3s", "boros", "borosty\xE1nsz\xEDn", "borosty\xE1nsz\xEDn\u0171", "borotv\xE1latlan", "boroz\xF3", "borsos", "bors\xF3z\xF6ld", "borszag\xFA", "borsz\xEDn\u0171", "bortermel\u0151", "borult", "bor\xFAs", "borvir\xE1gos", "borv\xF6r\xF6s", "borzalmas", "borzas", "borzaszt\xF3", "borzderes", "bosny\xE1k", "boszniai", "boszork\xE1nyos", "bosszant\xF3", "bossz\xFAs", "bossz\xFAszomjas", "bossz\xFAv\xE1gy\xF3", "botanikai", "botanikus", "botcsin\xE1lta", "botf\xFCl\u0171", "botladoz\xF3", "botor", "botr\xE1nyos", "botswanai", "bozontos", "boz\xF3tos", "b\u0151", "b\u0151besz\xE9d\u0171", "b\u0151g\u0151", "b\xF6gy\xF6s", "b\xF6h\xF6m", "b\xF6jti", "b\u0151kez\u0171", "b\xF6lcs", "b\xF6lcseleti", "b\u0151rbar\xE1t", "b\u0151rbarna", "b\u0151rd\xEDszm\u0171ves", "b\u0151rgy\xF3gy\xE1szati", "b\u0151rkem\xE9nyed\xE9ses", "b\u0151rk\xF6t\xE9s\u0171", "b\u0151r\xF6s", "b\u0151rszag\xFA", "b\u0151rv\xE1g\xF3", "b\u0151s\xE9ges", "b\u0151sz", "b\xF6szme", "b\u0151velked\u0151", "brass\xF3i", "brazil", "breton", "brilli\xE1ns", "brit", "bronz\xE9rmes", "bronzv\xF6r\xF6s", "bronzsz\xEDn", "bronzsz\xEDn\u0171", "brut", "brut\xE1lis", "brutt\xF3", "br\xFCsszeli", "b\xFAbos", "budapesti", "buddhista", "buggyant", "buggyos", "bugyog\xF3", "bugyuta", "buja", "b\xFAjdos\xF3", "bujtogat\xF3", "bukaresti", "bukk\xE1lis", "bukkan\xF3", "buk\xF3", "bukott", "buktat\xF3", "bulg\xE1r", "bulg\xE1riai", "bund\xE1s", "bunk\xF3s", "burj\xE1nz\xF3", "burj\xE1t", "burkolatlan", "burkolt", "burleszk", "burmai", "burzso\xE1", "b\xFAs", "busa", "b\xFAskomor", "buta", "but\xE9li\xE1s", "b\xFAtorozatlan", "b\xFAtorozott", "butykos", "b\xFAzak\xE9k", "b\xFAzavir\xE1gk\xE9k", "b\xFAzavir\xE1gsz\xEDn", "buz\xE9rv\xF6r\xF6s", "buzg\xF3", "b\u0171b\xE1jos", "b\xFCd\xF6s", "b\u0171nb\xE1nati", "b\u0171nb\xE1n\xF3", "b\u0171n\xF6s", "b\u0171n\xF6z\u0151", "b\u0171nr\xE9szes", "b\u0171ntelen", "b\xFCntetend\u0151", "b\xFCntethet\u0151", "b\xFCntetlen", "b\xFCntet\u0151", "b\xFCntet\u0151jogi", "b\u0171ntudatos", "b\u0171n\xFCgyi", "b\u0171nv\xE1di", "b\xFCrokratikus", "b\xFCszke", "b\xFCtyk\xF6s", "b\u0171v\xF6s", "b\u0171z\xF6s", "c\xE1b\xE1r", "cafatos", "c\xE1folhatatlan", "c\xE1folhat\xF3", "c\xE1fol\xF3", "cafrangos", "c\xE1pamentes", "c\xE9da", "cefet", "c\xE9klav\xF6r\xF6s", "c\xE9lir\xE1nyos", "c\xE9lnyelvi", "c\xE9lorient\xE1lt", "c\xE9lravezet\u0151", "c\xE9lszer\u0171", "c\xE9lszer\u0171tlen", "c\xE9ltalan", "c\xE9ltudatos", "centen\xE1riumi", "centrifug\xE1lis", "centripet\xE1lis", "cenzori", "cenz\xFAr\xE1zatlan", "chilei", "ci\xE1ntartalm\xFA", "cifra", "cig\xE1ny", "cig\xE1nybarna", "cig\xE1nyk\xE9p\u0171", "ciki", "ciklikus permut\xE1ci\xF3", "ciklikus", "ciklotim", "ciklus", "cikorny\xE1s", "c\xEDmertani", "c\xEDm\u0171", "c\xEDmzetes", "cing\xE1r", "cinikus", "cinkfeh\xE9r", "cin\xF3berpiros", "cip\u0151foltoz\xF3", "cip\u0151jav\xEDt\xF3", "ciprusi", "cirill", "cirmos", "ciszterci", "citromos", "citroms\xE1rga", "civil", "civiliz\xE1latlan", "civiliz\xE1lt", "colos", "combcsonti", "Costa-Rica-i", "c\xF6pek", "c\xF6pekes", "cuki", "cukorbeteg", "cukormentes", "cukros", "cukrozott", "cs\xE1b\xEDt\xF3", "cs\xE1bos", "csacsog\xF3", "csal\xE1dbar\xE1t", "csal\xE1d\xE9p\xEDt\u0151", "csal\xE1di", "csal\xE1dias", "csal\xE1dos", "csal\xE1dtalan", "csalafinta", "csal\xE1rd", "cs\xE1l\xE9", "csalfa", "csalhatatlan", "csal\xF3dott", "csal\xF3ka", "cs\xE1mcsog\xF3s", "cs\xE1mp\xE1s", "csapad\xE9kd\xFAs", "csapad\xE9kos", "csapad\xE9kszeg\xE9ny", "csapnival\xF3", "csap\xF3", "csapod\xE1r", "csap\xF3d\xF3", "csapong\xF3", "csapzott", "cs\xE1rd\xE1s", "cs\xE1sz\xE1ri", "cs\xE1sz\xE1rs\xE1rga", "csatlakoz\xF3", "csatolt", "csattan\xF3s", "csavarg\xF3", "csavaros", "csavart", "csecsem\u0151arc\xFA", "csecsen", "cseh", "csehszlov\xE1k", "csek\xE9ly", "cselekv\u0151 mell\xE9kn\xE9vi igen\xE9v", "cselekv\u0151", "cselekv\u0151k\xE9pes", "cselekv\u0151k\xE9ptelen", "csemp\xE9szett", "csendes", "csendes-\xF3ce\xE1ni", "csenev\xE9sz", "cseng\u0151", "cseng\u0151s", "cseperg\u0151s", "cseppfoly\xF3s", "cserepes", "cseresznyepiros", "cseresznyesz\xEDn\u0171", "cserfes", "csersz\xEDn\u0171", "cserzett", "cseveg\u0151", "csics\xE1s", "csicska", "csig\xE1s", "csikland\xF3s", "csikorg\xF3", "csikorg\xF3s", "cs\xEDkos", "cs\xEDkozott", "csillag\xE1szati", "csillagd\xEDszes", "csillagf\xE9nyes", "csillagkeresztes", "csillagk\xF6zi", "csillagos", "csillagszem\u0171", "csillagtalan", "csill\xE1mos", "csillap\xEDthatatlan", "csillap\xEDt\xF3", "csillog\xF3", "csin\xE1l\xF3", "csin\xE1lt", "csinos", "csintalan", "csip\xE1s", "csip-csup", "cs\xEDpettszem\u0171", "csipk\xE9s", "csipkever\u0151", "csipk\xE9zett", "cs\xEDp\u0151s", "cs\xEDp\u0151sz\xE9less\xE9g\u0171", "cs\xEDramentes", "cs\xEDr\xE1tlan", "cs\xEDr\xE1tlan\xEDtott", "csirics\xE1r\xE9", "csiszolatlan", "csiszol\xF3", "csiszolt", "csod\xE1latos", "csod\xE1latra m\xE9lt\xF3", "csod\xE1s", "csodasz\xE9p", "csokol\xE1d\xE9barna", "csokol\xE1d\xE9s", "csomagk\xFCld\u0151", "csomagol\xF3", "csomagolt", "csom\xF3", "csom\xF3ponti", "csom\xF3s", "cs\xF3naknyi", "csonka", "csonth\xE9jas", "csontos", "csontsz\xE1raz", "csontsz\xEDn", "csontsz\xEDn\u0171", "csoportos", "csorba", "csorb\xEDtatlan", "csordabika", "csordultig", "cs\xF3r\xE9", "csorg\xF3", "cs\xF3r\xF3", "cs\xF6kev\xE9nyes", "cs\xF6kken\u0151", "cs\xF6kkentett", "cs\xF6kkenthet\u0151", "cs\xF6kkent\u0151", "cs\xF6k\xF6ny\xF6s", "cs\xF6ndes", "cs\xF6p\xF6g\u0151", "cs\xF6ves", "cs\xFAcs\xEDves", "cs\xFAcsos", "cs\xFAcstechnol\xF3gi\xE1j\xFA", "cs\xFAf", "csukasz\xFCrke", "csukcs", "csukl\xF3s", "csukly\xE1s", "csukott", "cs\xFAnya", "csupasz", "csurg\xF3", "csuromv\xEDz", "csuromvizes", "cs\xFAsz\xE1sg\xE1tl\xF3", "cs\xFAsz\xE1smentes", "cs\xFAsz\xF3s", "csuvas", "cs\xFCggedt", "dabasi", "dacos", "dadaista", "dadog\xF3", "dagad\xF3", "dagadoz\xF3", "dagadt", "dag\xE1lyos", "daganatellenes", "daganatk\xE9pz\u0151", "daganatos", "dagaszt\xF3", "dagi", "dakari", "dakkai", "dali\xE1s", "dallamos", "dallamtalan", "dallasi", "dalmahod\xF3", "dalos", "damaszkuszi", "d\xE1n", "d\xE1niai", "darabos", "dar\xE1l\xF3", "dar\xE1lt", "darwini", "darwinista", "de\xE1ki", "de\xE1kos", "debreceni", "decemberi", "decens", "decim\xE1lis", "decis", "d\xE9delgetett", "ded\xF3s", "dedukt\xEDv", "defenz\xEDv", "deficites", "defini\xE1latlan", "degener\xE1lt", "dekadens", "d\xE9k\xE1ni", "deklarat\xEDv", "deklassz\xE1lt", "dekongeszt\xE1ns", "dekorat\xEDv", "d\xE9l-afrikai", "d\xE9l-amerikai", "d\xE9lceg", "delejes", "delel\u0151", "d\xE9lel\u0151tti", "d\xE9lel\u0151tt\xF6s", "d\xE9l-eur\xF3pai", "deli", "d\xE9li", "d\xE9lib\xE1bos", "d\xE9lies", "delikvens", "d\xE9lkeleti", "d\xE9ln\xE9met", "d\xE9lnyugati", "d\xE9lszaki", "d\xE9lszl\xE1v", "deltoid", "d\xE9lut\xE1ni", "d\xE9lvid\xE9ki", "demark\xE1ci\xF3s", "demilitariz\xE1lt", "demogr\xE1fiai", "demokr\xE1ciaellenes", "demokrata", "demokratikus", "denatur\xE1lt", "dent\xE1lis", "depresszi\xF3s", "der\xE9k", "derekas", "der\xE9ksz\xF6g\u0171", "dereng\u0151", "deres", "deresed\u0151", "der\xEDtett", "der\xEDt\u0151", "d\xE9rlepte", "dermedt", "dermeszt\u0151", "der\u0171l\xE1t\xF3", "der\xFClt", "der\u0171s", "destrukt\xEDv", "deszant", "deszkamell\u0171", "desztill\xE1lt", "detektoros", "d\xE9vaj", "d\xE9van\xE1gari", "devi\xE1ns", "diabetikus", "diadalmas", "diagon\xE1lis", "di\xE1kos", "diatonikus", "dichot\xF3m", "dics\xE9retes", "dics\xE9r\u0151", "dics\u0151", "dics\u0151\xEDt\u0151", "dics\u0151s\xE9ges", "dicstelen", "didaktikus", "diderg\u0151s", "di\xE9t\xE1s", "differenci\xE1lhat\xF3", "differenci\xE1lis", "diff\xFAz", "dift\xE9ri\xE1s", "digit\xE1lis", "d\xEDjazatlan", "d\xEDjazott", "d\xEDjfizet\u0151", "d\xEDjk\xF6teles", "d\xEDjmentes", "d\xEDjtalan", "diktat\xF3rikus", "dilin\xF3s", "diliny\xF3s", "dilis", "diluvi\xE1lis", "dinamikus", "dinasztikus", "dinka", "dinnye", "di\xF3barna", "di\xF3fasz\xEDn", "di\xF3sz\xEDn", "diplom\xE1ciai", "diplom\xE1s", "diplomatikus", "direkt", "direktterm\u0151", "diribdarab", "d\xEDszelg\u0151", "d\xEDszes", "diszfunkcion\xE1lis", "diszharmonikus", "d\xEDsz\xEDt\u0151", "diszjunkt", "diszjunkt\xEDv", "diszkrecion\xE1lis", "diszkr\xE9t", "diszkvalifik\xE1lt", "d\xEDsztelen", "disztingv\xE1lt", "divatjam\xFAlt", "divatos", "divatsz\xEDn", "divergens", "dobog\xF3", "dobog\xF3s", "dogmatikus", "doh\xE1nybarna", "doh\xE1nyos", "doh\xE1nyszer\u0171", "doh\xE1nysz\xEDn", "doh\xE1nysz\xEDn\u0171", "doh\xE1nyz\xF3", "dohos", "doktori", "dolga\xE9rt\u0151", "dolgos", "dolgoz\xF3", "dolm\xE1nyos", "dologi", "dombor\xEDtott", "dombor\xFA", "dombos", "domin\xE1l\xF3", "dominik\xE1nus", "doppingellenes", "d\xF3r", "d\xF6bbenetes", "d\xF6c\xF6g\u0151s", "d\xF6gl\xF6tt", "d\xF6g\xF6s", "d\xF6gv\xE9szes", "d\u0151lt", "d\xF6lyf\xF6s", "d\xF6nt\u0151", "d\xF6nt\u0151b\xEDr\xF3i", "d\xF6rzs\xF6l\u0151", "d\u0151zs\xF6l\u0151", "drab\xE1lis", "dr\xE1ga", "dr\xE1gal\xE1tos", "dr\xE1k\xF3i", "dr\xE1mai", "dramatikus", "dramaturgiai", "drapp", "drasztikus", "dravida", "drogf\xFCgg\u0151", "dr\xF3t n\xE9lk\xFCli", "dr\xF3tn\xE9lk\xFCli", "dr\xF3tsz\u0151r\u0171", "du\xE1lis", "dubl\xE9", "dublini", "duci", "dud\xE1s", "dudv\xE1s", "dugi", "duhaj", "dum\xE1s", "dunai", "dundi", "dupla", "dur\xE1nci", "durc\xE1s", "durva", "d\xFAs", "d\xFAsgazdag", "duzzadt", "d\xFCh\xEDt\u0151", "d\xFCh\xF6dt", "d\xFCh\xF6ng\u0151", "d\xFCh\xF6s", "d\xFCledez\u0151", "dzsainista", "dzsesszes", "dzsibuti", "dzsip\xF3", "dzsuv\xE1s", "eb\xE9dl\u0151asztal", "\xE9ben", "\xE9benfekete", "\xE9ber", "\xE9bredez\u0151", "\xE9bred\u0151", "ecetes", "echt", "ecuadori", "eddigi", "\xE9des", "\xE9des-b\xFAs", "\xE9desk\xE9s", "\xE9desv\xEDzi", "\xE9dessz\xE1j\xFA", "\xE9di", "edz\xE9si", "edzett", "effekt\xEDv", "eff\xE9le", "\xE9gbeki\xE1lt\xF3", "eg\xE9rsz\xFCrke", "\xE9g\xE9s\u0171", "eg\xE9sz", "eg\xE9szs\xE9ges", "eg\xE9szs\xE9gtelen", "eg\xE9szs\xE9g\xFCgyi", "\xE9getett", "\xE9get\u0151", "\xE9ghajlati", "\xE9ghetetlen", "\xE9ghet\u0151", "\xE9gi", "egocentrikus", "egoista", "\xE9g\u0151", "\xE9g\u0151piros", "\xE9gsz\xEDnk\xE9k", "egzakt", "egzotikus", "egyablakos", "egy\xE1g\xFA", "egy\xE1gyas", "egy\xE1rbocos", "egybehangz\xF3", "egybev\xE1g\xF3", "egy\xE9b", "egyedi", "egyeduralkod\xF3", "egyeduralmi", "egyed\xFCl\xE1ll\xF3", "egyed\xFCli", "egyed\xFCll\xE9t", "egyemeletes", "egyen\xE9rt\xE9k\u0171", "egyenes", "egyenetlen", "egy\xE9ni", "egyenjog\xFA", "egyenletes", "egyenl\xEDt\u0151", "egyenl\xEDt\u0151i", "egyenl\u0151", "egyenrang\xFA", "egyenruh\xE1s", "egy\xE9rtelm\u0171", "egyes", "egyes\xEDtett", "egyes\xFClt", "egyetemes", "egyetemi", "egyetlen", "egy\xE9ves", "egyezm\xE9nyes", "egyez\u0151", "egyeztetett", "egyfelvon\xE1sos", "egyforma", "egyf\xFCl\u0171", "egyhang\xFA", "egyharmad", "egyh\xE1zi", "egyh\xE1zk\xF6zs\xE9gi", "egyh\xF3napos", "egyidej\u0171", "egyiptomi", "egyir\xE1ny\xFA", "egyistenh\xEDv\u0151", "egy\xEDv\xE1s\xFA", "egyjegy\u0171", "egykamar\xE1s", "egykar\xFA", "egykedv\u0171", "egykez\u0171", "egykori", "egykor\xFA", "egyl\xE1b\xFA", "egylaki", "egym\xE1ssal felcser\xE9lhet\u0151", "egymolekul\xE1s", "egynapi", "egynapos", "egynem\u0171", "egyny\xE1ri", "egyoldalas", "egyoldal\xFA", "egy\xF6ntet\u0171", "egypet\xE9j\u0171", "egyp\xF3lus\xFA", "egyp\xFAp\xFA", "egyr\xE9szes", "egys\xE9ges", "egysejt\u0171", "egys\xEDk\xFA", "egys\xEDn\u0171", "egysoros", "egyszarv\xFA", "egyszem\xE9lyes", "egyszem\u0171", "egyszeri", "egyszer\u0171", "egyszer\u0171s\xEDtett", "egyszik\u0171", "egysz\xEDn\u0171", "egyszob\xE1s", "egysz\xF3lam\xFA", "egysz\xF3tag\xFA", "egytag\xFA", "egy\xFCgy\u0171", "egy\xFCl\xE9ses", "egy\xFCtt\xE9rz\u0151", "egy\xFCttes", "egyv\xE1g\xE1ny\xFA", "\xE9hes", "ehetetlen", "ehet\u0151", "\xE9hez\u0151", "\xE9jfekete", "\xE9jf\xE9li", "\xE9jjeli", "\xE9jszakai", "\xE9kes", "\xE9kessz\xF3l\xF3", "\xE9k\xEDr\xE1sos", "eklat\xE1ns", "eklektikus", "\xE9ktelen", "ekvivalens", "elad\xE1si", "eladatlan", "eladhatatlan", "eladhat\xF3", "elad\xF3", "elad\xF3sodott", "elaggott", "el\xE1rasztott", "el\xE1rvult", "elasztikus", "el\xE1tkozott", "elbizakodott", "elb\u0171v\xF6l\u0151", "elb\u0171v\xF6lt", "elcsavart", "elcs\xE9pelt", "elcsig\xE1zott", "elcsod\xE1lkozott", "elcs\xFCggedt", "\xE9ldiszjunkt", "eldobhat\xF3", "eld\xF6ntetlen", "eldugott", "elef\xE1ntcsontsz\xEDn", "elef\xE1ntcsontsz\xEDn\u0171", "eleg\xE1ns", "el\xE9gedetlen", "el\xE9gedett", "el\xE9gikus", "el\xE9gs\xE9ges", "el\xE9gtelen", "el\xE9g\xFCletlen", "elektrom\xE1gneses", "elektromos", "elektronikus", "elektrosztatikus", "\xE9lelmes", "element\xE1ris", "elemi", "elengedhetetlen", "\xE9l\xE9nk", "\xE9l\xE9nkbarna", "\xE9l\xE9nkpiros", "\xE9l\xE9nks\xE1rga", "\xE9l\xE9nkz\xF6ld", "eleny\xE9sz\u0151", "el\xE9r\xE9s\u0171", "el\xE9rhetetlen", "el\xE9rhet\u0151", "\xE9les nyelv\u0171", "\xE9les", "elesett", "\xE9leszt\u0151", "\xE9leszt\u0151s", "\xE9letbev\xE1g\xF3", "\xE9leter\u0151s", "\xE9lethossziglani", "\xE9leth\u0171", "\xE9letigenl\u0151", "\xE9letk\xE9pes", "\xE9letk\xE9ptelen", "\xE9letlen", "\xE9letment\u0151", "\xE9letnagys\xE1g\xFA", "\xE9letrajzi", "\xE9letszer\u0171", "\xE9lettani", "\xE9lett\xE1rsi", "\xE9lettel teljes", "\xE9lettelen", "\xE9lettudom\xE1nyi", "\xE9letunt", "\xE9letvesz\xE9lyes", "\xE9letvid\xE1m", "eleven", "elevensz\xFCl\u0151", "el\xE9v\xFClhetetlen", "elfajzott", "elf\xE1sult", "elfeledett", "elfogadhatatlan", "elfogadhat\xF3", "elfogad\xF3", "elfogadott", "elfogat\xF3", "elfoglalt", "elfogulatlan", "elfogult", "elfogyaszthat\xF3", "elfojthatatlan", "elfojtott", "elg\xE1zos\xEDtott", "elhagyatott", "elhagyott", "elhajt\xF3", "elhalasztott", "elhal\xF3", "elhamarkodott", "elhamarkodottan", "elhanyagolhat\xF3", "elhanyagolt", "elh\xE1r\xEDt\xF3", "elhaszn\xE1lhatatlan", "elhaszn\xE1lhat\xF3", "elhat\xE1rozott", "elhelyezett", "\xE9lhetetlen", "elhib\xE1zott", "elhihet\u0151", "elhivatott", "elh\xEDzott", "elhunyt", "elidegen\xEDthetetlen", "elidegen\xEDthet\u0151", "elint\xE9zetlen", "elismer\u0151", "elismert", "elit", "el\xEDt\xE9lend\u0151", "el\xEDt\xE9l\u0151", "elk\xE9pedt", "elk\xE9peszt\u0151", "elk\xE9pzelhetetlen", "elk\xE9pzelhet\u0151", "elker\xFClhetetlen", "elker\xFCl\u0151", "elkeseredett", "elkeser\xEDt\u0151", "elk\xE9sett", "elk\xE9sz\xEDtett", "elk\xE9sz\xFClt", "elk\xEDnzott", "elkoptatott", "elk\xF6telezett", "elk\xF6vetkez\u0151", "elk\xFCl\xF6n\xEDtett", "elk\xFCl\xF6n\xEDt\u0151", "elk\xFCl\xF6n\xFClt", "ell\xE1tatlan", "ell\xE1t\xF3", "ell\xE1tott", "ellazult", "ellen\xE1llhatatlan", "ellen\xE1ll\xF3", "ellen\xE1ll\xF3k\xE9pes", "ellenes", "ellenforradalmi", "elleni", "ellenjavallt", "ellenkultur\xE1lis", "ellen\u0151rizetlen", "ellen\u0151rizhetetlen", "ellen\u0151rizhet\u0151", "ellen\u0151rz\xF6tt", "ellens\xE9ges", "ellenszeg\xFCl\u0151", "ellenszenves", "ellent\xE9tes", "ellentmond\xE1sos", "ellentmond\xE1st nem t\u0171r\u0151", "ellentmond\xF3", "elliptikus", "elmar", "elmaradott", "elmaradt", "elmebeli", "elmebeteg", "elm\xE9leti", "elmen\u0151", "\xE9lm\xE9nygazdag", "elmereng\u0151", "elmer\xFClt", "elm\xE9s", "elmondhatatlan", "elmondhat\xF3", "elmos\xF3dott", "elmozd\xEDthatatlan", "elmozd\xEDthat\xF3", "elm\xFAlt", "elnagyolt", "eln\xE9z\u0151", "eln\u0151iesedett", "eln\xF6ki", "elnyel\xE9si", "elnyomott", "elny\xFAjtott", "elny\u0171tt", "elosztott", "\xE9l\u0151", "el\u0151bbi", "el\u0151\xE9let\u0171", "el\u0151fizet\xE9ses", "el\u0151fizet\u0151i", "el\u0151fordul\xF3", "el\u0151\xEDr\xE1sos", "el\u0151\xEDrt", "el\u0151\xEDt\xE9letes", "el\u0151kel\u0151", "el\xF6lj\xE1r\xF3i", "el\u0151ny\xF6s", "el\u0151nytelen", "el\u0151regy\xE1rtott", "el\u0151rehaladott", "el\u0151rel\xE1t\xF3", "el\u0151ret\xF6lt", "el\u0151seg\xEDt\u0151", "\xE9l\u0151sk\xF6d\u0151", "el\u0151tti", "el\u0151v\xE1rosi", "el\u0151v\xE1s\xE1rl\xE1si", "el\u0151v\xE9teli", "el\u0151vigy\xE1zatlan", "el\u0151vigy\xE1zatos", "el\u0151z\xE9keny", "el\u0151zetes", "el\u0151z\u0151", "elpazarolt", "elpuhult", "elpuszt\xEDthatatlan", "elpusztult", "elragad\xF3", "elragadtatott", "elragadtatva", "elrettent\u0151", "elromlott", "elrugaszkodott", "elsejei", "elsietett", "els\u0151dleges", "els\u0151oszt\xE1ly\xFA", "els\xF6pr\u0151", "els\u0151rang\xFA", "els\u0151rend\u0171", "els\u0151sz\xFCl\xF6tt", "els\xFCllyedt", "els\xFCllyeszthetetlen", "elszabadult", "elsz\xE1molhat\xF3", "elsz\xE1nt", "elszeg\xE9nyedett", "elszigetelt", "elszomor\xEDt\xF3", "elsz\xF3rt", "elsz\xF6k\xF6tt", "elt\xE1ntor\xEDthatatlan", "eltarthat\xF3", "elt\xE1vol\xEDt\xF3", "elt\xE1vol\xEDtott", "elt\xE9r\xEDtett", "elterjedt", "elt\xE9r\u0151", "elter\xFClt", "\xE9ltes", "eltett", "elt\xE9vedt", "elt\xE9velyedett", "eltompult", "eltorlaszolt", "eltorzult", "elt\xF6k\xE9lt", "elt\xF6m\u0151", "elt\u0171nt", "elutas\xEDt\xF3", "el\xFCls\u0151", "el\xFCt\u0151", "elv\xE1gy\xF3d\xF3", "elvakult", "elv\xE1laszthatatlan", "elv\xE1laszt\xF3", "elv\xE1lasztott", "elv\xE1lt", "elvar\xE1zsolt", "elv\xE9gezhet\u0151", "elv\xE9konyod\xF3", "elveszett", "elvesztett", "\xE9lveteg", "elvet\xE9lt", "elvetem\xFClt", "elvezet\xE9s", "\xE9lvezetes", "\xE9lvezhetetlen", "\xE9lvhajh\xE1sz", "\xE9lvhajh\xE1sz\xF3", "elvi", "elviselhetetlen", "elviselhet\u0151", "elviselt", "elvitathatatlan", "elvon\xE1si", "elvon\xF3", "elvont", "elvonult", "elv\xF6r\xF6s\xF6d\xF6tt", "elvszer\u0171", "elvtelen", "elz\xE1rt", "elz\xE1szi", "emberbar\xE1ti", "emberev\u0151", "emberfeletti", "emberf\xF6l\xF6tti", "embergy\u0171l\xF6l\u0151", "emberi", "emberker\xFCl\u0151", "embers\xE9ges", "emberszab\xE1s\xFA", "emberszer\u0171", "embertani", "embertelen", "embrion\xE1lis", "emeletes", "emeleti", "emelkedett", "emelked\u0151", "emelt", "\xE9melyg\u0151", "\xE9melyg\u0151s", "\xE9mely\xEDt\u0151", "em\xE9szt\xE9si", "em\xE9szthetetlen", "em\xE9szthet\u0151", "em\xE9szt\u0151", "eml\xE9kezeter\u0151s\xEDt\u0151", "eml\xE9kezetes", "eml\xE9keztet\u0151", "eml\xEDtett", "eml\u0151s", "emocion\xE1lis", "empirikus", "emulzi\xF3s", "enci\xE1nk\xE9k", "enciklop\xE9dikus", "endog\xE9n", "endokrin", "\xE9nekl\u0151", "energiagazdag", "energikus", "enerv\xE1lt", "enged\xE9keny", "engedelmes", "enged\xE9lyezett", "enged\xE9lyez\u0151", "engedetlen", "engedett", "engesztelhetetlen", "ennival\xF3", "enyhe", "enyh\xEDthet\u0151", "enyh\xEDt\u0151", "enyves", "\xE9p", "\xE9pelm\xE9j\u0171", "epersz\xEDn", "epersz\xEDn\u0171", "ep\xE9s", "epidemiol\xF3giai", "epigrammatikus", "epikai", "epikus", "epilepsziaellenes", "epilepszi\xE1s", "\xE9p\xEDt\xE9si", "\xE9p\xEDt\xE9szeti", "\xE9p\xEDt\u0151", "\xE9pk\xE9zl\xE1b", "\xE9p\xFCletes", "\xE9rces", "\xE9rctartalm\xFA", "erdei", "\xE9rdekes", "\xE9rdekfesz\xEDt\u0151", "\xE9rdekl\u0151d\u0151", "\xE9rdektelen", "erd\xE9lyi", "\xE9rdemd\xFAs", "\xE9rdemes", "\xE9rdemi", "\xE9rdemleges", "\xE9rdeml\u0151", "\xE9rdemtelen", "\xE9rdes", "erd\u0151s", "eredeti", "eredm\xE9nyes", "eredm\xE9nyorient\xE1lt", "ered\u0151", "er\xE9lyes", "\xE9remtani", "er\xE9nyes", "eres", "\xE9retlen", "\xE9rett", "erezett", "\xE9rezhet\u0151", "\xE9rintetlen", "\xE9rintett", "\xE9rinthetetlen", "\xE9rintkez\xE9si", "\xE9rintkez\u0151", "erjeszt\u0151", "erk\xE9lyes", "\xE9rkez\xE9si", "\xE9rkez\u0151", "erk\xF6lcsi", "erk\xF6lcs\xF6s", "erk\xF6lcstelen", "ernyedt", "erog\xE9n", "erotikus", "\xE9r\u0151", "er\u0151ltetett", "er\u0151s", "er\u0151s\xEDtett", "er\u0151skez\u0171", "er\u0151s\xF6d\u0151", "er\u0151szakmentes", "er\u0151szakolt", "er\u0151szakos", "er\u0151teljes", "er\u0151tlen", "\xE9rt\xE9kes", "\xE9rt\xE9kes\xEDt\xE9si", "\xE9rt\xE9kes\xEDt\u0151", "\xE9rt\xE9ktelen", "\xE9rtelmes", "\xE9rtelmetlen", "\xE9rtelmez\u0151", "\xE9rtelmi", "\xE9rtelm\u0171", "\xE9rtes\xFClt", "\xE9rtetlen", "\xE9rthetetlen", "\xE9rthet\u0151", "\xE9rv\xE9nyes", "\xE9rv\xE9nytelen", "\xE9rv\xE9nytelen\xEDtett", "erza", "\xE9rz\xE9kelhet\u0151", "\xE9rz\xE9keny", "\xE9rz\xE9ketlen", "\xE9rz\xE9ki", "\xE9rzelemd\xFAs", "\xE9rzelemgazdag", "\xE9rzelemmentes", "\xE9rzelg\u0151s", "\xE9rzelmes", "\xE9rzelmi", "\xE9rz\xE9stelen", "\xE9rz\xE9stelen\xEDt\u0151", "\xE9rzett", "\xE9rz\u0151", "Erzs\xE9bet-korabeli", "esed\xE9kes", "es\xE9lyes", "esem\xE9nyd\xFAs", "esem\xE9nytelen", "esend\u0151", "esetleges", "esetlen", "esk\xFCszeg\u0151", "esk\xFCv\u0151i", "es\u0151\xE1ll\xF3", "es\u0151csin\xE1l\xF3", "es\u0151s", "es\u0151verte", "es\u0151vizes", "est\xE9ken \xE1t tart\xF3", "esti", "\xE9szak-amerikai", "\xE9szak-d\xE9li", "\xE9szaki b\xFAr", "\xE9szaki", "\xC9szaki", "\xE9szakkeleti", "\xE9szak-koreai", "\xE9szaknyugati", "\xE9szbeli", "eszel\u0151s", "eszement", "eszes", "eszeveszett", "eszkim\xF3", "eszk\xF6z\xF6lhet\u0151", "\xE9szlelhet\u0151", "eszmei", "eszm\xE9letlen", "eszm\xE9nyi", "\xE9szrevehetetlen", "\xE9szrevehet\u0151", "\xE9szrev\xE9tlen", "\xE9szrevev\u0151", "\xE9szszer\u0171", "\xE9sszer\u0171tlen", "\xE9szt", "esztelen", "eszt\xE9tikai", "eszt\xE9tikus", "esz\u0171", "\xE9teri", "etikai", "etikus", "etimol\xF3giai", "eti\xF3p", "eti\xF3piai", "\xE9tkes", "\xE9tkez\xE9si", "\xE9tlen", "etnikai", "etnocentrikus", "etruszk", "\xE9ttermi", "\xE9tv\xE1gygerjeszt\u0151", "\xE9tv\xE1gytalan", "eufemisztikus", "euklideszi", "eur\xE1zsiai", "eur\xF3pai", "evang\xE9likus", "evang\xE9liumi", "eve", "\xE9vel\u0151", "\xE9venk\xE9nti", "\xE9ves", "evez\u0151s", "\xE9vezredes", "\xE9vi", "evidens", "evidentikus", "ev\u0151", "\xE9vsz\xE1zados", "\xE9vtizedes", "excentrikus", "exegetikus", "exkluz\xEDv", "exog\xE9n", "exoterm", "experiment\xE1lis", "explicit", "exploz\xEDv", "exponenci\xE1lis", "extraszenzori\xE1lis", "extr\xE9m", "extr\xE9mista", "extrovert\xE1lt", "ezer\xE9ves", "ezerszeres", "ezoterikus", "ez\xFCst", "ez\xFCst\xE9rmes", "ez\xFCstfeh\xE9r", "ez\xFCst\xF6s", "ez\xFCst\xF6z\xF6tt", "ez\xFCstsz\xEDn", "ez\xFCstsz\xEDn\u0171", "ez\xFCstsz\xFCrke", "fa", "fafej\u0171", "faf\xFAv\xF3s", "fagy\xE1ll\xF3", "fagyaszt\xF3", "fagyasztott", "faggy\xFAs", "fagyos", "fagyott", "fagyzugos", "f\xE1jdalmas", "f\xE1jdalmatlan", "f\xE1jdalomcsillap\xEDt\xF3", "f\xE1jdalommentes", "fajgazdag", "faji", "f\xE1j\xF3", "f\xE1j\xF3s", "fajt\xE1j\xFA", "fajtalan", "fajtiszta", "fak\xF3", "fak\xF3z\xF6ld", "faktori\xE1lis", "fakultat\xEDv", "fal", "fal\xE1nk", "falfeh\xE9r", "fali", "falm\xE1sz\xF3", "fal\xF3", "fals", "fal\xFA", "falubika", "falusi", "falusias", "famentes", "fanatikus", "fantasztikus", "fant\xE1ziad\xFAs", "fant\xE1ziaszeg\xE9ny", "fanyar", "fanyark\xE1s", "fapados", "f\xE1rad\xE9kony", "f\xE1radhatatlan", "f\xE1rads\xE1gos", "f\xE1radt", "faragatlan", "farag\xF3\xE1cs", "faragott", "faramuci", "f\xE1raszt\xF3", "farizeusi", "farmakol\xF3giai", "f\xE1rszi", "f\xE1s sz\xE1r\xFA", "f\xE1s", "fas\xE9", "fasiszta", "f\xE1sult", "fat\xE1lis", "f\xE1tlan", "f\xE1tyolos", "f\xE1tyolszer\u0171", "favastags\xE1g\xFA", "f\xE1z\xE9kony", "f\xE1z\xF3s", "febru\xE1ri", "fecseg\u0151", "fecs\xE9rl\u0151", "fecskefark\xFA", "feddhetetlen", "feddhetetlen\xFCl", "fedelessz\xE1rny\xFA", "fed\xE9lzeti", "fedetlen", "fedett", "fedezetlen", "fed\u0151", "fegyelmezetlen", "fegyelmezett", "fegyelmi", "fegyveres", "fegyverkez\xE9si", "fegyvertelen", "feh\xE9r h\xE1zi", "feh\xE9r", "feh\xE9rarany", "feh\xE9res", "feh\xE9resbarn\xE1s", "feh\xE9rgall\xE9ros", "feh\xE9r\xEDtetlen", "feh\xE9rjed\xFAs", "feh\xE9rv\xE9r\u0171", "fejedelmi", "fejes", "fejetlen", "fejf\xE1j\xF3s", "fejl\xE1b\xFA", "fejletlen", "fejlett", "fejl\u0151d\xE9si", "fejl\u0151d\u0151", "fejneh\xE9z", "fejt\xE1g\xEDt\xF3", "fejtett", "fej\u0171", "fejvesztett", "fek\xE9lyes", "fekete", "fekete-feh\xE9r", "feketepiaci", "feket\xE9s", "fekete-tengeri", "f\xE9kevesztett", "f\xE9kezhetetlen", "f\xE9ktelen", "fekv\u0151", "f\xE9l", "felajzott", "f\xE9l\xE1llati", "f\xE9lautomata", "fel\xE1zott", "f\xE9lbarna", "felbecs\xFClhetetlen", "felbecs\xFClhet\u0151", "f\xE9lc\xE9dul\xE1s", "felder\xEDt\u0151", "feldolgoz\xE1si", "feldolgoz\xF3", "feldolgozott", "f\xE9ldr\xE1ga", "feld\xFAlt", "f\xE9le", "felebar\xE1ti", "feled\xE9keny", "f\xE9l\xE9des", "feledhetetlen", "felejthetetlen", "felejt\u0151", "felekezeti", "f\xE9lelmes", "f\xE9lelmetes", "felel\u0151s", "felel\u0151ss\xE9gteljes", "felel\u0151ss\xE9g\u0171", "felel\u0151tlen", "felem\xE1s", "felemel\u0151", "felemelt", "f\xE9l\xE9nk", "felesleges", "f\xE9l\xE9venk\xE9nti", "f\xE9l\xE9ves", "f\xE9l\xE9vsz\xE1zados", "felez\xE9si", "felez\u0151", "felfegyverzett", "f\xE9lfeud\xE1lis", "felfoghatatlan", "felfoghat\xF3", "felfog\xF3", "felford\xEDtott", "felfordult", "felforgat\xF3", "felf\xFAjhat\xF3", "felfuvalkodott", "felf\xFAv\xF3dott", "felf\xFCggesztett", "f\xE9lf\xFCl\u0171", "f\xE9lg\xF6mb alak\xFA", "felgy\xFClemlett", "felh\xE1bor\xEDt\xF3", "felh\xE1borodott", "felhaszn\xE1l\xE1si", "felhaszn\xE1latlan", "felhaszn\xE1lhat\xF3", "felhaszn\xE1l\xF3", "felhaszn\xE1l\xF3i", "felhatalmazott", "f\xE9lhavi", "f\xE9lhivatalos", "f\xE9lholt", "f\xE9lhom\xE1lyos", "felh\u0151s", "felh\u0151tlen", "felid\xE9z\u0151", "f\xE9lig struktur\xE1lt", "feliratos", "felismerhetetlen", "felismerhet\u0151", "felj\xE1r\xF3", "feljelent\u0151", "felkapott", "f\xE9lkar\xFA", "felkent", "f\xE9lk\xE9sz", "felk\xE9sz\xFCletlen", "felk\xE9sz\xFClt", "f\xE9lkez\u0171", "felki\xE1lt\xF3", "f\xE9lkil\xF3s", "felk\xF6t\xF6tt", "f\xE9lk\xF6v\xE9r", "f\xE9ll\xE1b\xFA", "fellebbez\u0151", "fellebbviteli", "fellelkes\xFClt", "fellengz\u0151", "fellengz\u0151s", "f\xE9lmerev", "f\xE9lmeztelen", "f\xE9lm\u0171velt", "f\xE9lnapos", "f\xE9ln\xF3t\xE1s", "feln\u0151tt", "felnyergelt", "f\xE9loldalas", "f\xE9l\xF3r\xE1s", "f\xE9l\u0151", "f\xE9l\u0151s", "f\xE9lre\xE9rtett", "f\xE9lre\xE9rthetetlen", "f\xE9lre\xE9rthet\u0151", "f\xE9lrees\u0151", "f\xE9lreismerhetetlen", "f\xE9lreismert", "f\xE9lremagyar\xE1zhat\xF3", "f\xE9lrevezet\u0151", "fels\xE9ges", "fels\u0151", "fels\u0151bbrend\u0171", "fels\u0151fok\xFA", "fels\u0151oszt\xE1lybeli", "fels\u0151szorb", "felszabadult", "felsz\xE1ntott", "f\xE9lsz\xE1raz", "felszarvazott", "felszeg", "f\xE9lszeg", "f\xE9lszem\u0171", "f\xE9lszigeti", "felsz\xEDnes", "f\xE9lszintetikus", "felsz\xEDv\xF3", "felsz\xF3l\xEDt\xF3", "feltart\xF3ztathatatlan", "feltehet\u0151", "f\xE9lt\xE9keny", "felt\xE9teles", "felt\xE9telezett", "felt\xE9telezhet\u0151", "felt\xE9telezhet\u0151en", "felt\xE9tlen", "felt\xF6lt\xF6tts\xE9g", "felt\xF6rekv\u0151", "felt\u0171n\u0151", "felt\u0171n\u0151sk\xF6d\u0151", "fel\xFAj\xEDtand\xF3", "fel\xFCgyel\u0151", "fel\xFCletes", "fel\xFCleti", "fel\xFClm\xFAlhatatlan", "f\xE9lvad", "felv\xE1zolt", "felvev\u0151k\xE9pes", "f\xE9lvezet\u0151", "f\xE9lvil\xE1gi", "felvil\xE1gosult", "f\xE9mes", "f\xE9mtartalm\xFA", "feneketlen", "fenn\xE1ll\xF3", "fennh\xE9j\xE1z\xF3", "fennk\xF6lt", "fenntarthat\xF3", "fenntartott", "fens\xE9ges", "fens\u0151bbs\xE9ges", "fent eml\xEDtett", "fenti", "fenyeget\u0151", "f\xE9nyes", "f\xE9nyes\xEDtett", "f\xE9nyezett", "f\xE9nyl\u0151", "f\xE9nytelen", "f\xE9ny\u0171z\u0151", "ferde", "ferdeszimmetrikus", "f\xE9reghajt\xF3", "f\xE9regmentes", "f\xE9reg\u0171z\u0151", "ferences", "f\xE9rfias", "f\xE9rges", "fergeteges", "f\xE9rjezett", "fer\xF6eri", "ferrom\xE1gneses", "fert\u0151tlen\xEDt\u0151", "fert\u0151z\xE9sellenes", "fert\u0151z\u0151", "fert\u0151z\xF6tt", "feslett", "fess", "fest\xE9kes", "festetlen", "festett", "fest\u0151i", "f\xE9s\xFCletlen", "feszes", "fesztelen", "fesz\xFClt", "feud\xE1lis", "fiatal", "fiatalkori", "fiatalos", "fick\xF3s", "fidzsi", "figyelemkelt\u0151", "figyelemre m\xE9lt\xF3", "figyelmes", "figyelmetlen", "figyelmeztet\u0151", "figyel\u0151ablakos", "fikt\xEDv", "filipp\xEDn\xF3", "filiszteus", "filmes", "filmgy\xE1ri", "filmh\xEDrad\xF3s", "filmszer\u0171", "filol\xF3giai", "filoz\xF3fiai", "filozofikus", "finn", "finnugor", "finom", "finomkod\xF3", "finny\xE1s", "firenzei", "fitos", "fitotoxikus", "fitt", "fi\xFAs", "fix", "fizet\xE9sk\xE9ptelen", "fizetetlen", "fizetett", "fizet\u0151", "fizet\u0151k\xE9pes", "fizikai", "fizik\xE1lis", "fiziol\xF3giai", "flamand", "flancos", "flanel", "flegmatikus", "flekt\xE1l\xF3", "flott", "fodros", "fogadalmi", "fogad\xF3", "fogadott", "fogalmi", "fogamz\xE1sg\xE1tl\xF3", "fogas", "fogatlan", "fogdmeg", "fog\xE9kony", "fogh\xEDjas", "foglalkoz\xE1si", "foglalt", "fogmedri", "fog\xF3", "fog\xF3s", "fogyaszt\xE1si", "fogyaszt\xF3i", "fogyat\xE9kos", "fogy\xF3", "fojt\xF3", "fojtogat\xF3", "fojtott", "fok\xE1lis", "fokozatos", "fokozhat\xF3", "fokoz\xF3", "fokoz\xF3d\xF3", "fokozott", "foltos", "foltozott", "folttalan", "folyamatos", "folyami", "foly\xE9kony", "folytat\xE1sos", "folytonos", "fon\xE1k", "fondorlatos", "fonetikus", "fonott", "fontos", "fontoskod\xF3", "fonnyadt", "ford\xEDt\xF3", "ford\xEDtott", "ford\xEDtottan ar\xE1nyos", "forgalmas", "forgalmi", "forg\xF3", "formabont\xF3", "formai", "form\xE1lhat\xF3", "form\xE1lis", "form\xE1l\xF3", "form\xE1s", "form\xE1tlan", "forradalmi", "forral\xF3", "forral\xF3vizes", "forr\xE1snyelvi", "forraszt\xF3", "forr\xF3", "forr\xF3fej\u0171", "forrong\xF3", "forr\xF3v\xE9r\u0171", "fort\xE9lyos", "fortissimo", "fosszilis", "fosztogat\xF3", "fotog\xE9n", "f\u0151", "f\u0151iskolai", "f\xF6ldalatti", "f\xF6ldh\xF6zragadt", "f\xF6ldi", "f\xF6ldk\xF6zeli", "f\xF6ldk\xF6zi", "f\xF6ldk\xF6zi-tengeri", "f\xF6ldm\u0171vel\xE9si", "f\xF6ld\xF6nk\xEDv\xFCli", "f\xF6ld\xF6nt\xFAli", "f\xF6ldrajzi", "f\xF6ldszintes", "f\xF6ldsz\xEDn\u0171", "f\xF6l\xE9nyes", "f\xF6l\xE9nyesked\u0151", "f\xF6lnyergelt", "f\xF6l\xF6sleges", "f\u0151n\xE9vi", "f\u0151papi", "f\xF6rtelmes", "f\xF6sv\xE9ny", "f\u0151tt", "f\u0151\xFCt\u0151\xE9ri", "f\u0151v\xE1rosi", "f\xF6v\u0151", "f\u0151z\u0151", "francia", "franciaellenes", "francos", "frank\xF3", "frapp\xE1ns", "frekvent\xE1lt", "frenetikus", "frigid", "frikat\xEDv", "friss", "friuli", "frivol", "fr\xEDz", "front\xE1lis", "front\xE9rz\xE9keny", "frusztr\xE1l\xF3", "frusztr\xE1lt", "fukar", "fullaszt\xF3", "funkcion\xE1lis", "fura", "furcsa", "furfangos", "furk\xF3s", "furm\xE1nyos", "fut\xF3lagos", "futtathat\xF3", "futurisztikus", "f\xFAv\xF3s", "f\xFAzi\xF3s", "f\xFCggetlen", "f\xFCggetlens\xE9gi", "f\xFCgg\u0151", "f\xFCgg\u0151leges", "f\xFClbem\xE1sz\xF3", "f\xFCles", "f\xFCl\xE9szeti", "f\xFClhallgat\xF3s", "f\xFClhas\xEDt\xF3", "f\xFClhasogat\xF3", "f\xFClledt", "f\xFCl\xF6p-szigeteki", "f\xFClrepeszt\u0151", "f\xFCls\xE9rt\u0151", "f\xFClsiket\xEDt\u0151", "f\xFCl\u0171", "f\xFCrge", "f\xFCrk\xE9sz\u0151", "f\xFCstfarag\xF3", "f\xFCst\xF6lg\u0151", "f\xFCst\xF6lt", "f\xFCst\xF6s", "f\xFCstsz\xEDn\u0171", "f\u0171szeres", "f\u0171szerezett", "f\u0171t\u0151", "f\xFCty\xFCl\u0151", "f\xFCves", "f\u0171z\xF6ld", "gaboni", "gagauz", "gagyi", "gal\xE1d", "g\xE1l\xE1d", "galambl\xF6v\u0151", "galamb\u0151sz", "galambszel\xEDds\xE9g\u0171", "galambsz\xEDv\u0171", "galambsz\xFCrke", "galambterm\xE9szet\u0171", "galiciai", "gal\xEDciai", "gall", "garasos", "gar\xE1zda", "gasztron\xF3miai", "g\xE1tl\xE1sos", "g\xE1tl\xF3", "gaz", "gazdag", "gazdas\xE1gi", "gazdas\xE1gos", "gazd\xE1tlan", "g\xE1zhatlan", "g\xE1znem\u0171", "gazos", "g\xE1zos", "gejl", "gener\xE1l", "genetikai", "gennyes", "geol\xF3giai", "geom\xE1gneses", "geometriai", "g\xE9pes\xEDtett", "g\xE9pi", "g\xE9pies", "g\xE9rbic", "gerinces", "gerinctelen", "gerincvel\u0151i", "germ\xE1n", "gerontofil", "gesztenyebarna", "geszteny\xE9s", "gesztenyesz\xEDn", "gesztenyesz\xEDn\u0171", "gh\xE1nai", "gigantikus", "gig\xE1szi", "girbeg\xF6rbe", "girhes", "girny\xF3", "glob\xE1lis", "glott\xE1lis", "glut\xE9nmentes", "g\xF3ler\u0151s", "g\xF3lk\xE9pes", "g\xF3los", "goly\xF3\xE9rett", "goly\xF3s", "gombaellenes", "gombos", "gondatlan", "gondolatgazdag", "gondolatszeg\xE9ny", "gondolkod\xF3", "gondos", "gondoskod\xF3", "gondozatlan", "gondoz\xF3", "gondozott", "gondtalan", "gondterhelt", "gonosz", "goromba", "g\xF3t", "g\xF3tikus", "g\xF6dr\xF6s", "g\u0151g\xF6s", "g\xF6mb\xF6lyded", "g\xF6mb\xF6ly\xF6d\u0151", "g\xF6mb\xF6ly\u0171", "g\xF6nd\xF6r", "g\xF6rbe", "g\xF6rcs\xF6s", "g\xF6rd\xFCl\xE9keny", "g\xF6rd\xFCl\u0151", "g\xF6rnyedt", "g\xF6r\xF6g katolikus", "g\xF6r\xF6g", "g\xF6r\xF6gkeleti", "g\xF6r\xF6ngy\xF6s", "g\u0151zerej\u0171", "g\u0151zkibocs\xE1t\xF3", "g\u0151zvontat\xE1s\xFA", "graci\u0151z", "gr\xE1dicsos", "grafikus", "gram-pozit\xEDv", "granul\xE1lt", "gr\xE1tisz", "gravit\xE1ci\xF3s", "groteszk", "gr\xFAz", "guatemalai", "gubancos", "gudzsar\xE1ti", "guineai", "gumiszer\u0171", "g\xFAnyos", "gurul\xF3", "gusztusos", "gusztustalan", "guttur\xE1lis", "g\xFCgye", "g\xFCz\xFCeg\xE9r", "gyagya", "gyakori", "gyakor\xEDt\xF3", "gyakorlati", "gyakorlatias", "gyakorlatlan", "gyakorlott", "gyal\xE1zatos", "gyalogl\xF3", "gy\xE1molatlan", "gy\xE1moltalan", "gyanakv\xF3", "gyant\xE1s", "gyan\xFAs", "gyan\xFAs\xEDtott", "gyan\xFAtlan", "gyapjas", "gyapj\xFA", "gyapj\xFAb\xF3l val\xF3", "gy\xE1ri", "gyarl\xF3", "gyarmati", "gyarmatos\xEDt\xF3", "gy\xE1szkeretes", "gy\xE1szol\xF3", "gy\xE1szos", "gyatra", "gy\xE1va", "gyenge", "gyenge\xE1ram", "gyeng\xE9d", "gyengeelm\xE9j\u0171", "gyeng\xE9lked\u0151", "gy\xE9r", "gyerekes", "gyermek\xE1gyi", "gyermekbar\xE1t", "gyermekded", "gyermeki", "gyermekkori", "gyermektelen", "gyermeteg", "gyilkos", "gy\xF3gy", "gy\xF3gy\xE1szati", "gy\xF3gyhat\xE1s\xFA", "gyogyi", "gy\xF3gy\xEDthatatlan", "gy\xF3gy\xEDthat\xF3", "gy\xF3gy\xEDt\xF3", "gyogy\xF3s", "gy\xF3gyszer\xE9szeti", "gy\xF3gyszer\xE9szi", "gy\xF3gyszeripari", "gyomorbajos", "gyomorbeteg", "gyors", "gyors\xEDt\xF3", "gyorsul\xF3", "gy\xF6keres", "gy\xF6k\xE9rtelen", "gy\xF6nge", "gy\xF6ng\xE9d", "gy\xF6ngyh\xE1zf\xE9ny\u0171", "gy\xF6ngyh\xE1zsz\xEDn\u0171", "gy\xF6ngyszer\u0171", "gy\xF6ngysz\xEDn", "gy\xF6ngysz\xEDn\u0171", "gy\xF6ngysz\xFCrke", "gy\xF6ny\xF6r\u0171", "gy\xF6ny\xF6r\u0171s\xE9ges", "gy\xF6trelmes", "gy\xF6tr\u0151", "gy\u0151zedelmes", "gy\u0151zhetetlen", "gy\u0151ztes", "gy\xFAjt\xF3", "gy\xFAjt\xF3ponti", "gy\xFAl\xE9kony", "gyullad\xE1scs\xF6kkent\u0151", "gyullad\xE1sg\xE1tl\xF3", "gyullad\xF3", "gyulladt", "gy\u0171jt\u0151", "gy\u0171jt\xF6tt", "gy\u0171l\xF6letes", "gy\u0171l\xF6l\u0151", "gy\xFCm\xF6lcs\xEDz\u0171", "gy\xFCm\xF6lcs\xF6z\u0151", "gy\xFCm\xF6lcsterm\u0151", "gy\u0171r\xF6tt", "gy\u0171r\u0171s", "H", "habfeh\xE9r", "h\xE1borg\xF3", "h\xE1bor\xEDtatlan", "h\xE1bor\xFAellenes", "h\xE1bor\xFAp\xE1rti", "h\xE1bor\xFAs", "h\xE1bor\xFAsdi", "habos", "had\xE1szati", "hadi", "hadifontoss\xE1g\xFA", "haditenger\xE9szeti", "hadk\xF6teles", "hagyma\xEDz\u0171", "hagym\xE1s", "hagymatorny\xFA", "hagyom\xE1nyos k\xEDnai", "hagyom\xE1nyos", "hagyom\xE1ny\u0151rz\u0151", "hajadon", "hajas", "h\xE1jas", "hajatlan", "hajdani", "hajh\xE1sz", "hajkur\xE1sz", "hajlamos", "hajland\xF3", "hajl\xE9kony", "hajl\xE9ktalan", "hajl\xEDthatatlan", "hajlott", "hajmereszt\u0151", "hajnali", "hajn\xF6veszt\u0151", "haj\xF3s", "haj\xF3zhat\xF3", "hajsz\xE1lv\xE9kony", "hajthatatlan", "hajt\xF3", "haj\xFA", "h\xE1klis", "halad\xF3", "hal\xE1lbiztos", "hal\xE1lf\xE1radt", "hal\xE1lfejes", "hal\xE1lhoz\xF3", "hal\xE1lmegvet\u0151", "hal\xE1los", "hal\xE1lrasz\xE1nt", "hal\xE1ls\xE1padt", "haland\xF3", "h\xE1l\xE1s", "halaszthatatlan", "h\xE1l\xE1tlan", "haldokl\xF3", "half-hearted", "halhatatlan", "halk", "hall\xE1si", "hall\xE1sk\xE1rosult", "hallatlan", "hallgatag", "hallgat\xF3lagos", "hallhat\xF3", "hall\xF3", "hallucinog\xE9n", "halmoz\xF3", "halog\xE9n", "h\xE1l\xF3s", "halott", "halotthalv\xE1ny", "halotthamvaszt\xF3", "halotti", "halottn\xE9z\u0151", "halottrabl\xF3", "halottsirat\xF3", "halov\xE1ny", "h\xE1l\xF3zati", "halv\xE1ny", "halv\xE1nybarna", "halv\xE1nyk\xE9k", "halv\xE1nylila", "halv\xE1nypiros", "halv\xE1nys\xE1rga", "halv\xE1nyv\xF6r\xF6s", "halv\xE1nyz\xF6ld", "hamis", "hamis\xEDtatlan", "h\xE1mozott", "hamusz\xEDn\u0171", "hamusz\xFCrke", "hamv", "hamvas", "han\xE1k", "handaband\xE1z\xF3", "hangad\xF3", "hangbemond\xE1sos", "hangfog\xF3s", "hangos", "hangrend\u0171", "hangs\xFAlyos", "hangs\xFAlytalan", "hangszeres", "hangszigetelt", "hangtalan", "hangtani", "hangtomp\xEDt\xF3s", "hang\xFA", "hangulatjav\xEDt\xF3", "hangz\xF3", "hangy\xE1s", "hanyag", "h\xE1ny\xE1scsillap\xEDt\xF3", "hanyatl\xF3", "h\xE1nyaveti", "h\xE1nyingercsillap\xEDt\xF3", "h\xE1nytat\xF3", "har\xE1csol\xF3", "haragos", "haragospiros", "haragosz\xF6ld", "haragtart\xF3", "harangszab\xE1s\xFA", "harang\xFCt\u0151", "harap\xF3s", "harcedzett", "harci", "harcias", "harck\xE9pes", "harck\xE9ptelen", "harck\xE9sz", "harckocsiz\xF3", "harcol\xF3", "h\xE1r\xEDt\xF3", "h\xE1rmas", "harmatos", "harmonikus", "h\xE1rom\xE1rbocos", "h\xE1romdimenzi\xF3s", "h\xE1romemeletes", "h\xE1rom\xE9ves", "h\xE1romfej\u0171", "h\xE1romfelvon\xE1sos", "h\xE1romkar\xFA", "h\xE1romkerek\u0171", "h\xE1roml\xE1b\xFA", "h\xE1romlevel\u0171", "h\xE1rom\xF3r\xE1s", "h\xE1romputtonyos", "h\xE1romr\xE9szes", "h\xE1romsz\xEDn\u0171", "h\xE1romszob\xE1s", "h\xE1romszoros", "h\xE1romsz\xF6g\u0171", "h\xE1romtag\xFA", "hars\xE1ny", "harson\xE1s", "hasi", "has\xEDtott", "hason", "hasonelv\u0171", "hason\xE9rt\xE9k\u0171", "hasonjelent\xE9s\u0171", "hasonl\xEDt\xF3", "hasonl\xF3", "hasonnem\u0171", "hasonszenvi", "hasonsz\u0151r\u0171", "haszn\xE1lati", "haszn\xE1latos", "haszn\xE1lhatatlan", "haszn\xE1lhat\xF3", "haszn\xE1lt", "hasznavehetetlen", "hasznos", "haszonles\u0151", "haszontalan", "hasztalan", "hatalmas", "hatalmaskod\xF3", "hatalm\xFA", "hat\xE1lyos", "hat\xE1lytalan", "hat\xE1rid\u0151s", "hat\xE1rmenti", "hat\xE1ros", "hat\xE1rozatk\xE9pes", "hat\xE1rozatk\xE9ptelen", "hat\xE1rozatlan", "hat\xE1rozatlans\xE1gi", "hat\xE1roz\xF3", "hat\xE1roz\xF3i", "hat\xE1roz\xF3s", "hat\xE1rozott", "hat\xE1rs\xE9rt\u0151", "hat\xE1rtalan", "hat\xE1sos", "hat\xE1stalan", "h\xE1tborzongat\xF3", "hat\xE9kony", "hathat\xF3s", "h\xE1ti", "hat\xF3s\xE1gi", "hatp\xE1revez\u0151s", "h\xE1tral\xE9kos", "h\xE1tralev\u0151", "h\xE1tr\xE1nyos", "h\xE1ts\xF3", "hatty\xFAfeh\xE9r", "havas", "havasi", "havi", "hawaii", "hazafias", "hazafiatlan", "hazai", "hazara", "h\xE1zas", "h\xE1zass\xE1gi", "h\xE1zass\xE1gt\xF6r\u0151", "h\xE1zast\xE1rsi", "haz\xE1tlan", "h\xE1zi", "h\xE1zias", "h\xE1zias\xEDtott", "h\xE1ztart\xE1si", "hazud\xF3", "hazud\xF3s", "hazug", "h\xE1zs\xE1rtos", "hebehurgya", "h\xE9ber", "hegyes", "hegyessz\xF6g\u0171", "hegyi", "hegymagass\xE1g\xFA", "heikel", "heliocentrikus", "hellenisztikus", "hely\xE9nval\xF3", "helyes", "helyes\xEDr\xE1si", "helyettes\xEDthet\u0151", "helyhat\xF3s\xE1gi", "helyi", "helyi\xE9rdek\u0171", "helyrehozhatatlan", "helyt\xE1ll\xF3", "helytelen", "henceg\u0151", "hengeres", "henye", "hepehup\xE1s", "heraldikai", "hercegi", "hercig", "hermafrodita", "hermetikus", "heroikus", "heruszk", "hervadt", "heterog\xE9n", "heteroszexu\xE1lis", "heterotr\xF3f", "hetes", "h\xE9t\xE9ves", "h\xE9tf\u0151i", "heti", "h\xE9tk\xF6znapi", "h\xE9tv\xE9gi", "hetyke", "heurisztikus", "heveny", "heveny\xE9szett", "heves", "hexadecim\xE1lis", "h\xE9zagmentes", "hezit\xE1l\xF3", "hi\xE1baval\xF3", "hi\xE1nyos", "hi\xE1nytalan", "hi\xE1nyz\xF3", "hib\xE1s", "hib\xE1tlan", "hibat\u0171r\u0151", "hibbant", "hibrid", "hidas", "hideg", "hidegv\xE9r\u0171", "hidraulikus", "hierarchikus", "h\xEDg", "h\xEDgagy\xFA", "h\xEDgesz\u0171", "h\xEDgfoly\xF3s", "higgadt", "higi\xE9nikus", "h\xEDg\xEDt\xF3", "h\xEDg\xEDtott", "hihetetlen", "hihet\u0151", "h\xEDm", "himl\u0151helyes", "h\xEDmnem\u0171", "himnikus", "h\xEDmn\u0151s", "hindu", "hinduszt\xE1ni", "hiperakt\xEDv", "hiperbolikus", "hipermodern", "hipnopedikus", "hipoallerg\xE9n", "hirdet\u0151", "h\xEDres", "h\xEDres-neves", "h\xEDrhedt", "h\xEDrmagyar\xE1zat", "h\xEDrneves", "hirtelen", "hisz\xE9keny", "hiszt\xE9ri\xE1s", "hiszt\xE9rikus", "hisztis", "hisztiz\u0151", "hiteles", "hiteles\xEDtett", "hitelk\xE9pes", "hites", "hitsorsos", "hitv\xE1ny", "hitvesi", "hitvest\xE1rs", "hi\xFA", "h\xEDv", "hivalkod\xF3", "hivatali", "hivatalos", "hivat\xE1sos", "h\xEDvatlan", "hivatott", "h\xEDzelg\u0151", "h\xEDzlal\xF3", "h\xF3bortos", "h\xF3d\xEDt\xF3", "h\xF3dol\xF3", "h\xF3feh\xE9r", "holdalak\xFA", "holdf\xE9nyes", "holdk\xF3ros", "holisztikus", "holl\xF3fekete", "holl\xF3sz\xEDn", "holnapi", "holografikus", "holsteini", "holt", "holtbiztos", "holtf\xE1radt", "h\xF3lyagh\xFAz\xF3", "hom\xE1lyos", "h\xF3mentes", "homeop\xE1ti\xE1s", "homi", "homof\xF3b", "homog\xE9n", "homog\xE9nezett", "homoki", "homokos", "homokoz\xF3", "homoksz\xEDn\u0171", "homoktartalm\xFA", "homol\xF3g", "homomorf", "homorod\xF3", "homor\xFA", "homoszexu\xE1lis", "h\xF3napos", "honi", "honos", "hontalan", "hord\xF3", "hordozhat\xF3", "hordoz\xF3", "horgas", "horgonyz\xE1si", "horgonyz\xF3", "horgos", "h\xF3rihorgas", "horizont\xE1lis", "hormon\xE1lis", "hormonszeg\xE9ny", "horv\xE1t", "h\xF3sz\xEDn", "h\xF3sz\xEDn\u0171", "hosszadalmas", "hosszantart\xF3", "hosszanti", "hosszas", "hossz\xFA", "hossz\xFAk\xE1s", "hossz\xFAt\xE1v\xFA", "hoz\xF3", "hozz\xE1adott", "hozz\xE1\xE9rt\u0151", "hozz\xE1f\xE9rhetetlen", "hozz\xE1f\xE9rhet\u0151", "hozz\xE1ill\u0151", "hozz\xE1vet\u0151leges", "h\u0151\xE1ll\xF3", "h\u0151b\xF6rg\u0151", "h\xF6mp\xF6lyg\u0151", "h\xF6rg\u0151", "h\u0151si", "h\u0151sies", "hugenotta", "h\xFAgyagy\xFA", "h\xFAgyivarszervi", "hullaf\xE1radt", "hull\xE1mos", "hull\xE1mz\xF3", "hull\xF3", "hum\xE1n", "humanit\xE1rius", "hum\xE1nus", "humoros", "humuszos", "huncut", "h\xFAros", "h\xFAsev\u0151", "h\xFAsmentes", "h\xFAsos", "h\xFAsv\xE9ti", "h\xFAssz\xEDn", "h\xFAssz\xEDn\u0171", "huzatmentes", "huzatos", "h\xFAzott", "h\u0171", "h\xFClyebiztos", "h\u0171s", "h\u0171s\xE9ges", "h\u0171s\xEDt\u0151", "h\u0171tlen", "h\xFCvelyes", "h\xFCvelyi", "h\u0171v\xF6s", "ib\xE9r", "ibolya", "ibolyak\xE9k", "iboly\xE1nt\xFAli", "ibolyasz\xEDn", "ibolyasz\xEDn\u0171", "ide\xE1lis", "idegbajos", "idegen", "idegenellenes", "idegenforgalmi", "idegengy\u0171l\xF6l\u0151", "idegenked\u0151", "idegenszer\u0171", "ideges", "ideges\xEDt\u0151", "idegi", "ideg\xF6l\u0151", "idegroncs", "ideggy\xF3gy\xE1szati", "ideiglenes", "idej\xE9tm\xFAlt", "ideol\xF3giai", "id\xE9tlen", "ideval\xF3si", "idevonatkoz\xF3", "id\xE9zett", "id\xE9z\u0151", "idom\xEDt\xF3", "idomtalan", "id\u0151 el\u0151tti", "id\u0151beli", "id\u0151ig\xE9nyes", "id\u0151j\xE1r\xE1sf\xFCgg\u0151", "id\u0151rendi", "id\u0151s", "id\u0151skori", "id\u0151s\xF6d\u0151", "id\u0151szaki", "id\u0151szer\u0171", "id\u0151t\xE1ll\xF3", "id\u0151tlen", "id\u0151z\xEDtett", "ifj\xFA", "ifj\xFAs\xE1gi", "ig\xE1s", "igaz", "igazgat\xF3", "igazgat\xF3i", "igazi", "igazmond\xF3", "igazolt", "igazs\xE1gos", "igazs\xE1gtalan", "igazs\xE1g\xFCgyi", "igei", "igenl\u0151", "ig\xE9nyes", "ig\xE9nytelen", "igyekv\u0151", "ihat\xF3", "ijed\u0151s", "ijedt", "ijeszt\u0151", "ikerablakos", "ikonikus", "ildomos", "illatos", "illedelmes", "illeg\xE1lis", "ill\xE9kony", "illend\u0151", "illet\xE9kes", "illet\xE9kk\xF6teles", "illet\xE9kmentes", "illet\xE9ktelen", "illetlen", "illiber\xE1lis", "ill\u0151", "illusztr\xE1lt", "illuzorikus", "illuz\xF3rikus", "illuz\xF3rius", "im\xE1dni val\xF3", "immunis", "imm\xFAnis", "impitoyable", "implicit", "impotens", "impoz\xE1ns", "impresszionista", "improdukt\xEDv", "improviz\xE1ci\xF3s", "impulz\xEDv", "inas", "incselked\u0151", "indiai", "indi\xE1n", "indig\xF3", "indirekt", "indiszkr\xE9t", "individu\xE1lis", "indo\xE1rja", "indoeur\xF3pai", "indoir\xE1ni", "indok\xEDnai", "indokolatlan", "indokolt", "indon\xE9z", "indul\xE1si", "indulatos", "inerci\xE1lis", "infantilis", "inflexi\xF3s", "inform\xE1ci\xF3s", "informatikai", "infrav\xF6r\xF6s", "ingatag", "ingatlan", "ingercs\xF6kkent\u0151", "inger-gazdag", "ingerl\xE9keny", "ingerszeg\xE9ny", "inger\xFClt", "ing\xF3", "ingov\xE1nyos", "ingyen\xE9l\u0151", "ingyenes", "inhomog\xE9n", "injekt\xEDv", "inkoherens", "inkongruens", "inkontinens", "innens\u0151", "innovat\xEDv", "\xEDns\xE9ges", "instabil", "intarzi\xE1s", "integr\xE1lt", "intellektu\xE1lis", "intelligens", "intenz\xEDv", "interakt\xEDv", "interdiszciplin\xE1ris", "interkontinent\xE1lis", "intern\xE1l", "interplanet\xE1ris", "interurb\xE1n", "int\xE9zm\xE9nyes", "intim", "intramuszkul\xE1ris", "intraokul\xE1ris", "intrav\xE9n\xE1s", "introvert\xE1lt", "intuit\xEDv", "invert\xE1lhat\xF3", "inverz", "ioniz\xE1l\xF3", "ipari", "iparosodott", "\xEDr", "iraki", "ir\xE1ni", "ir\xE1nyad\xF3", "ir\xE1ny\xEDthatatlan", "ir\xE1ny\xEDt\xF3", "ir\xE1ny\xFA", "\xEDr\xE1sbeli", "\xEDr\xE1sos", "\xEDr\xE1studatlan", "\xEDr\xE1stud\xF3", "\xEDratlan", "irgalmas", "irgalmatlan", "irigy", "\xEDr\xF3", "irodalmi", "irodalombar\xE1t", "\xEDr\xF3i", "irok\xE9z", "ironikus", "ironiz\xE1l", "\xEDrott", "irracion\xE1lis", "irre\xE1lis", "irregul\xE1ris", "irrelev\xE1ns", "irreverziblis", "irt\xF3", "irt\xF3zatos", "iskolahagyott", "iskolai", "iskolak\xF6teles", "iskol\xE1zatlan", "iskol\xE1zott", "ismeretlen", "ismeretterjeszt\u0151", "ismer\u0151", "ismer\u0151s", "ismert", "ismertet\u0151", "isten\xE1ldotta", "istenes", "istenf\xE9l\u0151", "isteni", "istenk\xE1roml\xF3", "istentagad\xF3", "istentelen", "isz\xE1kos", "iszapos", "iszlamof\xF3b", "iszonyatos", "iszonytat\xF3", "iszony\xFA", "italos", "itat\xF3", "\xEDt\xE9l\u0151", "\xEDt\xE9l\u0151k\xE9pes", "it\xF3k\xE1s", "ittas", "ivar\xE9rett", "ivartalan", "\xEDvelt", "\xEDves", "iv\xF3", "\xEDzes", "\xEDzetlen", "izg\xE1ga", "izgalmas", "izgat\xF3", "izgatott", "izgi", "izlandi", "\xEDzl\xE9ses", "\xEDzl\xE9stelen", "\xEDzletes", "izmos", "izol\xE1lt", "izomorf", "\xED-z\u0151", "izraeli", "izraelita", "\xEDztelen", "\xEDz\xFCleti", "izzad\xE1sg\xE1tl\xF3", "izzad\xF3", "izzadt", "izz\xEDt\xF3", "izz\xF3", "jamaicai", "j\xE1mbor", "janu\xE1ri", "jap\xE1n", "j\xE1ratlan", "j\xE1ratos", "j\xE1rhatatlan", "j\xE1rhat\xF3", "j\xE1r\xF3", "j\xE1rtas", "j\xE1rul\xE9kos", "j\xE1rv\xE1nyos", "j\xE1t\xE9kos", "java", "javasolt", "jav\xEDthatatlan", "jav\xEDt\xF3", "jegeces", "jeges", "j\xE9ghideg", "j\xE9gmentes", "jegyz\u0151", "jelen", "jelenkori", "jelenlegi", "jelent\xE9keny", "jelent\xE9ktelen", "jelentkez\xE9si", "jelentkez\u0151", "jelent\u0151s", "jelent\u0151s\xE9gteljes", "jelent\u0151s\xE9g\u0171", "jeles", "jelk\xE9pes", "jellegzetes", "jellemes", "jellemtelen", "jellemz\u0151", "jel\xF6lt", "jeltelen", "jelz\u0151", "jemeni", "jiddis", "j\xF3", "j\xF3akarat\xFA", "jobb", "jobbkezes", "jobboldali", "jobbsodr\xE1s\xFA", "j\xF3dozott", "j\xF3\xE9rz\xE9s\u0171", "jogellenes", "joger\u0151s", "jogi", "jogk\xE9pes", "jogos", "jogosulatlan", "jogosult", "jogtalan", "jogtudom\xE1nyi", "j\xF3hiszem\u0171", "j\xF3indulat\xFA", "j\xF3\xEDz\u0171", "j\xF3kedv\u0171", "j\xF3k\xE9p\u0171", "j\xF3kor", "j\xF3kora", "j\xF3l inform\xE1lt", "j\xF3lelk\u0171", "j\xF3les\u0151", "j\xF3llakott", "j\xF3lnevelt", "j\xF3m\xF3d\xFA", "j\xF3n", "jord\xE1n", "jord\xE1niai", "joruba", "j\xF3s\xE1gos", "j\xF3sz\xEDv\u0171", "j\xF3szolg\xE1lati", "j\xF3t\xE9kony", "j\xF3t\xE9konys\xE1gi", "j\xF3v\xE1hagyott", "j\xF3v\xE1tehetetlen", "j\xF3zan", "j\xF6vedelmez\u0151", "j\xF6vedelm\u0171", "j\xF6vend\u0151beli", "j\xF6v\u0151", "j\xF6v\u0151beli", "j\xF6v\u0151beni", "jugoszl\xE1v", "jugoszl\xE1viai", "j\xFAliusi", "j\xFAniusi", "j\xFCtlandi", "k\xE1ba", "kabbalista", "kabil", "k\xE1b\xEDt\xF3", "k\xE1b\xEDt\xF3szer-ellenes", "k\xE1b\xEDt\xF3szeres", "k\xE1b\xEDt\xF3szerf\xFCgg\u0151", "k\xE1bult", "kac\xE9r", "kacif\xE1ntos", "kacsacs\u0151r\u0171", "kacskaring\xF3s", "kafa", "kagyl\xF3s", "kajakos", "kaj\xE1n", "kaj\xE1s", "kajla", "kajneszes", "kajsza", "kalandos", "kalandoz\xF3", "kalandv\xE1gy\xF3", "kalapos", "kal\xE1szos", "kaleidoszk\xF3pikus", "kaligrafikus", "kalligrafikus", "kalm\xE1rlelk\u0171", "kalm\xFCk", "kal\xF3riaszeg\xE9ny", "k\xE1lvinista", "kamatmentes", "kambodzsai", "kameruni", "kamrai", "kamu", "k\xE1na\xE1ni", "k\xE1na\xE1nita", "kanadai", "kan\xE1ris\xE1rga", "Kan\xE1ri-szigeteki", "kancellat\xEDv", "kancsal", "kand\xEDrozott", "kann\xE1s", "kanos", "kanyarg\xF3s", "kaotikus", "kapampangan", "kapar\xF3", "kapcsolatos", "kapcsol\xF3d\xF3", "kapcsolt", "kapcsos", "kaphat\xF3", "kapit\xE1lis", "kapitalista", "k\xE1pr\xE1zatos", "kapzsi", "kar\xE1csonyi", "karakteres", "karakterisztikus", "karakteriz\xE1l", "karbantarthatatlan", "karbantarthat\xF3", "karcinog\xE9n", "karcol\xF3", "karcs\xFA", "kardcs\xF6rtet\u0151", "kardiovaszkul\xE1ris", "karhossz\xFAs\xE1g\xFA", "karing\xF3s", "karizmatikus", "karmazsin", "karmazsinpiros", "karmazsinv\xF6r\xF6s", "k\xE1rmin", "k\xE1rminpiros", "k\xE1rminv\xF6r\xF6s", "karmos", "k\xE1ros", "k\xE1rosult", "k\xE1r\xF6rvend\u0151", "k\xE1rtalan", "k\xE1rt\xE9kony", "k\xE1rtyasz\xEDn", "karvastags\xE1g\xFA", "k\xE1s\xE1s", "kasm\xEDri", "kasub", "kaszaszer\u0171", "kaszt\xEDliai", "katal\xE1n", "katalitikus", "katartikus", "katasztrof\xE1lis", "kategorikus", "katolikus", "katonai", "katon\xE1s", "katonaviselt", "kausztikus", "k\xE1v\xE9barna", "k\xE1v\xE9sz\xEDn\u0171", "kavicsos", "kazah", "kecses", "keddi", "ked\xE9lyes", "ked\xE9ly\u0171", "kedvel\u0151", "kedvelt", "kedvenc", "kedves", "kedvesked\u0151", "kedvetlen", "kedvezm\xE9nyes", "kedvez\u0151", "kedvez\u0151tlen", "kedv\u0171", "kegyes", "kegyetlen", "kegyvesztett", "kehes", "k\xE9jes", "k\xE9jv\xE1gy\xF3", "k\xE9k", "kekec", "kekecked\u0151", "k\xE9kes", "k\xE9kesfeh\xE9r", "k\xE9kesfekete", "k\xE9keslila", "k\xE9keslil\xE1s", "k\xE9kesz\xF6ld", "k\xE9kesz\xF6ldes", "k\xE9kessz\xFCrke", "k\xE9kessz\xFCrk\xE9s", "kekk", "k\xE9kszem\u0171", "k\xE9kv\xE9r\u0171", "kelek\xF3tya", "kelend\u0151", "kelet-afrikai", "kelet-eur\xF3pai", "keleti", "keleties", "kellemes", "kellemetlen", "kelletlen", "kell\u0151", "kelt", "kelta", "kem\xE9ny", "kem\xE9nyen dolgoz\xF3", "kem\xE9nyfej\u0171", "kem\xE9ny\xEDt\u0151d\xFAs", "kem\xE9nyk\xF6t\xE9s\u0171", "kem\xE9nysz\xEDv\u0171", "k\xE9miai", "kendermagos", "kendermentes", "kend\u0151zetlen", "kend\u0151zetlen\xFCl", "k\xE9nes", "ken\u0151", "k\xE9ntartalm\xFA", "kenyai", "k\xE9nyelmes", "k\xE9nyelmetlen", "keny\xE9rkeres\u0151", "keny\xE9rles\u0151", "keny\xE9rpuszt\xEDt\xF3", "k\xE9nyes", "k\xE9nyesked\u0151", "k\xE9nyszeres", "k\xE9nyszer\xEDt\u0151", "k\xE9nyszer\u0171", "k\xE9nytelen", "k\xE9pes", "k\xE9pes\xEDtett", "k\xE9pl\xE9keny", "k\xE9pletes", "k\xE9pmutat\xF3", "k\xE9pszer\u0171", "k\xE9ptelen", "k\xE9pzeletbeli", "k\xE9pzelmi", "k\xE9pzel\u0151", "k\xE9pzelt", "k\xE9pzetlen", "k\xE9pzett", "k\xE9pz\u0151", "k\xE9pz\u0151m\u0171v\xE9szeti", "k\xE9rd\xE9ses", "k\xE9rd\u0151", "k\xE9reget\u0151", "kerek", "kerekded", "keresetk\xE9pes", "keresetlen", "keresett", "kereskedelmi", "keres\u0151", "k\xE9r\xE9sz\xE9let\u0171", "keresztel\u0151", "kereszt\xE9ny", "kereszt\xE9nydemokrata", "keresztes", "keretes", "k\xE9retlen", "kerge", "k\xE9rges", "kering\xE9si", "ker\xEDt\u0151", "k\xE9rked\u0151", "k\xE9rlelhetetlen", "k\xE9r\u0151dz\u0151", "kertes", "kert\xE9szeti", "kerti", "ker\xFCleti", "ker\xFCl\u0151", "kese", "k\xE9sei", "keserny\xE9s", "keser\u0171", "keserves", "keskeny", "k\xE9s\u0151bbi", "k\xE9s\u0151i", "k\xE9sz", "keszeg", "k\xE9sz\xEDt\u0151", "k\xE9szs\xE9ges", "k\xE9sz\xFClt", "k\xE9t\xE1gyas", "k\xE9talak\xFA", "k\xE9t\xE1llapot\xFA", "k\xE9taspektus\xFA", "k\xE9tbalkezes", "k\xE9tdimenzi\xF3s", "k\xE9telked\u0151", "k\xE9t\xE9lt\u0171", "k\xE9t\xE9l\u0171", "k\xE9temeletes", "k\xE9t\xE9rt\xE9k\u0171", "k\xE9t\xE9rtelm\u0171", "k\xE9tes", "k\xE9t\xE9venk\xE9nti", "k\xE9t\xE9ves", "k\xE9tf\xE1zis\xFA", "k\xE9tfej\u0171", "k\xE9thavonk\xE9nti", "k\xE9thavonta", "k\xE9theti", "k\xE9th\xF3napos", "k\xE9tir\xE1ny\xFA", "k\xE9tkamar\xE1s", "k\xE9tk\xF6tetes", "k\xE9tl\xE1b\xFA", "k\xE9tlaki", "k\xE9tnapos", "k\xE9tnem\u0171", "k\xE9tny\xE1ri", "k\xE9tnyelv\u0171", "k\xE9tny\xFAlv\xE1ny\xFA", "k\xE9toldalas", "k\xE9toldali", "k\xE9toldal\xFA", "k\xE9t\xF3r\xE1s", "k\xE9tp\xE1revez\u0151s", "k\xE9tp\xF3lus\xFA", "k\xE9tr\xE9szes", "k\xE9tr\xE9teg\u0171", "k\xE9tsark\xFA", "k\xE9ts\xE9gbeejt\u0151", "k\xE9ts\xE9gbeesett", "k\xE9ts\xE9gbees\u0151", "k\xE9ts\xE9gbevonhatatlan", "k\xE9ts\xE9ges", "k\xE9ts\xE9gtelen", "k\xE9tsoros", "k\xE9tszem\xE9lyes", "k\xE9tszeres", "k\xE9tszeri", "k\xE9tszik\u0171", "k\xE9tsz\xEDn\u0171", "k\xE9ttag\xFA", "kettes", "kett\u0151s", "k\xE9t\xFCl\xE9ses", "k\xE9tv\xE1g\xE1ny\xFA", "k\xE9tv\xE1ltoz\xF3s", "ketty\xF3s", "kev\xE9ly", "kevert", "kezdeti", "kezdetleges", "kezd\u0151", "kezeletlen", "kezelhetetlen", "kezelhet\u0151", "kezel\u0151", "kezelt", "k\xE9zenfekv\u0151", "kezes", "k\xE9zi csom\xF3z\xE1s\xFA", "k\xE9zi", "k\xE9zilabd\xE1s", "k\xE9zzelfoghat\xF3", "khakisz\xEDn", "khakisz\xEDn\u0171", "khtonikus", "ki\xE1br\xE1nd\xEDt\xF3", "kiadatlan", "kiad\xF3", "kiad\xF3s", "ki\xE1ll\xF3", "kialudt", "kib\xE9k\xEDthetetlen", "kibet\u0171zhetetlen", "kib\xEDrhatatlan", "kicsapong\xF3", "kics\xE9pelt", "kicsi", "kicsiny", "kicsinyes", "kicsiny\xEDt\u0151", "kieg\xE9sz\xEDt\u0151", "kiegyens\xFAlyozatlan", "kiegyens\xFAlyozott", "ki\xE9hezett", "kiel\xE9g\xEDtetlen", "kiel\xE9g\xEDthetetlen", "kiel\xE9g\xEDthet\u0151", "kiel\xE9g\xEDt\u0151", "kiemelked\u0151", "kiemelt", "kietlen", "kifejez\xE9stelen", "kifejezett", "kifejez\u0151", "kifejlett", "kif\xE9nyes\xEDtett", "kifinomult", "kifog\xE1solhat\xF3", "kifog\xE1stalan", "kifogyhatatlan", "kifogyott", "kifulladt", "kif\xFCggesztett", "kif\xFCrk\xE9szhetetlen", "k\xEDgy\xF3szer\u0171", "kihagyhatatlan", "kihalt", "kihaszn\xE1latlan", "kihegyesed\u0151", "kih\xEDv\xF3", "kih\xFAzott", "kiindul\xE1si", "kijelent\u0151", "kijel\xF6lt", "kijevi", "kik\xE9pezetlen", "kikeresztelkedett", "kiker\xFClhetetlen", "kik\xF6p\xF6tt", "kik\xF6t\u0151i", "kil\xE1t\xE1stalan", "kilences", "kimagasl\xF3", "k\xEDm\xE9letes", "k\xEDm\xE9letlen", "kimen\u0151", "kimer\xEDthetetlen", "kimer\xEDt\u0151", "kim\xE9rt", "kimer\xFClt", "kimondatlan", "kimondhatatlan", "kimutathat\xF3", "k\xEDnaez\xFCst", "k\xEDnai", "kincses", "kincset \xE9r\u0151", "kincskeres\u0151", "kincsszomjas", "kincst\xE1ri", "kincsv\xE1gy\xF3", "kinevezett", "k\xEDnos", "k\xEDnz\xF3", "kiolthatatlan", "ki\xF6nt\xF6tt", "kipihen", "kipr\xF3b\xE1lt", "kirad\xEDrozhat\xF3", "kir\xE1lyh\u0171", "kir\xE1lyi", "kirgiz", "kis", "kisadag", "kisagyi", "kiseg\xEDt\u0151", "k\xEDs\xE9rleti", "k\xEDs\xE9rteties", "k\xEDs\xE9rtetj\xE1rta", "kishit\u0171", "kisig\xE9ny\u0171", "kiskor\xFA", "kismad\xE1r", "kisnadr\xE1g", "kisnyom\xE1s\xFA", "kispolg\xE1ri", "kisportolt", "kisst\xEDl\u0171", "kisz\xE1m\xEDthatatlan", "kisz\xE1m\xEDthat\xF3", "kisz\xE1radt", "kisz\xE1r\xEDtott", "kisziv\xE1rogtatott", "kisszer\u0171", "kital\xE1lt", "kitart\xF3", "kiterjed\xE9s\u0171", "kiterjed\u0151", "kiterjedt", "kit\xE9r\u0151", "kit\xF6ltetlen", "kit\xF6r\xF6lhetetlen", "kit\xF6r\xF6lhet\u0151", "kit\u0171n\u0151", "kit\xFCntetett", "kiv\xE1gott", "kiv\xE1lasztott", "kiv\xE1l\xF3", "kiv\xE1lts\xE1gos", "k\xEDv\xE1natos", "k\xEDv\xE1ncsi", "k\xEDv\xE1ncsiskod\xF3", "k\xEDv\xE1nt", "kiv\xE9gzett", "kivehet\u0151", "kiv\xE9teles", "kivihetetlen", "kivonatos", "k\xEDv\xFCli", "kiz\xE1r\xF3lagos", "klarin\xE9tos", "klassz", "klasszicista", "klassziciz\xE1l\xF3", "klasszikus", "klasszis", "klasszisj\xE1t\xE9kos", "kleptom\xE1ni\xE1s", "klerik\xE1lis", "kl\xEDmabar\xE1t", "klimatikus", "klimaxos", "klingon", "klinikai", "koagul\xE1lt", "koal\xEDci\xF3s", "kobaltk\xE9k", "k\xF3bor", "k\xF3borl\xF3", "kobzos", "kocadoh\xE1nyos", "kocaj\xE1t\xE9kos", "kock\xE1s", "kock\xE1zatmentes", "kock\xE1zatos", "k\xF3cos", "kocs\xE1nyos", "kocs\xE1nytalan", "kocsony\xE1s", "koffeinmentes", "kognit\xEDv", "koherens", "koholt", "k\xF3kadt", "koki", "kok\xF3s", "kolb\xE1szos", "koldusszeg\xE9ny", "kolerikus", "koll\xE9giumi", "kollekt\xEDv", "kolumbiai", "k\xF3m\xE1s", "komcsi", "kom\xE9di\xE1s", "komikus", "komilf\xF3", "komisz", "kommersz", "kommunik\xE1ci\xF3s", "kommunista", "kommunisztikus", "kommutat\xEDv", "komoly", "komolytalan", "komor", "kom\xF3tos", "kompakt", "kompatibilis", "komplementer", "komplett", "komplex", "komplik\xE1ci\xF3mentes", "komplik\xE1lt", "koncentr\xE1l\xF3", "koncentr\xE1lt", "koncentrikus", "kondicion\xE1l\xF3", "kongo", "kong\xF3i", "k\xF3nikus", "konk\xE1v", "konkr\xE9t", "konok", "konstrukt\xEDv", "konszolid\xE1lt", "kontinent\xE1lis", "kontrapozit\xEDv", "konvencion\xE1lis", "konvergens", "konvex", "konvulz\xEDv", "konzekvens", "konzervat\xEDv", "konyhai", "koordin\xE1latlan", "koordin\xE1lt", "kop\xE1r", "kopasz", "kopott", "koptat\xF3", "kor\xE1bbi", "korabeli", "kora\xE9rett", "korai", "korallpiros", "korav\xE9n", "korcs", "koreai", "korhadt", "korhely", "korl\xE1tlan", "korl\xE1tolt", "korl\xE1tozott", "korm\xE1nybar\xE1t", "korm\xE1nyellenes", "korm\xE1nyzati", "kormos", "korni", "koromfekete", "koroms\xF6t\xE9t", "koros", "k\xF3ros", "korosod\xF3", "korp\xE1s", "korrekt", "korrod\xE1lt", "korrupt", "kors\xF3s", "korszakalkot\xF3", "korszer\u0171", "korszer\u0171tlen", "kortalan", "kort\xE1rs", "kort\xE9veszt\u0151", "kor\xFA", "korzikai", "kos\xE1rlabdacsapat", "kos\xE1rnyi", "k\xF3ser", "k\xF3stol\xF3", "koszor\xFAs", "koszos", "kotnyeles", "k\xF3tyagos", "kozmetikai", "kozmikus", "kozmopolita", "k\xF6dmentes", "k\xF6d\xF6s", "k\u0151farag\xF3", "k\xF6h\xF6g\xE9scsillap\xEDt\xF3", "k\u0151kem\xE9ny", "k\xF6lcs\xF6n\xF6s", "k\xF6lcs\xF6nvett", "k\xF6lcs\xF6nz\u0151", "k\xF6lcs\xF6nz\xF6tt", "k\xF6lt\u0151i", "k\xF6lt\xF6z\u0151", "k\xF6lts\xE9ges", "k\xF6lts\xE9gmentes", "k\xF6lts\xE9gvet\xE9si", "k\xF6nnyed", "k\xF6nnyelm\u0171", "k\xF6nnyes", "k\xF6nny\u0171", "k\xF6nny\u0171v\xE9r\u0171", "k\xF6nny\u0171zenei", "k\xF6ny\xF6kl\u0151", "k\xF6ny\xF6rtelen", "k\xF6ny\xF6r\xFCletes", "k\xF6nyves", "k\xF6nyv\xE9szeti", "k\xF6nyv\xEDz\u0171", "k\xF6nyvkedvel\u0151", "k\xF6nyvn\xE9lk\xFCli", "k\xF6nyvszag\xFA", "k\xF6pc\xF6s", "k\xF6rk\xF6r\xF6s", "k\xF6rmentes", "k\xF6rm\xF6nfont", "k\xF6rnyezetbar\xE1t", "k\xF6rnyezeti", "k\xF6rnyezetszennyez\u0151", "k\xF6rnyez\u0151", "k\xF6r\xF6s", "k\xF6r\xFClm\xE9nyes", "k\xF6r\xFClmet\xE9letlen", "k\xF6r\xFCltekint\u0151", "k\xF6szv\xE9nyes", "k\xF6teked\u0151", "k\xF6teles", "k\xF6teless\xE9gtud\xF3", "k\xF6telez\u0151 \xE9rv\xE9ny\u0171", "k\xF6telez\u0151", "k\xF6tetes", "k\xF6tetlen", "k\xF6t\u0151", "k\xF6t\xF6tt", "k\xF6v\xE9r", "k\xF6v\xE9rk\xE9s", "k\xF6ves", "k\xF6vetel\u0151z\u0151", "k\xF6vetkezetes", "k\xF6vetkezetlen", "k\xF6vetkez\u0151", "k\xF6vets\xE9gi", "k\xF6zbees\u0151", "k\xF6zbens\u0151", "k\xF6zb\xFCls\u0151", "k\xF6zeg\xE9szs\xE9g\xFCgyi", "k\xF6zelebbi", "k\xF6zeled\u0151", "k\xF6z\xE9leti", "k\xF6zelg\u0151", "k\xF6zeli", "k\xF6zel\xEDt\u0151", "k\xF6zel-keleti", "k\xF6zell\xE1t\xF3", "k\xF6zember", "k\xF6z\xE9p-amerikai", "k\xF6zepes m\xE9ret\u0171", "k\xF6zepes", "k\xF6z\xE9p-eur\xF3pai", "k\xF6z\xE9pfrancia", "k\xF6z\xE9piskolai", "k\xF6z\xE9pkori", "k\xF6z\xE9pkor\xFA", "k\xF6z\xE9poszt\xE1lybeli", "k\xF6z\xE9ps\u0151", "k\xF6z\xE9pszer\u0171", "k\xF6z\xE9rthet\u0151", "k\xF6zgazdas\xE1gi", "k\xF6zhaszn\xFA", "k\xF6zi", "k\xF6zigazgat\xE1si", "k\xF6zismert", "k\xF6zkedvelt", "k\xF6zleked\xE9si", "k\xF6zl\xE9keny", "k\xF6znapi", "k\xF6znyelvi", "k\xF6z\xF6mb\xF6s", "k\xF6z\xF6ns\xE9ges", "k\xF6z\xF6ny\xF6s", "k\xF6z\xF6s", "k\xF6z\xF6ss\xE9gi", "k\xF6zponti", "k\xF6zpontos\xEDtott", "k\xF6zt\xE1rsas\xE1gi", "k\xF6ztes", "k\xF6z\xFAti", "k\xF6zvesz\xE9lyes", "k\xF6zvetett", "k\xF6zvet\xEDt\u0151", "k\xF6zvet\xEDt\u0151i", "k\xF6zvetlen", "k\xF6zs\xE9gi", "k\xF6zszolg\xE1lati", "kreat\xEDv", "kr\xE9mes", "kr\xE9msz\xEDn", "kr\xE9msz\xEDn\u0171", "kreol", "kr\xE9tafeh\xE9r", "kr\xE9t\xE1s", "kriptogr\xE1fiai", "krist\xE1lyos", "krist\xE1lytiszta", "kritikai", "kritikus", "krokodilb\u0151r", "kromatikus", "kr\xF3ms\xE1rga", "kr\xF3nikus", "kubai", "kuka", "kukacos", "kuk\xE1s", "kukifej\u0171", "kulcsrak\xE9sz", "kulin\xE1ris", "kultur\xE1latlan", "kultur\xE1lis", "kultur\xE1lt", "kumulat\xEDv", "kum\xFCk", "kupol\xE1s", "k\xFApos", "kurd", "kurta", "kurv\xE1s", "kurz\xEDv", "kusza", "kutat\xF3", "kutyafej\u0171", "kutyaf\xFCl\u0171", "kutyamos\xF3", "kutyapof\xE1j\xFA", "kutya\xFCt\u0151", "k\xFClf\xF6ldi", "k\xFClkereskedelmi", "k\xFCll\u0151s", "k\xFCl\xF6n", "k\xFCl\xF6n\xE1ll\xF3", "k\xFCl\xF6nb", "k\xFCl\xF6nb\xF6z\u0151", "k\xFCl\xF6nf\xE9le", "k\xFCl\xF6nleges", "k\xFCl\xF6n\xF6s", "k\xFClpolitikai", "k\xFCls\u0151", "k\xFCl\xFCgyi", "k\xFCzd\u0151", "kvantitat\xEDv", "kvantummechanikai", "labda\xFCt\u0151", "labi\xE1lis", "labilis", "labiodent\xE1lis", "laborat\xF3riumi", "ladin", "ladino", "l\xE1gy sz\xE1r\xFA", "l\xE1gy", "l\xE1gyan", "lagymatag", "l\xE1gysz\xE1r\xFA", "l\xE1gyult", "laikus", "lak\xE1lyos", "lakatlan", "lakhatatlan", "lakhat\xF3", "lak\xF3", "lakodalmas", "lakodalmi", "lakonikus", "lakott", "laktat\xF3", "lakt\xF3zmentes", "l\xE1nctalpas", "langal\xE9ta", "l\xE1ngol\xF3", "l\xE1ngv\xF6r\xF6s", "langyi", "langyos", "lankadt", "lank\xE1s", "lankatag", "lanyha", "l\xE1nyk\xE9p\u0171", "lao", "lap\xE1lyos", "lapid\xE1ris", "lap\xEDt\xF3", "lapos", "l\xE1pos", "lappang\xF3", "lappf\xF6ldi", "lapsz\xE9li", "l\xE1rm\xE1s", "lass\xFA", "lassul\xF3", "l\xE1t\xE1si", "l\xE1tens", "later\xE1lis", "l\xE1thatatlan", "l\xE1that\xF3", "latin", "latinamerikai", "latin-amerikai", "l\xE1t\xF3", "l\xE1togat\xF3", "l\xE1togatott", "l\xE1tsz\xF3lagos", "l\xE1tv\xE1nyos", "laza", "lazacr\xF3zsasz\xEDn", "l\xE1zad\xF3", "l\xE1zas", "l\xE1zcsillap\xEDt\xF3", "l\xE1zmentes", "laz\xFArk\xE9k", "lebeg\u0151", "lebeg\u0151pontos", "lebilincsel\u0151", "lebonthat\xF3", "led\xE9r", "l\xE9d\xFAs", "leend\u0151", "leereszked\u0151", "le\xE9rt\xE9kelt", "leford\xEDthatatlan", "leg\xE1lis", "l\xE9gb\u0151lkapott", "legel\u0151", "legels\u0151", "legend\xE1s", "l\xE9ghaj\xF3z\xE1si", "l\xE9gi", "l\xE9gibeteg", "l\xE9gies", "l\xE9gkondicion\xE1lt", "l\xE9gk\xF6ri", "legk\xF6zelebbi", "l\xE9gmentes", "l\xE9gnem\u0171", "l\xE9g\xF3", "l\xE9goltalmi", "l\xE9g\xFAti", "legut\xF3bbi", "l\xE9g\xFCgyi", "l\xE9g\xFCres", "l\xE9gv\xE9delmi", "legv\xE9gs\u0151", "l\xE9gz\xE9si", "l\xE9gz\u0151rendszeri", "legyeng\xEDtett", "legyeng\xFClt immunrendszer\u0171", "legy\u0151zhetetlen", "legy\u0151z\xF6tt", "l\xE9ha", "lehangol\xF3", "lehangolt", "leheletfinom", "lehengerl\u0151", "lehetetlen", "lehet\u0151", "lehets\xE9ges", "le\xEDrhatatlan", "le\xEDr\xF3", "le\xEDrt", "lejt\u0151", "lejt\u0151s", "lekerek\xEDtett", "lekicsinyl\u0151", "lek\xF6telezett", "lek\xFCzdhetetlen", "lekv\xE1ros", "l\xE9legzetel\xE1ll\xEDt\xF3", "l\xE9legzetv\xE9telnyi", "l\xE9lekmelenget\u0151", "l\xE9lek\xF6l\u0151", "l\xE9lektani", "l\xE9lektelen", "lelem\xE9nyes", "lelkendez\u0151", "lelkes", "lelketlen", "lelki", "lelkiismeretes", "lelkiismereti", "lelkiismeretlen", "lel\u0151", "lemezes", "lemond\xF3", "lend\xFCletes", "lengyel", "lengyelorsz\xE1gi", "lensz\xEDn", "l\xE9nyegbev\xE1g\xF3", "l\xE9nyeges", "l\xE9nyegi", "l\xE9nyegtelen", "leny\u0171g\xF6z\u0151", "l\xE9pcs\u0151zetes", "leplezetlen", "lepra", "lepr\xE1s", "leptoszom", "lepukkant", "lepusztult", "lesgyan\xFAs", "les\xFAjt\xF3", "leszbikus", "lesz\xFArt", "letargikus", "letart\xF3ztat\xE1si", "letart\xF3ztatott", "letehetetlen", "letelepedett", "l\xE9tez\u0151", "l\xE9tfontoss\xE1g\xFA", "lett", "lev\xE1lt", "leveg\u0151-f\xF6ld", "leveg\u0151s", "leveg\u0151tlen", "levehet\u0151", "leveles", "levendulasz\xEDn", "levert", "leveses", "lev\u0151", "libanoni", "liber\xE1lis", "lib\xE9ri\xE1s", "l\xEDbiai", "liechtensteini", "ligur", "liheg\u0151", "likacsos", "likvid", "lila", "lil\xE1sbarna", "lil\xE1sk\xE9k", "lil\xE1spiros", "liliomfeh\xE9r", "limin\xE1lis", "line\xE1ris", "link", "liofil", "l\xEDrai", "l\xEDrikus", "lisztes", "litv\xE1n", "lobban\xE9kony", "l\xF3b\xE9l\u0171", "locsi-fecsi", "locska", "locska-fecske", "locsog\xF3", "l\xF3er\u0151s", "l\xF3farkas", "l\xF3fej\u0171", "l\xF3fog\xFA", "logikai", "logik\xE1tlan", "logikus", "logisztikai", "l\xF3g\xF3", "loj\xE1lis", "lok\xE1lis", "loknis", "l\xF3l\xE1b\xFA", "lombhullat\xF3", "lombos", "lombtalan", "lomha", "lompos", "lomtalan", "loncsos", "londoni", "lopakod\xF3", "lop\xF3", "lopott", "lovagi", "lovagias", "l\xF6khajt\xE1sos", "l\xF6k\xF6tt", "l\xF6ty\xF6g\u0151", "luba-katanga", "lucskos", "ludas", "l\xFAdb\u0151r\xF6s", "l\xFAdtalpas", "l\xFAdtalp\xFA", "l\xFAgos", "lun\xE1tikus", "lusta", "luther\xE1nus", "luxemburgi", "lyukacsos", "lyukas", "maced\xF3n", "maccs", "madagaszk\xE1ri", "mad\xE1rarc\xFA", "mad\xE1r\xE9tk\u0171", "mad\xE1rh\xFAs\xFA", "mad\xE1rl\xE1tta", "mad\xE1rszem\u0171", "mad\xE1rtani", "madridi", "mafla", "mag\xE1n", "mag\xE1nakval\xF3", "mag\xE1nyos", "magas szint\u0171", "magas", "magasrang\xFA", "magasr\xF6pt\u0171", "magasugr\xF3", "magasztos", "magatart\xE1si", "magatehetetlen", "magenta", "m\xE1gikus", "m\xE1gneses", "magvas", "magvav\xE1l\xF3", "magzati", "magyar", "magyar\xE1n", "magyarbar\xE1t", "magyarellenes", "magyarlakta", "magyarorsz\xE1gi", "magyaros", "mai", "maja", "majom\xE1br\xE1zat", "majomszer\u0171", "m\xE1j\xFA", "m\xE1jusi", "makacs", "makkeg\xE9szs\xE9ges", "makrancos", "makroszkopikus", "makul\xE1tlan", "malack\xE9p\u0171", "mal\xE1j", "malajziai", "mal\xE1riaellenes", "mal\xE1ri\xE1s", "m\xE1l\xE9", "malgasz", "malici\xF3zus", "m\xE1ltai", "m\xE1mor\xEDt\xF3", "m\xE1moros", "mandzsu", "m\xE1ni\xE1kus", "manifeszt", "manipul\xE1lhatatlan", "manu\xE1lis", "manx", "maori", "maradand\xF3", "marad\xE9ktalan", "maradi", "marad\xF3", "mar\xE1thi", "m\xE1rciusi", "margin\xE1lis", "marha", "mari", "marin\xE1lt", "m\xE1rk\xE1zott", "markos", "mar\xF3", "marokk\xF3i", "maroknyi", "Marshall-szigeteki", "m\xE1sfajta", "m\xE1sik", "m\xE1snapos", "m\xE1sodik gener\xE1ci\xF3s", "m\xE1sodlagos", "m\xE1sodoszt\xE1ly\xFA", "m\xE1sodrang\xFA", "m\xE1sodrend\u0171", "maszatos", "maszkulin", "m\xE1sz\xF3", "maszor\xE9ta", "massz\xEDv", "matematikai", "materi\xE1lis", "materialista", "m\xE1t\xF3", "matt", "maurit\xE1niai", "maxim\xE1lis", "m\xE1zas", "mechanikai", "mechanikus", "medd\u0151", "mediterr\xE1n", "medvet\xE1ncoltat\xF3", "megad\xF3", "megadott", "megalapozatlan", "megalapozott", "megal\xE1zkod\xF3", "megal\xE1z\xF3", "megal\xE1zott", "megalkuv\xF3", "meg\xE1llapodott", "meg\xE1ll\xF3", "meg\xE1talkodott", "megbecs\xFCl\u0151", "megbesz\xE9lt", "megb\xEDzhatatlan", "megb\xEDzhat\xF3", "megbocs\xE1thatatlan", "megbocs\xE1that\xF3", "megbocs\xE1t\xF3", "megc\xE1folhatatlan", "megcsalt", "megd\xF6bbent\u0151", "megegyez\u0151", "megel\xE9gedett", "megel\u0151z\u0151", "megemelkedett", "megeml\xE9kez\u0151", "megengedett", "megengedhetetlen", "megengedhet\u0151", "megenged\u0151", "meger\u0151ltet\u0151", "meger\u0151s\xEDt\u0151", "meg\xE9rt\u0151", "megfejthetetlen", "megfelel\u0151", "megfellebezhetetlen", "megfesz\xEDtett", "megfigyelhet\u0151", "megfizethetetlen", "megfizethet\u0151", "megfoghatatlan", "megfoghat\xF3", "megfontolt", "megfosztott", "meggondolatlan", "meggondolt", "meghat\xE1rozhatatlan", "meghat\xE1roz\xF3", "meghat\xE1rozott", "meghat\xF3", "meghatott", "meghib\xE1sod\xF3", "meghitt", "meghonosodott", "megh\xF6kkent", "megh\xF6kkent\u0151", "meghuny\xE1szkod\xF3", "megig\xE9zett", "megillet\u0151d\xF6tt", "megind\xEDt\xF3", "megingathatatlan", "megjelen\xEDt\u0151", "megkap\xF3", "megk\xE9rd\u0151jelezhet\u0151", "megkeseredett", "megk\xEDs\xE9relt", "megk\xF6t\u0151", "megk\xF6vesedett", "megk\xF6zel\xEDthetetlen", "megk\xF6zel\xEDthet\u0151", "megk\xF6zel\xEDt\u0151", "megk\xFCl\xF6nb\xF6ztethet\u0151", "megk\xFCl\xF6nb\xF6ztet\u0151", "meglepet\xE9sszer\u0171", "meglep\u0151", "meglev\u0151", "megl\xE9v\u0151", "megmagyar\xE1zhatatlan", "megmarad\xF3", "megmunk\xE1latlan", "megnevezett", "megn\xF6vekedett", "megnyer\u0151", "megnyilv\xE1nulatlan", "megnyugtat\xF3", "megoldatlan", "megoldhatatlan", "megoldott", "meg\u0151rz\u0151", "megragad\xF3", "megr\xE9m\xFClt", "megrendelt", "megrend\xFClt", "megr\xF6gz\xF6tt", "megsemmis\xEDt\u0151", "megszabott", "megsz\xE1llott", "megsz\xE1llt", "megsz\xE1ml\xE1lhatatlan", "megszel\xEDd\xEDthet\u0151", "megszokott", "megsz\xF3l\xEDt\xF3", "megszor\xEDt\xF3", "megt\xE1madhatatlan", "megtart\xF3ztat\xF3", "megtestes\xFClt", "megt\xE9veszt\u0151", "megtisztel\u0151", "megtorl\xF3", "megt\xF6rt", "meg\xFAjul\xF3", "megv\xE1laszolt", "megval\xF3s\xEDthatatlan", "megval\xF3s\xEDthat\xF3", "megv\xE1ltozott", "megv\xE1ltoztathatatlan", "megvastagodott", "megv\xE9n\xFClt", "megveszekedett", "megvesztegethet\u0151", "megvetend\u0151", "megvet\u0151", "megviselt", "megzavarodott", "megyei", "meggy\xF6keresedett", "meggy\u0151z\u0151", "meggy\u0151z\u0151d\xE9ses", "m\xE9hen k\xEDv\xFCli", "m\xE9la", "m\xE9lab\xFAs", "m\xE9l\xE1z\xF3", "meleg sz\xEDv\u0171", "meleg", "melegsz\xEDv\u0171", "melegv\xE9r\u0171", "mell\xE9kes", "mell\xE9kn\xE9vi", "mell\xE9kvesei", "mell\xE9rendel\u0151", "melletti", "mellkasi", "mellmagass\xE1g\xFA", "mell\u0151z\xF6tt", "mells\u0151", "m\xE9lt\xE1nyl\xF3", "m\xE9lt\xE1nyos", "m\xE9lt\xE1nytalan", "m\xE9ltatlan", "m\xE9ltat\xF3", "m\xE9lt\xF3", "m\xE9lt\xF3s\xE1gos", "m\xE9lt\xF3s\xE1gteljes", "m\xE9ly", "m\xE9lyalmos", "m\xE9ly\xE9rtelm\u0171", "m\xE9lyh\u0171t\xF6tt", "m\xE9lyk\xE9k", "m\xE9lyrehat\xF3", "m\xE9lys\xE9ges", "m\xE9lys\xE9gi", "m\xE9lytengeri", "mened\xE9kk\xE9r\u0151", "menek\xFCl\u0151", "menett\xE9rti", "men\u0151", "ment\xE1lis", "mentelmi", "mentes", "menthetetlen", "ment\u0151", "menyegz\u0151i", "mennyei", "mennyis\xE9gi", "meredek", "m\xE9reger\u0151s", "m\xE9regtelen", "m\xE9regz\xF6ld", "mereng\u0151", "mer\xE9sz", "merev", "m\xE9rges", "m\xE9rgezett", "m\xE9rgez\u0151", "m\xE9rhetetlen", "m\xE9rhet\u0151", "m\xE9rlegelt", "m\xE9rlegk\xE9pes", "m\xE9rlegk\xE9sz\xEDt\u0151", "mer\u0151", "m\xE9r\u0151", "mer\u0151leges", "m\xE9rs\xE9kelt", "m\xE9rtani", "m\xE9rt\xE9kad\xF3", "m\xE9rt\xE9kletes", "m\xE9rt\xE9ktart\xF3", "m\xE9rt\xE9ktelen", "m\xE9rvad\xF3", "mesebeli", "mes\xE9s", "meseszer\u0171", "messianisztikus", "mesteri", "mesterk\xE9lt", "mesters\xE9ges", "mes\xFCge", "meszes", "messze", "messzemen\u0151", "messzi", "meteorol\xF3giai", "metodista", "metrikus", "metsz\u0151", "mexik\xF3i", "m\xE9z\xE9des", "mezei", "m\xE9zes", "m\xE9zesm\xE1zos", "mez\xEDtelen", "mez\xEDtl\xE1bas", "mezopot\xE1miai", "mez\u0151gazdas\xE1gi", "meztelen", "mezzoszopr\xE1n", "m\xE9zsz\xEDn\u0171", "middle-aged", "migr\xE9nellenes", "mikrobaellenes", "mikrob\xE1s", "mikrobi\xE1lis", "mikrobiol\xF3giai", "mikrohull\xE1m\xFA", "mikroszkopikus", "mil\xE1n\xF3i", "militarista", "mindenev\u0151", "mindenhat\xF3", "mindenkori", "mindennapi", "mindennapos", "mindennem\u0171", "mindent \xE1tfog\xF3", "mindentud\xF3", "minden\xFCtt jelenlev\u0151", "mindh\xE1rom", "mindk\xE9t", "mini", "miniat\u0171r", "minim\xE1lis", "miniszteri", "min\u0151s\xE9gi", "min\u0151s\xEDthetetlen", "mint\xE1s", "mintaszer\u0171", "mirelit", "m\xEDsz", "misztikus", "mitikus", "mitol\xF3giai", "mocsaras", "mocs\xE1r\xEDz\u0171", "mocskos", "modern", "modoros", "modortalan", "m\xF3dos", "m\xF3dos\xEDtott", "m\xF3dosult", "m\xF3dszeres", "m\xF3dszertani", "modul\xE1ris", "mogorva", "mogyor\xF3sz\xEDn", "mohamed\xE1n", "mohaz\xF6ld", "moh\xF3", "mok\xE1ny", "m\xF3k\xE1s", "mol\xE1ris", "mold\xE1v", "mold\xE1viai", "molekul\xE1ris", "molett", "molyos", "monac\xF3i", "mondatbeli", "mondvacsin\xE1lt", "mongol", "mongoloid", "monog\xE1m", "monoteista", "monoton n\xF6vekv\u0151", "monoton", "montenegr\xF3i", "monument\xE1lis", "m\xF3r", "morcos", "mordvin", "morfol\xF3giai", "morg\xF3s", "morva", "mosatlan", "mosdatlan", "moshat\xF3", "mos\xF3", "mosogat\xF3", "mosolyg\xF3", "mosolyg\xF3s", "mosott", "mostani", "moszkovita", "moszkvai", "motoriz\xE1lt", "mozambiki", "mozdulatlan", "mozgalmas", "mozg\xE1si", "mozg\xE1sk\xE9ptelen", "mozgathat\xF3", "mozgat\xF3", "mozg\xE9kony", "mozg\xF3", "muland\xF3", "mulat\xF3", "mulats\xE1gos", "mulatt", "mulattat\xF3", "m\xFAl\xE9kony", "multikultur\xE1lis", "multilater\xE1lis", "multinacion\xE1lis", "multiplikat\xEDv", "multivitamin", "mung\xF3", "munkab\xEDr\xF3", "munkaid\u0151s", "munkaig\xE9nyes", "munkak\xE9pes", "munkak\xE9ptelen", "munkakeres\u0151", "munkaker\xFCl\u0151", "munkan\xE9lk\xFCli", "munk\xE1soszt\xE1lybeli", "munk\xE1sp\xE1rti", "munkav\xE1llal\xE1si", "muszlim", "mutag\xE9n", "mutat\xF3", "mutat\xF3s", "muzulm\xE1n", "m\u0171holdas", "m\u0171korcsoly\xE1z\xF3", "m\u0171k\xF6d\xE9si", "m\u0171k\xF6d\u0151", "m\u0171k\xF6d\u0151k\xE9pes", "m\u0171szaki", "m\u0171szeres", "m\u0171veletlen", "m\u0171velettart\xF3", "m\u0171velhet\u0151", "m\u0171vel\u0151d\xE9si", "m\u0171velt", "m\u0171veltet\u0151", "m\u0171v\xE9szi", "m\u0171v\xE9szies", "m\u0171v\xE9sziesked\u0151", "m\u0171v\xE9szked\u0151", "nacionalista", "n\xE1dfedeles", "nagy \xE9rt\xE9k\u0171", "nagy", "nagyadag", "nagyar\xE1ny\xFA", "nagybani", "nagybirtokos", "nagyb\u0151g\u0151s", "nagyev\u0151", "nagyfej\u0171", "nagyfok\xFA", "nagyhang\xFA", "nagyk\xE9p\u0171", "nagykor\xFA", "nagylelk\u0171", "nagym\xE9ret\u0171", "nagym\xE9rt\xE9k\u0171", "nagynyom\xE1s\xFA", "nagyobb vagy egyenl\u0151", "nagyokos", "nagypolg\xE1ri", "nagyrav\xE1gy\xF3", "nagyst\xEDl\u0171", "nagyszab\xE1s\xFA", "nagysz\xE1j\xFA", "nagysz\xE1m\xFA", "nagyszer\u0171", "nagy\xFCzemi", "nagyvonal\xFA", "naiv", "nam\xEDbiai", "napbarn\xEDtott", "napi", "napim\xE1d\xF3", "napl\xF3szer\u0171", "n\xE1polyi", "napos", "napoz\xF3", "nappali", "naprak\xE9sz", "naps\xFCt\xE9ses", "napv\xE9d\u0151", "narancss\xE1rga", "narancss\xE1rg\xE1s", "narancssz\xEDn", "narancssz\xEDn\u0171", "n\xE1rcisztikus", "naturalista", "naturalisztikus", "nat\xFArsz\xEDn", "naurui", "naz\xE1lis", "n\xE1z\xE1reti", "necces", "nedvd\xFAs", "nedves", "nedvsz\xEDv\xF3", "negat\xEDv", "negligible", "n\xE9gy\xE1g\xFA", "negyed\xE9ves", "n\xE9gyes", "n\xE9gykerek\u0171", "n\xE9gykezes", "n\xE9gyl\xE1b\xFA", "n\xE9gymotoros", "n\xE9gyszeres", "n\xE9gysz\xF6gletes", "n\xE9gytag\xFA", "n\xE9gy\xFCtem\u0171", "negyvenes", "n\xE9gyzeth\xE1l\xF3s", "neh\xE9z", "neh\xE9zkes", "neh\xE9zs\xE9gi", "neh\xE9zs\xFAly\xFA", "nejlon", "n\xE9lk\xFCle", "n\xE9lk\xFCli", "n\xE9lk\xFCl\xF6zhetetlen", "n\xE9lk\xFCl\xF6zhet\u0151", "n\xE9lk\xFCl\xF6z\u0151", "nem \xE9rdekes", "nem hasonl\xF3", "nem hivatalos", "nem megsz\xE1ml\xE1lhat\xF3", "nem online", "n\xE9ma", "nemes", "nemesi", "nemeslelk\u0171", "n\xE9met", "n\xE9metalf\xF6ldi", "nemi", "n\xE9mi", "n\xE9mik\xE9pp", "n\xE9mik\xE9ppen", "nemk\xEDv\xE1natos", "nemleges", "nemnegat\xEDv", "nemnulla", "nemtelen", "nemt\xF6r\u0151d\xF6m", "nem\u0171", "nem\xFCres", "nemzetellenes", "nemzeti", "nemzetiszocialista", "nemzetk\xF6zi", "nemz\u0151k\xE9pes", "neobolsevik", "neog\xF3tikus", "neokonzervat\xEDv", "neol\xF3g", "neoplastic", "nep\xE1li", "n\xE9pellenes", "n\xE9pes", "n\xE9pi", "n\xE9pies", "n\xE9prajzi", "n\xE9pszer\u0171", "n\xE9pszer\u0171s\xEDt\u0151", "n\xE9pszer\u0171tlen", "nesztelen", "nett\xF3", "neuralgikus", "neurog\xE9n", "neurok\xE9miai", "neuropszichol\xF3giai", "neurotikus", "neurotoxikus", "n\xE9val\xE1\xEDr\xF3", "neveletlen", "nevelt", "neves", "nevets\xE9ges", "nevezetes", "nevezett", "n\xE9vleges", "n\xE9vtelen", "New York-i", "n\xE9z\u0151", "nicaraguai", "nigeri", "nig\xE9riai", "nikob\xE1ri", "nikotinf\xFCgg\u0151", "nimfom\xE1n", "nincstelen", "niuei", "n\xEDv\xF3tlan", "nom\xE1d", "nonstop", "noradrenerg", "norm\xE1l", "norm\xE1lis", "normann", "norv\xE9g", "nosztalgikus", "novemberi", "n\u0151gy\xF3gy\xE1szati", "n\u0151gy\u0171l\xF6l\u0151", "n\u0151i", "n\u0151ies", "n\u0151ivar\xFA", "n\u0151nem\u0171", "n\u0151s", "n\u0151st\xE9ny", "n\u0151tlen", "n\xF6vekv\u0151", "n\xF6velt", "n\xF6v\xE9nyev\u0151", "n\xF6v\xE9nyi", "n\xF6v\xE9nytani", "n\u0151v\xE9ri", "nudista", "nukle\xE1ris", "numerikus", "nyafka", "nyafog\xF3s", "ny\xE1jas", "nyakas", "nyakatekert", "nyakigl\xE1b", "nyakkend\u0151tlen", "ny\xE1kos", "nyakraval\xF3", "nyakt\xF6r\u0151", "nyal\xE1nk", "ny\xE1las", "ny\xE1laz\xF3", "nyalka", "ny\xE1lk\xE1s", "ny\xE1mnyila", "nyamvadt", "ny\xE1pic", "ny\xE1rf\xE1s", "nyargal\xF3", "ny\xE1ri", "ny\xE1rias", "ny\xE1rspolg\xE1ri", "nyavaly\xE1s", "nyavalyat\xF6r\u0151s", "nyegle", "nyeles", "nyeletlen", "nyel\u0151", "nyel\u0171", "nyelves", "nyelv\xE9szeti", "nyelvhaszn\xE1l\xF3", "nyelvhelyess\xE9gi", "nyelvi", "nyelvm\u0171vel\u0151", "nyelvtani", "nyelvtehets\xE9g", "nyelv\xFAj\xEDt\xE1s", "nyelv\xFAj\xEDt\xF3", "nyelv\u0171", "nyelvv\xE9d\u0151", "nyeres\xE9ges", "nyeres\xE9gv\xE1gy\xF3", "nyer\u0151", "nyers", "nyesetlen", "nyes\u0151", "nyeszlett", "nyikorg\xF3s", "ny\xEDlir\xE1ny\xFA", "ny\xEDl\xF3", "ny\xEDlt", "ny\xEDltsz\xEDv\u0171", "nyilv\xE1nos", "nyilv\xE1nval\xF3", "ny\xEDratlan", "ny\xEDres", "nyirkos", "ny\xEDr\xF3", "ny\xEDrt", "nyiszlett", "nyit\xF3", "nyitott", "nyolcas\xE1val", "nyolc\xF3r\xE1s", "nyolcvanas", "nyolcszoros", "nyolcsz\xF6g\u0171", "nyomaszt\xF3", "nyomat\xE9kos", "nyomdai", "nyomdak\xE9sz", "nyomdaszag\xFA", "nyomjelz\u0151", "nyom\xF3", "nyomor\xE9k", "nyomorg\xF3", "nyomorult", "nyomor\xFAs\xE1gos", "nyom\xF3s", "nyomott", "nyomtalan", "nyomtatott", "nyugalmas", "nyugalmazott", "nyugati", "nyugatos", "nyughatatlan", "nyugodalmas", "nyugodt", "nyugov\xF3", "nyugtalan", "nyugtalan\xEDt\xF3", "nyugtat\xF3", "nyugv\xF3", "nyugv\xF3\xE1ram", "ny\xFAjt\xF3", "ny\xFAjtott", "ny\xFAl\xE1nk", "nyulas", "ny\xFAl\xE9kony", "ny\xFAlfarknyi", "ny\xFAl\xF3s", "ny\xFAlsz\xEDv\u0171", "nyurga", "ny\xFAzott", "ny\u0171g\xF6s", "ny\xFCst\xF6s", "ny\u0171tt", "ny\xFCves", "ny\xFCz\xFCge", "ny\xFCzsg\u0151", "ny\xFCzsi", "\xF3", "\xF3arany", "objekt\xEDv", "objektumorient\xE1lt", "obszc\xE9n", "obszessz\xEDv", "\xF3cska", "ocsm\xE1ny", "odaad\xF3", "oda\xE9gett", "odaill\u0151", "odak\xF6t\xF6tt", "odav\xE1g\xF3", "odaval\xF3si", "odavetett", "\xF3divat\xFA", "\xF3don", "odvas", "\xF3egyiptomi", "\xF3feln\xE9met", "\xF3francia", "\xF3g\xF6r\xF6g", "\xF3ind", "okkers\xE1rga", "okkult", "\xF3kori", "okos", "okoskod\xF3", "okostoj\xE1s", "okozati", "oks\xE1gi", "oktalan", "oktat\xE1si", "okt\xF3beri", "oktondi", "okul\xE1ris", "ol\xE1h", "olajbarna", "olajos", "olajosbarna", "olajsz\xEDn", "olajsz\xEDn\u0171", "olajz\xF6ld", "olasz", "olcs\xF3", "oldali", "oldals\xF3", "oldalsz\xE9l", "oldhatatlan", "oldhat\xF3", "old\xF3", "oldott", "olimpiai", "ol\xEDvaz\xF6ld", "ol\xEDvz\xF6ld", "\xF3lmos", "\xF3lmozott", "\xF3lomfeh\xE9r", "\xF3lommentes", "\xF3lomneh\xE9z", "\xF3loms\xFAly\xFA", "\xF3lomsz\xEDn", "\xF3lomsz\xEDn\u0171", "\xF3lomsz\xFCrke", "\xF3lomtartalm\xFA", "olt\xE1ri", "olthatatlan", "olt\xF3", "oltott", "olvasatlan", "olvashatatlan", "olvashat\xF3", "olvasztott", "\xF3magyar", "\xF3mahag\xF3ni", "omladoz\xF3", "oml\xE1svesz\xE9lyes", "oml\xF3s", "onkog\xE9n", "online", "\xF3norv\xE9g", "\xF3nos", "\xF3nsz\xEDn", "\xF3nsz\xEDn\u0171", "ontol\xF3giai", "op\xE1lsz\xEDn", "opcion\xE1lis", "oper\xE1ci\xF3s", "\xF3pioid", "\xF3piumf\xFCgg\u0151", "opportunista", "optikai", "optim\xE1lis", "optimista", "\xF3raad\xF3", "\xF3rab\xE9res", "\xF3rad\xEDjas", "\xF3ragy\u0171jt\u0151", "\xF3rak\xF6zi", "or\xE1lis", "\xF3r\xE1nk\xE9nti", "orc\xE1tlan", "ordas", "orden\xE1r\xE9", "\xF3ri\xE1s", "\xF3ri\xE1si", "orient\xE1lis", "orm\xF3tlan", "ornament\xE1lis", "orosz", "oroszl\xE1nszer\u0171", "oroszorsz\xE1gi", "orrhang\xFA", "orsz\xE1gh\xE1bor\xEDt\xF3", "orsz\xE1gos", "orsz\xE1ggy\u0171l\xE9si", "ortodox", "ortogon\xE1lis", "ortonorm\xE1lt", "ortop\xE9d", "orv", "orvosbiol\xF3giai", "orvosi", "orvul", "\xF3sdi", "ostoba", "osz\xE9t", "oszlopos", "oszm\xE1n", "oszm\xE1n-t\xF6r\xF6k", "oszt\xE1lyidegen", "osztatlan", "oszthatatlan", "oszthat\xF3", "osztott", "osztr\xE1k", "osztr\xE1k\u2013magyar", "otromba", "otthoni", "otthonos", "otthontalan", "ov\xE1lis", "\xF3vatos", "oxig\xE9nd\xFAs", "\xF3zond\xFAs", "\xF6bl\xEDt\u0151", "\xF6bl\xF6s", "\xF6cs\xF6di", "\xF6kol\xF3giai", "\xF6k\xF6lvastags\xE1g\xFA", "\xF6kumenikus", "\xF6ld\xF6kl\u0151", "\xF6l\u0151", "\xF6lt\xF6z\u0151", "\xF6mleng\u0151", "\xF6ml\u0151", "\xF6n\xE1ll\xF3", "\xF6nel\xE9g\xFClt", "\xF6n\xE9letrajzi", "\xF6nfej\u0171", "\xF6nfel\xE1ldoz\xF3", "\xF6nfeledt", "\xF6nfenntart\xF3", "\xF6ngyilkos", "\xF6ngy\u0171l\xF6l\u0151", "\xF6nhatalm\xFA", "\xF6nhitt", "\xF6nj\xE1r\xF3", "\xF6nk\xE9ntelen", "\xF6nk\xE9ntes", "\xF6nk\xE9nyes", "\xF6nk\xE9nyesked\u0151", "\xF6nk\xE9nyuralmi", "\xF6nkiold\xF3", "\xF6nkiszolg\xE1l\xF3", "\xF6nkorm\xE1nyzati", "\xF6nk\xF6lts\xE9gi", "\xF6nkritikus", "\xF6nmegtart\xF3ztat\xF3", "\xF6nm\u0171k\xF6d\u0151", "\xF6n\xF6s", "\xF6ntelt", "\xF6ntev\xE9keny", "\xF6nt\u0151", "\xF6nt\xF6rv\xE9ny\u0171", "\xF6ntudatlan", "\xF6ntudatos", "\xF6nzetlen", "\xF6nz\u0151", "\xF6rd\xF6gi", "\xF6rd\xF6g\u0171z\u0151", "\xF6rd\xF6ng\xF6s", "\xF6reg", "\xF6reged\u0151", "\xF6reges", "\xF6regs\xE9gi", "\u0151rizetlen", "\u0151rj\xEDt\u0151", "\u0151rj\xF6ng\u0151", "\xF6rm\xE9ny", "\xF6r\xF6k", "\xF6r\xF6kbe fogadott", "\xF6r\xF6kk\xE9val\xF3", "\xF6r\xF6kletes", "\xF6r\xF6kl\u0151d\u0151", "\xF6r\xF6kl\xF6tt", "\xF6r\xF6k\xF6s", "\xF6r\xF6k\xF6s\xF6d\xE9si", "\xF6r\xF6kz\xF6ld", "\u0151r\xF6lt", "\xF6r\xF6mest", "\xF6r\xF6mittas", "\xF6r\xF6mtelen", "\xF6r\xF6mteli", "\u0151r\xFClt", "\xF6rvendetes", "\u0151rz\u0151", "\u0151segyiptomi", "\u0151seredetis\xE9g", "\u0151shonos", "\u0151si", "\u0151skori", "\u0151sr\xE9gi", "\u0151sz", "\u0151szes", "\u0151szi", "\u0151szinte", "\xF6sszecsavart", "\xF6sszecsukhat\xF3", "\xF6sszeegyeztethetetlen", "\xF6sszef\xE9rhetetlen", "\xF6sszefoglal\xF3", "\xF6sszefon\xF3dott", "\xF6sszef\xFCgg\xE9stelen", "\xF6sszef\xFCgg\u0151", "\xF6sszegy\u0171jt\xF6tt", "\xF6sszehangolt", "\xF6sszehasonl\xEDthatatlan", "\xF6sszehasonl\xEDthat\xF3", "\xF6sszehasonl\xEDt\xF3", "\xF6sszeh\xFAz\xF3dott", "\xF6sszeill\u0151", "\xF6sszekapcsolt", "\xF6sszek\xF6t\u0151", "\xF6sszes", "\xF6sszes\xEDtett", "\xF6sszesz\u0171k\xFClt", "\xF6sszetett", "\xF6sszet\xE9veszthetetlen", "\xF6sszezavarodott", "\xF6sszn\xE9met", "\xF6sszn\xE9pi", "\xF6sszpontosul\xF3", "\xF6szt\xF6n\xF6s", "\xF6szt\xF6nz\u0151", "\u0151sz\xFCl\u0151", "\xF6t\xE9ves", "\xF6tletes", "\xF6tletgazdag", "\xF6tletszeg\xE9ny", "\xF6tlettelen", "\xF6tsz\xF6r\xF6s", "\xF6tven\xE9ves", "\u0151zbarna", "pajkos", "pajz\xE1n", "pakiszt\xE1ni", "palackozott", "palackz\xF6ld", "palasz\xFCrke", "palat\xE1lis", "paleolit", "palesztin", "p\xE1linkaszag\xFA", "pall\xE9rozott", "p\xE1lyakezd\u0151", "panamai", "panaszkod\xF3", "p\xE1nc\xE9loscsata", "p\xE1nc\xE9losezred", "p\xE1nc\xE9lozott", "p\xE1nc\xE9lt\xF6r\u0151", "pandzs\xE1bi", "papag\xE1jsz\xEDn", "papag\xE1jz\xF6ld", "p\xE1pai", "p\xE1pista", "papucs", "paradicsomi", "p\xE1rad\xFAs", "paraguayi", "param\xE1gneses", "parancsolgat\xF3", "parancsol\xF3", "paranoi\xE1s", "paranoid", "par\xE1nyi", "p\xE1r\xE1s", "paraszimpatikus", "paraszti", "parasztos", "p\xE1ratartalm\xFA", "p\xE1ratlan", "parazitaellenes", "par\xE1zna", "parci\xE1lis", "p\xE1rhuzamos", "p\xE1rizsi", "p\xE1rk\xE1nyszer\u0171", "parkol\xF3", "parlament\xE1ris", "parlamenti", "p\xE1rolt", "p\xE1ros", "p\xE1rszi", "p\xE1rtatlan", "p\xE1rtellenes", "p\xE1rtfogolt", "partikul\xE1ris", "p\xE1rtol\xF3", "p\xE1rtszolg\xE1latos", "passz\xEDv", "p\xE1szt\xE1z\xF3", "pasztell", "pasztellk\xE9k", "pasztellsz\xEDn", "pat\xE1s", "patent", "patetikus", "patkol\xF3", "patk\xF3s", "patog\xE9n", "patriarch\xE1lis", "pattan\xE1sos", "pattogatott", "patyolatfeh\xE9r", "patyolattiszta", "pazar", "pazarl\xF3", "pearl grey", "peches", "pecs\xE9tes", "pedag\xF3giai", "ped\xE1ns", "pedofil", "pehelyk\xF6nny\u0171", "pej", "pejorat\xEDv", "pekingi", "p\xE9ldamutat\xF3", "p\xE9ldaszer\u0171", "p\xE9ld\xE1tlan", "pelyhes", "pen\xE9szes", "penge", "p\xE9nzbeszed\u0151", "p\xE9nzes", "p\xE9nztelen", "p\xE9nz\xFCgyi", "p\xE9nzs\xF3v\xE1r", "p\xE9pes", "pepita", "perd\xF6nt\u0151", "peres", "perif\xE9rikus", "periodikus", "peri\xF3dusos", "peripatetikus", "perleked\u0151", "permanens", "perui", "perzsa", "perzsel\u0151", "pesszimista", "petrolk\xE9miai", "petyh\xFCdt", "pettyes", "pezsg\u0151", "pezsg\u0151s", "piaci", "pi\xE1s", "pici", "pihen\u0151", "pik\xE1ns", "pik\xEDrt", "pikkelyes", "piknikus", "pillanatnyi", "pimasz", "pimf", "pipa", "pip\xE1s", "piperk\u0151c", "pir\xEDtott", "piros", "pirospozsg\xE1s", "pirotechnikai", "pisl\xE1kol\xF3", "pislog\xF3", "pisze", "piszkos", "piszkosfeh\xE9r", "piszkossz\xFCrke", "piszlics\xE1r\xE9", "piti", "piti\xE1ner", "pitvari", "pity\xF3k\xE1s", "plak\xE1tk\xE9sz\xEDt\u0151", "plasztikai", "plasztikus", "platformf\xFCggetlen", "pl\xE1t\xF3i", "pl\xE9hpofa", "plen\xE1ris", "pletyk\xE1s", "pletyk\xE1z\xF3", "pl\xF6mpl\xF6m", "plurivalens", "pneumatikus", "pocakos", "pocs\xE9k", "pof\xE1tlan", "pofonegyszer\u0171", "pog\xE1ny", "poharaz\xF3", "pohos", "p\xF3kh\xE1l\xF3szer\u0171", "pokoli", "pol\xE1ris", "polg\xE1ri", "policentrikus", "polig\xE1m", "polinomi\xE1lis", "pol\xEDrozott", "politikai", "politikamentes", "polosk\xE1s", "poly\xE1k", "pomp\xE1s", "pongyola", "pontatlan", "pontos", "porcos", "porhany\xF3s", "p\xF3rias", "por\xEDtott", "porlepte", "pormentes", "pornogr\xE1f", "porolt\xF3", "poros", "porosz", "poroszka", "por\xF3zus", "porszer\u0171", "portalan", "port\xF3mentes", "portug\xE1l", "porz\xF3s", "poshadt", "postai", "postatiszta", "posztalveol\xE1ris", "posztgradu\xE1lis", "posztumusz", "potenci\xE1lis", "p\xF3tolhatatlan", "potom", "potrohos", "potya", "pozit\xEDv", "p\xF6ffeszked\u0151", "p\xF6khendi", "p\xF6pec", "p\u0151re", "p\xF6tt\xF6m", "p\xF6tty\xF6s", "pragmatikus", "praktikus", "prec\xEDz", "pregn\xE1ns", "prekolumbi\xE1nus", "pr\xE9mes", "presz\xF3kratikus", "pressz\xF3s", "prevent\xEDv", "pr\xEDm", "pr\xEDma", "primit\xEDv", "primordi\xE1lis", "priv\xE1t", "probl\xE9mamentes", "problematikus", "procc", "produkt\xEDv", "prof\xE1n", "profi", "profilaktikus", "programoz\xE1si", "programozhat\xF3", "progressz\xEDv", "proszt\xF3", "protekcionista", "protest\xE1ns", "protivzakonit", "provansz\xE1l", "provokat\xEDv", "pr\xF3zai", "pr\u0171d", "pszichedelikus", "pszich\xE9s", "pszichikai", "pszichoakt\xEDv", "pszichol\xF3giai", "pszichostimul\xE1ns", "pszichotikus", "pszichotr\xF3p", "puffadt", "pufi", "pufli", "puf\xF3k", "puha", "puh\xEDt\xF3", "pupillat\xE1g\xEDt\xF3", "p\xFApos", "purit\xE1n", "puszta", "puszt\xEDt\xF3", "p\xFCnk\xF6sdi", "p\xFCsp\xF6ki", "rabl\xF3", "racion\xE1lis", "r\xE1csos", "radik\xE1lis", "radioakt\xEDv", "r\xE1dzsaszth\xE1ni", "rafin\xE1lt", "r\xE1fizet\xE9ses", "rafk\xF3s", "ragacsos", "ragad\xF3", "ragad\xF3s", "ragadoz\xF3", "ragadt", "rag\xE1lyos", "ragaszkod\xF3", "ragaszt\xF3", "r\xE1g\xF3", "r\xE1g\xF3s", "ragozhatatlan", "ragy\xE1s", "ragyog\xF3", "rahedli", "r\xE1kellenes", "r\xE1kkelt\u0151", "rak\xF3", "rakonc\xE1tlan", "r\xE1kos", "r\xE1k\xF6vetkez\u0151", "ramaty", "r\xE1men\u0151s", "r\xE1ncos", "r\xE1ngat\xF3z\xF3", "r\xE1ntott", "raplis", "rapszodikus", "rasszista", "raszta", "r\xE1tarti", "r\xE1termett", "ravasz", "r\xE1z\xF3", "r\xE1z\xF3s", "reakci\xF3s", "re\xE1lis", "realista", "rebellis", "recept\xEDv", "rec\xE9s", "redund\xE1ns", "redv\xE1s", "redves", "reform\xE1tus", "reg\xE9nyes", "r\xE9g\xE9szeti", "reggeli", "r\xE9gi", "r\xE9gies", "r\xE9gim\xF3di", "region\xE1lis", "r\xE9gm\xFAlt", "regn\xE1l\xF3", "regressz\xEDv", "regul\xE1ris", "rejtelmes", "rejt\xE9lyes", "rejtett", "rejt\u0151z\u0151", "rekedt", "rekedtes", "rekken\u0151", "rekombin\xE1ns", "rekre\xE1ci\xF3s", "rekurz\xEDv", "relat\xEDv", "relev\xE1ns", "remeg\u0151", "remek", "rem\xE9nyked\u0151", "rem\xE9nytelen", "rem\xE9nyteljes", "rem\xE9nyvesztett", "r\xE9mes", "r\xE9miszt\u0151", "r\xE9m\xFClt", "rendellenes", "rendeltet\xE9sszer\u0171", "rendes", "rendetlen", "rendezetlen", "rendezett", "rendhagy\xF3", "rend\xEDthetetlen", "rendk\xEDv\xFCli", "rend\u0151ri", "rendszeres", "rendszeret\u0151", "rendszertani", "rendszertelen", "rend\u0171", "rend\xFCletlen", "rengeteg", "reng\u0151", "repedezett", "repellens", "repi", "reprezentat\xEDv", "reprodukt\xEDv", "republik\xE1nus", "rest", "r\xE9szbenrendezett", "r\xE9szeg", "r\xE9szeges", "reszelt", "r\xE9szes", "r\xE9szeshat\xE1roz\xF3", "reszket\u0151", "r\xE9szleges", "r\xE9szletes", "r\xE9szletgazdag", "r\xE9szmunkaid\u0151s", "r\xE9szv\xE9tlen", "retard\xE1lt", "r\xE9tegezett", "retroflex", "retrogr\xE1d", "rettenetes", "rettenthetetlen", "rettent\u0151", "reumaellenes", "reum\xE1s", "revide\xE1lt", "r\xE9z", "rezes", "r\xE9zf\xFAv\xF3s", "rezidens", "rezign\xE1lt", "rezisztens", "r\xE9ztartalm\xFA", "r\xE9zv\xF6r\xF6s", "r\xE9zs\xFAtos", "riadt", "riaszt\xF3", "rideg", "rigoly\xE1s", "riherongy", "rik\xEDt\xF3", "ring\xF3", "ritka", "ritmikus", "ritu\xE1lis", "rizsporos", "robban\xE1sszer\u0171", "robban\xE9kony", "robban\xF3", "robosztus", "rohad\xE9k", "rohadt", "rohamold\xF3", "rohan\xF3", "rojtos", "r\xF3kasz\xEDn\u0171", "rokkant", "rokon\xE9rtelm\u0171", "rokonszenves", "rokontalan", "r\xF3mai katolikus", "r\xF3mai", "rom\xE1n", "rom\xE1niai", "romans", "romantikus", "rombol\xF3", "romland\xF3", "romlatlan", "romlott", "romos", "ronda", "rongyos", "ront\xF3", "ropog\xF3s", "roppant", "roskatag", "rostgazdag", "rostos", "rossz", "rosszakarat\xFA", "rosszhiszem\u0171", "rosszindulat\xFA", "rosszkedv\u0171", "rosszm\xE1j\xFA", "rothad\xF3", "rothadt", "rovarev\u0151", "rozoga", "rozzant", "r\xF3zsapiros", "r\xF3zs\xE1s", "r\xF3zsasz\xEDn", "r\xF3zsasz\xEDn\u0171", "rozsdamentes", "rozsd\xE1s", "rozsdasz\xEDn", "rozsdasz\xEDn\u0171", "rozsdav\xF6r\xF6s", "r\xF6g\xF6s", "r\xF6gt\xF6nz\xF6tt", "r\xF6gz\xEDtett", "r\xF6gz\xEDt\u0151", "r\xF6pke", "r\xF6pk\xE9pes", "r\xF6pk\xE9ptelen", "r\xF6plabd\xE1z\xF3", "r\u0151t", "r\xF6vid", "r\xF6vidhull\xE1m\xFA", "r\xF6vid\xEDtett", "r\xF6vidl\xE1t\xF3", "r\xF6vidt\xE1v\xFA", "ruder\xE1lis", "rugalmas", "rugalmasan", "ruganyos", "rug\xE9kony", "rug\xF3s", "ruh\xE1tlan", "rumos", "rup\xF3tlan", "rusnya", "ruszki", "ruszny\xE1k", "rusztikus", "r\xFAt", "rut\xE9n", "rutinos", "r\xFCgyez\u0151", "r\xFChes", "Sablon:\xFAjmell", "sablonos", "s\xE1fr\xE1nys\xE1rga", "saj\xE1t", "saj\xE1tkez\u0171", "saj\xE1tos", "saj\xE1ts\xE1gos", "saj\xE1tszer\u0171", "sajg\xF3", "sajn\xE1latos", "sajn\xE1latra m\xE9lt\xF3", "sajt\xF3nyelvi", "sajtos", "sallangmentes", "salvadori", "sanda", "s\xE1nta", "sanyar\xFA", "s\xE1padt", "s\xE1rfeh\xE9r", "s\xE1rga", "s\xE1rg\xE1s", "s\xE1rg\xE1sbarna", "s\xE1rg\xE1sbarn\xE1s", "s\xE1rg\xE1sv\xF6r\xF6s", "s\xE1rg\xE1sz\xF6ld", "sarkalatos", "sarki", "s\xE1rmos", "s\xE1ros", "s\xE1t\xE1ni", "satnya", "sav\xE1ll\xF3", "savanyk\xE1s", "savany\xFA", "savas", "s\xE1vos", "savtartalm\xFA", "scabby", "sebes", "sebes\xFClt", "seb\xE9szeti", "sebezhetetlen", "sebezhet\u0151", "sebzett", "seg\xEDt\u0151k\xE9sz", "sejtelmes", "sejten bel\xFCli", "sek\xE9ly", "sek\xE9lyes", "selejtes", "selymes", "sematikus", "semleges", "semlegesnem", "semlegesnem\u0171", "semmif\xE9le", "semmirekell\u0151", "semmis", "semmitmond\xF3", "semmittelen", "ser\xE9ny", "s\xE9rtetlen", "s\xE9rthetetlen", "s\xE9rt\u0151", "s\xE9rt\u0151d\xE9keny", "s\xE9rt\u0151d\xF6tt", "s\xE9r\xFCl\xE9keny", "s\xE9r\xFClt", "s\xE9t\xE1l\xF3", "siet\u0151s", "s\xEDita", "s\xEDk", "sikaml\xF3s", "s\xEDkbarajzolhat\xF3", "s\xEDkbeli", "sikeres", "sikertelen", "sikkes", "sikl\xF3", "s\xEDkos", "sil\xE1ny", "sima", "simul\xE9kony", "S\xEDnai", "siralmas", "sir\xE1ly", "sisa", "siv\xE1r", "sk\xE1l\xE1zhat\xF3", "skandin\xE1v", "skarl\xE1t", "skarl\xE1tpiros", "skarl\xE1tv\xF6r\xF6s", "sk\xF3t", "sl\xE1gfertig", "slampos", "slejfni", "slendri\xE1n", "smaragdz\xF6ld", "smucig", "snassz", "socini\xE1nus", "sodr\xF3", "s\xF3her", "sok", "sokablakos", "sok\xE1g\xFA", "sokatmond\xF3", "sok\xE9ves", "sokfel\xE9", "sokf\xE9le", "sokkol\xF3", "sokk\xF6tetes", "sokoldalas", "sokoldal\xFA", "sokr\xE9t\u0171", "soksz\xEDn\u0171", "sokszoros", "soproni", "sorakoz\xF3", "sorba rendezett", "sork\xF6teles", "sorozatos", "sorsd\xF6nt\u0151", "s\xF3s", "s\xF3tartalm\xFA", "s\xF3tlan", "sov\xE1ny", "s\xF3v\xE1r", "s\xF3v\xE1rg\xF3", "s\xF6r\xE9nyes", "s\xF6t\xE9t", "s\xF6t\xE9tbarna", "s\xF6t\xE9tk\xE9k", "s\xF6t\xE9tlila", "s\xF6t\xE9tpiros", "s\xF6t\xE9ts\xE1rga", "s\xF6t\xE9tsz\u0151ke", "s\xF6t\xE9tsz\xFCrke", "s\xF6t\xE9tv\xF6r\xF6s", "s\xF6t\xE9tz\xF6ld", "spanyol", "spanyol-amerikai", "sp\xE1rtai", "sp\xE9ci", "speci\xE1lis", "specifikus", "spicces", "spir\xE1lis", "spiritiszta", "spiritu\xE1lis", "sporadikus", "sp\xF3rol\xF3s", "sportos", "sportszer\u0171", "sportszer\u0171tlen", "spr\u0151d", "sr\xE9g", "stabil", "statikus", "statisztikai", "steril", "stikkes", "st\xEDlusos", "st\xEDlustalan", "stramm", "strat\xE9giai", "stresszes", "struktur\xE1lis", "sug\xE1rbiztos", "sug\xE1rhajt\xE1s\xFA", "sug\xE1rz\xE1sm\xE9r\u0151", "sug\xE1rz\xF3", "s\xFAg\xF3", "s\xFAlyl\xF6k\u0151", "s\xFAlyos", "s\xFAlyosb\xEDt\xF3", "s\xFAlyozott", "s\xFAlytalan", "sum\xE9r", "sunyi", "s\xFArl\xF3", "s\xFArl\xF3d\xE1smentes", "susny\xE1s", "suta", "sutty\xF3", "s\xFCket", "s\xFCketn\xE9ma", "s\xFCletlen", "s\xFClt", "s\xFCllyed\u0151", "s\xFCpped\u0151", "s\xFCrget\u0151", "s\xFCrg\u0151s", "s\u0171r\xEDtett", "s\u0171r\u0171", "s\xFCs\xFC", "s\xFCt\u0151", "sv\xE1b", "sv\xE1jci", "sv\xE9d", "szabad sz\xE1j\xFA", "szabad", "szabadalmas", "szabadalmi", "szabadelv\u0171", "szabadfog\xE1s\xFA", "szabadharcos", "szabadk\xE9zi", "szabadl\xE1bon", "szabadnapos", "szabados", "szabads\xE1gi", "szabadst\xEDlus\xFA", "szabadsz\xE1j\xFAs\xE1g", "szabadt\xE9ri", "szabad\xFAsz\xF3", "szab\xE1lyellenes", "szab\xE1lyos", "szab\xE1lyoz\xF3", "szab\xE1lyszer\u0171", "szab\xE1lytalan", "szabatos", "szabott", "szabv\xE1nyos", "szabv\xE1nyos\xEDtott", "szadista", "szaftos", "szaggat\xF3", "szaggatott", "szagl\xF3", "szagl\xF3sejt", "szagos", "szagtalan", "szag\xFA", "sz\xE1jas", "sz\xE1jbar\xE1g\xF3", "sz\xE1j\xFA", "szakadatlan", "szakad\xF3", "szakadozott", "szak\xE1llas", "szak\xE9rt\u0151i", "szakk\xE9pzetlen", "szakk\xE9pzett", "szakmai", "szakr\xE1lis", "szakszer\u0171", "szakszer\u0171tlen", "szakszervezeti", "sz\xE1lk\xE1s", "sz\xE1ll\xEDt\xF3", "sz\xE1ll\xF3", "szalmapapucsos", "szalmas\xE1rga", "szalonk\xE9pes", "szalonn\xE1s", "sz\xE1loptik\xE1s", "sz\xE1mbeli", "sz\xE1m\xEDt\xF3", "sz\xE1m\xEDt\xF3g\xE9pes", "sz\xE1mkivetett", "szamoai", "sz\xE1mos", "sz\xE1mottev\u0151", "sz\xE1mozott", "sz\xE1mszer\u0171", "sz\xE1mtalan", "sz\xE1mtani", "sz\xE1nakoz\xF3", "sz\xE1nalmas", "sz\xE1nd\xE9kos", "szapora", "szapor\xEDt\xF3", "szaporod\xE1si", "szappanos", "szaprof\xE1g", "sz\xE1raz", "sz\xE1razf\xF6ldi", "sz\xE1razs\xE1gt\u0171r\u0151", "sz\xE1rd", "sz\xE1r\xEDt\xF3", "sz\xE1r\xEDtott", "szarkasztikus", "szarkavar\xF3", "sz\xE1rmaz\xF3", "sz\xE1rmaztatott", "szaros", "sz\xE1rtalan", "szarvasmarhaf\xE9le", "sz\xE1sz", "szatirikus", "sza\xFAd-ar\xE1biai", "szavahihet\u0151", "szavaz\xE1si", "szavazatsz\xE1ml\xE1l\xF3", "szavaz\xF3", "sz\xE1zal\xE9kos", "sz\xE1zas", "sz\xE1zsz\xE1zal\xE9kos", "sz\xE1zszoros", "szebuano", "szederjes", "szed\u0151", "sz\xE9d\xFCl\xE9s elleni", "szef\xE1rd", "szeg\xE9ny", "szeg\xE9nyes", "sz\xE9gyenkez\u0151", "sz\xE9gyenletes", "sz\xE9gyenl\u0151s", "sz\xE9gyentelen", "szeizmikus", "szekunder", "szekvenci\xE1lis", "szeleburdi", "szelekt\xEDv", "sz\xE9les k\xF6r\u0171", "szeles", "sz\xE9les", "sz\xE9lesv\xE1szn\xFA", "sz\xE9lfog\xF3", "sz\xE9lhordta", "szel\xEDd", "szel\xEDd\xEDtett", "szellemd\xFAs", "szellemes", "szellemi", "szellemis\xE9g\u0171", "szellemtelen", "szell\u0151s", "szell\u0151zetlen", "sz\xE9lmentes", "sz\xE9ls\u0151", "sz\xE9ls\u0151s\xE9ges", "sz\xE9lv\xE9d\u0151", "szemben\xE1ll\xF3", "szembe\xF6tl\u0151", "szembet\u0171n\u0151", "szemcs\xE9s", "szem\xE9lyes", "szem\xE9lyi", "szem\xE9lytelen", "szem\xE9rmes", "szem\xE9rmetlen", "szem\xE9szeti", "szemetes", "szemf\xFCles", "szemk\xE1pr\xE1ztat\xF3", "szeml\xE9letes", "szeml\xE9l\u0151d\u0151", "szemreh\xE1ny\xF3", "szemtelen", "szem\xFCveges", "szende", "szeneg\xE1li", "szenes", "sz\xE9nfekete", "sz\xE9nf\u0171t\xE9ses", "sz\xE9nhord\xF3", "szenilis", "sz\xE9nsavas", "sz\xE9nsz\xE1ll\xEDt\xF3", "szent", "sz\xE9ntartalm\xFA", "szentiment\xE1lis", "szents\xE9gi", "szents\xE9gtelen", "szents\xE9gt\xF6r\u0151", "sz\xE9nt\xFCzel\xE9s\u0171", "szenved\xE9lyes", "szenved\xE9lyteli", "szenved\u0151", "szenvelg\u0151", "szenvtelen", "szenz\xE1ci\xF3hajh\xE1sz", "szenz\xE1ci\xF3s", "szennyes", "szennyezett", "szennyez\u0151", "szeny\xF3", "sz\xE9p", "sz\xE9p\xEDt\u0151", "sz\xE9plelk\u0171", "szepl\u0151s", "szepl\u0151tlen", "sz\xE9ps\xE9g\xE1pol\xF3", "sz\xE9ps\xE9ges", "szeptemberi", "szeptikus", "szerb", "szerbhorv\xE1t", "szerelmes", "szerelmi", "szerel\u0151", "szerencsehoz\xF3", "szerencsej\xE1t\xE9kos", "szerencs\xE9s", "szerencs\xE9tlen", "szer\xE9ny", "szer\xE9nytelen", "szerepl\u0151", "szeretett", "szeret\u0151", "szerkezeti", "szertart\xE1sos", "szerte\xE1gaz\xF3", "szertelen", "szerves", "szervetlen", "szervez\xE9si", "szervezeti", "szervezett", "szervi", "szerzetesi", "szerzett", "szerz\u0151", "szerz\u0151d\xE9ses", "szerz\u0151d\u0151", "szerz\u0151i", "szesz\xE9lyes", "szeszes", "szesztartalm\xFA", "sz\xE9tszedhet\u0151", "sz\xE9tsz\xF3rt", "szexi", "szexu\xE1lis", "szezonv\xE9gi", "szferikus", "szi\xE1mi", "szib\xE9riai", "szic\xEDliai", "szigor\xFA", "szigor\xFAan monoton n\xF6vekv\u0151", "szik\xE1r", "szikes", "szikh", "szikl\xE1s", "szilaj", "szil\xE1rd", "szil\xE9ziai", "szilvak\xE9k", "szimbolikus", "szimfonikus", "szimmetrikus", "szimpatikus", "szimpi", "szimpla", "szimult\xE1n", "sz\xEDnarany", "szindhi", "sz\xEDnes", "sz\xEDn\xE9szi", "sz\xEDnez\xFCst", "szingal\xE9z", "szingul\xE1ris", "sz\xEDnh\xE1zi", "sz\xEDnigaz", "sz\xEDnj\xE1tsz\xF3", "sz\xEDnjeles", "szinkron", "sz\xEDnpadi", "sz\xEDnpadias", "sz\xEDnpomp\xE1s", "sz\xEDnszer\u0171", "szintaktikai", "sz\xEDntart\xF3", "sz\xEDntelen", "szintetikus", "szint\u0171", "sz\xEDn\u0171", "sz\xEDnvak", "sz\xEDnvonaltalan", "szipork\xE1z\xF3", "sz\xEDr", "sz\xEDriai", "szirupos", "szisztematikus", "szittya", "szi\xFA", "szivacsos", "sz\xEDvbemarkol\xF3", "sz\xEDvbeteg", "sz\xEDv\xE9lyes", "sz\xEDves", "sz\xEDv\xF3s", "sz\xEDvpitvari", "sz\xEDvszaggat\xF3", "sz\xEDvtelen", "sz\xEDv\u0171", "szkeptikus", "szk\xEDta", "szkizotim", "szl\xE1v", "szlov\xE1k", "szlov\xE1kiai", "szlov\xE9n", "sz\xF3 szerinti", "sz\xF3beli", "sz\xF3b\u0151", "szoci", "szoci\xE1ldemokrata", "szoci\xE1lis", "szocialista", "szociol\xF3giai", "sz\xF3fecs\xE9rl\u0151", "sz\xF3fogadatlan", "sz\xF3fogad\xF3", "szoftverhib\xE1s", "sz\xF3fukar", "szok\xE1sos", "szokatlan", "sz\xF3kimond\xF3", "szokv\xE1nyos", "szol\xE1ris", "szolg\xE1lati", "szolg\xE1latk\xE9sz", "szolg\xE1lattev\u0151", "szolgalelk\u0171", "szolgalelk\u0171s\xE9g", "szolg\xE1ltat\xF3", "szolid", "szolid\xE1ris", "sz\xF3l\xF3", "szom\xE1li", "szom\xE1liai", "szomjas", "szomjolt\xF3", "szomnambul", "szomor\xEDt\xF3", "szomork\xE1s", "szomor\xFA", "szomsz\xE9dos", "sz\xF3noki", "szop\xF3ssz\xE1j\xFA", "szopr\xE1n", "sz\xF3rakozott", "sz\xF3rakoztat\xF3", "szorb", "szorgalmas", "szorgos", "szor\xEDt\xF3", "sz\xF3r\xF3", "szorongatott", "szoros", "szorult", "sz\xF3rv\xE1nyos", "sz\xF3rv\xE1nyosan", "szorzattart\xF3", "sz\xF3szapor\xEDt\xF3", "sz\xF3sz\xE1ty\xE1r", "sz\xF3t\xE1r\xE9rett", "sz\xF3tlan", "szovjet", "sz\xF6ges", "sz\xF6gletes", "sz\u0151ke", "sz\xF6k\u0151", "sz\xF6k\xF6tt", "sz\xF6ktet\u0151", "sz\u0151l\u0151s", "sz\u0151nyegsz\xF6v\u0151", "sz\xF6rf\xF6s", "sz\xF6rny\u0171", "sz\u0151r\xF6s", "sz\u0151rtelen", "sz\xF6szmentes", "sz\xF6veges", "sz\xF6vets\xE9ges", "sz\xF6vets\xE9gi", "sz\xF6vev\xE9nyes", "sz\xF6v\u0151dm\xE9nymentes", "sz\xF6v\xF6tt", "sztere\xF3", "sztereofonikus", "sztochasztikus", "sztoikus", "szuboptim\xE1lis", "szubtilis", "szubtr\xF3pusi", "szud\xE1ni", "szuggeszt\xEDv", "szundan\xE9z", "szunnyad\xF3", "szuper", "szupermodern", "sz\xFAr\xF3", "szurokfekete", "sz\xFAr\xF3s", "szurtos", "szuver\xE9n", "sz\u0171k", "sz\u0171kkebl\u0171", "sz\u0171kmark\xFA", "sz\u0171k\xF6lk\xF6d\u0151", "sz\u0171k\xF6s", "sz\xFCks\xE9ges", "sz\xFCks\xE9gszer\u0171", "sz\xFCks\xE9gtelen", "sz\u0171kszav\xFA", "sz\xFCl\xE9si", "sz\xFClet\xE9si", "sz\xFCletett", "sz\xFCl\u0151", "sz\xFCnetmentes", "sz\xFCntelen", "sz\u0171retlen", "sz\xFCrjekt\xEDv", "sz\xFCrke", "sz\xFCrk\xE9s", "sz\xFCrk\xE9sbarna", "sz\xFCrk\xE9sbarn\xE1s", "sz\xFCrk\xE9sfeh\xE9r", "sz\xFCrk\xE9sfekete", "sz\xFCrk\xE9sk\xE9k", "sz\xFCrk\xE9slila", "sz\xFCrk\xE9ss\xE1rga", "sz\xFCrk\xE9sz\xF6ld", "sz\u0171r\xF6s", "sz\xFCrre\xE1lis", "sz\u0171z", "sz\u0171zies", "szv\xE1zi", "t\xE1bori", "t\xE1dzsik", "t\xE1g", "tagalog", "t\xE1gas", "t\xE1g\xEDt\xF3", "tagolatlan", "tagolt", "tahiti", "taino", "t\xE1j\xE9kozatlan", "t\xE1j\xE9kozott", "tajvani", "takar\xE9kos", "takar\xE9koss\xE1gi", "takar\xF3", "takarod\xF3", "takaros", "taknyos", "taktikai", "taktikus", "tal\xE1l\xE9kony", "tal\xE1lhat\xF3", "tal\xE1l\xF3", "tal\xE1l\xF3s", "talmi", "talpas", "talpnyal\xF3", "talpraesett", "t\xE1mad\xF3", "tamil", "t\xE1mogat\xF3", "t\xE1mogatott", "tan\xE1csad\xF3", "tan\xE1cskoz\xF3", "tan\xE1csos", "tan\xE1cstalan", "tan\xE1ri", "tand\xEDjmentes", "tan\xEDt\xE1si", "tan\xEDt\xF3", "t\xE1ntor\xEDthatatlan", "tantrikus", "tanulatlan", "tanulm\xE1nyi", "tanult", "tan\xFAs\xEDtott", "tanz\xE1niai", "t\xE1ny\xE9rnyal\xF3", "t\xE1ny\xE9rsapk\xE1s", "t\xE1ny\xE9rtalp\xFA", "t\xE1ny\xE9rt\xF6rl\u0151", "tapad\xF3", "tapasztalati", "tapasztalatlan", "tapasztalt", "tap\xE9t\xE1s", "tapintatlan", "tapintatos", "tapinthat\xF3", "t\xE1pl\xE1l\xF3", "t\xE1pl\xE1lt", "tar", "t\xE1rcs\xE1s", "t\xE1rgyas", "t\xE1rgyatlan", "t\xE1rgyi", "t\xE1rgyilagos", "t\xE1rgytalan", "tarka", "tarkabarka", "t\xE1rol\xF3", "t\xE1rsadalmi", "t\xE1rsadalom\xE1talak\xEDt\xF3", "t\xE1rsalg\xF3", "t\xE1rsas", "t\xE1rsas\xE1gi", "t\xE1rsas\xE1gkedvel\u0151", "t\xE1rs\xEDtott", "t\xE1rstalan", "t\xE1rsult", "tartalmas", "tartalmatlan", "tartalm\xFA", "tarthatatlan", "tart\xF3", "tart\xF3s", "tart\xF3s\xEDtott", "tart\xF3zkod\xE1si", "tart\xF3zkod\xF3", "tasmaniai", "tasz\xEDt\xF3", "tavalyi", "t\xE1voli", "t\xE1vol\xEDt\xF3", "t\xE1voll\xE1t\xF3", "t\xE1vollev\u0151", "taxon\xF3miai", "technikai", "technol\xF3giai", "t\xE9glalap alak\xFA", "t\xE9glasz\xEDn\u0171", "t\xE9glav\xF6r\xF6s", "tegnapi", "teherhord\xF3", "tehermentes", "tehetetlen", "tehetetlens\xE9gi", "tehet\u0151s", "tehets\xE9ges", "tehets\xE9gtelen", "tejes", "tejfeh\xE9r", "teker\u0151", "tekerv\xE9nyes", "teket\xF3ri\xE1z\xF3", "tekint\xE9lyelv\u0171", "tekint\xE9lyes", "t\xE9kozl\xF3", "tektonikai", "tektonikus", "tele", "telev\xEDzi\xF3s", "telhetetlen", "teli", "t\xE9li", "teliv\xE9r", "teljes", "teljesid\u0151s", "teljes\xEDtett", "teljes\xEDthet\u0151", "teljhatalm\xFA", "teltkarcs\xFA", "teltkebl\u0171", "tematikus", "templomj\xE1r\xF3", "tendenci\xF3zus", "tengelyes", "tengelyir\xE1ny\xFA", "tengeralattj\xE1r\xF3-elh\xE1r\xEDt\xF3", "tengerent\xFAli", "tenger\xE9szeti", "tenger\xE9szk\xE9k", "tengeri", "tengeribeteg", "tengerk\xE9k", "tengerm\xE9ly", "tengermenti", "tengerparti", "tengersz\xEDn", "tengersz\xEDn\u0171", "tengerz\xF6ld", "tenyeres", "teny\xE9rnyi", "t\xE9nyleges", "teol\xF3giai", "ter\xE1pi\xE1s", "teratog\xE9n", "t\xE9rbeli", "tereb\xE9lyes", "teremt\u0151", "terepj\xE1r\xF3", "terhelt", "terhes", "t\xE9r\xEDt\xE9smentes", "ter\xEDt\u0151", "terjedelmes", "terjeng\u0151s", "term\xE9keny", "term\xE9ketlen", "termel\u0151", "term\xE9szetellenes", "term\xE9szetes", "term\xE9szetfeletti", "term\xE9szeti", "term\xE9szettudom\xE1nyi", "termesztett", "termetes", "termikus", "term\u0151", "territori\xE1lis", "ter\xFCleti", "tervezhet\u0151", "tervszer\u0171", "testes", "testesed\u0151", "testi", "testsz\xEDn", "testsz\xEDn\u0171", "test\xFCleti", "testv\xE9ri", "testv\xE9ries", "testv\xE9rietlen", "testv\xE9rtelen", "tetemes", "t\xE9tlen", "t\xE9tova", "t\xE9tov\xE1z\xF3", "tet\u0151t\xE9ri", "tetszet\u0151s", "tetsz\u0151leges", "tetter\u0151s", "tettetett", "tettrek\xE9sz", "tetves", "tev\xE9keny", "tev\xE9kenys\xE9gi", "t\xE9velyg\u0151", "t\xE9ves", "tev\u0151leges", "texasi", "textil", "thai", "thaif\xF6ldi", "tibeti", "tigrinya", "tilalmas", "tilos", "tilt\xF3", "tiltott", "tint\xE1s", "tipikus", "tirp\xE1k", "tirr\xE9n", "tiszta", "tiszt\xE1talan", "tiszteletbeli", "tiszteletlen", "tiszteletrem\xE9lt\xF3", "tiszteletteljes", "tisztelettud\xF3", "tisztelt", "tisztes", "tisztess\xE9ges", "tisztess\xE9gtelen", "tisztess\xE9gtud\xF3", "tiszt\xEDt\xF3", "tiszt\xEDtott", "titkol\xF3z\xF3", "titkolt", "titkos", "titoktart\xF3", "titokzatos", "t\xEDz\xE1g\xFA", "toj\xE1sdad", "toj\xE1ss\xE1rga", "tokaji", "tok\xE1s", "tolakod\xF3", "toler\xE1ns", "tollas", "tol\xF3", "tol\xF3sz\xE9kes", "tompa", "tongai", "topis", "topl\xE1k", "toprongyos", "torkos", "tornyos", "torz", "torz\xEDtott", "torzult", "toszk\xE1n", "tot\xE1lis", "totalitari\xE1nus", "totalit\xE1rius", "tov\xE1bbi", "toxikus", "t\xF6bbemeletes", "t\xF6bbes", "t\xF6bbfeladatos", "t\xF6bbf\xE9le", "t\xF6bbfelhaszn\xE1l\xF3s", "t\xF6bbhetes", "t\xF6bbjelent\xE9s\u0171", "t\xF6bbk\xF6tetes", "t\xF6bbk\xF6zpont\xFA", "t\xF6bbnyelv\u0171", "t\xF6bb\xF3r\xE1s", "t\xF6bbr\xE9teg\u0171", "t\xF6bbsejt\u0171", "t\xF6bbv\xE1ltoz\xF3s", "t\u0151keer\u0151s", "t\xF6k\xE9letes", "t\xF6k\xE9letlen", "t\u0151keszeg\xE9ny", "t\xF6kmindegy", "t\xF6lt\xF6tt", "t\xF6meges", "t\xF6megpuszt\xEDt\xF3", "t\xF6m\xE9ntelen", "t\xF6m\xE9ny", "t\xF6m\xEDtetlen", "t\xF6m\xEDtett", "t\xF6m\xF6r", "t\xF6m\xF6r\xEDtett", "t\xF6m\xF6tt", "t\xF6ppedt", "t\xF6red\xE9kes", "t\xF6redelmes", "t\xF6r\xE9keny", "t\xF6rekv\u0151", "t\xF6retlen", "t\xF6rl\u0151", "t\xF6r\u0151", "t\xF6r\xF6k", "t\xF6r\xF6tt", "t\xF6rpe", "t\xF6rt\xE9nelem el\u0151tti", "t\xF6rt\xE9nelmi", "t\xF6rt\xE9neti", "t\xF6rtet\u0151", "t\xF6rv\xE9nyellenes", "t\xF6rv\xE9nyes", "t\xF6rv\xE9nyesen", "t\xF6rv\xE9nyhoz\xF3", "t\xF6rv\xE9nysz\xE9ki", "t\xF6rv\xE9nyszer\u0171", "t\xF6rv\xE9nytelen", "t\xF6rzsv\xE1s\xE1rl\xF3i", "t\xF6vises", "tradicion\xE1lis", "tr\xE1g\xE1r", "tragikomikus", "tragikus", "transzalpin", "transzcendens", "transzcendent\xE1lis", "transzgenikus", "transznem\u0171", "transzparens", "transzperszon\xE1lis", "transzvezik\xE1lis", "tranzit\xEDv", "trapista", "tr\xE9", "tr\xE9f\xE1lkoz\xF3", "tr\xE9f\xE1s", "treh\xE1ny", "trendi", "triciklikus", "trigonometrikus", "trivi\xE1lis", "tr\xF3jai", "trombit\xE1s", "tr\xF3pusi", "tucatnyi", "tudatlan", "tudatm\xF3dos\xEDt\xF3", "tudatos", "tudom\xE1nyos", "tudom\xE1nyos-fantasztikus", "tud\xF3s", "tud\xF3s\xEDt\xF3", "tudvalev\u0151", "tulajdon", "tulajdon\xEDthat\xF3", "tulajdonk\xE9ppeni", "t\xFAl\xE1rad\xF3", "t\xFAlbecs\xFClhetetlen", "t\xFAlbuzg\xF3", "t\xFAl\xE9rett", "t\xFAl\xE9rz\xE9keny", "t\xFAlhajszolt", "t\xFAlhajtott", "t\xFAlhangs\xFAlyozott", "t\xFAli", "t\xFAlkoros", "t\xFAlm\xE9retes", "t\xFAlnyom\xF3", "t\xFAls\xE1gos", "t\xFAls\xF3", "t\xFAls\xFAlyos", "t\xFAlvil\xE1gi", "t\xFAlz\xF3", "t\xFAlzott", "t\xFAlzs\xFAfolt", "tun\xE9ziai", "tunya", "tur\xE1ni", "t\xFAr\xF3s", "tuszi", "tutyimutyi", "tuvalui", "t\u0171\xE9les", "t\u0171hegyes", "t\xFCk\xF6rf\xE9nyes", "t\xFCk\xF6rsima", "t\xFCkr\xF6s", "t\xFCkr\xF6z\u0151", "t\u0171level\u0171", "t\xFCnd\xE9ri", "t\xFCnd\xF6kl\u0151", "t\xFCn\xE9keny", "t\xFCnetmentes", "t\xFCrelmes", "t\xFCrelmetlen", "t\u0171rhetetlen", "t\u0171rhet\u0151", "t\xFCrkiz", "t\xFCrkizk\xE9k", "t\xFCrkm\xE9n", "t\xFCsk\xE9s", "t\u0171z\xE1ll\xF3", "t\u0171zbiztos", "t\xFCzel\u0151", "t\xFCzes", "t\u0171zforr\xF3", "t\u0171zi", "t\u0171zpiros", "t\u0171zvesz\xE9lyes", "t\u0171zv\xF6r\xF6s", "\xDA", "uccs\xF3", "udmurt", "udvari", "udvarias", "udvariass\xE1gi", "udvariatlan", "ugor", "ugr\xE1sszer\u0171", "ugr\xF3", "\xFAgynevezett", "\xFAj", "\xFAjdivat\xFA", "\xFAjdons\xFClt", "\xFAj\xE9vi", "\xFAjfajta", "\xFAjfeln\xE9met", "\xFAjgazdag", "ujjatlan", "\xFAjkori", "\xFAjlatin", "\xFAjrahasznos\xEDtott", "\xFAjrakezd\u0151", "\xFAjsz\xFCl\xF6tt", "\xFAj-z\xE9landi", "ukr\xE1n", "ultrahangos", "ultraibolya", "ultraklerik\xE1lis", "ultraliber\xE1lis", "ultramodern", "ultrar\xF6vid", "ultraviola", "unalmas", "un\xE1ris", "unatkoz\xF3", "uncsi", "undok", "undor\xEDt\xF3", "unit\xE1rius", "univerz\xE1lis", "unott", "ur\xE1li", "uralomv\xE1gy\xF3", "uras", "\xFArb\xE9ri", "urdu", "\xFAri", "uruguayi", "\xFAsz\xF3", "\xFAsz\xF3k\xE9pes", "\xFAsz\xF3l\xE1b\xFA", "ut\xE1latos", "ut\xE1ni", "ut\xE1nozhatatlan", "utaz\xE1si", "utaz\xF3", "utcai", "\xFAti", "ut\xF3bbi", "ut\xF3lagos", "utols\xF3 el\u0151tti", "utols\xF3", "ut\xF3pisztikus", "\xFAtt\xF6r\u0151", "\xDC", "\xFCde", "\xFCdv\xF6s", "\xFCdv\xF6z\xFClt", "\xFCgyefogyott", "\xFCgyes", "\xFCgyetlen", "\xFCgyf\xE9lorient\xE1lt", "\xFCgyn\xF6ki", "\xFCgyv\xE9di", "\xFCld\xF6z\xE9si", "\xFCld\xF6z\u0151", "\xFCld\xF6z\xF6tt", "\xFCled\xE9kes", "\xFCl\u0151", "\xFCnnep\xE9lyes", "\xFCnnepi", "\u0171rbeli", "\xFCreges", "\xFCregi", "\xFCres", "\xFCtemes", "\xFCtemtelen", "\xFCt\u0151", "\xFCt\u0151d\xF6tt", "\xFCt\u0151s", "\xFCt\xF6tt-kopott", "\xFCvegablakos", "\xFCveges", "\xFCvegf\xFAv\xF3", "\xFCvegz\xF6ld", "\xFCzb\xE9g", "\xFCzemanyagt\xF6lt\u0151", "\xFCzembiztos", "\xFCzemi", "\xFCzemk\xE9pes", "\xFCzemk\xE9ptelen", "\xFCzemk\xE9sz", "\xFCzleti", "\xFCzletszer\u0171", "\u0171z\u0151", "vacak", "vad", "vad\xE1szati", "v\xE1dbeli", "vadbika", "vadidegen", "vadi\xFAj", "v\xE1dl\xF3", "vadonat\xFAj", "vadreg\xE9nyes", "v\xE1g\xF3", "v\xE1gott", "v\xE1gy\xF3d\xF3", "vagyonos", "vagyontalan", "vaj\xE1kos", "vajs\xE1rga", "vajsz\xEDn\u0171", "vak", "vakablakos", "vakbuzg\xF3", "vak\xEDt\xF3", "vakmer\u0151", "vakot\xE1s", "valamilyen", "v\xE1laszol\xF3", "v\xE1laszt\xE9kos", "v\xE1laszthat\xF3", "v\xE1lasztott", "v\xE1llalati", "v\xE1llalhatatlan", "v\xE1llalhat\xF3", "vall\xE1sellenes", "vall\xE1serk\xF6lcsi", "vall\xE1si", "vall\xE1sos", "vall\xE1stalan", "vallon", "val\xF3", "val\xF3di", "v\xE1logat\xF3s", "v\xE1logatott", "val\xF3s", "val\xF3s\xE1gh\u0171", "val\xF3s\xE1gos", "val\xF3sz\xEDn\u0171", "val\xF3sz\xEDn\u0171tlen", "val\xF3tlan", "v\xE1ls\xE1gos", "v\xE1ltakoz\xF3", "v\xE1ltozatlan", "v\xE1ltozatos", "v\xE1ltoz\xE9kony", "v\xE1ltoz\xF3", "v\xE1ltoztathat\xF3", "v\xE1mmentes", "v\xE1ndorl\xF3", "v\xE1rand\xF3s", "varangyos", "v\xE1ratlan", "var\xE1zslatos", "v\xE1rhat\xF3", "v\xE1r\xF3", "v\xE1rosi", "v\xE1rosk\xF6zi", "v\xE1rosrendez\xE9si", "v\xE1rt", "vas", "vas\xE1rnapi", "vasbika", "vaskalapos", "vaskos", "vastag", "vastagb\u0151r\u0171", "vastartalm\xFA", "vas\xFAti", "vaszkul\xE1ris", "v\xE1teszi", "vatik\xE1ni", "v\xE9dekez\u0151", "v\xE9delmi", "v\xE9dett", "v\xE9dikus", "v\xE9djegyzett", "v\xE9d\u0151", "v\xE9dtelen", "v\xE9g n\xE9lk\xFCli", "vega", "veg\xE1n", "v\xE9g\xE9rv\xE9nyes", "v\xE9ges", "vegetat\xEDv", "v\xE9gleges", "v\xE9grehajthat\xF3", "v\xE9gs\u0151", "v\xE9gtelen", "v\xE9gzetes", "v\xE9gzett", "v\xE9gz\u0151d\u0151", "vegyelemz\u0151", "vegyes", "vegyi", "vegyipari", "vegyszeres", "vegytiszta", "v\xE9kony", "vektori\xE1lis", "vel\xE1ris", "v\xE9lem\xE9nyform\xE1l\xF3", "velencei", "v\xE9letlen", "v\xE9letlenszer\u0171", "vel\u0151s", "v\xE9lt", "v\xE9n", "v\xE9n\xE1s", "vend", "vend\xE9gl\u0151i", "vend\xE9gszeret\u0151", "venezuelai", "v\xE9ral\xE1fut\xE1sos", "v\xE9ralvad\xE1sg\xE1tl\xF3", "v\xE9ralvaszt\xF3", "v\xE9rb\u0151", "v\xE9rengz\u0151", "v\xE9reres", "veres", "v\xE9res", "v\xE9reskez\u0171", "v\xE9rfagyaszt\xF3", "v\xE9rfert\u0151z\u0151", "v\xE9rnyom\xE1scs\xF6kkent\u0151", "ver\u0151", "ver\u0151f\xE9nyes", "v\xE9rpiros", "v\xE9rrokon", "verseng\u0151", "versenyk\xE9pes", "versenyk\xE9ptelen", "versenyz\u0151", "v\xE9rszeg\xE9ny", "v\xE9rsz\xEDn", "v\xE9rszomjas", "v\xE9rtelen", "v\xE9rtiszt\xEDt\xF3", "v\xE9rv\xF6r\xF6s", "v\xE9rz\xE9keny", "v\xE9rz\xE9scsillap\xEDt\xF3", "v\xE9rz\u0151", "v\xE9s\u0151", "veszedelmes", "veszeked\u0151s", "vesz\xE9lyes", "vesz\xE9lytelen", "v\xE9szj\xF3sl\xF3", "v\xE9szterhes", "veszt\u0151", "veter\xE1n", "vet\xE9si", "v\xE9tkes", "v\xE9tlen", "vet\u0151", "vez\xE9rl\xE9si", "vez\xE9rl\u0151", "vezet\xE9k n\xE9lk\xFCli", "vezet\xE9kes", "vezet\u0151 n\xE9lk\xFCli", "vezet\u0151", "vezet\u0151i", "v\xE9zna", "viaszos", "viaszs\xE1rga", "vibr\xE1l\xF3", "vicces", "vicik-vacak", "vid\xE1m", "vid\xE9ki", "vidor", "vietn\xE1mi", "v\xEDg", "vigasztalan", "vigasztalhatatlan", "vigezim\xE1lis", "vigy\xE1zatlan", "vigy\xE1z\xF3", "vihar\xE1ll\xF3", "viharedzett", "viharmentes", "viharos", "viharvert", "vil\xE1gh\xEDr\u0171", "vil\xE1gi", "vil\xE1g\xEDt\xF3", "vil\xE1gl\xE1tott", "vil\xE1gn\xE9zeti", "vil\xE1gos", "vil\xE1gosbarna", "vil\xE1gosk\xE9k", "vil\xE1goss\xE1rga", "vil\xE1gosz\xF6ld", "vil\xE1gossz\u0151ke", "vil\xE1gossz\xFCrke", "vil\xE1gpolg\xE1ri", "vil\xE1gtalan", "vill\xE1mgyors", "villamos", "villog\xF3", "violasz\xEDn", "violasz\xEDn\u0171", "vir\xE1gmint\xE1s", "vir\xE1gos", "vir\xE1gtalan", "vir\xE1gz\xF3", "virg\xE1csos", "virgonc", "virtigli", "virtu\xE1lis", "virulens", "v\xEDrusellenes", "v\xEDrusos", "viselked\xE9sbeli", "viselked\xE9si", "visel\u0151", "visel\u0151s", "viszket\xE9sg\xE1tl\xF3", "viszket\u0151", "viszk\xF3zus", "viszonzatlan", "viszonylagos", "vissza\xE9l\u0151", "visszaes\u0151", "visszafogott", "visszafogottan", "visszaford\xEDthatatlan", "visszahat\xF3", "visszamaradt", "visszapillant\xF3", "vissz\xE1s", "visszatasz\xEDt\xF3", "visszavonhatatlan", "vitak\xE9pes", "vitak\xE9ptelen", "vit\xE1lis", "vitamind\xFAs", "vitaminos", "vit\xE1s", "vitathatatlan", "vitathat\xF3", "vitatkoz\xF3", "vitatott", "vit\xE1z\xF3", "vit\xE9z", "vitorl\xE1s", "v\xEDz\xE1ll\xF3", "v\xEDz\xE1tereszt\u0151", "v\xEDzb\u0151", "vizelethajt\xF3", "v\xEDzelvezet\u0151", "vizeny\u0151s", "vizes", "vizesnyolcas", "vizezett", "v\xEDzfej\u0171", "v\xEDzforral\xF3", "v\xEDzgy\u0171jt\u0151", "v\xEDzhatlan", "v\xEDzh\u0171t\xE9ses", "vizi", "v\xEDzi", "v\xEDziv\xF3", "v\xEDz\xEDz\u0171", "v\xEDzk\xF6ves", "v\xEDzl\xE1gy\xEDt\xF3", "v\xEDzmell\xE9ki", "v\xEDzmentes", "v\xEDznyel\u0151", "v\xEDz\xF6bl\xEDt\u0151", "v\xEDzparti", "v\xEDztartalm\xFA", "v\xEDztart\xF3", "v\xEDztasz\xEDt\xF3", "v\xEDztelen", "v\xEDztiszta", "vizu\xE1lis", "viz\u0171", "v\xEDz\xFCgyi", "v\xEDzvezet\u0151", "v\xEDzz\xE1r\xF3", "vizsg\xE1l\xF3", "v\xEDzszeg\xE9ny", "v\xEDzszintes", "v\xEDzsz\u0171r\u0151", "vonatkoz\xF3", "von\xF3", "vontatott", "vonz\xF3", "v\xF6r\xF6s haj\xFA", "v\xF6r\xF6s", "v\xF6r\xF6sbarna", "v\xF6r\xF6ses", "v\xF6r\xF6sesbarna", "v\xF6r\xF6sesbarn\xE1s", "v\xF6r\xF6sessz\u0151ke", "v\xF6r\xF6shaj\xFA", "vulg\xE1ris", "vulk\xE1ni", "vulkanikus", "walesi", "xenof\xF3b", "x-l\xE1b\xFA", "zabol\xE1tlan", "zabos", "zabostarisznya", "zaf\xEDrk\xE9k", "zagyva", "zaire-i", "zajmentes", "zajos", "zajtalan", "zaklatott", "zamatos", "z\xE1rk\xF3zott", "z\xE1r\xF3", "z\xE1r\xF3jeles", "z\xE1rt", "z\xE1rvaterm\u0151", "zavarba ejt\u0151", "zavar\xF3", "zavarodott", "zavaros", "zavart", "zavartalan", "zazaki", "zegzugos", "zelante", "zenei", "zenekedvel\u0151", "zen\xE9s", "zil\xE1lt", "zizi", "zizzent", "zord", "zordon", "zoroasztri\xE1nus", "z\xF6kken\u0151mentes", "z\xF6ld", "z\xF6ldes", "z\xF6ldess\xE1rga", "z\xF6ldmez\u0151s", "z\xF6lds\xE9ges", "z\xF6ng\xE9tlen", "z\xFAg\xF3", "zuhog\xF3", "zulu", "z\xFCll\xF6tt", "z\u0171r\xF6s", "z\u0171rzavaros", "z\xFCtty\xF6s", "zsarnoki", "zsarol\xF3", "zsebes", "zs\xE9mbes", "zsemlesz\xEDn\u0171", "zsen\xE1ns", "zseni\xE1lis", "zsibbadt", "zsid\xF3", "zsid\xF3bar\xE1t", "zsid\xF3ellenes", "zsid\xF3mentes", "zsindelyes", "zsin\xF3regyenes", "zs\xEDrd\xFAs", "zs\xEDrfoltos", "zs\xEDrmentes", "zs\xEDros", "zs\xEDrszeg\xE9ny", "zs\xEDrtalan", "zs\xEDrtartalm\xFA", "zsomb\xE9kos", "zs\xF6rt\xF6l\u0151d\u0151", "zs\xFAfolt", "zsugori", "zs\xFApfed\xE9l", "zs\xFApf\xF6deles"];
var M15 = ["a szabadban", "ab ovo", "abbizony", "abszol\xFAte", "ad esempio", "addig", "addigra", "ad\xF3mentesen", "afel\xE9", "afelett", "afel\u0151l", "aff\xE9le", "af\xF6l\xE9", "agressz\xEDven", "ah\xE1nyszor", "ahelyett", "ahogyan", "ahol", "ahonnan", "ahonn\xE9t", "ahova", "ahov\xE1", "ahoz", "akadozva", "akaratlanul", "ak\xE1rh\xE1ny", "ak\xE1rhogy", "ak\xE1rhogyan", "ak\xE1rhol", "ak\xE1rhonnan", "ak\xE1rhonn\xE9t", "ak\xE1rhova", "ak\xE1rhov\xE1", "ak\xE1rmeddig", "ak\xE1rmennyien", "ak\xE1rmennyire", "ak\xE1rmerre", "ak\xE1rmerr\u0151l", "ak\xE1rmi\xE9rt", "ak\xE1rmikor", "ak\xE1rmint", "akarva-akaratlan", "akarva-akaratlanul", "akk\xE9nt", "akk\xE9pp", "akk\xE9ppen", "akkor", "akkor\xE1ra", "akkoriban", "akkoron", "akkorra", "akkorr\xF3l", "akkort\xE1jban", "akkort\xE1jt", "akkort\xF3l", "ak\xF6r\xFCl", "ak\xF6zben", "ak\xF6z\xF6tt", "akt\xEDvan", "al\xE1", "al\xE1bb", "al\xE1fel\xE9", "alant", "alantabb", "alapj\xE1n", "alaposan", "alaptalanul", "alapvet\u0151en", "alatta", "alattomban", "alattomosan", "al\xE1zatosan", "alb\xE1nul", "alig", "aligha", "alighanem", "alighogy", "alkalmank\xE9nt", "alkalmasint", "alkalomadt\xE1n", "alkonyatt\xE1jban", "\xE1llamilag", "\xE1lland\xF3an", "\xE1ll\xEDt\xF3lagosan", "\xE1ll\xEDtva", "\xE1llva", "alma", "alm\xE1s", "\xE1ltala", "\xE1ltal\xE1ban", "alul", "amellett", "\xE1men", "amennyi", "amennyiben", "amennyien", "amerre", "amerr\u0151l", "amett\u0151l", "amiatt", "amid\u0151n", "ami\xE9rt", "am\xEDg", "amik\xE9nt", "amikor", "amikorra", "amikorr\xF3l", "amikort\xF3l", "amilyen", "amint", "ami\xF3ta", "amoda", "amonnan", "amonn\xE9t", "amott", "amottan", "am\xFAgy", "ann\xE1l", "anno", "annyiban", "annyiszor", "annyival", "apr\xE1nk\xE9nt", "apr\xF3l\xE9kosan", "ar\xE1nyosan", "ar\xE1nytalanul", "arc\xE1tlanul", "arra", "arr\xE1bb", "arrafel\xE9", "arr\xE9bb", "arr\xF3l", "aszerint", "\xE1t", "\xE1tellenben", "\xE1tkozottul", "\xE1tlagosan", "\xE1tmenetileg", "att\xF3l", "automatikusan", "av\xE9gett", "avval", "azalatt", "az\xE1ltal", "az\xE1m", "azel\u0151tt", "az\xE9rt", "azir\xE1nt", "aznap", "azokat", "azon nyomban", "azon", "azonfel\xFCl", "azonk\xE9pp", "azonk\xE9ppen", "azonk\xEDv\xFCl", "azonk\xF6zben", "azonm\xF3d", "azonnal", "azont\xFAl", "az\xF3ta", "azt\xE1n", "azut\xE1n", "azzal", "bajorul", "baloldalr\xF3l", "balra", "balr\xF3l", "balul", "bamb\xE1n", "b\xE1natosan", "bar\xE1ts\xE1gosan", "bar\xE1ts\xE1gtalanul", "b\xE1rhogy", "b\xE1rhogyan", "b\xE1rhol", "b\xE1rhonnan", "b\xE1rhonn\xE9t", "b\xE1rhova", "b\xE1rhov\xE1", "b\xE1rmeddig", "b\xE1rmennyire", "b\xE1rmerre", "b\xE1rmerr\u0151l", "b\xE1rmi\xE9rt", "b\xE1rmik\xE9pp", "b\xE1rmikor", "b\xE1rmikorra", "b\xE1rmikort\xF3l", "b\xE1rmint", "b\xE1tran", "bazi", "be", "befele", "befel\xE9", "bele", "bel\xE9", "bel\xE9d", "bel\xE9j\xFCk", "bel\xE9m", "bel\xE9nk", "bel\xE9tek", "bel\u0151le", "bels\u0151leg", "bel\xFCl", "benn", "benne", "bent", "bety\xE1rosan", "bev\xE9ve", "bez\xE1rva", "biol\xF3giailag", "bizalmasan", "bizony\xE1ra", "bizonyosan", "biztons\xE1gosan", "biztosan", "boldogan", "b\u0151kez\u0171en", "b\xF6lcsen", "b\u0151s\xE9gesen", "b\u0151vebben", "b\u0151ven", "brut\xE1lisan", "buzg\xF3n", "b\xFCntetlen\xFCl", "c\xE9ltalanul", "cenz\xFAr\xE1zva", "cikkcakkban", "cirka", "csak", "csaknem", "csakugyan", "csendben", "csendesen", "cser\xE9be", "csigalass\xFAs\xE1ggal", "csinosan", "csipetnyi", "csod\xE1latosan", "csod\xE1latra m\xE9lt\xF3an", "cs\xF6ndesen", "csupa", "csup\xE1n", "cs\xFCggedten", "dafke", "darabokra", "darabonk\xE9nt", "de", "d\xE9lben", "d\xE9len", "d\xE9lut\xE1nonk\xE9nt", "derekasan", "d\xEDjmentesen", "dinamikusan", "doszt", "dr\xE1maian", "drasztikusan", "durv\xE1n", "ebb\u0151l", "\xE9beren", "\xE9bren", "eddig", "efel\u0151l", "eg\xE1l", "eg\xE9szen", "\xE9get\u0151en", "egy\xE1ltal\xE1n", "egyar\xE1nt", "egybehangz\xF3an", "egyben", "egyb\u0151l", "egy\xE9bk\xE9nt", "egyed\xFCl", "egyel\u0151re", "egyenesen", "egyenk\xE9nt", "egyenletesen", "egyenl\u0151en", "egyenl\u0151re", "egyenl\u0151tlen\xFCl", "egy\xE9rtelm\u0171en", "egyetemesen", "egyfel\u0151l", "egyfolyt\xE1ban", "egyhang\xFAlag", "egyhuzamban", "egyidej\u0171leg", "egykor", "egyoldal\xFAan", "egyre", "egyr\xE9szr\u0151l", "egyr\xE9szt", "egyszer", "egyszerre", "egyszer\u0171en", "egysz\xF3val", "egy\xFAttal", "egy\xFCtt", "ehelyett", "\xE9hgyomorra", "ehhez", "\xE9jf\xE9lkor", "\xE9jjel", "\xE9jjel-nappal", "\xE9jszaka", "ekk\xE9nt", "ekk\xE9p", "ekkor", "ek\xF6zben", "el", "eladdig", "el\xE9", "el\xE9g", "el\xE9gg\xE9", "eleinte", "\xE9l\xE9nken", "\xE9lesen", "\xE9letfogytig", "\xE9letfogytiglan", "\xE9lethosszig", "eleve", "elevenen", "elgondolkozva", "elker\xFClhetetlen\xFCl", "ellen\xE1llhatatlanul", "ellenben", "ellen\xE9ben", "ellenesetben", "ellenkez\u0151leg", "elm\xE9letileg", "elmond\xE1s alapj\xE1n", "el\u0151bb", "\xE9l\u0151ben", "el\u0151kel\u0151en", "el\u0151l", "el\xF6lr\u0151l", "el\u0151re", "el\u0151re-h\xE1tra", "el\u0151sz\xF6r", "el\u0151tte", "el\u0151z\u0151leg", "els\u0151sorban", "elv\xE9gre", "elv\xE9tve", "emiatt", "\xE9pp", "\xE9ppen", "\xE9ppens\xE9ggel", "\xE9pphogy", "\xE9pp\xFAgy", "eredetileg", "\xE9rint\u0151legesen", "erk\xF6lcsileg", "er\u0151sen", "er\u0151szakosan", "er\u0151teljesen", "er\u0151tlen\xFCl", "erre", "errefel\xE9", "err\u0151l", "\xE9rt\xE9ktelen\xFCl", "\xE9rtelmetlen\xFCl", "\xE9rthet\u0151en", "\xE9rz\xE9ketlen\xFCl", "eset\xE9n", "esetenk\xE9nt", "esetleg", "esetlen\xFCl", "estefel\xE9", "est\xE9nk\xE9nt", "eszerint", "eszeveszetten", "\xE9szrevehet\u0151en", "\xE9sszer\u0171en", "\xE9tlen-szomjan", "ett\u0151l", "Eur\xF3pa-szerte", "\xE9vekig", "\xE9vente", "exponenci\xE1lisan", "ezalatt", "ez\xE1ltal", "ezekben", "ezel\u0151tt", "ezenfel\xFCl", "ezenk\xEDv\xFCl", "ezent\xFAl", "ezerszer", "ezerszeresen", "ezir\xE1nt", "ezut\xE1n", "f\xE1jdalommentesen", "fantasztikusan", "f\xE1radhatatlanul", "f\xE1sultan", "fegyvertelen\xFCl", "f\xE9ktelen\xFCl", "fel", "f\xE9lelmetesen", "f\xE9l\xE9nken", "felfel\xE9", "felgerjedve", "felhaszn\xE1l\xE1s\xE1val", "f\xE9lig", "f\xE9lig-meddig", "feljebb", "fellebb", "fellengz\u0151sen", "fel\u0151l", "fel\u0151led", "fel\u0151lem", "f\xE9lre", "fels\xE9gesen", "feltehet\u0151leg", "felt\xE9tlen", "felt\xE9tlen\xFCl", "felt\xE9ve", "fel\xFCl", "f\xE9lv\xE1llr\xF3l", "feneketlen\xFCl", "fenn", "fenomenol\xF3giailag", "fens\xE9gesen", "fent", "f\xE9nyesen", "ferd\xE9n", "feszt", "figyelmesen", "finoman", "fizikailag", "fogalmilag", "fokozatosan", "folyamatosan", "folyton", "folytonosan", "fontosan", "ford\xEDtva", "forr\xF3n", "f\u0151k\xE9nt", "f\u0151k\xE9ppen", "f\xF6ldrajzilag", "f\xF6nn", "franci\xE1ul", "frissiben", "furcs\xE1n", "furfangosan", "furtonfurt", "fut\xF3lag", "fut\xF3lagosan", "f\xFCggetlen\xFCl", "f\xFClledten", "f\xFCrg\xE9n", "gazdas\xE1gilag", "gazdas\xE1gosan", "genetikailag", "g\xE9piesen", "glob\xE1lisan", "gondatlanul", "gondosan", "gondtalanul", "g\xF6r\xF6g\xFCl", "grafikusan", "gyakorlatilag", "gyakorta", "gyakran", "gyalog", "gyalogosan", "gy\xE1moltalanul", "gyan\xFAtlanul", "gyeng\xE9den", "gyeng\xE9n", "gyermetegen", "gyorsan", "gyors\xEDtva", "gy\xF6ny\xF6r\u0171en", "h\xE1bor\xEDtatlanul", "hagyom\xE1nyosan", "hajdan", "halad\xE9ktalanul", "h\xE1l\xE1san", "halkan", "hallatlanul", "halv\xE1nyan", "hamar", "hamarosan", "hangosan", "hangs\xFAlyosan", "hangtalanul", "hanyatt", "hanyatt-homlok", "haragosan", "h\xE1romszor", "hasb\xF3l", "hasonl\xF3an", "hasonl\xF3k\xE9ppen", "hat\xE1rozottan", "hat\xE9konyan", "h\xE1tha", "h\xE1tra", "h\xE1trafel\xE9", "h\xE1tul", "h\xE1tulr\xF3l", "havonta", "haza", "hazafel\xE9", "h\xE1zilag", "h\xE9ber\xFCl", "helyesen", "helyet", "helyette", "helytelen\xFCl", "heted\xEDziglen", "hetente", "h\xE9tf\u0151n", "h\xE9tszer", "h\xE9tv\xE9g\xE9n", "hevesen", "hi\xE1ba", "hib\xE1san", "hib\xE1tlanul", "hihetetlen\xFCl", "hirtelen", "hisz\xE9kenyen", "hitelesen", "hivatalb\xF3l", "hivatalosan", "hogyha", "hogyne", "hollandul", "holnap", "holnaput\xE1n", "holott", "honn", "honnan", "honn\xE9t", "hosszadalmasan", "hosszasan", "hozz\xE1", "hozz\xE1d", "hozz\xE1juk", "hozz\xE1m", "hozz\xE1nk", "hozz\xE1tok", "hozz\xE1vet\u0151leg", "hozz\xE1vet\u0151legesen", "id\xE1ig", "ide", "idegesen", "id\xE9n", "ide-oda", "id\u0151ben", "id\u0151k\xF6zben", "id\u0151nk\xE9nt", "id\u0151rendileg", "id\u0151r\u0151l id\u0151re", "id\u0151vel", "igaz\xE1n", "igen", "igencsak", "igenl\u0151en", "illeg\xE1lisan", "ilyenkor", "\xEDme", "imette", "\xEDmhol", "iminnen-amonnan", "\xEDmmel-\xE1mmal", "indulatosan", "ingyen", "ingyenesen", "ink\xE1bb", "innen", "intenz\xEDven", "int\xE9zm\xE9nyesen", "irgalmatlanul", "ironikusan", "irt\xF3zatosan", "irt\xF3zva", "ism\xE9t", "istenesen", "istenigaz\xE1ban", "istentelen\xFCl", "iszaposan", "itt", "itten", "ivarosan", "izromban", "jelen", "jelenleg", "jelent\u0151sen", "jobban", "jobboldalt", "jobbra", "jobbr\xF3l", "j\xF3csk\xE1n", "j\xF3indulat\xFAan", "j\xF3kedv\u0171en", "j\xF3l", "j\xF3llehet", "k\xE1b\xE1n", "k\xE1b\xE9", "kac\xE9ran", "kap\xE1sb\xF3l", "kapcs\xE1n", "kapcsolatosan", "kategorikusan", "katonailag", "kedv\xE9\xE9rt", "kedvesen", "kedvetlen\xFCl", "kedvez\u0151en", "kegyetlen\xFCl", "kellemesen", "kellene", "kem\xE9nyen", "k\xE9miailag", "k\xE9nyelmesen", "keser\u0171en", "k\xE9s\u0151", "k\xE9s\u0151bb", "k\xE9s\u0151n", "k\xE9szakarva", "k\xE9szen", "k\xE9tesen", "k\xE9tf\xE9lek\xE9ppen", "k\xE9thavonk\xE9nt", "k\xE9tnaponk\xE9nt", "k\xE9ts\xE9gk\xEDv\xFCl", "k\xE9ts\xE9gtelen\xFCl", "k\xE9tszer", "kettecsk\xE9n", "keverve", "kezdetben", "k\xE9zenfogva", "ki", "ki-be", "kicsit", "kiel\xE9g\xEDt\u0151 m\xF3don", "kiel\xE9g\xEDt\u0151en", "kifejezetten", "kifel\xE9", "kihal\xF3f\xE9lben", "kilenckor", "k\xEDm\xE9letlen\xFCl", "kimer\xEDt\u0151en", "kinn", "kint", "kiss\xE9", "kit\u0171n\u0151en", "kiv\xE1ltk\xE9ppen", "kiv\xE9telesen", "kiv\xE9ve", "kivirradtig", "k\xEDv\xFCl", "k\xEDv\xFClr\u0151l", "kiz\xE1r\xF3lag", "kiz\xE1r\xF3lagosan", "kombin\xE1lva", "komolyan", "komoran", "kor\xE1bban", "kor\xE1n", "korl\xE1tlanul", "k\xF6d\xF6sen", "k\xF6lcs\xF6n\xF6sen", "k\xF6nnyed\xE9n", "k\xF6nnyen", "k\xF6ny\xF6rtelen\xFCl", "k\xF6r\xF6sk\xF6r\xFCl", "k\xF6r\xF6s-k\xF6r\xFCl", "k\xF6r\xFCl", "k\xF6r\xFClbel\xFCl", "k\xF6vetkez\xE9sk\xE9ppen", "k\xF6vetkezm\xE9nyek\xE9nt", "k\xF6vetkez\u0151k\xE9pp", "k\xF6vetkez\u0151k\xE9ppen", "k\xF6vet\u0151en", "k\xF6zbe-k\xF6zbe", "k\xF6zben", "k\xF6zel", "k\xF6zelebb", "k\xF6zepesen", "k\xF6z\xF6mb\xF6sen", "k\xF6z\xF6ny\xF6sen", "k\xF6z\xF6sen", "k\xF6zpontilag", "k\xF6zt", "k\xF6z\xFCl", "k\xF6zvetlen\xFCl", "k\xF6zvetve", "kreat\xEDvan", "kultur\xE1ltan", "k\xFClf\xF6ld\xF6n", "k\xFCl\xF6n", "k\xFCl\xF6nben", "k\xFCl\xF6n-k\xFCl\xF6n", "k\xFCl\xF6n\xF6sen", "k\xFCls\u0151leg", "lassacsk\xE1n", "lassan", "lassank\xE9nt", "lassan-lassan", "l\xE1tatlanul", "l\xE1tsz\xF3lag", "le", "lefel\xE9", "le-f\xF6l", "legal\xE1bb", "legfeljebb", "legink\xE1bb", "legk\xE9s\u0151bb", "legott", "legottan", "legsz\xEDvesebben", "legt\xE1volabb", "lehangoltan", "lehet\u0151leg", "l\xE9legzetel\xE1ll\xEDt\xF3an", "l\xE9lekszakadva", "lelkesen", "lelkileg", "lenn", "lenne", "lent", "lenti", "l\xE9p\xE9senk\xE9nt", "l\xE9p\xE9sr\u0151l l\xE9p\xE9sre", "letargikusan", "leverten", "l\xF3hal\xE1l\xE1ban", "l\xF3h\xE1ton", "lopva", "lust\xE1n", "ma", "magafajta", "magamfajta", "magasan", "magatart\xE1silag", "mag\xE1t\xF3l \xE9rtet\u0151d\u0151leg", "mag\xE1t\xF3l", "magunkfajta", "magyarul", "maholnap", "mainaps\xE1g", "majd", "majdnem", "majdnemhogy", "makacsul", "manaps\xE1g", "manu\xE1lisan", "m\xE1r", "maradand\xF3an", "m\xE1r-m\xE1r", "m\xE1rpedig", "m\xE1s", "m\xE1sf\xE9le", "m\xE1sfel\u0151l", "m\xE1shogy", "m\xE1shol", "m\xE1shov\xE1", "m\xE1sk\xE9nt", "m\xE1sk\xE9pp", "m\xE1sk\xE9ppen", "m\xE1skor", "m\xE1snap", "m\xE1sr\xE9szt", "m\xE1sutt", "matematikailag", "maxim\xE1lisan", "maximum", "m\xE9g egyszer", "m\xE9g", "megad\xF3an", "megfelel\u0151en", "meggondolatlanul", "megint", "megk\xF6zel\xEDt\u0151leg", "meglehet", "meglehet\u0151sen", "meglepet\xE9sszer\u0171en", "m\xE9gse", "m\xE9gsem", "melegen", "mellesleg", "m\xE9lt\xF3an", "m\xE9lyen", "m\xE9lys\xE9gesen", "menet", "ment\xE1lisan", "menteget\u0151z\u0151en", "menteget\u0151zve", "mer\xE9szen", "m\xE9rgesen", "m\xE9rhetetlen\xFCl", "merrefel\xE9", "m\xE9rs\xE9kelten", "mesters\xE9gesen", "messz\xFCnnen", "mez\xEDtelen\xFCl", "mez\xEDtl\xE1b", "meztelen\xFCl", "mezzoforte", "mialatt", "miattad", "miattam", "mid\u0151n", "mieink", "miel\u0151bb", "miel\u0151tt", "m\xEDg", "mihelyst", "mik\xF6zben", "minap", "mind ez id\xE1ig", "mindamellett", "mindeddig", "mindegyik", "mindenekel\u0151tt", "mindenesetre", "mindenfel\xE9", "mindenfel\u0151l", "mindenhol", "mindenhonnan", "mindenhova", "mindenk\xE9ppen", "mindenkor", "mindennap", "minden\xFCnnen", "minden\xFCnn\xE9t", "minden\xFCtt", "minden\xFCv\xE9", "mind\xE9tig", "mindhal\xE1lig", "mindhi\xE1ba", "mindig", "mindink\xE1bb", "mindj\xE1rt", "mindjobban", "mindkett\u0151", "mindny\xE1jan", "mind\xF6r\xF6kre", "mind\xF6ssze", "mind\xF6sszesen", "minduntalan", "mindv\xE9gig", "mintegy", "m\xEDnusz", "mi\xF3ta", "miszerint", "miut\xE1n", "modortalanul", "moh\xF3n", "mondv\xE1n", "most", "mostan", "mostan\xE1ban", "mostans\xE1g", "mozdulatlanul", "m\xF6g\xE9", "m\xF6g\xF6ttem", "m\xFAl\xF3", "m\xFAltkor", "m\u0171v\xE9sziesen", "nagyj\xE1b\xF3l", "nagyk\xE9p\u0171en", "nagym\xE9rt\xE9kben", "nagyon", "nagyr\xE9szt", "n\xE1la", "n\xE1lad", "n\xE1lam", "n\xE1latok", "n\xE1luk", "n\xE1lunk", "napj\xE1ban", "napjainkban", "napjainkig", "naponta", "nedvesen", "n\xE9gyk\xE9zl\xE1b", "n\xE9gyszemk\xF6zt", "n\xE9gyszer", "n\xE9ha", "nehezen", "neh\xE9zkesen", "n\xE9hol", "neked", "nekem", "neki", "nekik", "nektek", "nek\xFCnk", "nem", "nemcsak", "nemegyszer", "n\xE9melyik", "nemigen", "nemr\xE9g", "nemsok\xE1ra", "nemzetk\xF6zileg", "nevets\xE9gesen", "n\xE9vtelen\xFCl", "nicsak", "nincstelen\xFCl", "noha", "norm\xE1lisan", "nuku", "nyakra-f\u0151re", "ny\xE1rban", "nyema", "nyersen", "ny\xEDltan", "nyilv\xE1n", "nyilv\xE1nosan", "nyilv\xE1nval\xF3an", "nyista", "nyitva", "nyomat\xE9kosan", "nyomban", "nyomor\xFAs\xE1gosan", "nyugodtan", "nyugtalanul", "oda", "oda\xE1t", "odafenn", "odafent", "odaf\xF6nt", "od\xE1ig", "oda-vissza", "\xF3hatatlanul", "okosan", "okvetlen", "okvetlen\xFCl", "olcs\xF3n", "oldalr\xF3l", "oldalt", "oldalv\xE1st", "olyanform\xE1n", "olyank\xE9ppen", "olyk\xE9ppen", "olykor", "onnan", "opcion\xE1lisan", "optim\xE1lisan", "optimist\xE1n", "\xF3ramutat\xF3 j\xE1r\xE1s\xE1val ellent\xE9tes ir\xE1nyban", "\xF3ramutat\xF3 j\xE1r\xE1s\xE1val megegyez\u0151 ir\xE1nyban", "oroszul", "orozva", "ostob\xE1n", "otromb\xE1n", "ott", "otthon", "\xF3vatosan", "\xF6bl\xF6sen", "\xF6mlesztve", "\xF6nk\xE9nt", "\xF6nk\xE9ntelen\xFCl", "\xF6nm\u0171k\xF6d\u0151en", "\xF6r\xF6kk\xE9", "\xF6r\xF6kk\xF6n", "\xF6r\xF6kk\xF6n-\xF6r\xF6kk\xE9", "\xF6r\xF6kre", "\u0151szint\xE9n", "\xF6ssze", "\xF6sszeegyeztethet\u0151", "\u0151sszel", "\xF6sszesen", "\xF6sszevissza", "\xF6szt\xF6n\xF6sen", "\xF6tkor", "p\xE1r", "p\xE1rhuzamosan", "passz", "p\xE9ld\xE1ul", "p\xE9nz\xFCgyileg", "pillanatnyilag", "politikailag", "pomp\xE1san", "pont", "pontosan", "provokat\xEDvan", "puffra", "r\xE1", "r\xE1ad\xE1sul", "r\xE1d", "ragyog\xF3an", "rajta", "r\xE1juk", "r\xE1m", "r\xE1nk", "r\xE1termetten", "r\xE1tok", "ravaszul", "r\xE9g", "r\xE9gebben", "r\xE9gen", "reggel", "reggelente", "r\xE9giesen", "r\xE9g\xF3ta", "rekurz\xEDvan", "rem\xE9nytelen\xFCl", "rendben", "rendellenesen", "rendesen", "rendicsek", "rendk\xEDv\xFCl", "rendszeresen", "rendszerint", "r\xE9szben", "r\xE9szlegesen", "r\xE9szletekben", "r\xE9szletesen", "rettenetesen", "rettent\u0151en", "ritk\xE1n", "r\xF3la", "r\xF3lad", "r\xF3lam", "r\xF3latok", "r\xF3luk", "r\xF3lunk", "rom\xE1nul", "rosszkor", "rosszul", "r\xF6gt\xF6n", "r\xF6gvest", "r\xF6gz\xEDtetten", "r\xF6viden", "r\xF6videsen", "sajnos", "s\xE1nt\xEDtva", "sebt\xE9ben", "seg\xEDts\xE9g\xE9vel", "sehogy", "sehol", "sehova", "semmi\xE9rt", "semmik\xE9pp", "semmik\xE9ppen", "semmilyen", "ser\xE9nyen", "s\xE9rtetlen\xFCl", "siet\u0151sen", "sietve", "sikeresen", "sikertelen\xFCl", "sim\xE1n", "siv\xE1ran", "soha", "sohasem", "sohse", "sok", "sok\xE1ig", "sokan", "sokat", "sokkal", "sokszemk\xF6zt", "sokszor", "sor\xE1n", "sosem", "staccato", "s\xFCllyesztett", "s\xFCrg\u0151sen", "s\u0171r\u0171n", "szabadon", "szab\xE1lyosan", "szab\xE1lyszer\u0171en", "sz\xE1jon \xE1t", "szakadatlanul", "szakmailag", "sz\xE1mtalanszor", "sz\xE1nd\xE9kosan", "sz\xE1zszor", "sz\xE1zszorta", "sz\xE9gyenszemre", "sz\xE9gyentelen\xFCl", "sz\xE9lesen", "szel\xEDden", "szellemileg", "szemben", "szem\xE9lyesen", "szem\xE9rmetlen\xFCl", "szemk\xF6zt", "szeml\xE1tom\xE1st", "szemtelen\xFCl", "szenved\xE9lyesen", "sz\xE9pen", "szerencs\xE9re", "szerencs\xE9sen", "szeretettel", "szerf\xF6l\xF6tt", "szerint", "szerint\xFCk", "szerkezetileg", "szertart\xE1sosan", "szignifik\xE1nsan", "szigor\xFAan", "szil\xE1rdan", "sz\xEDnleg", "szinte", "szint\xFAgy", "sz\xEDv\xE9lyesen", "sz\xEDvesen", "szlov\xE1kul", "szokatlanul", "szomork\xE1san", "szomor\xFAan", "szorgalmasan", "szorosan", "sz\xF6rnyen", "sz\u0171kmark\xFAan", "sz\xFCntelen\xFCl", "sz\xFCrk\xE9n", "takar\xE9kosan", "takarosan", "tal\xE1lomra", "tal\xE1n", "tapintatosan", "tart\xF3san", "tavaly", "tavalyel\u0151tt", "t\xE1vol", "t\xE1volban", "technol\xF3giailag", "tegnap", "tekintettel", "tekintve", "telides-tele", "teljesen", "tendenci\xF3zusan", "t\xE9nyleg", "term\xE9szetesen", "terpeszben", "ter\xFCletileg", "tervszer\u0171en", "testileg", "t\xE9tlen\xFCl", "t\xE9tov\xE1n", "tipikusan", "tiszt\xE1n", "tisztess\xE9gesen", "titkon", "titokban", "tova", "tov\xE1bb", "tov\xE1bb\xE1", "t\xF6bb", "t\xF6bb\xE9", "t\xF6bbet", "t\xF6bbi", "t\xF6bbnyire", "t\xF6bbs\xE9g\xE9ben", "t\xF6bbszemk\xF6zt", "t\xF6bbsz\xF6r", "t\xF6k", "t\xF6k\xE9letesen", "t\u0151le", "t\u0151led", "t\u0151lem", "t\u0151letek", "t\u0151l\xFCk", "t\u0151l\xFCnk", "t\xF6m\xF6ren", "t\xF6rt\xE9nelmileg", "t\xF6rt\xE9netesen", "t\xF6vig", "tudatosan", "tudvalev\u0151en", "t\xFAl", "tulajdonk\xE9ppen", "t\xFAlnyom\xF3r\xE9szt", "t\xFAls\xE1gosan", "t\xFAlzottan", "t\xFAr\xF3", "tuti", "t\xFCrelmesen", "t\xFCst\xE9nt", "udvariasan", "\xFAgy", "ugyanakkor", "ugyancsak", "ugyanolyan", "ugyan\xFAgy", "\xFAgymint", "\xFAjra", "unos-untalan", "ut\xE1lattal", "ut\xE1na", "\xFAtj\xE1n", "ut\xF3lag", "ut\xF3lagosan", "\xFCgyesen", "\xFCgyetlen\xFCl", "\xFCggyel-bajjal", "\xFCnnep\xE9lyesen", "vakmer\u0151en", "valaha", "valah\xE1ra", "valahogy", "valahogyan", "valahol", "valameddig", "valamely", "valamelyest", "valamikor", "v\xE1llvetve", "val\xF3ban", "val\xF3j\xE1ban", "val\xF3sz\xEDn\u0171leg", "v\xE1ltakozva", "v\xE1ratlanul", "vastagon", "v\xE9gig", "v\xE9gleg", "v\xE9gleges\xEDtve", "v\xE9gre", "v\xE9gtelen\xFCl", "v\xE9g\xFCl", "vele", "veled", "velem", "veletek", "v\xE9letlenszer\u0171en", "v\xE9letlen\xFCl", "vel\xFCk", "vel\xFCnk", "vesz\xE9lyesen", "vid\xE1man", "v\xEDgan", "vil\xE1gosan", "vil\xE1gszerte", "vil\xE1gviszonylatban", "vir\xE1gvas\xE1rnap", "viszonylag", "vissza", "visszafel\xE9", "vitathat\xF3an", "vonatkoz\xF3an", "vonatkoz\xF3lag"];
var C14 = ["ahogy", "ak\xE1r", "ak\xE1rcsak", "akkor", "\xE1m", "\xE1mb\xE1r", "\xE1mde", "ameddig", "amennyiben", "am\xEDg", "aminthogy", "ann\xE1lfogva", "annyira", "avagy", "azaz", "azazhogy", "azonban", "b\xE1r", "bizony", "de", "deh\xE1t", "dehogy", "\xE9s", "ez\xE9rt", "ha", "hab\xE1r", "hacsak nem", "hanem", "h\xE1t", "hisz", "hiszen", "hogy", "hol", "\xEDgy", "illet\u0151leg", "illetve", "imm\xE1r", "is", "kiv\xE9ve ha", "m\xE1sk\xFCl\xF6nben", "meg", "m\xE9gis", "m\xE9gpedig", "mert", "merthogy", "mihelyt", "mik\xE9nt", "mindaz\xE1ltal", "mindazon\xE1ltal", "mint", "mintha", "minthogy", "mivel", "mivelhogy", "nah\xE1t", "nehogy", "nos", "\xF3h", "pedig", "plusz", "s", "sajna", "sat\xF6bbi", "se", "sem", "s\u0151t", "szint\xE9n", "teh\xE1t", "ugyan", "ugyanis", "\xFAgyhogy", "vagy", "vagyis", "valamennyi", "valamint", "viszont"];
var P14 = ["a", "\xE1", "abc\xFAg", "ah", "aha", "ah\xE1", "ajjaj", "\xE1llj", "b\xE1rcsak", "brr", "csacsacsa", "ejha", "fi", "haha", "hahaha", "hehe", "hihihi", "jaj", "l\xE1bhoz", "\xF3", "ohoh\xF3", "ojj\xE9", "pssz"];
var N17 = ["21. sz\xE1zad", "abajd\xF3c", "abaposzt\xF3", "abbrevi\xE1ci\xF3", "abdik\xE1ci\xF3", "\xE1b\xE9c\xE9sk\xF6nyv", "aberr\xE1ci\xF3", "abidjani", "ablak", "ablakemel\u0151", "ablakf\xFClke", "ablakk\xF6ny\xF6kl\u0151", "ablaknap", "ablakos bor\xEDt\xE9k", "ablakosm\u0171hely", "ablakr\xE1ma", "ablaksor", "ablakt\xE1ny\xE9r", "ablakt\xF6r\xE9s", "ablakv\xE9d\u0151", "abolicionista", "abort\u0151r", "\xE1bra", "abraktakarm\xE1ny", "\xE1br\xE1ndoz\xE1s", "abr\xE1zi\xF3", "abroncs", "abroncsvas", "abszcisszatengely", "abszol\xFAt gyakoris\xE1g", "abszolut\xF3rium", "abszorber", "abszorptivit\xE1s", "absztrakt t\xE1rgy", "abszurdit\xE1s", "acehi", "ac\xE9ldr\xF3t", "ac\xE9lf\u0171r\xE9sz", "ac\xE9lhengerm\u0171", "ac\xE9lipar", "ac\xE9lk\xE9kes galambgomba", "ac\xE9ll\xE1nc", "ac\xE9lmetsz\xE9s", "ac\xE9l\xF6nt\u0151", "ac\xE9lparipa", "ac\xE9lszalag", "ac\xE9ltoll", "acenokumarol", "acetazolamid", "acetil\xE9nl\xE1mpa", "aceton", "acidit\xE1s", "Ackermann-f\xFCggv\xE9ny", "Actinobacteria", "\xE1csb\xE1rd", "\xE1cskapocs", "\xE1csm\u0171hely", "adag", "adagol\xF3ny\xEDl\xE1s", "adal\xE9kanyag", "\xE1d\xE1mcsutka", "adapter", "ad\xE1sv\xE9tel", "adatabsztrakci\xF3", "adatb\xE1ny\xE1szat", "adatb\xE1zis lek\xE9rdez\u0151nyelv", "adatb\xE1zisadminisztr\xE1tor", "adatb\xE1zis-elj\xE1r\xE1s", "adatb\xE1zis-k\xF6zpont\xFA rendszer", "adatb\xE1zis-modellez\xE9s", "adatb\xE1zis-sz\xF6vets\xE9g", "adatb\xE1zisszerver", "adatcsere", "adatfelv\xE9tel", "adatgy\u0171jt\xE9s", "adathordoz\xF3", "adatk\xE9szlet", "adatlap", "adatment\xE9s", "adatp\xE1rhuzamoss\xE1g", "adatt\xE1r", "adattitkos\xEDt\xE1s", "adatv\xE9delem", "Addison-k\xF3r", "Ad\xE9lie-pingvin", "adenozin-trifoszf\xE1t", "adige", "adjunktus", "adminisztr\xE1l\xE1s", "admittancia", "ad\xF3alany", "ad\xF3behajt\xE1s", "ad\xF3bevall\xE1s", "ad\xF3elenged\xE9s", "ad\xF3eltitkol\xE1s", "ad\xF3fel\xFCgyel\u0151", "ad\xF3forr\xE1s", "ad\xF3h\xE1tral\xE9k", "ad\xF3illet\xE9kess\xE9g", "ad\xF3j\xF6vedelem", "ad\xF3kulcs", "adom\xE1nybirtok", "ad\xF3megterhel\xE9s", "ad\xF3nem", "ad\xF3p\xF3tl\xE9k", "ad\xF3r\xE9szesed\xE9s", "ad\xF3slev\xE9l", "ad\xF3ss\xE1gt\xF6rleszt\xE9s", "ad\xF3szed\u0151", "ad\xF3teher", "ad\xF3t\xF6rv\xE9ny", "ad\xF3v\xE9grehajt\xE1s", "adrenalin", "adszorpci\xF3", "advekci\xF3", "Adventvas\xE1rnap", "aeronautika", "aerosztatika", "af\xE9lium", "affin csoport", "affixum", "afg\xE1ni", "\xE1fonyadzsem", "aforizma", "afrikai cibetmacska", "afrikai szilvafa", "afrikander", "\xE1g", "\xE1gacsk\xE1s k\xE9regt\xF6r\u0151gomba", "agancs\xE1g", "agar\xE1sz", "\xE1gas holdruta", "agav\xE9", "\xE1gazat", "\xE1gf\u0171r\xE9sz", "aggasty\xE1n", "aggleg\xE9ny", "agglutin\xE1ci\xF3", "agg\xF3f\u0171", "aggs\xE1g", "agit\xE1ci\xF3", "ag\xF3nia", "agrammatizmus", "agr\xE1regyetem", "agr\xE1rium", "agr\xE1roll\xF3", "agr\xE1rprogram", "agr\xE1rszocializmus", "agr\xE1rt\xF6rv\xE9ny", "agresszi\xF3", "agrobiol\xF3gia", "agron\xF3mus", "\xE1gy", "agyagb\xE1nya", "agyagf\xF6ld", "agyagipar", "agyagm\u0171vess\xE9g", "agyagr\xE9teg", "agyagtalaj", "agyalapi mirigy", "agyarfa", "\xE1gyasp\xE1linka", "\xE1gyaz\xE1s", "\xE1gyb\xE9rl\u0151", "\xE1gyburok", "\xE1gy\xE9k", "\xE1gy\xE9kk\xF6t\u0151", "agyemb\xF3lia", "agyf\xE9lteke", "agyh\xE1rtyagyullad\xE1s", "\xE1gykab\xE1t", "\xE1gykeret", "\xE1gyl\xE1b", "\xE1gymeleg\xEDt\u0151", "\xE1gynem\u0171", "agyonl\xF6vet\xE9s", "agyr\xE1zk\xF3d\xE1s", "agysejt", "\xE1gyszomsz\xE9d", "agyt\xE1lyog", "\xE1gyter\xEDt\u0151", "agyt\xF6rzs", "\xE1gy\xFA\xE1ll\xE1s", "\xE1gy\xFAgoly\xF3", "\xE1gy\xFAnasz\xE1d", "\xE1gy\xFAtalp", "\xE1gy\xFAt\u0171z", "\xE1gyv\xE1z", "agyvel\u0151gyullad\xE1s", "ahimsza", "AIDS-fert\u0151z\xE9s", "ajakbalzsam", "ajakhasad\xE9k", "ajakny\xEDl\xE1s", "ajakr\xFAzs", "aj\xE1nd\xE9kcikk", "aj\xE1nd\xE9kkos\xE1r", "aj\xE1nd\xE9koz\xE1s", "aj\xE1nlat", "ajmara", "ajt\xF3b\xE9l\xE9s", "ajt\xF3cseng\u0151", "ajt\xF3f\xE9lfa", "ajt\xF3keret", "ajt\xF3kulcs", "ajt\xF3n\xE1ll\xF3", "ajt\xF3r\xE1ma", "ajt\xF3sarok", "ajt\xF3sz\xE1rny", "ajt\xF3v\xE9d\u0151", "\xE1jurv\xE9da", "ak\xE1cbor", "ak\xE1cfavir\xE1g", "ak\xE1cliget", "ak\xE1c-pereszke", "ak\xE1cvir\xE1g", "akad\xE1lyfut\xE1s", "akad\xE1lyoztat\xE1s", "akad\xE9mia", "akan", "akarat", "akarathi\xE1ny", "akaratoss\xE1g", "akarnok", "akaszt\xF3fahorog", "akaszt\xF3horog", "akci\xF3", "akci\xF3film", "akci\xF3s spektrum", "akef\xE1lia", "akkord", "akkredit\xE1ci\xF3", "akkumul\xE1ci\xF3", "aknabomba", "aknagr\xE1n\xE1t", "aknakutat\xF3", "aknamunka", "akn\xE1s\xEDt\xE1s", "aknaszil\xE1nk", "aknavesz\xE9ly", "akn\xE9", "\xE1komb\xE1kom", "akril", "akrilsav", "akrobatika", "akropolisz", "aksi", "aktaf\u0171z\u0151", "aktat\xE1ska", "aktfot\xF3", "akt\xEDnium", "akt\xEDva", "aktivista", "aktrajz", "aktus", "akusztika", "akvarellfest\xE9k", "akv\xE1rium", "alab\xE1rd", "alacsony j\xE1zmin", "alag", "alag\xFAt\xE9p\xEDt\xE9s", "al\xE1gy\xFAjt\xF3s", "al\xE1\xEDr\xF3k\xF6nyv", "alak\xEDt\xE1s", "alakoskod\xE1s", "alaktan", "alakv\xE1ltoz\xE1s", "alakzat", "alamuszi", "alany", "alapadag", "alapanyag", "alapb\xE9r", "alapd\xEDj", "alapelv", "alap\xE9rz\xE9s", "alapfel\xFClet", "alapfok", "alaphang", "alaphelyzet", "alapige", "alap\xEDt\xF3", "alapjellem", "alapkifejez\xE9s", "alapkutat\xE1s", "alapm\xE9ret", "alaposs\xE1g", "alap\xF6tlet", "alapr\xE9teg", "alapsz\xE1m", "alapszint", "alaptalaj", "alapt\xE9tel", "alapt\xF6rv\xE9ny", "alapvizsg\xE1lat", "\xE1larc", "al\xE1sfa", "al\xE1t\xE9tgy\u0171r\u0171", "alattval\xF3", "al\xE1zatoss\xE1g", "albendazol", "albet\xE9tes\xEDt\xE9s", "albizotts\xE1g", "\xE1lc\xE1z\xE1s", "\xE1ld\xE1s", "\xE1ldott benedekf\u0171", "\xE1ldozatbemutat\xE1s", "\xE1ldoz\xF3cs\xFCt\xF6rt\xF6k", "alef-nulla", "alemtuzumab", "aleut", "alfabet", "alfentanil", "alf\xF6ldi", "algebra alapt\xE9tele", "algebrai multiplicit\xE1s", "algebrai sz\xE1m", "algebrai tulajdons\xE1gok", "\xE1lgereben", "algoritmus", "alh\xE1l\xF3zat", "\xE1lherny\xF3", "alig\xE1tor", "aljass\xE1g", "aljlev\xE9l", "aljzatkiegyenl\xEDt\u0151", "alkalmass\xE1g", "alkalmaz\xE1s", "alkalmazhat\xF3s\xE1g", "alkalmazott matematika", "alkar", "alkesz", "alk\xEDmia", "alkir\xE1lyn\u0151", "alkoholelvon\xE1s", "alkoholista", "alkoholm\xE9rgez\xE9s", "alkoholprobl\xE9ma", "alkoholteszt", "alkonyatt\xE1jt", "alkonyt\xE1jt", "alkot\xE1s", "alkotm\xE1nylev\xE9l", "alkotm\xE1nyreform", "alkot\xF3", "alk\xF6rm\xF6s", "\xE1lkulcs", "\xE1llam", "\xE1llamberendez\xE9s", "\xE1llamc\xEDmer", "\xE1llameln\xF6k", "\xE1llameszm\xE9ny", "\xE1llamf\u0151", "\xE1llamhatalom", "\xE1llamigazgat\xE1s", "\xE1llamkassza", "\xE1llamk\xF6lts\xE9g", "\xE1llamos\xEDt\xE1s", "\xE1llampolg\xE1rs\xE1g", "\xE1llamrend\u0151rs\xE9g", "\xE1llamsz\xE1mvitel", "\xE1llamsz\xF6vets\xE9g", "\xE1llamtitok", "\xE1llamvagyon", "\xE1llamvezet\xE9s", "\xE1lland\xF3", "\xE1llapothat\xE1roz\xF3", "\xE1ll\xE1s", "\xE1ll\xE1sharc", "\xE1ll\xE1skeres\xE9s", "\xE1ll\xE1sp\xE9nz", "\xE1ll\xE1sv\xE1ltoztat\xE1s", "\xE1llat\xE1llom\xE1ny", "\xE1llatboncol\xE1s", "\xE1llateledel", "\xE1llatfajta", "\xE1llatgondoz\xF3", "\xE1llath\xE1z", "\xE1llatidom\xEDt\xE1s", "\xE1llatkereskedelem", "\xE1llatk\xEDnz\xE1s", "\xE1llatk\xF6ly\xF6k", "\xE1llatmese", "\xE1llatorsz\xE1g", "\xE1llat\xF6v", "\xE1llatrendszertan", "\xE1llatszaporulat", "\xE1llattan", "\xE1llattart\xF3", "\xE1llatv\xE9delem", "\xE1llatvil\xE1g", "all\xE9l", "allergi\xE1s", "\xE1llhatatoss\xE1g", "\xE1ll\xEDtm\xE1ny", "\xE1llkapocsficam", "\xE1ll\xF3csiga", "\xE1ll\xF3fogad\xE1s", "\xE1ll\xF3gall\xE9r", "\xE1ll\xF3hull\xE1m", "\xE1ll\xF3l\xE9tra", "\xE1llom\xE1s\xE9p\xFClet", "\xE1ll\xF3napt\xE1r", "\xE1ll\xF3t\u0151ke", "\xE1llv\xE1ny", "alma", "almaecet", "almafajta", "alma\xEDz\u0171", "almamoly", "almareszel\u0151", "alm\xE1s", "almasz\xFCret", "\xE1lm\xE9lkod\xE1s", "\xE1lmosk\xF6nyv", "alo\xE9", "alom", "\xE1lomfejt\u0151", "\xE1lomk\xE9p", "\xE1lomman\xF3", "\xE1lompor", "alorvos", "alpakka", "\xE1lpereszke-faj", "alpesi m\xE1k", "alpolg\xE1rmester", "\xE1lruha", "als\xF3gatya", "als\xF3nem\u0171", "als\xF3szoknya", "\xE1lszentesked\xE9s", "\xE1lsz\xF6m\xF6rcs\xF6g", "\xE1ltal\xE1nos forgalmi ad\xF3", "\xE1ltal\xE1nos line\xE1ris csoport", "\xE1ltal\xE1nos\xEDt\xE1s", "altat\xE1s", "altat\xF3szer", "alt\xE9r b\xE1zisa", "alternat\xEDv energia", "\xE1ltev\xE9kenys\xE9g", "\xE1ltintagomba", "altklarin\xE9t", "\xE1ltrombitagomba", "\xE1ltudom\xE1ny", "alulexpon\xE1l\xE1s", "alulj\xE1r\xF3", "alum\xEDniumf\xF3lia", "alum\xEDniumipar", "alum\xEDnium-oxid", "alvad\xE9k", "alv\xE1llalkoz\xF3", "alv\xE1z", "alveol\xE1ris", "alv\xF3alkalmatoss\xE1g", "amar\xE1nt", "amarilliszf\xE9l\xE9k", "amazonasi \xF3ri\xE1s-t\xFCnd\xE9rr\xF3zsa", "\xE1mbra", "ambr\xF3zia", "amerikai alk\xF6rm\xF6s", "amerikai berkenye", "amerikai gesztenye", "amerikai k\u0151ris", "amerikai rezg\u0151 ny\xE1r", "amerikai tr\xE1gyagomba", "amerikai", "ametiszt", "amhara", "amin\xE1l\xE1s", "\xE1m\xEDt\xE1s", "amm\xF3nium", "amn\xE9zia", "a-moll", "amortiz\xE1ci\xF3", "ampelol\xF3gia", "amplit\xFAd\xF3", "amput\xE1ci\xF3", "amur", "anabolikus szteroid", "anakolutia", "analfabetizmus", "analitikus geometria", "anal\xEDzis", "anan\xE1szeper", "anarchista", "anat\xF3mia", "andal\xFAziai jegenyefeny\u0151", "andrag\xF3gia", "androg\xFCn", "an\xE9mia", "aneszteziol\xF3gia", "angelikaf\u0171", "anglik\xE1n", "angol musk\xE1tli", "angolai", "angolgy\u0171l\xF6l\u0151", "angolkisasszony", "angolnaleves", "angols\xE1g", "angoltud\xE1s", "ang\xF3rany\xFAl", "angyalarc", "angyalgy\xF6k\xE9r", "angyalsereg", "anilin", "anim\xE1ci\xF3", "animista", "anizotr\xF3pia", "\xE1nizslik\u0151r", "\xE1nizsszag\xFA f\u0171r\xE9szgomba", "ank\xE9t", "ann\xF3na", "an\xF3dsug\xE1r", "anor\xE1k", "antagonizmus", "antenna", "antennat\xFCk\xF6r", "antiautomorfizmus", "antidepressz\xE1ns", "antig\xE9n", "antiklerikalizmus", "antikv\xE1rius", "antilopfajta", "antineutron", "anti-onkog\xE9n", "antiparazitikum", "antip\xF3dus", "antiszemita", "antiszimmetria", "antit\xE9zis", "antol\xF3gia", "antrac\xE9n", "antropof\xF3bia", "antropomorfizmus", "anya", "anyacs\xE1sz\xE1rn\u0151", "anyaegyes\xFClet", "anyaf\xF6ld", "anyagcsata", "anyagelv\u0171s\xE9g", "anyaggazd\xE1lkod\xE1s", "anyaghiba", "anyagismeret", "anyaglelt\xE1r", "anyagm\xE9rleg", "anyagn\xE9v", "anyagrakt\xE1r", "anyagtakar\xE9koss\xE1g", "anyagvizsg\xE1lat", "anyahaj\xF3", "anyaint\xE9zet", "anyajuh", "anyakoca", "anyak\xF6nyvvezet\u0151", "anyamad\xE1r", "anyaminta", "anya\xF6l", "anyasert\xE9s", "anyaszerep", "anyatej", "any\xF3", "any\xF3st\xE1rs", "anyuci", "aorta", "ap\xE1ca", "ap\xE1caf\u0151n\xF6kn\u0151", "ap\xE1cal\xFAd", "ap\xE1caz\xE1rda", "apad\xE1s", "apahi\xE1ny", "apan\xE1zs", "apas\xE1g", "apat\xE1rs", "ap\xE1tpl\xE9b\xE1nos", "apert\xFAra", "Aplomodo-s\xF3lyom", "ap\xF3ka", "\xE1pol\xF3", "apol\xF3gia", "\xE1pol\xF3szem\xE9lyzet", "ap\xF3s", "aposzt\xE1ziaf\xE9l\xE9k", "Appenninek", "\xE1prilisi d\xF6ggomba", "apr\xF3 ciprus-cs\xE9szegomba", "apr\xF3 csiperke", "apr\xF3 nefelejcs", "apr\xF3 susulyka", "apr\xF3 vet\u0151vir\xE1g", "apr\xF3fa", "apr\xF3l\xE9kleves", "apr\xF3munka", "apr\xF3pikkely\u0171 pereszke", "apr\xF3szul\xE1k", "apszis", "apuka", "ara", "arabizmus", "\xE1radat", "\xE1ralakul\xE1s", "\xE1ram\xE1talak\xEDt\xE1s", "\xE1rameloszt\xF3", "\xE1ramfogyaszt\xE1s", "\xE1ramir\xE1ny\xEDt\xF3", "\xE1ramkorl\xE1toz\xE1s", "\xE1ramlat", "\xE1rams\u0171r\u0171s\xE9g", "\xE1ramsz\xFCnet", "\xE1ramvezet\u0151", "arankaf\xE9l\xE9k", "ar\xE1ny", "aranyar\xE1ny", "aranyb\xE9l\xE9s\u0171 tin\xF3ru", "aranybulla", "aranycsill\xE1m", "aranydurbincs", "aranyember", "arany\xE9rmes", "aranyes\u0151", "aranyfinoms\xE1g", "aranyf\xFCgg\u0151", "aranygaluska", "aranygy\xF6k\xE9rf\xE9l\xE9k", "aranyheged\u0171", "aranyh\xEDmz\xE9s", "aranyigazs\xE1g", "aranyk\xE9szlet", "aranyk\xF6p\xE9s", "aranylemez", "aranyl\xF3 koronggomb\xE1cska", "aranymetsz\xE9s", "aranymond\xE1s", "aranym\u0171ves", "aranyos baraboly", "aranyos l\xF3here", "ar\xE1nyoss\xE1g", "ar\xE1nyp\xE1r", "aranyperec", "aranyrojt", "aranys\xE1rga agg\xF3f\u0171", "aranys\xE1rga laskagomba", "aranysz\xE1jfa", "aranyszilva", "aranyt\xE1rgy", "aranytin\xF3ru", "aranyvas\xE1rnap", "aranyzsin\xF3r", "\xE1rar\xE1ny", "arat\xF3", "arat\xF3gazda", "arat\xF3munk\xE1s", "arat\xF3sztr\xE1jk", "\xE1rbecsl\xE9s", "\xE1rb\xF3c", "\xE1rb\xF3cl\xE1mpa", "arbor\xE9tum", "arcb\u0151r", "arcf\xE1tyol", "archaikum", "archeol\xF3gus", "arch\xEDvum", "arcizom", "arck\xE9pcsarnok", "arckifejez\xE9s", "arclemos\xF3", "arcmozg\xE1s", "arcr\xE1ng\xE1s", "arc\xFCreg", "arcvon\xE1s", "arcszesz", "ardha macj\xE9ndr\xE1szana", "\xE1rdr\xE1g\xEDt\xF3", "\xE1remel\xE9s", "areom\xE9ter", "\xE1rfolyam", "\xE1rfolyamv\xE1ltoz\xE1s", "arg\xE1nfa", "arg\xF3", "\xE1rgus", "\xE1rhull\xE1m", "ari\xE1nus", "arisztokr\xE1cia", "arit\xE1s", "arizonai ciprus", "arkangyal", "\xE1rk\xE9pz\xE9s", "arkuszkotangens", "\xE1rk\xFCl\xF6nb\xF6zet", "\xE1rlesz\xE1ll\xEDt\xE1s", "\xE1rlevel\u0171 len", "\xE1rm\xE1nykod\xF3", "\xE1rmentes\xEDt\xE9s", "\xE1rny", "\xE1rny\xE9kbirodalom", "\xE1rny\xE9kkir\xE1ly", "\xE1rny\xE9kol\xE1s", "\xE1rny\xE9kvil\xE1g", "\xE1rnyliliom", "\xE1rokpart", "aroma", "\xE1rpacukor", "\xE1rpak\xE1sa", "\xE1rpolitika", "arrogancia", "\xE1rszab\xE1s", "\xE1rsz\xEDnvonal", "\xE1rt\xE1ny", "art\xE9ria", "artikul\xE1ci\xF3", "artroszk\xF3pia", "\xE1ru\xE1tvev\u0151", "\xE1rub\u0151s\xE9g", "\xE1rucsere-egyezm\xE9ny", "\xE1rud\xEDjszab\xE1s", "\xE1rufajta", "\xE1rufelhozatal", "\xE1ruf\xF6l\xF6sleg", "\xE1ruhalmoz\xE1s", "\xE1ruismeret", "\xE1rukereskedelem", "\xE1ruk\xEDn\xE1lat", "\xE1ruk\xFCldem\xE9ny", "\xE1rumeg\xE1ll\xEDt\xF3", "\xE1runem", "\xE1rurejteget\xE9s", "\xE1rus\xEDt\xF3hely", "\xE1rusz\xE1mla", "\xE1rut\xE9r\xEDt\xE9s", "\xE1rut\u0151zsde", "\xE1ruv\xE9djegy", "\xE1rv\xE1cskaorchidea", "\xE1rval\xE1nyhajgomba", "\xE1rva\xFCgy", "\xE1rver\xE9si csarnok", "\xE1rv\xEDzjelz\xE9s", "\xE1rv\xEDzmentes\xEDt\xE9s", "arz\xE9n", "arz\xE9nsav", "\xE1sat\xE1s", "\xE1s\xF3", "\xE1s\xF3l\xE1b", "\xE1s\xF3ny\xE9l", "aspir\xE1ci\xF3", "\xE1spisk\xEDgy\xF3", "\xE1sv\xE1nygy\u0171jtem\xE9ny", "\xE1sv\xE1nyv\xEDz", "aszalt szilva", "asz\xE1lyfa", "asz\xE1lyt\u0171r\u0151", "aszexualit\xE1s", "aszfaltoz\xF3", "aszfod\xE9lusz", "aszimmetrikus kulcs\xFA titkos\xEDt\xE1s", "\xE1szka", "\xE1szkol\xE1s", "\xE1szok pince", "aszpar\xE1gusz", "assz\xE1mi", "asszisztens", "asszociat\xEDv t\xF6mb", "asszonybar\xE1t", "asszonyember", "asszonyka", "asszonymunka", "asszonyn\xE9ps\xE9g", "asszonyt\xE1rs", "asztal", "asztalfi\xF3k", "asztali sz\xE1m\xEDt\xF3g\xE9p", "asztall\xE1b", "asztalosenyv", "asztalosmunka", "asztalsz\xE9k", "asztalt\xE1rsas\xE1g", "aszt\xE9nia", "aszteroida", "asztrofizika", "asztronautika", "asz\xFA", "asz\xFAszegf\u0171", "\xE1talak\xEDt\xE1s", "\xE1tal\xE1ny\xE1r", "\xE1t\xE1ll\xE1s", "atazanavir", "ateista", "atenolol", "\xE1terjeszt\xE9s", "\xE1tfoly\xE1s", "\xE1tfut\xE1s", "\xE1thangol\xE1s", "\xE1thidal\xE1s", "\xE1th\xFAz\xE1s", "\xE1t\xEDrat", "\xE1tj\xE1tsz\xE1s", "\xE1tkarol\xE1s", "\xE1tkoz\xF3d\xE1s", "\xE1tlag\xE9letkor", "\xE1tlagfogyaszt\xF3", "\xE1tlagolvas\xF3", "\xE1tlagpolg\xE1r", "\xE1tlagteljes\xEDtm\xE9ny", "atlaszc\xE9drus", "\xE1tl\xE9nyeg\xEDt\xE9s", "atl\xE9tan\u0151", "\xE1tl\xF3", "\xE1tmeneti f\xFCggv\xE9ny", "\xE1tnevel\xE9s", "\xE1tok", "\xE1tokt\xFCske", "atombont\xE1s", "atomelm\xE9let", "atomfegyver", "atomgyors\xEDt\xF3", "atomh\u0151", "atomkorszak", "atommag", "atomm\xE1glya", "atomr\xE1cs", "atomrobbant\xE1s", "atomsug\xE1r", "atomtitok", "\xE1t\xF6mleszt\xE9s", "atrac\xE9l", "\xE1trium", "\xE1truh\xE1z\xE1s", "\xE1tsz\xE1ll\xF3hely", "\xE1tsziv\xE1rg\xE1s", "\xE1ttekinthetetlens\xE9g", "\xE1ttelep\xEDt\xE9s", "\xE1tt\xE9r\xE9s", "\xE1ttetsz\u0151 f\xE9s\u0171sgomba", "atticizmus", "\xE1tt\xF6r\xE9s", "\xE1tutaz\xE1s", "\xE1t\xFCltet\xE9s", "\xE1t\xFCt\u0151pap\xEDr", "\xE1tv\xE1ltoz\xE1s", "\xE1tver\xE9s", "\xE1tvitel", "\xE1tvonul\xE1s", "atyafis\xE1g", "audiom\xE9ter", "aukci\xF3", "ausztr\xE1l angol", "ausztr\xE1lbab\xE9r", "ausztr\xE1liai arauk\xE1ria", "ausztriai", "autizmus", "aut\xF3baleset", "aut\xF3bont\xF3", "aut\xF3buszkalauz", "aut\xF3busz-p\xE1lyaudvar", "aut\xF3buszvezet\u0151", "aut\xF3emel\u0151", "aut\xF3forgalom", "aut\xF3gar\xE1zs", "autogram", "aut\xF3h\xE1z", "aut\xF3k\xE1rpitos", "autokl\xE1v", "aut\xF3k\xF6zleked\xE9s", "aut\xF3l\xE1mpa", "aut\xF3m\xE1rka", "automatizmus", "automobilklub", "auton\xF3m idegrendszer", "aut\xF3p\xE1lyagy\u0171r\u0171", "aut\xF3parkol\xF3", "aut\xF3s", "aut\xF3sport", "aut\xF3szerel\u0151", "autoszuggeszti\xF3", "aut\xF3tet\u0151", "aut\xF3tulajdonos", "aut\xF3versenyz\u0151", "aut\xF3vizsga", "avartakar\xF3", "avesztai", "AVL-fa", "avok\xE1d\xF3sal\xE1ta", "axon", "ayahuasca", "azbeszt", "azonos sz\xE1moss\xE1g\xFA halmazok", "azt\xE9k zs\xE1lya", "az\xFAr", "az\xFArk\xE9k galambgomba", "b\xE1ba", "babacip\u0151", "b\xE1bakal\xE1cs", "babakocsi", "babam\xE9rleg", "babar\xF3zsa", "babaszappan", "b\xE1bat\xE1bla", "b\xE1bcsoport", "bab\xE9rboroszl\xE1n", "bab\xE9rhanga", "bab\xE9rlevel\u0171 szuhar", "bab\xE9rsomf\xE9l\xE9k", "b\xE1bfigura", "babguly\xE1s", "b\xE1bj\xE1t\xE9k", "b\xE1bkorm\xE1ny", "babn\xF6v\xE9ny", "b\xE1bos", "babszem", "babusgat\xE1s", "bacch\xE1nsn\u0151", "bacilus", "b\xE1csi", "b\xE1dog", "b\xE1dogember", "b\xE1dogl\xE1da", "b\xE1dogpult", "b\xE1dogtest", "bagaria\xEDz", "bagel", "bagoly", "bagolyhuhog\xE1s", "bagolytanya", "bag\xF3s", "baj", "b\xE1jbab\xE9rf\xE9l\xE9k", "b\xE1jg\xFAn\xE1r", "b\xE1jmosoly", "bajnokcsapat", "bajonettz\xE1r", "b\xE1jtk\xF3d", "bajuszkir\xE1ly", "bajuszpedr\u0151", "bajv\xEDv\xF3", "bakancsf\u0171z\u0151", "b\xE1k\xE1sz", "bakcs\xF3", "bakfis", "bakh\xE1t", "bakl\xF6v\xE9s", "baksis", "bakszarv\xFA lepkeszeg", "bakterh\xE1z", "bakt\xE9rium", "bakt\xE9riumtelep", "bakugr\xE1s", "bal pitvar", "balalajka", "baldachin", "balerina", "balesetvesz\xE9ly", "balettiskola", "balettszoknya", "balf\xE1c\xE1n", "balga", "balh\xE9", "balk\xE1ni fakop\xE1ncs", "balk\xE1ni szegf\u0171", "balkon", "ballag\xE1s", "ball\xE9p\xE9s", "ballonkab\xE1t", "b\xE1lna", "b\xE1lnah\xFAs", "b\xE1lnazs\xEDr", "baloldal", "balsiker", "balszerencse", "balti", "b\xE1lv\xE1nyfa", "b\xE1lv\xE1nyoz\xE1s", "balzsamecet", "balzsamillat", "bambara", "bambuszf\xE9l\xE9k", "b\xE1m\xE9szkod\xF3", "banalit\xE1s", "ban\xE1nf\xE9l\xE9k", "b\xE1n\xE1s", "b\xE1n\xE1ti s\xE1fr\xE1ny", "bandaharc", "banditavez\xE9r", "bandzs\xEDt\xE1s", "bani", "bankalap", "bank\xE1tutal\xE1s", "bankett", "bankh\xE1z", "bankjegy", "bankjegykiad\xF3 automata", "bankk\xE1rtya", "bank\xF3c\xE9dula", "bankp\xE9nzt\xE1ros", "bankszakma", "banktitok", "bank\xFCgy", "bankvez\xE9r", "b\xE1ns\xE1gi s\xE1s", "b\xE1nt\xE1s", "banya", "b\xE1nyaakna", "b\xE1nyacsille", "b\xE1nyafenntart\xE1s", "b\xE1nyagazd\xE1lkod\xE1s", "b\xE1nyaigazgat\xF3s\xE1g", "b\xE1nyakapit\xE1nys\xE1g", "b\xE1nyaker\xFClet", "b\xE1nyal\xE1mpa", "b\xE1nyam\xE9cs", "b\xE1nyamunka", "b\xE1nyaoml\xE1s", "b\xE1nyareng\xE9s", "b\xE1ny\xE1szat", "b\xE1ny\xE1szhimnusz", "b\xE1ny\xE1sznap", "b\xE1ny\xE1szsapka", "b\xE1nyat\xE1rsas\xE1g", "b\xE1nyater\xFClet", "b\xE1nya\xFCzem", "b\xE1nyavid\xE9k", "bar", "barack", "baracklevel\u0171 harangvir\xE1g", "barackp\xE1lma", "barackvir\xE1g", "barakksor", "b\xE1r\xE1nyb\xE9l\xE9s", "b\xE1r\xE1nyfelh\u0151", "b\xE1r\xE1nypar\xE9j", "b\xE1r\xE1ny\xFCr\xF6m", "bar\xE1tcinege", "bar\xE1tf\xFCle", "bar\xE1tn\u0151", "bar\xE1ts\xE1gk\xF6t\xE9s", "bar\xE1ts\xE1gtalans\xE1g", "bar\xE1zdak\xF6z", "bar\xE1zd\xE1sb\xE1lna", "barb\xE1rs\xE1g", "b\xE1rd", "barhent", "barika", "baritonista", "b\xE1rka", "bark\xE1csbolt", "barkamirtuszf\xE9l\xE9k", "barkochba", "barlangfest\xE9szet", "barlangkutat\xF3", "barlangtemplom", "barna cs\xE9szegomba", "barna \xE9rdestin\xF3ru feket\xE9s v\xE1ltozata", "barna gy\u0171r\u0171stin\xF3ru", "barna ned\u0171gomba", "barnaeres csengetty\u0171gomba", "barnakeny\xE9r", "barnamedve", "barnapikkelyes kacskagomba", "barn\xE1s fogasvargomba", "barn\xE1spiros s\xF6rt\xE9scs\xE9szegomba", "barn\xE1sv\xF6r\xF6s ripacsgomba", "barnat\xF6r\xE9s", "barnul\xF3 csigagomba", "b\xE1r\xF3kisasszony", "barom\xE9ter\xE1ll\xE1s", "baromfih\xFAs", "baromfitelep", "baromorvos", "baronet", "barrik\xE1d", "b\xE1rsony", "b\xE1rsonykalap\xFA l\xE1nggomba", "b\xE1rsonymell\xE9nyke", "b\xE1rsonyos fapereszke", "b\xE1rsonyos gy\xF6keresf\xFCl\u0151ke", "b\xE1rsonyos r\xE9teggomba", "b\xE1rsonyszalag", "b\xE1rszekr\xE9ny", "basenji", "b\xE1styafok", "b\xE1styatorony", "basszetk\xFCrt", "basszusgerenda", "basszusklarin\xE9t", "bat\xE1r", "batiszt zsebkend\u0151", "b\xE1tors\xE1g", "b\xE1tya", "bauxit", "Bayes-h\xE1l\xF3", "baz\xE1lis test", "bazalttufa", "bazellaf\xE9l\xE9k", "b\xE1zis", "b\xE1zisvektor", "b\xE9", "be\xE1ll\xEDt\xE1s", "be\xE1raml\xE1s", "beavatkoz\xE1s", "bebalzsamoz\xE1s", "b\xE9biszitter", "becquerel", "becser\xE9l\xE9s", "b\xE9csi pint", "becsin\xE1lt", "becstelens\xE9g", "becs\xFClet", "becs\xFCletg\xF3l", "becs\xFCletsz\xF3", "becs\xFCs", "bed\u0151l\xE9s", "beenged\xE9s", "bees\xE9s", "befejez\u0151d\xE9s", "befizet\xE9s", "befog\xF3", "befoly\xE1s", "bef\u0151z\xE9s", "beg\xF3nia", "begy", "behajl\xEDt\xE1s", "behatol\xE1s", "beh\xEDv\xE1s", "beh\xFAz\xE1s", "beilleszked\xE9s", "beiratkoz\xE1s", "bej\xE1r\xE1s", "bejelent\xE9s", "bejelent\u0151lap", "b\xE9kabogl\xE1rka", "b\xE9kacomb", "b\xE9kakonty", "b\xE9kalen", "b\xE9kany\xE1l", "b\xE9kareakci\xF3", "b\xE9kasz\u0151l\u0151f\xE9l\xE9k", "b\xE9katutajf\xE9l\xE9k", "b\xE9ke", "b\xE9kealku", "b\xE9keapostol", "b\xE9kebont\xE1s", "b\xE9keegyezm\xE9ny", "b\xE9kefelt\xE9tel", "b\xE9kegazdas\xE1g", "b\xE9keh\xEDr", "b\xE9kekonferencia", "b\xE9kek\xF6t\xE9s", "b\xE9kek\xFCld\xF6tt", "b\xE9kemozgalom", "b\xE9kepap", "b\xE9kepolitika", "b\xE9kess\xE9g", "b\xE9keszeretet", "b\xE9ket\xE1bor", "b\xE9ketermel\xE9s", "b\xE9kev\xE1gy", "b\xE9k\xEDt\xE9s", "bek\xF6t\u0151\xFAt", "b\xE9l\xE1tf\xFAr\xF3d\xE1s", "b\xE9lboholy", "beleegyez\xE9s", "belehel\xE9s", "b\xE9lelz\xE1r\xF3d\xE1s", "belenyugv\xE1s", "bel\xE9p\u0151jegy", "b\xE9l\xE9sanyag", "b\xE9l\xE9ssz\xF6vet", "b\xE9lf\xE9reg", "belfogyaszt\xE1s", "b\xE9lg\xE1z", "belgy\xF3gy\xE1szat", "b\xE9lhurut", "Bellman-Ford-algoritmus", "belorusz", "b\xE9lpokloss\xE1g", "b\xE9lrenyhes\xE9g", "bels\u0151 f\xFCl", "bels\u0151", "bels\u0151f\xFCl-gyullad\xE1s", "beltenger", "bel\xFCgy", "belv\xE1ros", "belv\xEDztan", "b\xE9lyeg\xE1rjegyz\xE9k", "b\xE9lyegki\xE1ll\xEDt\xE1s", "b\xE9lyegsorozat", "b\xE9lyegz\u0151g\xE9p", "b\xE9lyeggy\u0171jtem\xE9ny", "bemagol\xE1s", "bem\xE9lyed\xE9s", "bemond\xE1s", "bemutat\xF3", "bend\u0151", "beng\xE1li", "bengef\xE9l\xE9k", "bennfentes", "bens\u0151s\xE9g", "benzaldehid", "benzinadag", "benzineskanna", "benzinkanna", "benzink\xFAt", "benzinmotor", "benzint\xF6lt\u0151", "benzoesav", "benzol", "benzox\xF3nium-klorid", "beny\xFAjt\xE1s", "beolvaszt\xE1s", "be\xF6ml\xE9s", "bepillant\xE1s", "berak\xE1s", "b\xE9rauton\xF3mia", "b\xE9rc", "b\xE9rcsoport", "b\xE9relsz\xE1mol\xE1s", "berendez\xE9s", "b\xE9resf\xF6ld", "b\xE9rez\xE9s", "b\xE9rfolytonoss\xE1g", "b\xE9rharc", "berill", "b\xE9rj\xF6vedelem", "berkenye", "berki bogl\xE1rka", "b\xE9rkieg\xE9sz\xEDt\xE9s", "b\xE9rkonfliktus", "b\xE9rlem\xE9ny", "b\xE9rletjegy", "berlini", "b\xE9rmaanya", "b\xE9rm\xE1lkoz\xF3", "bermudai szabalp\xE1lma", "b\xE9rnegyed", "b\xE9r\xF6sszeg", "b\xE9rrabszolga", "b\xE9rrendez\xE9s", "b\xE9rstop", "b\xE9rszerz\u0151d\xE9s", "b\xE9rtarifa", "beruh\xE1z\xF3", "besamelm\xE1rt\xE1s", "bestia", "bes\xFAg\xF3", "besz\xE1ll\xEDt\xE1s", "besz\xE1mol\xE1s", "besz\xE9dfelism\xE9s", "besz\xE9dhelyzet", "besz\xE9dk\xE9szs\xE9g", "besz\xE9dm\u0171v\xE9szet", "besz\xE9dt\xE1rgy", "besz\xE9l\xE9s", "beszerz\u0151", "besz\xF3l\xE1s", "besz\xFCntet\xE9s", "b\xE9ta-karotin", "beteg bor", "beteg\xE1pol\xF3", "betegkoszt", "beteglista", "betegseg\xE9lyez\xE9s", "betegs\xE9gg\xF3c", "betegt\xE1rs", "betelep\xEDt\xE9s", "b\xE9telp\xE1lmaf\xE9l\xE9k", "bet\xE9ti t\xE1rsas\xE1g", "bet\xE9tsz\xE1mla", "betli", "beton", "betonalj", "betoncs\u0151", "betonf\xF6d\xE9m", "betonk\xE1d", "betonkever\u0151g\xE9p", "betonmunka", "betont\xF6rmel\xE9k", "betonv\xE1g\xE1s", "betonv\xE9delem", "bet\u0171csal\xE1d", "bet\u0171f\xE9m", "bet\u0171\xEDr\xE1s", "bet\u0171k\xF6z", "bet\u0171\xF6nt\xE9s", "bet\u0171rejtv\xE9ny", "bet\u0171sz\xE1mtan", "bet\u0171sz\xF3", "bet\u0171vet\xE9s", "bety\xE1rbecs\xFClet", "bety\xE1rn\xF3ta", "bety\xE1rvil\xE1g", "beutaz\xE1s", "bevacizumab", "bev\xE1ndorl\xF3", "bev\xE1s\xE1rl\xF3k\xF6zpont", "bev\xE9rz\xE9s", "bevezet\xE9s", "bevon\xE1s", "bezil\xE1t", "bh\xE9k\xE1szana", "bibesz\xE1j", "b\xEDbic", "bibircs\xF3k", "bibliaford\xEDt\xE1s", "bibliakutat\xF3", "bibliogr\xE1fia", "bibold\xF3", "b\xEDbor kasvir\xE1g", "b\xEDbor t\xF6lgy", "b\xEDborcsiga", "b\xEDborhere", "b\xEDboros kosbor", "b\xEDborterm\u0151 kaktusz", "bicaj", "bicikliabroncs", "biciklipumpa", "bicska", "biedermeier", "bifurk\xE1ci\xF3elm\xE9let", "bige", "bigy\xF3", "bijekt\xEDv lek\xE9pez\xE9s", "bikaborj\xFA", "bikahere", "bikany\xE1l", "bikav\xE9r", "bikondicion\xE1lis", "bili\xE1rdasztal", "bili\xE1rdj\xE1t\xE9k", "biline\xE1ris lek\xE9pez\xE9s", "billen\u0151ablak", "billenty\u0171kombin\xE1ci\xF3", "billing", "bimb\xF3", "bin\xE1ris fa", "bin\xE1ris m\u0171velet", "binom", "bio\xE1ram", "bioc\xF6n\xF3zis", "bioenergetika", "biofizikus", "biogeogr\xE1fia", "biohasznosul\xE1s", "biokert", "biol\xF3gia\xF3ra", "biolumineszcencia", "biopszia", "bi\xF3ta", "biotin", "b\xEDr\xE1lat", "birka", "birkacs\xE1rda", "birkany\xE1j", "birkatart\xE1s", "birkat\xFCrelem", "birodalmi gy\u0171l\xE9s", "birr", "birsalmafa", "birssajt", "birtokl\xE1s", "birtokos eset", "bislama", "bitang", "bit\xF3fa", "bitt\xE9rk\xE9p", "bivalyteh\xE9n", "bizalmass\xE1g", "bizalom", "biznisz", "bizom\xE1nyos", "bizony\xEDtv\xE1ny", "bizonys\xE1g", "biztons\xE1g", "biztos\xEDt\xE1s", "biztos\xEDt\xF3berendez\xE9s", "biztos\xEDt\xF3t\xE1rsas\xE1g", "bizsu", "bl\xE9zer", "blok\xE1ci\xF3", "blokkol\xE1s", "bl\u0151dli", "Blyth-j\xE9gmad\xE1r", "b\xF3bita", "bobtail", "bocs\xE1natk\xE9r\xE9s", "bocskoros nyelesp\xF6feteg", "bodajki berkenye", "bodicsek", "bodn\xE1rmester", "bodorp\xE1fr\xE1ny", "b\xF3dulat", "bodzab\xE9l", "bodzaf\xE9l\xE9k", "bodzasz\xF6rp", "bog\xE1ncs", "bogatir", "bogl\xE1rka", "bogl\xE1ros szell\u0151r\xF3zsa", "bogr\xE1csguly\xE1s", "bogy\xF3z\xE1s", "boh\xF3csapka", "bohrium", "bojkott\xE1l\xE1s", "bojt\xE1r", "bojtorj\xE1nsal\xE1ta", "bokacsizma", "bokafix", "bokaperec", "bokazokni", "b\xF3kol\xF3 fogas\xEDr", "b\xF3kol\xF3 tr\xE1gyamoha", "bokorkaktusz", "bokr\xE1sz\xE1s", "bokrosgomba", "bokszb\u0151r", "bokszmeccs", "bold\xF3", "boldogul\xE1s", "bolg\xE1rkert\xE9sz", "bolhacirkusz", "bolhar\xE1k", "bolognai pincs", "bolond\xE9ria", "bolond\xF3ra", "bolsevizmus", "bolthelyis\xE9g", "boltosn\xE9", "Bolzano-t\xE9tel", "bolyg\xF3f\xE9ny", "bolyg\xF3rendszer", "bolyong\xE1s", "bombakr\xE1ter", "bombasiker", "bombat\xF6lcs\xE9r", "bomb\xE1z\xE1s", "bomlaszt\xE1s", "bonbonmeggy", "boncmester", "boncol\xF3orvos", "Bonduelle", "bonszai", "bont\xF3cs\xE1k\xE1ny", "bonyolults\xE1g", "bopindolol", "bor\xE1g\xF3", "boranya", "bor\xE1t", "borb\xE9ly", "borb\xE9ly\xFCzlet", "borbolyaf\xE9l\xE9k", "bordacsont", "bord\xE1s mohagomba", "bord\xE1sfal", "bordaszelet", "bord\xE9lyh\xE1z", "bor\xE9leszt\u0151", "borharm\xF3nia", "borint\xF3izom", "bor\xEDt\xE9k", "bor\xEDt\xF3lap", "borj\xFAbecsin\xE1lt", "borj\xFAh\xFAs", "borj\xFAl\xE1b", "borj\xFAp\xE1zsit", "borkedvel\u0151", "borkeresked\u0151", "bork\xF3r\xF3", "bork\u0151sav", "borlik\u0151r", "borocska", "bor\xF3kafeny\u0151", "borona", "borospoh\xE1r", "borost\xE1s nemezesgomba", "borosty\xE1n", "borosty\xE1nk\u0151sav", "boroszl\xE1nf\xE9l\xE9k", "borotvaecset", "borotvak\xE9szlet", "borotv\xE1lkoz\xE1s", "borovicska", "borpince", "borsajt\xF3", "borsfa", "borsikaf\u0171", "bors\xF3b\xFCkk\xF6ny", "bors\xF3k\xE1s s\xE1rgoly\xF3", "bors\xF3p\xFCr\xE9", "borszag", "borsz\u0151l\u0151", "bortermel\u0151", "bort\xF3csa", "bor\xFAl\xE1t\xE1s", "Bor\u016Fvka-algoritmus", "b\xF3rv\xEDz", "borv\xF6r\xF6s tin\xF3ru", "borzalom", "borzas f\xFCzike", "borzas macskamenta", "borzaskata", "borzh\xEDn\xE1rf\xE9l\xE9k", "boszorka", "boszork\xE1nygy\u0171r\u0171", "boszork\xE1nymesters\xE9g", "boszork\xE1nytoj\xE1s", "bosszankod\xE1s", "bossz\xFAs\xE1g", "botanikus kert", "botork\xE1l\xE1s", "botswanai", "Boudan-Fourier-t\xE9tel", "bozon", "boz\xF3t", "b\xF6d\xF6n", "b\u0151g\u0151k\xFCrt", "b\xF6gre", "b\xF6jtnap", "b\xF6lcs", "b\xF6lcsel\u0151", "b\xF6lcs\xE9szdoktor", "b\xF6lcs\u0151dal", "b\xF6l\xE9nyugrat\xE1s", "b\xF6ng\xE9sz", "b\u0151r", "b\u0151r\xE1pol\xE1s", "b\u0151r\xE1t\xFCltet\xE9s", "b\u0151rbetegs\xE9g", "b\u0151rcsont", "b\u0151rduda", "b\u0151rfej\u0171", "b\u0151rfotel", "b\u0151rgy\xE1rt\xE1s", "b\u0151rh\xE1m", "b\u0151ripar", "b\u0151rkeresked\xE9s", "b\u0151rk\xF6t\xE9ny", "b\u0151rlebeny", "b\u0151rlev\xE9l", "b\u0151rmunka", "b\u0151r\xF6nd", "b\u0151rr\xE1k", "b\u0151rsapka", "b\u0151rsaru", "b\u0151rsz\xE9k", "b\u0151rszivar", "b\u0151rt\xE1ska", "b\xF6rt\xF6ncella", "b\xF6rt\xF6nt\xF6ltel\xE9k", "b\xF6rv\xE9nyf\xE9l\xE9k", "b\u0151rzubbony", "b\u0151vebb halmaz", "br\xE1csa", "brahman", "brav\xF3ki\xE1lt\xE1s", "br\xE9", "brevi\xE1rium", "brifk\xF3", "brig\xE1dtag", "brikett", "bringa", "br\xF3dig", "br\xF3kerc\xE9g", "brokkolikr\xE9mleves", "bromid", "bronz\xE9rmes", "bronzos p\xF6feteg", "bros\xFAra", "brutalit\xE1s", "b\xFAb\xE1nat", "bub\xF3pestis", "b\xFAbos banka", "bucka", "b\xFAcs\xFAbesz\xE9d", "b\xFAcs\xFAj\xE1r\xF3hely", "b\xFAcs\xFAz\xE1s", "budai imola", "buddhizmus", "buga", "bug\xE1s f\xFCrt\xF6sveronika", "bug\xE1s t\xF6visperje", "buglyos f\xE1tyolvir\xE1g", "bugybor\xE9k", "bujas\xE1g", "bujtogat\xE1s", "buk\xE9", "bukjelszoknya", "buk\xF3galamb", "buk\xF3rep\xFCl\xE9s", "buksza", "bula", "buliz\xE1s", "bullmasztiff", "bulv\xE1r\xFAjs\xE1g", "bundacip\u0151", "bund\xE1s lisztgomba", "bungal\xF3", "bunk\xF3s agancsgomba", "bunk\xF3sp\xE1lma", "buny\xF3", "burek", "burgonyachips", "burgonyagomb\xF3c", "burgonyapehely", "burgonyasz\xFCret", "buritip\xE1lma", "burkini", "burkolatk\u0151", "burmai", "burzso\xE1", "b\xFAskomors\xE1g", "buszjegy", "buszs\xE1v", "butas\xE1g", "butik", "b\xFAtorf\xE9nyez\u0151", "b\xFAtorzat", "b\xFAv\xE1rc\xE1pa", "b\xFAv\xE1rharang", "b\xFAv\xE1rmad\xE1r", "b\xFAv\xE1rsisak", "b\xFAv\xF3patak", "b\xFAzaasztag", "b\xFAzadara", "b\xFAzakem\xE9ny\xEDt\u0151", "b\xFAzaliszt", "b\xFAzaszem", "b\xFAzavir\xE1g", "buzgalom", "buzog\xE1ny", "b\xFCd\xF6s csiperke", "b\xFCd\xF6s pereszke", "b\xFCd\xF6sbanka", "b\xFCd\xF6smenta", "b\xFCf\xE9s", "b\xFCkk-eresgomba", "b\xFCkkfaf\xE9l\xE9k", "b\xFCkki \xE1lf\xFCl\u0151ke", "b\xFCkk-koronggomba", "b\xFCkk\xF6s buglyosp\xE1fr\xE1ny", "b\xFCkk\xF6s korallgomba", "b\xFClb\xFCl", "b\u0171nbanda", "b\u0171nbocs\xE1nat", "b\u0171nh\u0151d\xE9s", "b\u0171nlista", "b\u0171n\xF6z\xE9s", "b\u0171np\xE1rtol\xF3", "b\u0171nsz\xF6vetkezet", "b\u0171nt\xE9ny", "b\xFCntetlens\xE9g", "b\xFCntet\u0151elj\xE1r\xE1s", "b\xFCntet\u0151r\xFAg\xE1s", "b\u0171ntettes", "b\u0171n\xFCld\xF6z\xE9s", "b\xFCrokr\xE1cia", "b\xFCr\xF6kg\xE9morr", "b\xFCtyk\xF6l\xE9s", "b\u0171v\xE9szinas", "b\u0171v\xF6let", "b\u0171z\xF6s borz", "Cabibbo\u2013Kobajasi\u2013Maszkava-m\xE1trix", "cafrang", "campanile", "Cantor-t\xE9tel", "cappuccino", "c\xE1revics", "c\xE1rn\u0151", "cathisof\xF3bia", "Cauchy-Hadamard-t\xE9tel", "Cayley-t\xE1bl\xE1zat", "cech", "c\xE9drus-f\xF6ldics\xE9szegomba", "cefazolin", "c\xE9g", "c\xE9g\xE9r", "c\xE9gt\xE1bla", "ceh", "c\xE9hlev\xE9l", "c\xE9kla", "c\xE9l", "c\xE9lb\xEDr\xF3", "celebrit\xE1s", "c\xE9lfot\xF3", "c\xE9lg\xE9p", "c\xE9ljelz\u0151", "c\xE9lk\xF6z\xF6ns\xE9g", "c\xE9ll\xF6v\xE9szet", "c\xE9ll\xF6v\xF6ld\xE9s", "cellul\xF3zipar", "c\xE9lozgat\xE1s", "c\xE9lpr\xE9mium", "c\xE9lszersz\xE1m", "c\xE9lt\xE1mogat\xE1s", "c\xE9lvagyon", "c\xE9lzat", "c\xE9lz\xF3v\xEDz", "cementadagol\xE1s", "cent", "centi", "centimorgan", "centrifuga", "cenzor", "cerem\xF3nia", "Cerk\xF3f", "c\xE9rnahang", "c\xE9rn\xE1z\xF3g\xE9p", "ceruzarajz", "cethal\xE1sz", "cetvel\u0151", "c\xE9z\xE1r", "chaptaloz\xE1s", "chia", "chileis\xE1fr\xE1ny", "chip", "ciambotta", "ci\xE1nk\xE1li", "cibere", "cibof\xF3bia", "cicer\xF3", "cick\xE1ny", "cifra galambgomba", "cifra lemezestapl\xF3", "cig\xE1nybanda", "cig\xE1nygyerek", "cig\xE1nyker\xE9k", "cig\xE1ny-leg\xE9ny", "cig\xE1nypr\xEDm\xE1s", "cig\xE1nyr\xE9ce", "cig\xE1ny-vicc", "cig\xE1nyzenekar", "cigarettacsemp\xE9szet", "cigarettam\xE1rka", "cigarettav\xE9g", "cik\xE1szf\xE9l\xE9k", "cikkecske", "ciklikus csoport", "ciklon", "ciklotron", "cikornya", "cimbalom", "c\xEDmer\xE1llat", "c\xEDmjegyz\xE9k", "c\xEDmlapsztori", "cimpa", "c\xEDmsz\xF3", "c\xEDmzene", "cincor", "cinizmus", "cinkken\u0151cs", "cink-szulf\xE1t", "cin\xF3bertapl\xF3", "cin\xF3berv\xF6r\xF6s pattan\xE1sgomba", "cionizmus", "cip\xF3", "cip\u0151csat", "cip\u0151f\u0171z\u0151", "cip\u0151kefe", "cip\u0151kr\xE9m", "cip\u0151paszta", "cip\u0151talp", "cip\u0151\xFCzlet", "ciprus", "ciprusf\xFCrt", "cirbolya", "cirill \xE1b\xE9c\xE9", "cirk\xF3", "cirkul\xE1ci\xF3", "cirmoskalap\xFA pereszke", "ciszta", "citol\xF3gia", "citrom", "citromfa", "citromgal\xF3ca", "citromlemez\u0171 galambgomba", "citroms\xE1rga cs\xE9szegomb\xE1cska", "citromsavciklus", "citrus", "civilszervezet", "cob\xE1k", "c\xF3km\xF3k", "comb", "combt\xF6r\xE9s", "conchiglie", "copf", "corgi", "countryzene", "c\xF6l\xF6p", "c\xF6l\xF6pv\xE1r", "Creutzfeldt\u2013Jakob-szindr\xF3ma", "cucli", "cuki", "cukor", "cukorbevonat", "cukorgy\xE1r", "cukorjuhar", "cukorka\xFCzlet", "cukorny\xEDr", "cukorsz\xF3r\xF3", "cukr\xE1szat", "cukroz\xE1s", "cunami", "cuv\xE9e", "cs\xE1b", "cs\xE1b\xEDt\xF3", "csador", "csajkavir\xE1g", "cs\xE1kber\xE9nyi berkenye", "csakr\xE1szana", "csal\xE1danya", "csal\xE1dfenntart\xF3", "csal\xE1di h\xE1z", "csal\xE1dkutat\xE1s", "csal\xE1dos", "csal\xE1dtervez\xE9s", "csal\xE1n", "csal\xE1nki\xFCt\xE9s", "csal\xE1rds\xE1g", "csalhatatlans\xE1g", "csalimad\xE1r", "csal\xF3d\xE1s", "csal\xF3ka galambgomba", "csamorro", "csapad\xE9k", "csap\xE1gyf\xE9m", "csapategys\xE9g", "csapatkapit\xE1ny", "csapatparancsnok", "csapatt\xE1rs", "csapatvezet\u0151", "csapda\xE1ll\xEDt\xF3", "csapl\xE1rn\xE9", "csap\xF3ajt\xF3", "csaposleg\xE9ny", "csap\xF3z\xE1r", "csaptelep", "cs\xE1rd\xE1s", "cs\xE1sz\xE1rfa", "cs\xE1sz\xE1rkorona", "cs\xE1sz\xE1rmetsz\xE9s", "cs\xE1sz\xE1rs\xE1g", "cs\xE1sz\xE1rzsemle", "csatahaj\xF3", "csatangol\xE1s", "csatarep\xFCl\u0151g\xE9p", "csatavir\xE1g", "cs\xE1t\xE9s s\xE1s", "csatl\xF3s", "csatorna", "csatornah\xEDd", "csatornatiszt\xEDt\xF3", "csattan\xF3 maszlag", "csavar", "csavar\xE1s", "csavarg\xE1s", "csavargy\xE1r", "csavarh\xFAz\xF3", "csavarmenet", "csavarors\xF3", "csavart \xE9rp\xE1r", "csavartt\u0171j\u0171 feny\u0151", "cs\xE1v\xF3", "csecsebecse", "csecsem\u0151gondoz\xF3", "csecsem\u0151kor", "csecsem\u0151otthon", "csecsny\xFAlv\xE1ny", "cseh", "csekk", "csekksz\xE1mla", "csel\xE9dl\xE1ny", "cselekv\xE9s", "cselfog\xE1s", "csellista", "cselsz\xF6v\xE9ny", "csemege", "csemegebor", "csemegesz\u0151l\u0151", "csempe", "csemp\xE9sz\xE9s", "csend", "csendest\xE1rs", "csend\u0151rf\u0151hadnagy", "cseng\xE9s", "csengetty\u0171vir\xE1g", "cseng\u0151jelz\xE9s", "csepeg\xE9s", "cs\xE9pl\xE9s", "cs\xE9pl\u0151munk\xE1s", "cseppent\u0151\xFCveg", "cseppk\u0151barlang", "csep\u0171r\xE1g\xF3", "cserbenhagy\xE1s", "csereb\xE9lyeg", "cseredi\xE1k", "cserej\xE1t\xE9kos", "cser\xE9p\xE1ru", "cserepeslemez", "cser\xE9ptet\u0151", "cseresznyel\xE9gy", "cseresznyemag", "cseresznyepaprika", "csere\xFCzlet", "cserj\xE9s hanga", "cserj\xE9s s\xF3balla", "cserkesz", "cserk\xE9szfi\xFA", "cserk\xE9szruha", "csermelyaszat", "csernozjom", "csert\xF6lgy", "cserz\u0151m\u0171hely", "cs\xE9szegomba", "cs\xE9sz\xE9s csillaggomba", "cs\xE9ve", "cs\xE9za", "csib\xE9sz", "csicsa", "csicserilednek", "csics\xF6rke", "csigaker\xE9k", "csigasor", "csiger", "csigolyatest", "cs\xEDkbog\xE1r", "csikl\xF3", "csik\xF3farkf\xE9l\xE9k", "csikorg\xE1s", "cs\xEDkos j\xE1cintorchidea", "csik\xF3sbojt\xE1r", "cs\xEDkossp\xF3r\xE1j\xFA \xE1lszarvasgomba", "csilingel\xE9s", "csillag\xE1llat", "csillag\xE1szat", "csillag\xE9nek", "csillaggar\xE1zs", "csillaghaj\xF3", "csillagh\xFAr", "csillagjegy", "csillagkatal\xF3gus", "csillagk\xF6zi anyag", "csillagokta\xE9der", "csillagosm\xE1jmoha", "csillagpor", "csillagsoksz\xF6g", "csillagszegf\u0171f\xE9l\xE9k", "csillagt\xE9rk\xE9p", "csillagv\xE1ros", "csillagzat", "csill\xE1mpor", "csillapul\xE1s", "csill\xE9s", "csimp\xE1nz", "csincsilla", "csinos galambgomba", "csinos t\xE1rnicska", "cs\xEDny", "csip\xE1s", "cs\xEDp\xE9s", "csipetke", "csipkebogy\xF3lekv\xE1r", "csipkeharaszt", "csipkekend\u0151", "csipkeruha", "csipk\xE9slevel\u0171 pal\xE1stf\u0171", "cs\xEDp\u0151b\xE9l", "cs\xEDp\u0151fog\xF3", "cs\xEDp\u0151izom", "cs\xEDp\u0151nadr\xE1g", "cs\xEDp\u0151s pereszke", "cs\xEDp\u0151stej\u0171 keser\u0171gomba", "csipsz", "cs\xEDrak\xE9pes", "cs\xEDrasejt", "csirimoj\xF3", "csirke nuggets", "csirkegomba", "csirkemellfil\xE9", "csirkeragu", "csiszol\xE1s", "csiszol\xF3korong", "csitri", "csizmadia", "csizm\xE1s p\xF3kh\xE1l\xF3sgomba", "csoda", "csodabogy\xF3f\xE9l\xE9k", "csodaer\u0151", "csodafut\xF3", "csodahit", "csodal\xE9ny", "csodamalom", "csodaorsz\xE1g", "csodaszer", "csodatev\u0151", "csodav\xE1r\xE1s", "csoki", "csokol\xE1d\xE9dara", "csokol\xE1d\xE9gy\xE1r", "csokol\xE1d\xE9por", "csokor", "csomag", "csomagkihord\xF3", "csomagol\xF3anyag", "csomagtart\xF3", "csombor", "csomorika", "csom\xF3sbab", "cs\xF3nakh\xE1z", "cs\xF3nakos", "csonkag\xFAla", "csonkolt csillagkocka", "csontenyv", "csonth\xE1rtyagyullad\xE1s", "csontkollekci\xF3", "csontliszt", "csontos labirintus", "csontrak\xE1s", "csonts\xE9r\xFCl\xE9s", "csontt\xE1r", "csontv\xE1z", "csontzs\xEDr", "csoportbeoszt\xE1s", "csoportfelv\xE9tel", "csoportgy\u0151ztes", "csoportkapcsol\xF3", "csoportnyelv", "csoportos f\xFCl\u0151ke", "csoportos\xEDt\xE1s", "csoportsebess\xE9g", "csoporttulajdon", "csorb\xF3ka", "csordog\xE1l\xE1s", "csoroszlya", "cs\u0151", "cs\u0151csel\xE9k", "cs\u0151dbiztos", "cs\u0151d\xF6r", "cs\u0151dv\xE9delem", "cs\xF6kev\xE9ny", "cs\xF6kkent\xE9s", "cs\xF6m\xF6r", "cs\xF6p\xF6gtet\u0151", "cs\xF6pps\xE9g", "cs\xF6rgedez\xE9s", "cs\xF6rg\u0151dob", "cs\xF6rg\u0151sapka", "cs\u0151r\xF6s bogl\xE1rka", "cs\u0151r\xF6smoha", "cs\u0151sz\xE1jf\xE9k", "cs\u0151t\xFCkr\xF6z\xE9s", "cs\xF6vez\xE9s", "cs\xFAcsaj\xE1nlat", "cs\xFAcsforgalom", "cs\xFAcs\xEDv", "csucsorf\xE9l\xE9k", "cs\xFAcssebess\xE9g", "cs\xFAcssz\xEDnez\xE9s", "cs\xFAcstechnol\xF3gia", "cs\xFAfol\xE1s", "csuh\xE1s", "csukcs", "csukl\xF3\xEDz\xFClet", "csuklya", "csumi", "csupaszpereszke faj", "csuporkaf\xE9l\xE9k", "csusza", "csuszka", "cs\xFAsz\xF3m\xE1sz\xF3", "cs\xFAsztat\xE1s", "cs\xFAz", "cs\xFCd", "cs\xFCl\xF6k", "cs\xFCrhe", "daci", "dacsz\xF6vets\xE9g", "dadaizmus", "dagadts\xE1g", "dag\xE1lyoss\xE1g", "dagaszt\xF3g\xE9p", "dahl", "d\xE1k\xF3", "daktilus", "dalasi", "dalia", "dallam", "dalm\xE1t csenkesz", "dalm\u0171", "dalos", "dalszerz\u0151", "d\xE1maj\xE1t\xE9k", "damasztabrosz", "d\xE1mvad", "dand\xE1r", "dand\xE1szana", "dara", "darabb\xE9r", "darabka", "daraboss\xE1g", "dar\xE1l\xE1s", "dar\xE1lth\xFAs", "dar\xE1zsf\xE9szek", "dar\xE1zs\xF6lyv", "d\xE1rda", "d\xE1rd\xE1s", "darmstadtium", "daru", "darwinista", "datolyap\xE1lma", "d\xE1tum", "Davy-l\xE1mpa", "debella", "decentraliz\xE1ci\xF3", "decim\xE9ter", "d\xE9di", "d\xE9dnagyanya", "d\xE9dnagytata", "dedukci\xF3", "defetista", "definiendum", "degorzs\xE1l\xE1s", "dekadencia", "dekant\xE1l\xE1s", "dekolor", "dekorat\u0151r", "deleg\xE1ci\xF3", "d\xE9lel\u0151tt", "d\xE9lfeny\u0151", "d\xE9li kaurifeny\u0151", "d\xE9lid\u0151", "d\xE9lkelet", "delta", "d\xE9lvid\xE9k", "d\xE9lvid\xE9ki", "demencia", "demogr\xE1fia", "demokratizmus", "demonstr\xE1tor", "dendrol\xF3gia", "denzit\xE1s", "deport\xE1l\xE1s", "d\xE9r", "der\xE9kalj", "der\xE9khad", "der\xE9ksz\xF6g\u0171 h\xE1romsz\xF6g", "derelye", "deres p\xF3kh\xE1l\xF3sgomba", "deres vajvir\xE1g", "der\xEDt\u0151szer", "dermatol\xF3gus", "der\xFClts\xE9g", "Descartes-szorzat", "deszkaajt\xF3", "deszkab\xF3d\xE9", "deszkafal", "deszkakeret", "deszkamennyezet", "deszkapall\xF3", "deszkav\xE1g\xF3", "desztill\xE1ci\xF3", "detekt\xEDvfel\xFCgyel\u0151", "determin\xE1ns", "determinisztikus Turing-g\xE9p", "deton\xE1tor", "devalv\xE1ci\xF3", "deviza", "dextrin", "dezilluzionizmus", "d\xE9zsa", "d\xE9zsmagabona", "diadal", "diadalmenet", "diadikus felbont\xE1s", "diagnoszta", "diagon\xE1lis m\xE1trix", "di\xE1kcsere", "di\xE1kmozgalom", "di\xE1ks\xE1g", "dialektika", "dialektuskontinuum", "diapozit\xEDv", "dichot\xF3m rel\xE1ci\xF3", "dics\xE9ret", "dics\u0151s\xE9g", "didzseridu", "dietil-\xE9ter", "differenci\xE1l\xE1s", "differenci\xE1lhat\xF3s\xE1g", "difi", "digit\xE1lis el\u0151fizet\u0151i vonal", "digitoxin", "dihidroergotamin", "d\xEDjbeszed\u0151", "d\xEDjnyertes", "d\xEDjugrat\xE1s", "diktat\xFAra", "dilett\xE1ns", "dilidoki", "dim sum", "dimenzi\xF3t\xE9tel", "dinamika alapegyenlete", "dinamikus v\xE9letlen hozz\xE1f\xE9r\xE9s\u0171 mem\xF3ria", "dinam\xF3m\xE9ter", "dingi", "d\xEDnomd\xE1nom", "dinnyecs\u0151sz", "dinnyekaktusz", "di\xF3da", "di\xF3falev\xE9l", "di\xF3h\xE1l\xF3", "di\xF3kr\xE9m", "di\xF3p\xE1linka", "di\xF3sz\xE9n", "di\xF3term\xE9s", "di\xF3ver\u0151", "diplomata", "direkt bizony\xEDt\xE1s", "direktterm\u0151 \xEDz", "Dirichlet-sor", "d\xEDszalma", "d\xEDszdoktor", "d\xEDszegyenruha", "d\xEDszes vesep\xE1fr\xE1ny", "d\xEDszfelvonul\xE1s", "d\xEDsz\xEDt\xE9s", "diszjunkt halmaz", "d\xEDszkert", "diszk\xF3", "diszkoszhal", "diszkr\xE9t Fourier-transzform\xE1ci\xF3", "diszkr\xE9t matematika", "diszkvalifik\xE1l\xE1s", "d\xEDszletfest\u0151", "d\xEDszlev\xE9lf\xE9l\xE9k", "d\xEDszmenet", "diszn\xF3b\u0151r", "diszn\xF3fert\u0151", "diszn\xF3h\xF3lyag", "diszn\xF3l\xE1b", "diszn\xF3par\xE9jf\xE9l\xE9k", "diszn\xF3sajt", "diszn\xF3teny\xE9szt\xE9s", "diszn\xF3v\xE1s\xE1r", "d\xEDsz\u0151rs\xE9g", "d\xEDszp\xE9ld\xE1ny", "diszpr\xF3zium", "d\xEDszsz\xE1zad", "disszidens", "d\xEDsztag", "d\xEDszterem", "disztrib\xFAci\xF3", "diszulfid", "d\xEDszvend\xE9g", "divali", "divat", "divat\xE1ru\xFCzlet", "divatcip\u0151", "divatkell\xE9k", "divatmajom", "divattervez\xE9s", "diz\xE1jn", "diz\u0151z", "dob\xE1s", "dobf\xE9k", "dobog\xE1s", "dobos", "dobozdimenzi\xF3", "dobra", "dobver\u0151", "dodzsem", "dogma", "doh\xE1ny", "doh\xE1nyf\xFCst", "doh\xE1nytermel\u0151", "dohog\xE1s", "dokk", "doktor\xE1tus", "dokument\xE1ci\xF3", "dolgozat", "doli", "dolm\xE1ny", "d\xF3m", "domboldal", "dombor\xFA harmatgomba", "dominancia", "domin\xF3effektus", "don\xE1tor", "dongal\xE1b", "dopamin", "dorb\xE9zol\xE1s", "dorombol\xE1s", "Down-szindr\xF3ma", "d\xF3zis", "d\xF6f\xE9s", "d\xF6gc\xE9dula", "d\xF6gkesely\u0171", "d\xF6grov\xE1s", "d\xF6lyf\xF6ss\xE9g", "d\xF6ng\xF6l\u0151", "d\xF6nt\xE9shoz\xF3", "d\xF6nt\u0151b\xEDr\xF3", "d\xF6rzspap\xEDr", "dr\xE1gak\u0151ut\xE1nzat", "dr\xE1gul\xE1s", "dramaturg", "dr\xE9ncs\u0151", "dribli", "drogfogyaszt\xE1s", "dronabinol", "dr\xF3th\xE1l\xF3", "dr\xF3tk\xF6t\xE9lp\xE1lya", "druida", "du\xE1lis gr\xE1f", "dualizmus", "d\xFAc", "dud\xE1l\xE1s", "dudoros szagosgereben", "dugalj", "dugaszhely", "dughagyma", "dug\xF3", "dugv\xE1ny", "d\xFAla", "Duna-menti berkenye", "dundi", "dunyha", "duplik\xE1tor", "durdaf\u0171f\xE9l\xE9k", "durrdefekt", "d\xFAsvir\xE1g\xFA \xF6k\xF6rfarkk\xF3r\xF3", "duzzadt k\xF6les", "duzzog\xE1s", "d\xFChkit\xF6r\xE9s", "d\xFClmirigygyullad\xE1s", "d\u0171ne", "dzonkha", "dzseki", "dzsentlmen", "dzsesszzenekar", "dzsinn", "dzs\xF3ker", "dzsungel", "ebadta", "eb\xE9djegy", "eb\xE9dl\u0151sz\u0151nyeg", "\xE9ben", "ebgondolat", "ebk\xE1poszta", "ebnyelv\u0171f\u0171", "\xE9breszt\u0151", "ebsz\u0151l\u0151 csucsor", "\xE9ca", "ecetes bor", "ecetl\xE9gy", "ech\xF3", "ecset", "ed\xE9nyal\xE1t\xE9t", "\xE9desanya", "\xE9desgy\xF6k\xE9r", "\xE9desk\xF6m\xE9ny", "\xE9dess\xE9gbolt", "\xE9desv\xEDzi med\xFAza", "ediktum", "edz\u0151", "efavirenz", "\xE9gbolt", "eg\xE9r\xE1rpa", "\xE9gerfa", "eg\xE9rfog\xF3", "\xE9gerlev\xE9l sztr\xF3macs\xE9szegomba", "eg\xE9rpad", "\xE9gertoboz-cs\xE9szegomba", "\xE9g\xE9st\xE9r", "eg\xE9szr\xE9szf\xFCggv\xE9ny", "eg\xE9szs\xE9g\xFCgy", "\xE9get\u0151kemence", "\xE9ghajlatv\xE1ltoz\xE1s", "\xE9gimeszel\u0151", "egocentrizmus", "\xE9g\u0151fej", "egresm\xE1rt\xE1s", "\xE9gzeng\xE9s", "egzisztenci\xE1lis", "egybees\xE9s", "egybevet\xE9s", "egyed\xE1rus\xEDt\xE1s", "egyed-kapcsolat modell", "egy\xE9n", "egyen\xE9rt\xE9k\u0171s\xE9g", "egyeness\xE9g", "egyenetlens\xE9g", "egyenleg", "egyenl\u0151 halmazok", "egyenl\u0151s\xE9gjel", "egyenrang\xFA", "egyens\xFAly", "egyes sz\xE1m", "egyetem", "egyetemista", "egyez\xE9s", "egyeztet\xE9s", "egyforintos", "egyh\xE1z", "egyh\xE1zf\u0151", "egyh\xE1zszakad\xE1s", "egyiptomi", "egykedv\u0171s\xE9g", "egylevel\u0171 fodorkafeny\u0151", "egyny\xE1ri seprence", "egyny\xE1ri \xFCr\xF6m", "egys\xE9g", "egys\xE9gelemes gy\u0171r\u0171", "egys\xE9gk\xF6r", "egysejt\u0171", "egyszer\u0171 \xE9l", "egyszer\u0171s\xEDtett k\xEDnai", "egy\xFCgy\u0171s\xE9g", "egy\xFCttes", "egy\xFCttl\xE9t", "egyveleg", "\xE9h", "ehet\u0151 k\xEDnai krizant\xE9m", "\xE9h\xEDns\xE9g", "\xE9hs\xE9gt\xFCntet\xE9s", "\xE9j", "\xE9jjel", "\xE9jszaka", "ejt\u0151erny\u0151kupola", "\xE9kcsont", "\xE9kess\xE9g", "\xE9kezet", "\xE9kk\u0151", "ekloga", "\xE9kszer\xE9sz", "\xE9kszer\xFCzlet", "ekvivalencia", "\xE9l multiplicit\xE1sa", "elad\xF3", "el\xE1gaz\xE1s", "elaszticit\xE1s", "elbai n\u0151sz\u0151f\u0171", "elbizakodotts\xE1g", "elcsapat", "eld\xF6nthetetlens\xE9g", "elef\xE1nt", "elef\xE1ntb\u0151g\xE9s", "elef\xE1ntcsonttorony", "elef\xE1ntf\xFClp\xE1fr\xE1nyf\xE9l\xE9k", "elegancia", "el\xE9gedetlens\xE9g", "el\xE9gtelens\xE9g", "elektor", "elektrodinamika", "elektrokardiogr\xE1fia", "elektrol\xEDzis", "elektrom\xE1gneses interferencia", "elektrom\xE1gneses sz\xEDnk\xE9p", "elektromos \xE1ram", "elektromos er\u0151vonalak", "elektromos t\xF6lt\xE9s", "elektrom\u0171szer\xE9sz", "elektronegativit\xE1s", "elektronvolt", "\xE9lelem", "\xE9lelmiszer", "\xE9lelmiszergy\xE1rt\xE1s", "\xE9lelmiszerjegy", "\xE9lelmiszertudom\xE1ny", "elem", "elemi algebra", "elemi t\xF6lt\xE9s", "elemz\xE9s", "\xE9l\xE9nks\xE1rga galambgomba", "\xE9l\xE9nksz\xEDn\u0171 nyirokgomba", "elernyed\xE9s", "\xE9les bor", "\xE9leselm\xE9j\u0171s\xE9g", "\xE9lesl\xE1t\xE1s", "\xE9l\xE9st\xE1r", "\xE9letbiztos\xEDt\xE1s", "\xE9let\xE9v", "\xE9letforma", "\xE9letj\xE1rad\xE9k", "\xE9letk\xE9ptelens\xE9g", "\xE9letk\xF6z\xF6ss\xE9g", "\xE9letm\xF3d", "\xE9let\xF6r\xF6m", "\xE9letreg\xE9ny", "\xE9letszakasz", "\xE9lettapasztalat", "\xE9lett\xE9r", "\xE9letvesz\xE9ly", "elevens\xE9g", "elfajz\xE1s", "elfogadhat\xF3s\xE1g", "elfoglal\xE1s", "elfojt\xE1s", "\xE9lg\xE1rda", "elhagy\xE1s", "elhajt\xF3", "elhalkul\xE1s", "elhamarkodotts\xE1g", "elh\xE1r\xEDt\xE1s", "elhelyez\xE9s", "elh\xEDz\xE1s", "eligaz\xEDt\xE1s", "el\xEDr\xE1s", "el\xEDt\xE9l\xE9s", "elj\xE1r\xE1s", "\xE9ljenz\xE9s", "elk\xE1rhoz\xE1s", "elk\xE9ped\xE9s", "elkesered\xE9s", "elk\xE9sz\xFCl\xE9s", "elkorcsosul\xE1s", "elk\xF6telez\u0151d\xE9s", "elk\xFCl\xF6n\xEDt\xE9s", "ell\xE1t\xE1sbiztons\xE1g", "ellenakci\xF3", "ellen\xE1ramlat", "ellen\xE9rz\xE9s", "ellenhat\xE1s", "ellenjavaslat", "ellenkez\u0151", "ellenl\xF6k\xE9s", "ellen\u0151rz\u0151", "ellenreform\xE1ci\xF3", "ellens\xFAly", "ellensz\xE9l", "ellent\xE1mad\xE1s", "ellent\xE9telez\xE9s", "ellent\u0171z", "ellenz\xE9ki", "ellennyugta", "ellipszis kanonikus egyenlete", "elme", "elmebeteg", "elmegy\xF3gy\xE1szat", "elm\xE9let", "elm\xE9lyed\xE9s", "elmeorvos", "elmezavar", "elmozdul\xE1s", "elnapol\xE1s", "eln\xF6k", "eln\xF6kn\u0151", "elnyel\xE9si sz\xEDnk\xE9p", "elolt\xE1s", "eloszt\xF3", "elosztott sz\xE1m\xEDt\xE1sok", "el\u0151ad\xE1svezet\u0151", "el\u0151agy", "el\u0151boltosul\xE1s", "el\u0151d", "el\u0151\xE9rzet", "el\u0151\xE9tel", "el\u0151felt\xE9tel", "el\u0151futam", "el\u0151harcos", "el\u0151id\xE9ny", "el\u0151\xEDt\xE9let", "el\u0151jog", "el\u0151k\xE9p", "el\u0151k\xE9sz\xEDt\u0151", "el\u0151leg", "el\xF6lj\xE1r\xF3", "el\xF6lj\xE1r\xF3sz\xF3s eset", "el\u0151m\xE9rk\u0151z\xE9s", "el\u0151n\xE9zet", "el\u0151rag", "el\u0151rel\xE1t\xE1s", "el\u0151ret\xF6r\xE9s", "\xE9l\u0151sdi tin\xF3ru", "el\u0151seg\xEDt\xE9s", "\xE9l\u0151sk\xF6d\u0151", "el\u0151sz\xF3", "el\u0151takar\xE9koss\xE1g", "el\u0151v\xE1lad\xE9k", "el\u0151vigy\xE1zat", "el\u0151z\xE9s", "elp\xE1hol\xE1s", "elrabl\xE1s", "elrejt\u0151z\xE9s", "elrugaszkod\xE1s", "els\u0151 szem\xE9ly", "els\u0151bbs\xE9g", "els\u0151seg\xE9ly", "els\xF6t\xE9t\xEDt\xE9s", "elsz\xE1mol\xE1s", "elszeg\xE9ny\xEDt\xE9s", "elsziv\xE1rg\xE1s", "eltal\xE1l\xE1s", "elt\xE1vol\xEDt\xE1s", "elter\xEDt\xE9s", "elt\xE9velyed\xE9s", "eltol\xF3d\xE1s", "elt\xF6k\xE9lts\xE9g", "elutas\xEDt\xE1s", "el\xFCls\u0151 s\xEDpcsontizom", "elv\xE1gy\xF3d\xE1s", "elv\xE1laszt\xF3jel", "elvbar\xE1t", "elver\xE9s", "elvet\xE9s", "elvh\u0171s\xE9g", "elvonatkoztat\xF3 k\xE9pess\xE9g", "elvt\xE1rs", "elz\xE1r\xF3d\xE1s", "emancip\xE1ci\xF3", "ember\xE1br\xE1zol\xE1s", "ember\xE1radat", "emberbar\xE1t", "embercsemp\xE9szet", "embereml\xE9kezet", "emberfaj", "embergy\u0171l\xF6let", "emberis\xE9g", "emberk\xE9p", "ember\xF6l\xE9s", "emberrabl\xF3", "emberszeretet", "embert\xEDpus", "emberv\xE9r", "embriol\xF3gia", "emelked\xE9s", "emel\u0151", "emel\u0151csiga", "emel\u0151kar", "emel\u0151szerkezet", "\xE9melyg\xE9s", "em\xE9szt\u0151csatorna", "em\xE9szt\u0151rendszer", "emigr\xE1ns", "eml\xE9kanyag", "eml\xE9k\xE9rme", "eml\xE9kezetkies\xE9s", "eml\xE9kirat", "eml\xE9km\u0171", "eml\xE9k\xFCnnep", "eml\u0151mirigy", "emotikon", "emp\xEDriokriticizmus", "emulge\xE1l\xF3szer", "enci\xE1n", "end\xEDvia", "endometri\xF3zis", "endotoxin", "\xE9nekesk\xF6nyv", "\xE9nekiskola", "\xE9nekmond\xF3", "\xE9nektan\xEDt\xF3", "energia\xE1talak\xEDt\xE1s", "energiaforr\xE1s", "energiamennyis\xE9g", "energiapocs\xE9kol\xE1s", "energiatermel\xE9s", "engedelmess\xE9g", "engedetlens\xE9g", "engelmann-f\xFCgekaktusz", "enigma", "entaktog\xE9n", "entomol\xF3gia", "enzim", "enyhe galambgomba", "enyhes\xE9g", "enyves agg\xF3f\u0171", "enyves k\xEDgy\xF3gomba", "enyvesmag", "eol", "epe", "epe\xEDz\u0171 tin\xF3ru", "eperdzsem", "eperfagylalt", "eperlekv\xE1r", "epevezet\xE9k", "epidemiol\xF3gus", "epifiton", "epika", "epilepszia", "epit\xE1fium", "\xE9p\xEDt\xE9svezet\u0151", "\xE9p\xEDt\xE9szm\xE9rn\xF6kn\u0151", "\xE9p\xEDt\u0151\xE1llv\xE1ny", "\xE9p\xEDt\u0151k\u0151", "\xE9p\xEDt\u0151m\u0171v\xE9sz", "epiz\xF3d", "\xE9ps\xE9g", "\xE9p\xFClet\xE1tad\xE1s", "\xE9p\xFCletcsoport", "\xE9p\xFCletg\xE9p\xE9szet", "\xE9p\xFCletlakatos", "\xE9p\xFClettervez\u0151", "Eratoszthen\xE9sz szit\xE1ja", "\xE9rcel\u0151k\xE9sz\xEDt\xE9s", "\xE9rcp\xE9nz", "erdei b\xE9kaszem", "erdei cs\xE9szegomba", "erdei der\xE9ce", "erdei galambvir\xE1g", "erdei here", "erdei iszalag", "erdei mad\xE1rs\xF3ska", "erdei n\xE1dtippan", "erdei pajzsika", "erdei sikl\xF3", "erdei sz\xE9lf\u0171", "erdei tintagomba", "erdei ujjaskosbor", "erdei zsurl\xF3", "erdeik\xE1ka", "\xE9rdekelts\xE9g", "\xE9rdekl\u0151d\xE9s", "erd\xE9lyi csillagvir\xE1g", "erd\xE9lyi lednek", "\xE9rdem", "\xE9rdes bor", "\xE9rdes kutyacsal\xE1n", "erd\xE9szet", "erd\u0151irt\xE1s", "erd\u0151\u0151r", "Erd\u0151s-Szekeres-t\xE9tel", "erd\u0151t\u0171z", "eredeti", "eredm\xE9nyess\xE9g", "ereklyetart\xF3", "\xE9rem", "er\xE9ny", "erest\xF6nk\u0171 laskagomba", "\xE9retlens\xE9g", "\xE9retts\xE9gi", "\xE9rfonat", "\xE9rh\xE1rtya", "\xE9rintett", "\xE9rint\u0151", "erjed\xE9s", "erk\xE9ly\xFCl\xE9s", "erk\xF6lcs", "erlotinib", "erny\u0151", "erny\u0151mohaf\xE9l\xE9k", "erny\u0151s mad\xE1rtej", "erotika", "er\u0151", "er\u0151fesz\xEDt\xE9s", "er\u0151kar", "er\u0151ltet\xE9s", "er\u0151m\u0171v\xE9sz", "er\u0151s\xEDt\u0151", "er\u0151szakmentess\xE9g", "er\u0151szakszervezet", "er\u0151viszony", "\xE9rsek", "ersz\xE9nyesm\xE1jmoha", "\xE9rt\xE9k", "\xE9rt\xE9kcs\xF6kken\xE9s", "\xE9rt\xE9kemelked\xE9s", "\xE9rtekezlet", "\xE9rt\xE9kpap\xEDrsz\xE1mla", "\xE9rt\xE9kt\xF6bblet", "\xE9rtelmetlens\xE9g", "\xE9rtelmis\xE9gi", "\xE9rtetlens\xE9g", "\xE9rv\xE1g\xE1s", "\xE9rv\xE9nyes\xEDt\xE9s", "\xE9rz\xE9k", "\xE9rz\xE9kenys\xE9g", "\xE9rz\xE9kszerv", "\xE9rz\xE9stelen\xEDt\xE9s", "\xE9rz\xFClet", "es\xE9ly", "esem\xE9nyalgebra", "eserny\u0151tart\xF3", "esetlegess\xE9g", "esk\xFCdt", "esk\xFCtev\u0151", "es\u0151", "es\u0151cs\xF6pp", "es\u0151f\xFCgg\xF6ny", "es\u0151k\xF6peny", "es\u0151puska", "es\u0151v\xEDzgy\u0171jt\u0151", "est", "est\xE9ly", "Esthajnalcsillag", "\xC9szak", "\xE9szak-eur\xF3pai", "\xE9szaki kurd", "\xE9szaki s\xE1s", "\xE9szaki tejel\u0151gomba", "eszc\xE1jg", "eszkim\xF3", "eszk\xF6zhat\xE1roz\xF3 eset", "\xE9szl\xE9ny", "eszm\xE9letlens\xE9g", "eszm\xE9nyk\xE9p", "eszperant\xF3", "\xE9szrev\xE9tel", "essz\xE9ista", "\xE9szt", "\xE9szter", "esztergapad", "etakrinsav", "etap", "\xE9teldar\xE1l\xF3", "\xE9telm\xE9rgez\xE9s", "etet\u0151", "etikett", "etil\xE9ndiamin-tetraecetsav", "etimol\xF3gia", "eti\xF3p", "\xE9tkez\u0151", "etnika", "etnol\xF3gia", "\xE9tolaj", "\xE9trend", "\xE9tv\xE1gy", "euf\xF3ria", "euklideszi algoritmus", "euklideszi t\xE9r", "Euler-f\xFCggv\xE9ny", "Euler-Maclaurin k\xE9plet", "eur\xF3", "eur\xF3pai ciprus", "eur\xF3pai kunkor", "eur\xF3pai s\xFCnzan\xF3t", "eur\xF3pai", "\xE9v", "evang\xE9lium", "\xE9vel\u0151 szik\xE1rka", "evez\u0151", "evez\u0151sverseny", "\xE9vfolyamt\xE1rs", "\xE9vi k\xF6z\xE9ph\u0151m\xE9rs\xE9klet", "\xE9vkezdet", "evol\xFAci\xF3s", "ev\u0151eszk\xF6z", "\xE9vszak", "excentricit\xE1s", "exitus", "exobolyg\xF3", "expander", "expon\xE1l\xE1s", "exponenci\xE1lis f\xFCggv\xE9ny", "exportc\xE9g", "expresszionista", "extern\xE1lia", "extrapol\xE1ci\xF3", "extr\xE9mista", "ezer", "ezomeprazol", "ezredfordul\xF3", "ezredr\xE9sz", "ez\xFCst ak\xE1cia", "ez\xFCst juhar", "ez\xFCst\xE9rem", "ez\xFCstfeny\u0151", "ez\xFCstlakodalom", "ez\xFCstnem\u0171", "ez\xFCst\xF6s \xFAtif\u0171", "ez\xFCstpimp\xF3", "ez\xFCstsz\xE1las tintagomba", "ez\xFCstvir\xE1g", "fa\xE1g", "fa\xE1pol\xE1s", "faburkolat", "f\xE1c\xE1nlev\xE9l", "facip\u0151", "facsemete", "fadar\xE1zs", "faeper", "fafarag\xF3", "fafigura", "fagomba", "fagy\xE1ll\xF3 likacsosgomba", "fagy\xE1s", "fagyaszt\xF3berendez\xE9s", "fagyaszt\xF3szekr\xE9ny", "faggy\xFAcsom\xF3", "fagylalt", "fagyott \xEDz", "fagyreped\xE9s", "fah\xE1z", "fah\xE9jcserje", "fah\xE9jsz\xEDn\u0171 likacsosgomba", "faj", "f\xE1j\xE1s", "f\xE1jdalom", "fajdbogy\xF3", "fajelm\xE9let", "fajkevered\xE9s", "f\xE1jlrendszer", "fajsert\xE9s", "fajtalans\xE1g", "f\xE1jvir\xE1g", "fakataszter", "fakeresked\u0151", "fak\xEDr", "f\xE1klyaliliom", "fak\xF3 \xE1ltrifla", "fak\xF3 r\xE9tgomba", "fak\xF3 tejel\u0151gomba", "fak\xF3gomba", "fakop\xE1ncs", "fak\xF3s\xE1rga t\xF6lcs\xE9rgomba", "faktorcsoport", "fakult\xE1s", "fal\xE1b", "falanszter", "falat", "falazat", "falcsont", "falgyom", "fali lebeny", "falinapt\xE1r", "falka", "falm\xE1sz\xE1s", "fal\xF3", "fals\xEDk", "falukutat\xE1s", "falusz\xE9li libatop", "faluv\xE9g", "fametszet", "famunk\xE1s", "fanerozoikum", "f\xE1nlak\xF3 mohagomba", "fant\xE1zia", "fanyar bor", "fanyes\u0151oll\xF3", "f\xE1radalom", "f\xE1radt bor", "farakt\xE1r", "farcsont", "farkas kutyatej", "farkasalmaf\xE9l\xE9k", "farkas\xE9hs\xE9g", "farkaskutya", "farkas\xF6l\u0151 sisakvir\xE1g", "farkasvaks\xE1g", "farl\xE1mpa", "farmakol\xF3gia", "farmotor", "farost", "farsangh\xE9tf\u0151", "farzseb", "fas\xEDrt", "f\xE1skamra", "fasor", "fasz\xE1ll\xEDt\xE1s", "faszesz", "faszobor", "fatalista", "fatemplom", "fatorlasz", "fatusk\xF3", "f\xE1tyolka", "f\xE1tyolos t\u0151kegomb\xE1cska", "fatty\xFA", "fav\xE1g\xF3", "faxon-jukka", "fazekasagyag", "fazekaskorong", "faz\xE9kfa", "f\xE1zistol\xE1s", "febru\xE1r", "fecske", "fecskemad\xE1r", "fecsket\xE1rnics", "fed\xE9l", "fed\xE9lzetmester", "fedez\xE9k", "fed\u0151b\u0151r", "fed\u0151lap", "fed\u0151toll", "fegyelemtart\xE1s", "fegyenc", "fegyver\xE1llv\xE1ny", "fegyvercs\xF6rtet\xE9s", "fegyverforgat\xE1s", "fegyverhaszn\xE1lat", "fegyverkov\xE1cs", "fegyvernem", "fegyverrakt\xE1r", "fegyversz\xFCnet", "fegyvert\xE9ny", "fegyverzet", "feh\xE9r amur", "feh\xE9r csengetty\u0171gomba", "feh\xE9r cs\u0151gomba", "feh\xE9r fagy\xF6ngy", "feh\xE9r gal\xF3ca", "feh\xE9r here", "feh\xE9r keny\xE9r", "feh\xE9r liliom", "feh\xE9r m\xE1jvir\xE1g", "feh\xE9r ny\xE1r", "feh\xE9r \u0151zl\xE1bgomba", "feh\xE9r porcos-cs\xE9szegomb\xE1cska", "feh\xE9r s\xE1s", "feh\xE9r szam\xE1rkeny\xE9r", "feh\xE9r tintagomba", "feh\xE9r t\xF6rpe", "feh\xE9r t\xFCnd\xE9rr\xF3zsa", "feh\xE9r varj\xFAh\xE1j", "feh\xE9rb\xE1dog", "feh\xE9rcsel\xE9d", "feh\xE9res harangocskagomba", "feh\xE9res sz\u0151rgomba", "feh\xE9rfog\xFAmoha", "feh\xE9r\xEDt\u0151", "feh\xE9rjemolekula", "feh\xE9rlemez\u0171 f\xFCl\u0151ke", "feh\xE9rm\xE1jvir\xE1gf\xE9l\xE9k", "feh\xE9rorosz", "feh\xE9rr\xE9pa", "feh\xE9rszeg\xE9ly\u0171 porhany\xF3sgomba", "feh\xE9rtej\u0171 keser\u0171gomba", "feh\xE9rt\xF6nk\u0171 p\xF3kh\xE1l\xF3sgomba", "feh\xE9rv\xE9rsejt", "fejadag", "fejbiccent\u0151 izom", "fejcs\xF3v\xE1l\xE1s", "fejedelem", "fejel", "fejes sal\xE1ta", "fejetlens\xE9g", "fejfed\u0151", "fejg\xF6rcs", "fejhordoz\xE1s", "fejkend\u0151", "fejl\xE1mpa", "fejleszt\u0151", "fejmagass\xE1g", "fejm\u0171vel\xE9s", "fej\u0151guly\xE1s", "fejp\xE1nt", "fejsajt", "fejsz\xE1mol\xE1s", "fejtart\xE1s", "fejtet\u0151", "fejt\xF6r\xE9s", "fejv\xE1g\xE1s", "fejv\xE9tel", "fek\xE1lia", "f\xE9kerny\u0151", "fekete bors", "fekete ebsz\u0151l\u0151", "fekete h\xE1rs-koronggomba", "fekete k\xE9regt\xF6r\u0151gomba", "fekete lonc", "fekete must\xE1r", "fekete \xF6k\xF6rfarkk\xF3r\xF3", "fekete ribizli", "fekete \xFCr\xF6m", "feketed\u0151 galambgomba", "fekete\xE9l\u0171 csengetty\u0171gomba", "feketek\xE1v\xE9", "feket\xE9ll\u0151 f\u0171z", "feketemunka", "feketepikkelyes pereszke", "feket\xE9sbarna gy\xF6keresf\xFCl\u0151ke", "feket\xE9sk\xE9k pitykegomba", "feket\xE9sv\xF6r\xF6s galambgomba", "feketet\xF6r\xE9s", "feket\xE9z\u0151", "f\xE9knyom", "f\xE9ksz\xE1rny", "f\xE9k\xFAt", "fekv\u0151hely", "fekv\u0151t\xE1masz", "feladat", "felad\xF3vev\xE9ny", "fel\xE1ll\xE1s", "fel\xE1ll\xF3 iszalag", "f\xE9l\xE1rboc", "felbecs\xFCl\xE9s", "felbolydul\xE1s", "felbosszant\xE1s", "felbukkan\xE1s", "felcser\xE9l\xE9s", "felcsillan\xE1s", "felder\xEDt\u0151", "f\xE9ldr\xE1gak\u0151", "feled\xE9s", "f\xE9lelem", "feleleven\xEDt\xE9s", "felel\u0151ss\xE9gbiztos\xEDt\xE1s", "f\xE9lemelet", "fel\xE9p\xEDtm\xE9ny", "feles\xE9g", "felesleg", "felez\xE9s", "felfedez\xE9s", "felfekv\xE9s", "felford\xEDt\xE1s", "felf\xF6ld", "f\xE9lg\xF6mb", "f\xE9lgy\u0171r\u0171", "felhajt\xF3er\u0151", "felhang", "felhaszn\xE1lhat\xF3s\xE1g", "felhatalmaz\xE1s", "f\xE9lhom\xE1ly", "felh\u0151cske", "felh\u0151zet", "f\xE9lig ny\xEDlt intervallum", "felindul\xE1s", "felismer\xE9s", "felj\xE1r\xF3", "feljelent\xE9s", "felkari izom", "felkel\u0151", "felk\xE9sz\xFClts\xE9g", "felk\xF6sz\xF6nt\u0151", "fellegv\xE1r", "fellobban\xE1s", "felmeleged\xE9s", "felm\xE9rges\xEDt", "felmutat\xE1s", "feln\u0151tt", "felold\xE1s", "f\xE9l\xF3ra", "fel\xF6nt\xE9s", "felrak\xE1s", "f\xE9lremagyar\xE1z\xE1s", "fels\xE1l", "fels\xE9gs\xE9rt\xE9s", "felsorol\xE1s", "fels\u0151 g\xE9geideg", "fels\u0151bbs\xE9g", "fels\u0151oktat\xE1s", "fels\u0151szorb", "f\xE9lsug\xE1r", "felszabadul\xE1s", "felsz\xE1mol\xE1s", "felszerelts\xE9g", "felsz\xEDt\xE1s", "felsz\xF3lal\xE1s", "felsz\xF3l\xEDt\xE1s", "feltal\xE1l\xE1s", "feltart\xF3ztat\xE1s", "f\xE9lt\xE9s", "felt\xE9telez\xE9s", "felt\u0171n\xE9s", "fel\xFCgyelet", "fel\xFCgyel\u0151s\xE9g", "fel\xFClj\xE1r\xF3", "felv\xE1g\xE1s", "felv\xE9tel", "Felvid\xE9k", "felvil\xE1gosul\xE1s", "felvon\xF3akna", "f\xE9mcsavar", "feminista", "f\xE9mjelz\xE9s", "f\xE9mmunk\xE1s", "f\xE9mp\xE9nz", "fenciklidin", "fen\xE9klemez", "fenfluramin", "fennhat\xF3s\xE1g", "fenntarthatatlans\xE1g", "fenolszag\xFA csiperke", "fenot\xEDpus", "fens\xE9g", "f\xE9nybar\xE1zda", "f\xE9nyelhajl\xE1s", "feny\xE9rgamandor", "f\xE9nyes badargomba", "f\xE9nyes t\u0151kegomba", "f\xE9ny\xE9v", "feny\xEDt\xE9s", "f\xE9nykard", "f\xE9nyk\xE9p\xE9szn\u0151", "f\xE9nyk\xE9ptart\xF3", "f\xE9nyl\u0151 zsoltina", "f\xE9nym\xE9r\u0151", "feny\u0151erdei pr\xE9mes-cs\xE9szegomba", "feny\u0151-galambgomba", "feny\u0151-k\xE9rgestapl\xF3", "feny\u0151-lemezestapl\xF3", "feny\u0151-mirigygomba", "feny\u0151rig\xF3", "feny\u0151tin\xF3ru", "f\xE9nysark\xEDt\xE1s", "f\xE9nytan", "fenyves", "f\xE9rcmunka", "ferd\xE9n szimmetrikus m\xE1trix", "f\xE9reg", "f\xE9regny\xFAlv\xE1ny", "f\xE9rfi nemi szerv", "f\xE9rfiarck\xE9p", "f\xE9rfib\xFCszkes\xE9g", "f\xE9rfiember", "f\xE9rfifoglalkoz\xE1s", "f\xE9rfiing", "f\xE9rfikeszty\u0171", "f\xE9rfimunka", "f\xE9rfin\xE9v", "f\xE9rfirokon", "f\xE9rfisz\xE9ps\xE9g", "f\xE9rj", "fermion", "f\xE9r\u0151hely", "fert\u0151tlen\xEDt\xE9s", "fert\u0151z\u0151 betegs\xE9g", "fest\xE9kold\xF3szer", "festm\xE9ny", "fest\u0151 pipit\xE9r", "fest\u0151anyag", "fest\u0151m\u0171v\xE9szet", "f\xE9s\u0171s galambgomba", "f\xE9s\u0171sfon\xF3", "f\xE9szekalja", "feszes \xEDz\xFClet", "fesz\xEDt\u0151abroncs", "f\xE9szkes csillaggomba", "feszm\xE9r\u0151", "fesz\xFClet", "fesz\xFClts\xE9gteremt\u0151", "feudalizmus", "fia", "fiatalasszony", "fiataloss\xE1g", "Fibonacci-sorozat", "fics\xFAr", "figyelem", "figyel\xE9s", "figyel\u0151", "fikusz", "filatelista", "filharmonikus", "filiszteus", "filmakad\xE9mia", "filmbemutat\xF3", "filmdr\xE1ma", "filmfelirat", "filmforgat\xF3k\xF6nyv", "filmh\xE9t", "filmkocka", "filmm\u0171v\xE9sz", "filmnyom\xF3", "film\xF6tlet", "filmst\xFAdi\xF3", "filmszcen\xE1rium", "filmsz\xEDnh\xE1z", "filmtekercs", "filmv\xE1ros", "filmvet\xEDt\u0151", "filol\xF3gia", "filoz\xF3fus", "fin\xE1ncminiszter", "finn", "finom\xEDt\xF3", "finomszesz", "fi\xF3k\xE1ruda", "fi\xF3kos szekr\xE9ny", "fior di latte", "firk\xE1lm\xE1ny", "fitnesz", "fitym\xE1l\xE1s", "fi\xFAtestv\xE9r", "fizet\xE9semel\xE9s", "fizet\u0151pinc\xE9r", "fizikai mennyis\xE9g", "fizikum", "fiziol\xF3gia", "fizu", "flaming\xF3", "flam\xF3", "Flanzy-elj\xE1r\xE1s", "flekk", "flepni", "fl\xF3dni", "florisztikus", "flottat\xE1maszpont", "flumazenil", "fluoreszcencia", "flupentixol", "focaccia", "focista", "fodorkafeny\u0151", "fodr\xE1sz", "fodr\xE1szseg\xE9d", "fodros k\xE1posztagomba", "fodros papsapkagomba", "fodroz\xF3d\xE1s", "fogad\xE1s", "fogad\xF3irod\xE1s", "fogad\xF3szoba", "fogalom", "foganty\xFA", "fog\xE1s", "fogasker\xE9k", "fogass\xFCll\u0151", "fogathajt\xE1s", "fogcsikorgat\xE1s", "fogf\xE1j\xE1s", "fogh\xE1zigazgat\xF3", "fog\xEDny", "fogkefefa", "foglal\xE1s", "foglalkoztatott", "fog\xF3", "fogolybogy\xF3", "fogolyt\xE1bor", "fogs\xE1g", "fogszab\xE1lyoz\xE1s", "fogt\xF6m\xE9s", "fogzom\xE1nc", "fogyaszt\xF3szer", "fogyatkoz\xE1s", "fojtogat\xE1s", "f\xF3kavad\xE1sz", "fokhagyma", "fokhagymagomba", "fokm\xE9r\u0151", "fokoz\xE1s", "f\xF3kusz", "folkl\xF3r", "folt", "foltos f\xFCl\u0151ke", "foltos ny\xE1lk\xE1sgomba", "foltos ujjaskosbor", "folttiszt\xEDt\xF3", "folyad\xE9kmennyis\xE9g", "folyad\xE9kvesztes\xE9g", "folyamatos mell\xE9kn\xE9vi igen\xE9v", "folyam\u0151r", "foly\xF3\xE1gy", "folyom\xE1ny", "foly\xF3n\xE9v", "foly\xF3szab\xE1lyoz\xE1s", "foly\xF3v\xF6lgy", "folytonos f\xFCggv\xE9ny", "fon\xE1l", "fonat", "fondorlat", "fonoda", "font", "for-ciklus", "ford\xEDtott lengyel jel\xF6l\xE9s", "fordulatsz\xE1mm\xE9r\u0151", "forg\xE1cs", "forgalom", "forgalomszab\xE1lyoz\xE1s", "forgat\xF3kar", "forg\xF3ajt\xF3", "forg\xF3sz\xE9l", "forint", "form\xE1l\xE1s", "formalizmus", "formas\xE1g", "formoterol", "forrad\xE1s", "forr\xE1sanyag", "forr\xE1skritika", "forr\xE1snyelv", "forraszt\xE1s", "forr\xE1z\xE1s", "forr\xF3s\xE1g", "fortyog\xE1s", "foszfor", "foszl\xF3slevel\u0171 p\xE1lmaliliom", "fosztogat\xE1s", "fotel\xE1gy", "fotogr\xE1fus", "foton", "fot\xF3s", "Fourier-egy\xFCtthat\xF3", "Fourier-transzform\xE1ci\xF3", "f\u0151", "f\u0151bej\xE1rat", "f\xF6ci", "f\xF6deralizmus", "f\u0151eml\u0151s", "f\u0151fel\xFCgyel\u0151", "f\u0151hadisz\xE1ll\xE1s", "f\u0151herceg", "f\u0151ide\xE1l", "f\u0151inkviz\xEDtor", "f\u0151isp\xE1n", "f\u0151kapit\xE1ny", "f\u0151komornyik", "f\u0151k\xF6nyv", "f\xF6l", "f\xF6ldad\xF3", "f\xF6ldbenterm\u0151 here", "f\xF6ld\xE9hs\xE9g", "f\xF6ldfoglal\xE1s", "f\xF6ldgoly\xF3", "f\xF6ldhitel", "f\xF6ldi kacskagomba", "f\xF6ldialma", "f\xF6ldik\xFCrt", "f\xF6ldindul\xE1s", "f\xF6ldk\xE9reg", "f\xF6ldm\xE9r\u0151", "f\xF6ldm\u0171vel\xE9s", "f\xF6ldnyelv", "f\xF6ldp\xE1t", "f\xF6ldrajztud\xF3s", "f\xF6ldreng\xE9stan", "f\xF6lds\xE1v", "f\xF6ldtan", "f\xF6ldtol\xF3 galambgomba", "f\xF6ldv\xE1r", "f\u0151leg", "f\u0151m\xE9rn\xF6k", "f\u0151nemes", "f\u0151n\xE9vk\xE9pz\u0151", "f\u0151nixmad\xE1r", "f\u0151n\xF6kn\u0151", "f\u0151orvos", "f\u0151pap", "f\u0151pecs\xE9t\u0151r", "f\u0151posta", "f\u0151rendez\u0151", "f\xF6rtelem", "f\u0151szak\xE1cs", "f\u0151szezon", "f\u0151te", "f\u0151titk\xE1r", "f\u0151\xFAr", "f\u0151\xFCgy\xE9szs\xE9g", "f\u0151v\xE1ros", "f\u0151vil\xE1gos\xEDt\xF3", "f\u0151zet", "f\u0151z\u0151ed\xE9ny", "f\u0151z\u0151kan\xE1l", "f\u0151z\u0151l\xE9", "fr\xE1jer", "franc", "francia szarvasgomba", "franciak\xF6nyv", "franciaperje", "francium", "fraser-jegenyefeny\u0151", "fr\xE1zis", "fresk\xF3", "frigidit\xE1s", "frissess\xE9g", "fr\xEDz", "Frobenius-csoport", "front\xE9rz\xE9kenys\xE9g", "frontvonal", "frusztr\xE1ci\xF3", "fugakereszt", "fukszia", "fullad\xE1s", "fundamentalista", "funkcion\xE1lanal\xEDzis", "funkcionalit\xE1s", "f\xFAr\xE1s", "f\xFAria", "furm\xE1nyos", "f\xFAr\xF3akna", "f\xFAr\xF3torony", "fuszekli", "fut\xE1r", "futball", "futballhulig\xE1n", "futballm\xE9rk\u0151z\xE9s", "futballrajong\xF3", "fut\xF3bicikli", "fut\xF3mad\xE1r", "fut\xF3pad", "fut\xF3sz\xE1r", "fut\xF3verseny", "futurol\xF3gia", "fuvard\xEDj", "fuvaroz\xF3", "fuvol\xE1s", "f\xFAzi\xF3s reaktor", "f\xFCgefa", "f\xFCggelem", "f\xFCggetlens\xE9g", "f\xFCgg\u0151\xE1gy", "f\xFCgg\u0151leges aszimptota", "f\xFCgg\u0151\xF3n", "f\xFCggv\xE9ny konvol\xFAci\xF3ja", "f\xFCggv\xE9nykompoz\xEDci\xF3", "f\xFCl", "f\xFClcimpa", "f\xFCldug\xF3", "f\xFCles f\u0171z", "f\xFClesbagoly", "f\xFClfoly\xE1s", "f\xFClgyullad\xE1s", "f\xFCljegy", "f\xFClledts\xE9g", "f\xFCl\u0151keront\xF3 kocsonyagomba", "f\xFClsz\u0151rzet", "f\xFClt\u0151", "f\xFClv\xE9d\u0151", "f\u0171ny\xEDr\xF3", "f\xFCrd\u0151cip\u0151", "f\xFCrd\u0151\xE9vad", "f\xFCrd\u0151id\xE9ny", "f\xFCrd\u0151kabin", "f\xFCrd\u0151k\xFAra", "f\xFCrd\u0151nadr\xE1g", "f\xFCrd\u0151ruha", "f\xFCrd\u0151szoba", "f\xFCrd\u0151telep", "f\xFCrd\u0151v\xEDz", "f\u0171r\xE9szes f\u0171z", "f\u0171r\xE9szizom", "f\u0171r\xE9sztelep", "f\xFCrj", "f\xFCrt", "f\xFCrt\xF6s gy\u0171r\u0171vir\xE1g", "f\xFCrt\xF6s salamonpecs\xE9t", "f\xFCst", "f\xFCstcs\u0151", "f\xFCstg\xE1z", "f\xFCstike", "f\xFCstkarika", "f\xFCstm\xE9rgez\xE9s", "f\xFCstp\xE1ntlika", "f\xFCstsz\u0171r\u0151", "f\u0171szerbolt", "f\u0171szerkever\xE9k", "f\u0171szerpaprika", "f\u0171t\xE9s", "f\u0171t\u0151h\xE1z", "f\xFCttym\u0171v\xE9sz", "f\xFCves ter\xFClet", "f\u0171z", "f\xFCz\xE9r", "f\xFCz\xE9rtekercs", "f\u0171zfa-k\xE9regt\xF6r\u0151gomba", "f\u0171zlevel\u0171 k\xF6rte", "f\u0171zlevel\u0171 \u0151szir\xF3zsa", "f\u0171z\u0151", "gabardin", "gabonabegy\u0171jt\xE9s", "gabonacs\xEDra", "gabonafejadag", "gabonafogyaszt\xE1s", "gabonagoly\xF3", "gabonak\xE9szlet", "gabonamag", "gabonamoly", "gabonapadl\xE1s", "gabonarakt\xE1r", "gabonaszem", "gabonatermel\u0151", "gabonaterm\u0151", "gabonavet\xE9s", "gagauz", "gajapippali", "galacsinhajt\xF3", "galagonyalevel\u0171 juhar", "galambbegy", "galambfa", "galambpereszke", "galandf\xE9reg", "galeof\xF3bia", "g\xE1lic", "gall\xE9r", "gallicizmus", "gallopamil", "galopp", "gallyon\xFCl\u0151 r\xE9teggomba", "ganaj", "ganda", "gan\xE9j-porhany\xF3sgomba", "garab\xF3", "garas", "gar\xE1zdas\xE1g", "garb\xF3", "gardr\xF3b", "garn\xE9lar\xE1k", "garzonlak\xE1s", "gasztroenterol\xF3gia", "gasztron\xF3mus", "g\xE1tl\xE1s", "g\xE1t\u0151r", "gatya", "Gauss-elimin\xE1ci\xF3", "Gauss-Newton-m\xF3dszer", "gaz", "g\xE1z\xE1larc", "g\xE1zcs\u0151", "gazdak\xF6r", "gazdas\xE1gf\xF6ldrajz", "gazdas\xE1gi n\xF6veked\xE9s", "gazdasszony", "gazella", "g\xE1zfogyaszt\xE1s", "g\xE1zh\xE1l\xF3zat", "g\xE1zk\xE9pz\u0151d\xE9s", "g\xE1zl\xF3", "g\xE1znyom\xE1s", "g\xE1z\xF3ri\xE1s", "g\xE1zt\xE1mad\xE1s", "g\xE1zvezet\xE9k", "gebe", "gefitinib", "g\xE9gefed\u0151", "g\xE9get\xFCkr\xF6z\xE9s", "gelencs\xE9r", "gemfibrozil", "g\xE9m\xFCst\xF6kgomba", "gener\xE1ljav\xEDt\xE1s", "gener\xE1tor", "gener\xE1torrendszer", "gengszter", "g\xE9nk\xE9szlet", "g\xE9nseb\xE9szet", "genny", "geofizikus", "geol\xF3gia", "geometriai multiplicit\xE1s", "geotermikus", "gep\xE1rd", "g\xE9p\xE9sz", "g\xE9pfegyver", "g\xE9pi ford\xEDt\xE1s", "g\xE9p\xEDr\xE1s", "g\xE9pj\xE1rm\u0171", "g\xE9pkarab\xE9ly", "g\xE9pkocsilakatos", "g\xE9plakatos", "g\xE9ppisztoly", "g\xE9psonka", "g\xE9pterem", "g\xE9rbics", "gerecsei berkenye", "gerencs\xE9r", "gerezna", "gerillah\xE1bor\xFA", "gerincess\xE9g", "gerincoszlop", "gerinccsatorna", "gerle", "germanista", "gerontol\xF3gia", "gesztenye \xFCregestin\xF3ru", "gesztenyebarna \xFCregestin\xF3ru", "gesztenyemassza", "gesztenyetorta", "g\xE9vagomba", "g\xE9zeng\xFAz", "gibbon", "gigab\xE1jt", "gikszer", "gimi", "gimnof\xF3bia", "ginekol\xF3gus", "ginzeng", "gipszk\xF6t\xE9s", "git\xE1r", "Givens-forgat\xE1s", "glasz\xE9keszty\u0171", "gleccserbogl\xE1rka", "glicerinerjed\xE9s", "globaliz\xE1ci\xF3", "glossz\xE1tor", "gn\xE9tum", "go", "gocsman", "goji", "g\xF3lar\xE1ny", "golfj\xE1t\xE9kos", "golfnadr\xE1g", "golgota", "g\xF3lkir\xE1ly", "g\xF3lvonal", "g\xF3lyab\xE1l", "g\xF3lyamad\xE1r", "goly\xF3", "goly\xF3s eukaliptusz", "goly\xF3stollbet\xE9t", "gomb", "gombaf\u0171level\u0171 k\u0151t\xF6r\u0151f\u0171", "gombalekv\xE1r", "gombapor", "gomb\xE1sz", "gombateny\xE9szt\u0151", "gomb\xF3c", "gombost\u0171", "gomolyat\xFAr\xF3", "gondatlans\xE1g", "gondolat", "gondolatk\xEDs\xE9rlet", "gondolatszabads\xE1g", "gondolkod\xF3", "gondoss\xE1g", "gondvisel\xE9s", "gonosztev\u0151", "g\xF3rcs\u0151", "gorilla", "gourde", "G\xF6del els\u0151 nemteljess\xE9gi t\xE9tele", "g\xF6d\xF6rk\xE9s f\xE1sgereben", "g\xF6l\xF6ncs\xE9r", "g\xF6mbfel\xFClet", "g\xF6mb\xF6lyded sisakgomba", "g\xF6mb\xF6smoha", "g\xF6nc", "g\xF6ngy\xF6leg", "g\xF6rcs", "g\xF6r\xE9nyez\xE9s", "g\xF6rkorcsolya", "g\xF6r\xF6g jegenyefeny\u0151", "g\xF6r\xF6gdinnye", "g\xF6r\xF6gtekercs", "g\u0151te", "g\u0151zeke", "g\u0151zfelh\u0151", "g\u0151zg\xE9p", "g\u0151zhenger", "g\u0151zkaz\xE1n", "g\u0151zmosoda", "g\u0151zt\xE9r", "gr\xE1dics", "gr\xE1f \xE9lkromatikus sz\xE1ma", "gr\xE1f komponense", "gr\xE1f metsz\xE9si sz\xE1ma", "gr\xE1f sz\xEDnez\xE9si sz\xE1ma", "gr\xE1f", "grafika", "grafit", "grafol\xF3gia", "gramofon", "gr\xE1n\xE1t", "gr\xE1n\xE1tt\xF6lcs\xE9r", "granul\xE1tum", "grav\xEDroz\xF3", "gravit\xE1ci\xF3s v\xF6r\xF6seltol\xF3d\xE1s", "gr\xE9pfr\xFAtl\xE9", "grillcsirke", "grimasz", "grizzly", "gr\xF6nlandi", "grupoid", "guarani", "guatemalai p\xE1lmaliliom", "gubanc", "gugli", "g\xFAlas\xE1tor", "gulya", "guly\xE1sh\xFAs", "gumiar\xE1bikum", "gumicsizma", "gumifa", "gumilabda", "gumipitypang", "gumiszil", "gum\xF3", "gum\xF3s hereront\xF3gomba", "gum\xF3s pereszke", "gum\xF3s susulyka", "g\xFAny", "g\xFAnyvers", "gur\xEDt\xE1s", "gusztus", "g\xFAz", "g\xFCl\xFCszem", "g\xFCrc\xF6l\xE9s", "gyakori f\xF6ldilaska", "gyakorlat", "gyakornok", "gyalog\xE1tkel\u0151hely", "gyaloghint\xF3", "gyalogos", "gyalogt\xFAra", "gyalu", "gy\xE1m", "gyanta", "gyan\xFA", "gyapjas cs\xFCdf\u0171", "gyapjas mozaikgomba", "gyapjas susulyka", "gyapjaskalap\xFA susulyka", "gyapj\xFA", "gyapj\xFAsapka", "gyapj\xFAzs\xEDr", "gyapotfa", "gyapot\xFCltetv\xE9ny", "gy\xE1r\xE9p\xFClet", "gy\xE1rkapu", "gyarmatbirodalom", "gy\xE1rt\xE1s", "gy\xE1rt\xE1svezet\u0151", "gy\xE1rv\xE1ros", "gy\xE1szcinc\xE9r", "gy\xE1sz\xE9v", "gy\xE1szh\xEDr", "gy\xE1szjelent\xE9s", "gy\xE1szkocsi", "gy\xE1szmagyar", "gy\xE1szn\xE9p", "gy\xE1szruha", "gy\xE1szsz\xF3noklat", "gy\xE1szvit\xE9z", "gy\xE1vas\xE1g", "gy\xE9k\xE9nysz\u0151nyeg", "gy\xE9m\xE1ntlakodalom", "gyengeelm\xE9j\u0171s\xE9g", "gyep", "gyepi likacsosgomba", "gyepl\u0151", "gyep\u0171b\xFCkk\xF6ny", "gyerek\xE1gy", "gyerekkopors\xF3", "gyerekorvos", "gyermek\xE1gy", "gyermekb\xE1ntalmaz\xE1s", "gyermekcip\u0151", "gyermek\xE9tkeztet\xE9s", "gyermekgondoz\xF3", "gyermekgy\xF3gy\xE1szat", "gyermekker\xE9kp\xE1r", "gyermekkor", "gyermekm\xE9ret", "gyermeknevel\xE9s", "gyermekparal\xEDzis", "gyermekruha", "gyermeksz\xE1j", "gyermeksz\xFCl\xE9s", "gyertya", "gyerty\xE1n k\xE9regfek\xE9ly-gomb\xE1cska", "gyerty\xE1nlevel\u0171 juhar", "gy\xE9rvir\xE1g\xFA csetk\xE1ka", "gy\xEDkhagyma", "gyilkos csomorika", "gy\xF3gy\xE1sz", "gy\xF3gyer\u0151", "gy\xF3gygomba", "gy\xF3gy\xEDt\xE1s", "gy\xF3gyn\xF6v\xE9ny\xE1rus", "gy\xF3gyszeradagol\xE1s", "gy\xF3gyszergy\xE1rt\xE1s", "gy\xF3gyszerk\xE9sz\xEDtm\xE9ny", "gy\xF3gyszerm\xE9rgez\xE9s", "gy\xF3gytea", "gyolcs", "gyommoha", "gyomor\xE9g\xE9s", "gyomorhurut", "gyomorr\xE1k", "gy\xF3n\xE1s", "gyors\xE1ru", "gyorseszterga", "gyorsf\u0151z\u0151", "gyors\xEDr\xE1s", "gyors\xEDt\xE1s", "gyorskorcsoly\xE1z\xF3", "gyorsul\xE1sm\xE9r\u0151", "gyorsvonat", "gy\xF6keres cs\xE9szegomba", "gy\xF6keres porhany\xF3sgomba", "gy\xF6k\xE9rrendszer", "gy\xF6k\xF6cske", "gy\xF6kvon\xE1s komplex sz\xE1mb\xF3l", "gy\xF6mb\xE9rgy\xF6k\xE9r", "gy\xF6ngy", "gy\xF6ngybagoly", "gy\xF6ngyhal\xE1szat", "gy\xF6ngy\xF6s tejel\u0151gomba", "gy\xF6ngyty\xFAk", "gy\xF6ngyvir\xE1gfaf\xE9l\xE9k", "gy\xF6rgymoha", "gy\u0151zelem", "gy\xFAelegy", "gyufasz\xE1l", "gy\xFAjt\xF3bomba", "gy\xFAjt\xF3hat\xE1s", "gy\xFAjtov\xE1nyf\u0171", "gy\xFAr\xE1s", "gy\xFAr\xF3deszka", "gy\u0171jt\u0151", "gy\u0171jt\u0151\xEDv", "gy\xFClekezet", "gy\u0171l\xE9sterem", "gy\xFCm\xF6lcs", "gy\xFCm\xF6lcsfa", "gy\xFCm\xF6lcsjoghurt", "gy\xFCm\xF6lcskonzerv", "gy\xFCm\xF6lcsleves", "gy\xFCm\xF6lcspr\xE9s", "gy\xFCm\xF6lcst\xE1ny\xE9r", "gy\xFCm\xF6lcstermeszt\xE9s", "gy\u0171r\u0151d\xE9s", "gy\u0171r\u0171homomorfizmus", "gy\u0171r\u0171s pereszke", "gy\u0171r\u0171s tusk\xF3gomba", "gy\u0171r\u0171vir\xE1g", "habarcs", "habitus", "h\xE1borg\xE1s", "h\xE1bor\xFAs\xE1g", "habszegf\u0171", "habz\xF3bor", "hacsek", "hadapr\xF3d", "hadb\xEDr\xF3", "hader\u0151", "hadi\xE1llapot", "hadifelszerel\xE9s", "hadifogolyt\xE1bor", "hadig\xE9p", "hadij\xE1t\xE9k", "hadikommunizmus", "hadi\xF6vezet", "hadisarc", "hadisz", "haditan\xE1cs", "haditett", "haditud\xF3s\xEDt\xF3", "hadj\xE1rat", "hadm\xE9rn\xF6k", "hadnagy", "hadoszt\xE1lyparancsnok", "hadsereg", "hadsz\xEDnt\xE9r", "had\xFAr", "had\xFCzenet", "hadvisel\xE9s", "h\xE1g\xF3", "hagymaburok", "hagymaf\xFCz\xE9r", "hagymakupola", "hagymapikkely", "hagymaszag\xFA tars\xF3ka", "hagymat\xF6nk\u0171 p\xF3kh\xE1l\xF3sgomba", "hagyom\xE1nytisztel\u0151", "h\xE1j", "haj\xE1pol\xF3", "hajb\xF3bita", "hajcsat", "hajdina", "hajd\xEDsz", "hajd\xFAt\xE1nc", "hajfest\xE9s", "hajf\xFCrt", "hajgy\xF6k\xE9rf\xE1j\xE1s", "hajhull\xE1m", "hajkefe", "hajkoszor\xFA", "hajlam", "hajl\xE9k", "hajl\xE9konys\xE1g", "hajlev\xE1g\xE1s", "hajmos\xF3", "hajnalmad\xE1r", "hajn\u0151veszt\u0151", "haj\xF3", "haj\xF3\xE1llom\xE1s", "haj\xF3der\xE9k", "haj\xF3felvonul\xE1s", "haj\xF3forgalom", "haj\xF3f\u0171t\u0151", "haj\xF3had", "haj\xF3jav\xEDt\xF3", "haj\xF3k\xE9m\xE9ny", "haj\xF3k\xF6r\xFAt", "haj\xF3l\xE1mpa", "haj\xF3orr", "haj\xF3pinc\xE9r", "haj\xF3s", "haj\xF3sinas", "haj\xF3szak\xE1cs", "haj\xF3sszem\xE9lyzet", "haj\xF3test", "haj\xF3\xFAt", "haj\xF3zhat\xF3s\xE1g", "hajs\xE1tor", "hajszalag", "hajsz\xE1lgy\xF6k\xE9r", "hajt\xE1ny", "hajt\xF3anyag", "hajt\xF3kar", "hajt\xF3sz\xEDj", "hajt\u0171kanyar", "hajv\xE1laszt\xE9k", "hajzat", "hakni", "halacsk\xE1z\xE1s", "halad\xF3", "hal\xE1lfej", "hal\xE1lgy\xE1ros", "hal\xE1lkanyar", "hal\xE1lnem", "hal\xE1loz\xE1s", "hal\xE1lsoromp\xF3", "hal\xE1lugr\xE1s", "hal\xE1lveszedelem", "hal\xE1nt\xE9k", "halast\xF3", "hal\xE1szb\xE1rka", "hal\xE1szember", "hal\xE1szh\xE1l\xF3", "hal\xE1szmad\xE1r", "hal\xE1szszerencse", "halbetegs\xE9g", "halcsont", "halenyv", "hal\xE9tterem", "halfeldolgoz\xF3", "halgazd\xE1lkod\xE1s", "halh\xF3lyag", "halkocsonya", "hall\xE1sk\xE1rosod\xE1s", "hallgat\xF3", "hall\xF3- \xE9s egyens\xFAlyoz\xF3szerv", "hall\xF3ideg", "hall\xF3t\xE1vols\xE1g", "hallucinog\xE9n", "halmaz karakterisztikus f\xFCggv\xE9nye", "halmaz sz\xE1moss\xE1ga", "halmaz\xE1llapot", "halmazm\u0171velet", "halmazok metszete", "halmocska", "h\xE1l\xF3ing", "halom", "h\xE1l\xF3ruha", "h\xE1l\xF3szem", "halottash\xE1z", "halott\xE9get\xE9s", "halottkultusz", "halottvirraszt\xE1s", "h\xE1l\xF3zati kapcsol\xF3", "halp\xE9nz", "halszag\xFA galambgomba", "haluc", "halv\xE1ny harangvir\xE1g", "halv\xE1ny r\xF3kagomba", "halv\xE1nyk\xE9kt\xF6nk\u0171 p\xF3kh\xE1l\xF3sgomba", "halv\xE1nys\xE1rga p\xF3kh\xE1l\xF3s-cs\xE9szegomb\xE1cska", "halv\xE9r", "h\xE1mdaganat", "Hamilton-\xFAt", "hamisciprus", "hamisj\xE1t\xE9kos", "h\xE1moz\xF3", "hamut\xE1l", "hamvas \xE9ger", "hamvas tin\xF3ru", "hamvast\xF6nk\u0171 susulyka", "hamza", "handabanda", "hanga", "hangalak", "hangar\xF3zsa", "hangdetektor", "hanger\u0151", "hang\xE9rt\xE9k", "hangfelvev\u0151", "hangforr\xE1s", "hanghat\xE1s", "hanghordoz\xF3", "hang\xEDr\xE1s", "hangjegy\xEDr\xE1s", "hangjelz\xE9s", "hangkazetta", "hangkit\xF6r\xE9s", "hangkulissza", "hanglemezt\xE1r", "hangmenet", "hangnyel\u0151", "hangosfilm", "hangrend", "hangrobban\xE1s", "hangs\xEDp", "hangst\xFAdi\xF3", "hangsz\xE1l", "hangszer\xE9sz", "hangszimbolika", "hangtalans\xE1g", "hangterjedelem", "hangt\xF6lcs\xE9r", "hangul", "hangut\xE1nz\xF3", "hangv\xE1ltozat", "hangv\xE9tel", "hangz\xE1s", "hangz\xF3", "hangyaboly", "hangy\xE1szmedve", "hant", "hanuka", "h\xE1nyad\xE9k", "h\xE1nyas", "hanyattfekv\u0151 egyr\xE9t\u0171tapl\xF3", "h\xE1nytat\xF3 galambgomba", "hapsi", "harakiri", "harangcsillag", "harangl\xE1b", "harang\xF6nt\xE9s", "harangsz\xF3", "harangvir\xE1g", "har\xE1ntakna", "harapnival\xF3", "harc", "harcmez\u0151", "harcost\xE1rs", "harcsabajusz", "h\xE1remh\xF6lgy", "harisnya", "hark\xE1ly", "harmadfok\xFA egyenlet", "h\xE1rmas csillaggomba", "h\xE1rmaslevel\u0171 kakukktorma", "harmat", "harmatos hegy\xE9kess\xE9g", "harm\xF3nia", "harmonikus f\xFCggv\xE9ny", "harmonikus t\xE1rs", "h\xE1romer\u0171 juhar", "h\xE1romkar\xE9j\xFA vadsz\u0151l\u0151", "h\xE1roms\xE1g", "h\xE1romsz\xEDn\u0171 frangip\xE1ni", "h\xE1romsz\xF6gm\xE1trix", "h\xE1rs", "h\xE1rsm\xE9z", "h\xE1rty\xE1s \xEDvj\xE1ratok", "has\xE1bburgonya", "hasadt p\xF6feteg", "hasadtp\xE1fr\xE1ny", "hascsikar\xE1s", "hash t\xE1bla", "hasi aorta", "has\xEDt\xF3f\xFCggv\xE9ny", "hasny\xE1l", "hasonlat", "hasonm\xE1s", "has\xFCreg", "haszn\xE1l\xF3", "hasznoss\xE1g", "haszonb\xE9rlet", "haszonles\xE9s", "haszontalans\xE1g", "hatalmas t\xF6lcs\xE9rgomba", "hatalom\xE1tv\xE9tel", "hat\xE1r", "hat\xE1r\xE1tl\xE9p\xE9s", "hat\xE1rid\u0151", "hat\xE1rid\u0151s k\xF6tv\xE9ny", "hat\xE1rozat", "hat\xE1rozatlans\xE1g", "hat\xE1roz\xF3i igen\xE9v", "hat\xE1rozotts\xE1g", "hat\xE1rrend\xE9szet", "hat\xE1rvad\xE1sz", "hat\xE1rz\xE1r", "hat\xE1sk\xF6r", "hat\xE1startam", "hat\xE9konytalans\xE1g", "h\xE1tgerincsorvad\xE1s", "h\xE1tizs\xE1k-probl\xE9ma", "hat\xF3er\u0151", "hatos", "hatp\xE1revez\u0151s", "h\xE1tr\xE1ltat\xE1s", "h\xE1ts\xF3", "hatsz\xF6g", "h\xE1tul\xFCt\u0151", "hatv\xE1ny", "hatv\xE1nyoz\xE1s", "hatty\xFA", "hatty\xFApr\xE9m", "hav\xE1ria", "havasi bogl\xE1rka", "havasi daravir\xE1g", "havasi gyop\xE1r", "havasi iszalag", "havasi magcs\xE1k\xF3", "havasi sisakvir\xE1g", "havasi sz\xFCrke f\u0171z", "havasi var\xE1zsl\xF3f\u0171", "haver", "haza", "hazafi", "hazard\u0151r", "h\xE1zasp\xE1r", "h\xE1zass\xE1gk\xF6t\u0151", "h\xE1zast\xE1rs", "haza\xFAt", "h\xE1zeln\xF6k", "h\xE1zfoglal\xF3", "h\xE1zi len", "h\xE1zi\xE1llat", "h\xE1zigazda", "h\xE1zikolb\xE1sz", "h\xE1ziorvos", "h\xE1zisz\xE1rnyas", "h\xE1zmegb\xEDzott", "h\xE1zn\xE9p", "h\xE1ztet\u0151", "h\xE1zt\u0171zn\xE9z\u0151", "h\xE1zvezet\u0151n\u0151", "h\xE9ber", "hecsedli", "heged\u0171", "heged\u0171tok", "hegeszt\xE9s", "hegy", "hegyes badargomba", "hegyeskalap\xFA gal\xF3ca", "hegyessz\xF6g\u0171 h\xE1romsz\xF6g", "hegyi bab\xE9r", "hegyi gurgolya", "hegyi kakukkf\u0171", "hegyi lednek", "hegyi pajzsika", "hegyi s\xE1s", "hegyi tars\xF3ka", "hegyijuhar-k\xE9regt\xF6r\u0151gomba", "hegyk\xF6zs\xE9g", "hegym\xE1sz\xE1s", "hegyoml\xE1s", "hegys\xE9gn\xE9v", "hegyvid\xE9ki gyapot", "h\xE9ja", "h\xE9jon\xE1ztat\xE1s", "hekt\xE1r", "h\xE9la zab", "h\xE9lium", "helybeli", "helyes\xEDr\xE1s", "helyettes\xEDt\xE9s", "helyezett", "helyhat\xF3s\xE1g", "helyi minimum", "helyismeret", "hely\u0151rs\xE9g", "helys\xE9g", "helytart\xF3", "helyvektor", "hematit", "hemoglobin", "henge", "hengerfej", "hengerm\u0171", "hentai", "hentesleg\xE9ny", "henye bor\xF3ka", "heny\xE9l\u0151", "hepatitisz", "heraldika", "hercegn\xE9", "hercegs\xE9g", "herer\xE1k", "herezacsk\xF3", "heringc\xE1pa", "hermelin", "herny\xF3", "heroin", "herpetol\xF3gus", "Hesz", "hetacillin", "hetilap", "hetman", "h\xE9tv\xE9ge", "heveder", "hexakosioihexekontahexaf\xF3bia", "hi\xE1baval\xF3s\xE1g", "hi\xE1nygazdas\xE1g", "hi\xE1tus", "hib\xE1s p\xE1ros\xEDt\xE1s", "hibiszkusz", "hidasgy\xEDk", "hideg", "hidegkezel\xE9s", "hidegs\xE9g", "hidegv\xE9r", "h\xEDdf\u0151", "h\xEDdl\xE1b", "h\xEDd\u0151rf\xE9l\xE9k", "h\xEDdpill\xE9r", "hidraulika", "hidrog\xE9natom", "hidrogeol\xF3gia", "hidrol\xEDzis", "hidron\xEDmia", "hidroter\xE1pia", "h\xEDdszerkezet", "hidzs\xE1b", "hierarchikus adatmodell", "hieroglifa", "higany", "h\xEDg\xEDt\xE1s", "h\xEDgul\xE1s", "h\xEDm", "himal\xE1jai selyemfeny\u0151", "h\xEDmnem", "himpell\xE9r", "h\xEDmz\xE9s", "h\xEDn\xE1r", "hindu", "hinta", "hint\xF3", "hiperbola \xE1ga", "hiperglik\xE9mia", "hiperkocka", "hiperparam\xE9ter", "hipert\xF3nia", "hipnoter\xE1pia", "hipocentrum", "hipoglik\xE9mia", "hipot\xE9zis", "h\xEDrad\xE1s", "hiragana", "hirdetm\xE9ny", "h\xEDr\xE9rt\xE9k", "h\xEDrforr\xE1s", "h\xEDrhord\xF3", "h\xEDrk\xF6zl\u0151", "h\xEDrlap\xEDr\xF3", "h\xEDrmagyar\xE1z\xF3", "h\xEDr\xF6sszefoglal\xE1s", "h\xEDrszolg\xE1lat", "h\xEDrv\xE9tel", "historizmus", "hiszti", "hitehagy\xE1s", "hiteles\xEDt\xE9s", "hitelk\xE1rtya", "hitetlen", "hitszeg\xE9s", "hittan", "hittudom\xE1ny", "hitv\xE9delemtan", "hivalkod\xE1s", "hivatalnok", "h\xEDve", "h\xEDv\u0151", "hizlal\xE1s", "h\xF3\xE1gy\xFA", "hobbit", "h\xF3bor", "h\xF3cip\u0151", "h\xF3d", "h\xF3deszk\xE1s", "h\xF3d\xEDt\xF3", "hodzsa", "h\xF3fajd", "Hoffmann-Singleton-t\xE9tel", "h\xF3goly\xF3kaktusz", "h\xF3h\xE1ny\xF3", "h\xF3h\xE9r", "h\xF3kotr\xF3", "h\xF3kuszp\xF3k", "h\xF3lap\xE1t", "hold-felkelte", "holdj\xE1r\xF3", "holdmag", "holdruta", "holdt\xF6lte", "holland", "holl\xF3", "holmium", "holokauszttagad\xE1s", "holtpont", "holttetem", "h\xF3lyagfa", "h\xF3lyagmogyor\xF3", "hom\xE1lyoss\xE1g", "homeopata", "homlok", "homlokp\xE1nt", "homof\xF3bia", "homog\xE9n line\xE1ris rekurzi\xF3", "homogenit\xE1s", "homokd\u0171ne", "homoki \xE1lb\xE9kagomba", "homoki bakszak\xE1ll", "homoki cs\xE9szegomba", "homoki f\xF6ldics\xE9szegomba", "homoki kocsord", "homoki pipit\xE9r", "homoki szegf\u0171gomba", "homoki t\xF6lcs\xE9rgomba", "homokk\u0151", "homokoz\xF3", "homokv\xE1r", "homol\xF3gia", "homomorfizmus k\xE9pe", "homoszexualit\xE1s", "h\xF3munk\xE1s", "h\xF3nap", "honi csillaggomba", "honpolg\xE1r", "honv\xE9dorvos", "h\xF3p\xE1rduc", "Hor\xE1nszky-cickafark", "hordal\xE9k", "horder\u0151", "hordoz\xE1s", "hordt\xE1vols\xE1g", "horg\xE1szat", "horg\xE1szsport", "horizont", "Horner-elrendez\xE9s", "horol\xE1s", "horror", "horzsol\xE1s", "h\xF3sz\xE9li szegf\u0171", "hosszh\xE1z", "hossz\xFAkar\xFA csillaggomba", "hossz\xFAlevel\u0171 buv\xE1kf\u0171", "hossz\xFApill\xE1s s\xF6rt\xE9scs\xE9szegomba", "h\xF3torlasz", "h\xF3vessz\u0151", "hozam", "h\xF3zentr\xF3ger", "hozz\xE1\xE1ll\xE1s", "hozz\xE1f\xE9r\xE9s-vez\xE9rl\xE9si lista", "hozz\xE1kever\xE9s", "hozz\xE1szok\xE1s", "hozz\xE1tartoz\xF3", "h\u0151\xE1raml\xE1s", "h\u0151elektromoss\xE1g", "h\u0151er\u0151m\u0171", "h\u0151fokt\xE9nyez\u0151", "h\u0151hull\xE1m", "h\u0151k\xF6zpont", "h\xF6lgy\xE9sz", "h\xF6lgykoszor\xFA", "h\xF6lgyv\xE1lasz", "h\u0151m\xE9rs\xE9kletes\xE9s", "h\xF6rghurut", "h\xF6rg\u0151sz\u0171k\xFClet", "h\u0151siess\xE9g", "h\u0151stett", "h\u0151tan els\u0151 f\u0151t\xE9tele", "hrivnya", "h\xFAgycs\u0151gyullad\xE1s", "h\xFAgyv\xE9r\u0171s\xE9g", "hulig\xE1n", "hullaboncol\xE1s", "hullad\xE9kenergia", "hullad\xE9kkezel\xE9s", "hullad\xE9kudvar", "hullah\xE1z", "hull\xE1mf\xFCggv\xE9ny", "hull\xE1mk\xF6peny", "hull\xE1mos k\xEDgy\xF3gomba", "hull\xE1ms\xE1v", "hull\xE1mver\xE9s", "hull\xE1s", "hullat\xF3", "humbuk", "humorista", "huncuts\xE1g", "hunyor", "h\xFArgr\xE1f", "hurok", "hurrik\xE1n", "h\xFAsadag", "h\xFAsbarna gal\xF3ca", "h\xFAsbolt", "h\xFAsev\u0151", "h\xFAshagy\xF3kedd", "h\xFAsleves", "h\xFAspog\xE1csa", "h\xFAssert\xE9s", "h\xFAsvad\xE1sz", "h\xFAsv\xE9tvas\xE1rnap", "husz\xE1r", "husz\xE1rnadr\xE1g", "h\xFAssz\xEDn\u0171 pereszke", "h\xFAssz\xEDn\u0171 vadgesztenye", "huzal", "h\xFAz\xF3\xE1gazat", "h\xFAz\xF3k\xF6t\xE9l", "h\u0171b\xE9resk\xFC", "h\u0171h\xF3", "h\xFCpogeion", "h\u0171s\xEDt\u0151", "h\u0171t\u0151", "h\u0171t\u0151g\xE9p", "h\u0171t\u0151k\xE9sz\xFCl\xE9k", "h\u0171t\u0151k\xF6zeg", "h\u0171t\u0151r\xE1cs", "h\u0171t\u0151t\xE1rol\xF3", "h\u0171t\u0151\xFCzem", "h\xFCvelybemenet", "h\xFCvelyk", "h\xFCvelyt\xFCk\xF6r", "ibolyak\xE9k d\xF6ggomba", "iboly\xE1s k\xE9regront\xF3gomba", "iboly\xE1s r\xF3kagomba", "iboly\xE1sod\xF3 tejel\u0151gomba", "iboly\xE1sv\xF6r\xF6s p\xF3kh\xE1l\xF3sgomba", "icce", "ide\xE1lis g\xE1z", "idealiz\xE1l\xE1s", "idegbetegs\xE9g", "idegen ciklusok", "idegengy\u0171l\xF6l\u0151", "idegenl\xE9gi\xF3s", "idegg\xF6rcs", "idegkimer\xFCl\xE9s", "idegoszt\xE1ly", "idegseb\xE9sz", "idegtudom\xE1ny", "ideggy\xF6k\xE9r", "idempotens m\u0171velet", "identit\xE1s", "identit\xE1studat", "id\xE9nymunk\xE1s", "ideutaz\xE1s", "id\xE9z\u0151jel", "idi\xF3ta", "idol\xE1tria", "idom\xEDt\xF3", "id\u0151egys\xE9g", "id\u0151j\xE1r\xE1s", "id\u0151k\xF6z", "id\u0151pont", "id\u0151sorelemz\xE9s", "id\u0151tartam", "id\u0151v\xE1ltoz\xE1s", "ifj\xFA", "ifj\xFAs\xE1gi lap", "igazgat\xF3", "igazgy\xF6ngy", "igazol\xE1s", "igazs\xE1g\xE9rt\xE9k", "igazs\xE1gt\xE1bl\xE1zat", "igazs\xE1g\xFCgyminiszter", "ige", "igei igen\xE9v", "igek\xF6t\u0151", "igen\xE9vsz\xF3", "ig\xE9nyess\xE9g", "igerag", "igeszeml\xE9let", "iglice-f\xFCl\u0151ke", "\xEDj", "ijedelem", "\xEDjkar", "ikerabroncs", "ikerpr\xEDmek", "ikonogr\xE1fia", "ikozidodeka\xE9der", "iktat\xF3k\xF6nyv", "illatos bangita", "illatos csengetty\u0171vir\xE1g", "illatos hunyor", "illatos macskamenta", "illatos susulyka", "illatos t\xF6lcs\xE9rgomba", "illatszert\xE1r", "illend\u0151s\xE9g", "illet\xE9k", "illetm\xE9ny", "ill\xEDr s\xE1fr\xE1ny", "ill\xFAzi\xF3", "im\xE1dnival\xF3", "ima\xE9let", "imagin\xE1rius egys\xE9g", "im\xE1m", "imazs\xE1moly", "imipramin", "immunit\xE1s", "immunv\xE1lasz", "imperializmus", "implement\xE1l\xE1s", "impotencia", "impresszionizmus", "impulzus", "inas gy\xEDkvir\xE1g", "inda", "indeterminizmus", "indexhalmaz", "indiai cserz\u0151gubacs", "indiai l\xF3tusz", "indiai vadgesztenye", "indi\xE1ner", "indi\xE1ns\xE1tor", "ind\xEDt\xE1s", "indium", "individuumtartom\xE1ny", "indokol\xE1s", "indon\xE9z", "indul\xE1s", "indul\xF3", "inessivus", "infekci\xF3", "infl\xE1ci\xF3", "infliximab", "inform\xE1ci\xF3elm\xE9let", "inform\xE1tor", "ing", "inga\xF3ra", "ingatlanad\xF3", "ingatlanpiac", "ingbl\xFAz", "ingerl\xE9s", "ingov\xE1ny", "\xEDngyullad\xE1s", "\xEDnh\xFCvely", "injekci\xF3", "injekt\xEDv line\xE1ris lek\xE9pez\xE9s", "inkarn\xE1ci\xF3", "inkongruencia", "innival\xF3", "\xEDns\xE9g", "instancia", "intarzia", "integr\xE1l\xE1s", "integrit\xE1s", "intenzit\xE1s", "interferon", "interkvartilis f\xE9lterjedelem", "intern\xE1tus", "internetszolg\xE1ltat\xF3", "interszekcionalit\xE1s", "intervallum bels\u0151 pontja", "int\xE9s", "int\xE9zm\xE9ny", "int\xE9zm\xE9nyn\xE9v", "inton\xE1ci\xF3", "introverzi\xF3", "inupiak", "invert\xE1lhat\xF3 line\xE1ris transzform\xE1ci\xF3", "inverz Ackermann-f\xFCggv\xE9ny", "inverz m\xE1trix", "inveszt\xE1l\xE1s", "inzulinhi\xE1ny", "\xEDnyencfalat", "ion", "iontofor\xE9zis", "ipar\xE1g", "ipari forradalom", "iparm\u0171v\xE9sz", "iparosk\xF6r", "iparter\xFClet", "ipratropium", "\xEDr nyelv", "ir\xE1ni", "ir\xE1nyelv", "ir\xE1ny\xEDt\xF3sz\xE1m", "ir\xE1ny\xEDtott k\xF6r", "ir\xE1nymeghat\xE1roz\xE1s", "ir\xE1nyt\u0171", "ir\xE1nyzat", "\xEDr\xE1sjegy", "\xEDr\xE1svet\xEDt\u0151", "iratanyag", "iratszekr\xE9ny", "iratt\xE1ska", "irhab\u0151r", "\xEDrisz", "\xEDr\xF3", "irodaf\u0151n\u0151k", "irodalom", "irodalomkritika", "irodalomtan\xEDt\xE1s", "irodalomt\xF6rt\xE9net", "irodatiszt", "\xEDr\xF3eszk\xF6z", "\xEDr\xF3g\xE9p", "\xEDr\xF3g\xF6rcs", "\xEDr\xF3k\xE9szs\xE9g", "ir\xF3nia", "\xEDr\xF3sz\xF6vets\xE9g", "irracion\xE1lis sz\xE1m", "irreducibilis", "irt\xE1s", "iskolabetegs\xE9g", "iskola\xE9p\xFClet", "iskolagyakorlat", "iskolaj\xE1t\xE9k", "iskolak\xF6nyv", "iskolalovagl\xE1s", "iskolaorvos", "iskolap\xE9nz", "iskolaruha", "iskolaszolga", "iskolatelev\xEDzi\xF3", "iskolav\xE1ros", "ismeretelm\xE9let", "ismerett\xE1r", "ismertet\u0151jel", "ism\xE9tl\xE9s n\xE9lk\xFCli permut\xE1ci\xF3", "ism\xE9tl\xE9ses kombin\xE1ci\xF3", "ism\xE9tl\u0151fegyver", "isp\xE1n", "ist\xE1ll\xF3sor", "istenasszony", "istenh\xEDv\u0151", "istenk\xE1roml\xF3", "istens\xE9g", "istentelens\xE9g", "isz\xE1koss\xE1g", "iszapgyop\xE1r", "iszl\xE1m", "isztrorom\xE1n", "italbolt", "italos", "itat\xF3s", "\xEDt\xE9lethirdet\xE9s", "\xEDt\xE9letnap", "\xEDt\xE9l\u0151k\xE9pess\xE9g", "iter\xE1ci\xF3", "itterbium", "ivar", "ivarszerv", "\xEDvhegeszt\u0151", "\xEDvm\xE9rt\xE9k", "iv\xF3ed\xE9ny", "iv\xF3v\xEDzkezel\xE9s", "iz\xE9", "\xEDzfokoz\xF3", "izgatotts\xE1g", "izlandi zuzm\xF3", "\xEDzlel\u0151szerv", "\xEDzletes csiperke", "\xEDzletes t\u0151kegomba", "izolacionizmus", "izomember", "izomg\xF6rcs", "izoml\xE1z", "izomorfia", "izomrendszer", "izomsz\xF6vet", "izoterm \xE1llapotv\xE1ltoz\xE1s", "\xEDz\xFCletf\xE1jdalom", "izzad\xE1s", "izzadts\xE1g", "izzlap", "izz\xF3l\xE1mpa", "j\xE1cint", "j\xE1de", "jajvesz\xE9kel\xE9s", "jakobinizmus", "jamaikai szegf\u0171bors", "jamszgy\xF6k\xE9r", "janka-liliom", "j\xE1ny", "jap\xE1n csillag\xE1nizs", "jap\xE1n fogolybogy\xF3", "jap\xE1n hajnalka", "jap\xE1n kenderp\xE1lma", "jap\xE1n kumkvat", "jap\xE1n nagymagv\xFA tiszafa", "jap\xE1n tiszafa", "jap\xE1n", "jap\xE1ncseresznye", "jap\xE1nszentfa", "j\xE1r\xE1s", "j\xE1ratsz\xE1m", "j\xE1rdasziget", "j\xE1rm\u0171ipar", "j\xE1rm\u0171vezet\u0151", "j\xE1r\xF3kel\u0151", "j\xE1r\u0151r", "j\xE1rul\xE9khang", "j\xE1spis", "jatag\xE1n", "j\xE1t\xE9kaut\xF3", "j\xE1t\xE9kbolt", "j\xE1t\xE9kelm\xE9let", "j\xE1t\xE9kgoly\xF3", "j\xE1t\xE9kipar", "j\xE1t\xE9kkatona", "j\xE1t\xE9kmenet", "j\xE1t\xE9kmozdony", "j\xE1t\xE9k\xF6szt\xF6n", "j\xE1t\xE9kszer", "j\xE1t\xE9ktechnika", "j\xE1t\xE9kvas\xFAt", "j\xE1tsz\xF3t\xE1rs", "j\xE1vai f\xE9lbibe", "javak", "jav\xEDt\xF3", "j\xE1vorfa", "j\xE1zminpak\xF3ca", "j\xE9gcsap", "jegec", "jegenyefeny\u0151-rizike", "j\xE9gerals\xF3", "j\xE9ges\u0151", "j\xE9ghoki-\xFCt\u0151", "j\xE9gkocka", "j\xE9gkorszak", "j\xE9gl\xE1da", "j\xE9gp\xE1lya", "j\xE9gszekr\xE9ny", "j\xE9gteke", "j\xE9gverem", "j\xE9gvitorl\xE1z\xE1s", "jegybank", "jegyesoktat\xE1s", "jegyiroda", "jegyszed\u0151", "jegyz\xE9s", "jegyz\u0151", "jelad\xE1s", "jelen", "jelenkor", "jelens\xE9g", "jelent\xE9st\xE9tel", "jelentkez\xE9si lap", "jelige", "jellem", "jellemz\u0151", "jelmondat", "jel\xF6ltlista", "jelv\xE9ny", "jelz\xE1logteher", "jelz\u0151", "jelz\u0151cseng\u0151", "jelz\u0151k\xE9sz\xFCl\xE9k", "jelz\u0151t\xE1bla", "jenki", "jeti", "jiddis", "j\xF3bar\xE1t", "jobb\xE1gy", "jobboldal", "j\xF3d", "j\xF3f\xE9le s\xE1fr\xE1ny", "j\xF3ga", "jog\xE1ll\xE1s", "j\xF3g\xE1szana", "jogegyenl\u0151s\xE9g", "joghallgat\xF3", "joghurttorta", "jogk\xF6r", "jogosults\xE1g", "jogszab\xE1ly", "jogtudom\xE1ny", "jogv\xE9d\u0151", "j\xF3kedv", "j\xF3l\xE9ti t\xE1rsadalom", "j\xF3lrendezett halmaz", "jonat\xE1nalma", "jord\xE1ni", "j\xF3s\xE1g", "j\xF3sn\u0151", "j\xF3szag\xFA cickafark", "j\xF3t\xE9konys\xE1gi szervezet", "j\xF3tev\u0151", "j\xF3v\xE1t\xE9tel", "j\xF6vedelem", "j\xF6vend\xF6l\xE9s", "j\xF6vev\xE9ny", "jubileum", "jugoszl\xE1v", "juhar", "juharlevel\u0171 plat\xE1n", "juharszirup", "juh\xE1szleg\xE9ny", "juhkefir", "juhs\xF3ska", "j\xFAlia-borbolya", "junta", "jussivus", "jutalom", "j\xFCan", "kabala", "kab\xE1t", "kab\xE1tgomb", "kab\xE1tsz\xF6vet", "k\xE1bel", "k\xE1belk\xF6t\xE9l", "kabinetiroda", "k\xE1b\xEDt\xF3szer", "k\xE1b\xEDt\xF3szerf\xFCgg\xE9s", "k\xE1bszer", "k\xE1bults\xE1g", "kacag\xF3cs\xE9r", "k\xE1ci", "kac\xFAros v\xE9reslapu", "kacsacs\u0151r", "kacsakagyl\xF3", "kacsas\xFClt", "kacsazs\xEDr", "k\xE1d", "k\xE1der", "kad\xE9tiskola", "kafferliliom", "kagyl\xF3", "kagyl\xF3szag\xFA susulyka", "kainozoikum", "kajakversenyz\u0151", "kajszi", "k\xE1ka", "kaka\xF3bab", "kaka\xF3por", "kakas", "kakasl\xE1bf\u0171", "kakas\xFCl\u0151", "kakassz\xF3", "kakof\xF3nia", "kakukk", "kakukkf\u0171olaj", "kakukktorma", "kalam\xE1ris", "kalandfilm", "kalandoz\xE1s", "kalap\xE1cs", "kalap\xE1csvet\xE9s", "kalaplapu", "kalasnyikov", "kalauzkab\xE1t", "kalcit", "kalcium-karbon\xE1t", "kaleidoszk\xF3p", "kalicka", "kaliforniai gyant\xE1sciprus", "kaliforniai szam\xF3cafa", "k\xE1lil\xFAg", "kalitka", "k\xE1lium-metabiszulfit", "kalligr\xE1fia", "k\xE1lmos", "kaloda", "kal\xF3z", "kal\xF3zkiad\xE1s", "kal\xF3zvez\xE9r", "k\xE1lv\xE1ria", "k\xE1lyhacsempe", "kalyiba", "kamarazenekar", "kamaszkor", "kamatemel\xE9s", "kamat\xF6sszeg", "kamatvesztes\xE9g", "k\xE1mea", "kameruni", "k\xE1mfor-tejel\u0151gomba", "kamion", "kamraremeg\xE9s", "kanadabalzsam", "kanadai \xE1tokh\xEDn\xE1r", "kanadai ginszeng", "kanadai napvir\xE1g", "kan\xE1l", "kan\xE1lis", "kan\xE1ri s\xE1rk\xE1nyfa", "Kan\xE1ri-t\xF6lgy", "kan\xE1szt\xE1nc", "kancsals\xE1g", "kandela", "kandiscukor", "kankalin", "kannabiciklol", "kannabikrom\xE9n", "kannada", "kan\xF3c", "kanonok", "kant\xE1ta", "kanton", "kanuri", "k\xE1nyafa", "kanyarg\xF3ss\xE1g", "k\xE1nyazsombor", "kaolinit", "kapa", "kapampangan", "kap\xE1sl\xF6v\xE9s", "kapcsolat", "kapcsol\xF3t\xE1bla", "kaphat\xF3s\xE1g", "kapitalizmus", "kapkod\xE1s", "k\xE1polna", "kaporm\xE1rt\xE1s", "k\xE1posztaf\u0151zel\xE9k", "k\xE1posztasal\xE1ta", "kappanhang", "kapszula", "kaptopril", "kapub\xE1lv\xE1ny", "kapuboltozat", "kapucseng\u0151", "kapuf\xE9lfa", "kapukir\xFAg\xE1s", "kapunyit\xF3", "kapup\xE9nz", "kapusz\xE1rny", "kapu\xFCgyelet", "kapuvonal", "k\xE1r", "kar\xE1csony", "karaffa", "karak\xE1n", "karakterisztikus r\xE9szcsoport", "karaktersorozat", "karal\xE1b\xE9leves", "karamell", "k\xE1r\xE1sz", "karav\xE1nszer\xE1j", "karbantarthat\xF3s\xE1g", "karbid", "karbolszag\xFA csiperke", "karc", "karcolat", "karcs\xFA diszn\xF3par\xE9j", "karcs\xFA n\u0151sz\u0151f\u0171", "karcs\xFA poh\xE1rgomba", "karcs\xFAizom", "kardamom", "kardcsap\xE1s", "kard\xE9l", "kardin\xE1lis szinuszf\xFCggv\xE9ny", "kardiol\xF3gia", "kardlap", "kardoshal", "kardsz\xE1rny\xFA delfin", "kardvir\xE1g", "kardv\xEDv\xF3csapat", "kar\xE9nek", "karfa", "karhajl\xEDt\xE1s", "karigazgat\xF3", "karikagy\u0171r\u0171", "karizma", "kark\xF6t\u0151\xF3ra", "K\xE1rm\xE1n-f\xE9le \xF6rv\xE9nysor", "karmester", "karnagy", "karneol", "k\xE1r\xF3", "karolinai t\xFCnd\xE9rh\xEDn\xE1r", "kar\xF3ra", "k\xE1rosult", "k\xE1r\xF6r\xF6m", "k\xE1rp\xE1ti k\u0151ront\xF3", "k\xE1rp\xE1ti t\xE1rnics", "k\xE1rpitos", "karrier", "karszalag", "kart\xE1rs", "k\xE1rt\xE9r\xEDt\xE9s", "k\xE1rtev\u0151k", "kartonruha", "k\xE1rtya", "k\xE1rtyaoszt\xE1s", "k\xE1rtyav\xE1r", "karvalybagoly", "k\xE1sa", "kasp\xF3", "kasza", "kasz\xE1rnya", "kaszin\xF3", "kaszkarilla", "kasszasiker", "kaszt", "kasztszellem", "katal\xE1n", "katal\xF3gus", "katapult", "katasztr\xF3famegel\u0151z\xE9s", "katedr\xE1lis", "kat\xE9ter", "katinon", "kat\xF3dsug\xE1rcs\u0151", "katona\xE1ll\xEDt\xE1s", "katonabanda", "katonacs\xE1sz\xE1r", "katonaember", "katonafogdos\xE1s", "katonaindul\xF3", "katonakeny\xE9r", "katonal\xE1da", "katonan\xF3ta", "katonaposzt\xF3", "katonasor", "katonatan\xE1cs", "katonatiszt", "katonazenekar", "k\xE1ty\xFA", "kaucsukfa", "kauk\xE1zusi medvetalp", "kauri", "k\xE1va", "k\xE1v\xE9automata", "k\xE1v\xE9dar\xE1l\xF3", "k\xE1v\xE9h\xE1z", "k\xE1v\xE9n\xE9nike", "k\xE1v\xE9sz\xFCnet", "k\xE1v\xE9z\xE1s", "kavics\xE1gy\xFA", "kazah", "kaz\xE1nf\u0171t\u0151", "k\xE1zi\xE9", "kebelbar\xE1t", "kecses \u0151zl\xE1bgomba", "kecskebogy\xF3", "kecskef\u0171z", "kecskek\xF6r\xF6m", "kecsker\xEDm", "kecsketej", "kecsua", "ked\xE9lyess\xE9g", "kedvess\xE9g", "kedvezm\xE9nyezett", "kefe", "kefelevonat", "kefirgomba", "kegyelem", "kegyenc", "kegyhely", "keh", "k\xE9j", "k\xE9jh\xF6lgy", "k\xE9k babfa", "k\xE9k golgotavir\xE1g", "k\xE9k iring\xF3", "k\xE9k p\xF3kh\xE1l\xF3sgomba", "k\xE9k tikszem", "k\xE9kbegy", "k\xE9kes mohak\xEDgy\xF3gomba", "k\xE9kesed\u0151 \xFCregestin\xF3ru", "k\xE9kfrankos", "k\xE9kh\xE1t\xFA galambgomba", "k\xE9klemez\u0171 \u0151zl\xE1bgomba", "k\xE9kr\xF3ka", "keksz", "k\xE9k\xFCst\xF6k\u0171 csormolya", "kelemp\xE1jszmad\xE1r", "kelepce", "Kelet", "keleti b\xFCkk", "keleti m\xE1k", "keleti", "keletkez\xE9s", "kelk\xE1poszta", "kell\xE9kt\xE1r", "kelme", "keltet\u0151\xE1llom\xE1s", "kelt\u0151\xF3ra", "k\xE9m", "kemence", "kem\xE9ny sz\xE1jpad", "kem\xE9nyfa", "kem\xE9nykalap", "k\xE9m\xE9nysepr\u0151", "k\xE9mhat\xE1s", "k\xE9miatan\xE1r", "k\xE9mlel\u0151ny\xEDl\xE1s", "kempingnadr\xE1g", "kence", "kenderf\xE9l\xE9k", "kenderk\xF6t\xE9l", "kendern\xF6v\xE9ny", "kend\xF3", "kenet", "kengyelfut\xF3", "k\xE9nhidrog\xE9n", "ken\u0151anyag", "ken\u0151olaj", "k\xE9nsav", "kenu", "k\xE9nvir\xE1ggomba", "keny\xE9r", "keny\xE9rbolt", "keny\xE9rfa", "keny\xE9rgomba", "keny\xE9rh\xE9j", "keny\xE9rk\xE9rd\xE9s", "keny\xE9rkos\xE1r", "keny\xE9rmorzsa", "keny\xE9rs\xFCt\xE9s", "keny\xE9rszeletke", "keny\xE9rv\xE9g", "k\xE9nyszer", "k\xE9nyszerk\xE9pzet", "k\xE9nyszersz\xFCnet", "k\xE9nyszerzubbony", "k\xE9p\xE1tvitel", "k\xE9perny\u0151", "k\xE9pess\xE9g", "k\xE9p\xEDr\xE1s", "k\xE9pki\xE1ll\xEDt\xE1s", "k\xE9pmutat\xE1s", "k\xE9prejtv\xE9ny", "k\xE9pt\xE9r", "k\xE9pvisel\u0151f\xE1nk", "k\xE9pzelg\xE9s", "k\xE9pzet", "k\xE9pz\u0151dm\xE9ny", "ker\xE1mia h\xE1romsz\xF6g", "kercer\xE9ce", "k\xE9rd\u0151sz\xF3cska", "k\xE9reggomba", "kerek r\xE1spolygomba", "ker\xE9k", "ker\xE9kbet\xF6r\xE9s", "kerekessz\xE9k", "ker\xE9kgy\xE1rt\xF3", "ker\xE9klap\xE1t", "kereklevel\u0171 harmatf\u0171", "kereklevel\u0171 k\xF6rtike", "ker\xE9kp\xE1rabroncs", "ker\xE9kp\xE1rlop\xE1s", "ker\xE9kp\xE1rv\xE1lt\xF3", "kereksp\xF3r\xE1s d\xF6ggomba", "ker\xE9kv\xE1g\xE1s", "kerepl\u0151", "keresetts\xE9g", "keresked\u0151", "keresked\u0151n\xE9p", "keres\u0151fa", "k\xE9r\xE9sz", "kereszt", "keresztcs\xEDk", "keresztel\u0151", "kereszter\u0171 tejel\u0151gomba", "kereszteshadj\xE1rat", "keresztfa", "keresztgyermek", "keresztkar\xE9j\xFA t\xF6lgy", "keresztl\xE1ny", "keresztn\xE9v", "keresztsp\xF3r\xE1s kupakgomba", "keresztt\u0171z", "keresztv\xEDz", "kerets\xF3z\xF3", "k\xE9rgestekn\u0151s", "ker\xEDt\xE9s", "k\xE9rked\xE9s", "Kerr b\u0171zvir\xE1ga", "kert\xE9p\xEDt\xE9s", "kert\xE9szked\xE9s", "kertfal", "kerti \xE1rv\xE1cska", "kerti bor\xE1g\xF3", "kerti eper", "kerti iszalag", "kerti kapor", "kerti laboda", "kerti m\xE1lyvar\xF3zsa", "kerti \u0151zl\xE1bgomba", "kerti petrezselyem", "kerti ribiszke", "kerti sal\xE1ta", "kerti susulyka", "kerti zs\xE1lya", "kertmozi", "kerub", "ker\xFCl\u0151", "k\xE9s", "k\xE9sei napraforg\xF3", "kesely\u0171", "keser\u0171 \xE1lc\xF6l\xF6pgomba", "keser\u0171 k\xF6ld\xF6k\xF6s-szegf\u0171gomba", "keser\u0171 ned\u0171gomba", "keser\u0171fa", "keser\u0171s\xE9g", "k\xE9shegy", "keskenyfog\xFA k\xF6rtemoha", "keskenylevel\u0171 der\xE9ce", "keskenylevel\u0171 h\xF6lgym\xE1l", "keskenylevel\u0171 perje", "keskenysp\xF3r\xE1s tin\xF3ru", "k\xE9s\u0151i csigagomba", "kesudi\xF3", "k\xE9szenl\xE9t", "k\xE9sz\xEDt\u0151", "k\xE9szletfelv\xE9tel", "k\xE9szp\xE9nzadom\xE1ny", "k\xE9szs\xE9g", "k\xE9szterm\xE9k", "keszty\u0171gy\xE1rt\xE1s", "k\xE9sz\xFCl\u0151d\xE9s", "ketamin", "k\xE9t\xE9lt\u0171", "k\xE9tfej\u0171 felkarizom", "k\xE9tismeretlenes egyenlet", "k\xE9tlevel\u0171 \xE1rny\xE9kvir\xE1g", "k\xE9tnyelv\u0171s\xE9g", "k\xE9tpettyes katicabog\xE1r", "k\xE9tsoros \xE1rpa", "k\xE9tsp\xF3r\xE1s csiperke", "k\xE9tsz\xEDn\u0171 cs\xE9szegomb\xE1cska", "k\xE9tsz\xEDn\u0171 p\xF3kh\xE1l\xF3sgomba", "kett\xE9\xE1gaz\xE1s", "k\xE9ttoll\xFA izomt\xEDpus", "kett\u0151s", "k\xE9tv\xE1ltoz\xF3s rel\xE1ci\xF3", "kev\xE9lys\xE9g", "kever\u0151", "k\xE9z", "k\xE9zbes\xEDt\xE9s", "k\xE9zcs\xF3k", "kezdem\xE9nyez\xE9s", "kezd\xE9s", "kezd\u0151", "kezd\u0151sebess\xE9g", "k\xE9zel\u0151", "kezesl\xE1bas", "k\xE9zfej", "k\xE9ziemel\u0151", "k\xE9zif\u0171r\xE9sz", "k\xE9zik\xF6nyvt\xE1r", "k\xE9zilabd\xE1z\xF3", "k\xE9z\xEDr\xE1s", "k\xE9zit\xE1ska", "k\xE9zk\xF6z\xE9pcsont", "k\xE9zm\u0171", "k\xE9zt\u0151", "k\xE9zszor\xEDt\xE1s", "ki\xE1br\xE1ndul\xE1s", "kiad\xF3hivatal", "kialakul\xE1s", "ki\xE1lt\xE1s", "ki\xE1rus\xEDt\xE1s", "kib\xE9k\xFCl\xE9s", "kiberb\u0171n\xF6z\xE9s", "kibocs\xE1t\xE1s", "kib\u0151v\xEDtett m\xE1trix", "kicsapong\xE1s", "kicsiny cs\xE9sz\xE9sp\xF6feteg", "kicsinys\xE9g", "kidolgoz\xE1s", "kieg\xE9sz\xEDt\u0151", "kiegyens\xFAlyozotts\xE1g", "kiel\xE9g\xFCl\xE9s", "kies\xE9s", "kifejez\xE9sm\xF3d", "kifesz\xEDtett alt\xE9r", "kifizet\u0151d\u0151", "kifog\xE1s", "kifoszt\xE1s", "kifut\xF3p\xE1lya", "k\xEDgy\xE1szs\xF3lyom", "k\xEDgy\xF3ember", "k\xEDgy\xF3gomba", "k\xEDgy\xF3mar\xE1s", "k\xEDgy\xF3nyelvf\xE9l\xE9k", "k\xEDgy\xF3toj\xE1s", "kihagy\xE1s", "kihalgat\xE1s", "kihirdet\xE9s", "ki\xEDr\xE1s", "kijel\xF6l\xE9s", "kikeleti h\xF3vir\xE1g", "kik\xE9pz\u0151t\xE1bor", "kik\xE9sz\xEDt\xE9s", "kik\xF6t\u0151", "kik\xF6t\u0151z\xE1r", "kik\xFCldet\xE9s", "kil\xE1t\xE1s", "kilenced", "kil\xEDkiai jegenyefeny\u0151", "kilogramm", "kilowatt", "kimchi", "kimen\u0151", "kimer\xEDt\xE9s", "kimono", "kina", "k\xEDnai aranyfeny\u0151", "k\xEDnai csillag\xE1nizs", "k\xEDnai hikoridi\xF3", "k\xEDnai legyez\u0151p\xE1lma", "k\xEDnai marad\xE9kt\xE9tel", "k\xEDnai negyed", "k\xEDnai post\xE1s probl\xE9m\xE1ja", "k\xEDnai szil", "k\xEDnai t\xFCsk\xE9ss\xE1rgafa", "k\xEDnaigumifa", "kincs", "kincst\xE1rnok", "kinematika", "kin\xE9zet", "kinoa", "kintorna", "k\xEDnz\xF3", "kinyilv\xE1n\xEDt\xE1s", "kip", "kipufog\xF3g\xE1z", "kirakatpolitika", "kir\xE1ly", "kir\xE1lydinnyef\xE9l\xE9k", "kir\xE1lygyilkoss\xE1g", "kir\xE1lylepke", "kir\xE1lyp\xE1lma", "kir\xE1lys\xEDr", "kir\xE1lyvarg\xE1nya", "kir\xE1ndul\xF3hely", "kirohan\xE1s", "kis b\xFCd\xF6ske", "kis Fermat-t\xE9tel", "kis hasadtfog\xFAmoha", "kis met\xE9ng", "kis v\xE9rf\u0171", "kisajtol\xE1s", "kisaut\xF3", "kisbet\u0171", "kisborj\xFA", "kiscseplesz", "kisebbs\xE9gi korm\xE1ny", "kiserd\u0151", "k\xEDs\xE9rleti ny\xFAl", "k\xEDs\xE9r\u0151lev\xE9l", "k\xEDs\xE9rtethist\xF3ria", "kisfuvola", "kishirdet\xE9s", "kisiparos", "kiskapu", "kiskir\xE1ly", "kiskoszt\xFCm", "kisl\xE1ny", "kislevel\u0171 fikusz", "kislevel\u0171 n\u0151sz\u0151f\u0171", "kismajom", "kismotor", "kispajt\xE1s", "kispuska", "kissp\xF3r\xE1s olajgomb\xE1cska", "kisujj", "kisv\xE1llalkoz\xF3", "kisvir\xE1g\xFA hunyor", "kisvir\xE1g\xFA pacsirtaf\u0171", "kisz\xE1ll\xEDt\xE1s", "kiszerel\xE9s", "kiszolg\xE1l\xF3n\u0151", "kital\xE1l\xE1s", "kitartott", "kiterjed\xE9s", "kit\xE9tel", "kitoloncol\xE1s", "kiutal\xE1s", "ki\xFCt\xE9s", "kiv\xE1l\xE1s", "kiv\xE1laszt\xE1sos rendez\xE9s", "k\xEDv\xE1nalom", "kiv\xE1ndorl\xF3", "kiv\xE9gz\u0151hely", "kivitel", "kivon\xE1s", "k\xEDv\xFCl\xE1ll\xF3", "kiz\xF6kken\xE9s", "kl\xE1n", "klasszikus mechanika", "klaszter", "klauz\xFAra", "klen\xF3dium", "klerikalizmus", "klikk", "kl\xEDma", "klis\xE9", "kl\xF3r", "klorocid", "kloroplasztisz", "klottnadr\xE1g", "klubtag", "koagul\xE1l\xE1s", "kobak", "koboz", "kocapusk\xE1s", "kocka", "kock\xE1sliliom", "kocog\xE1s", "kocsi", "kocsigy\xE1rt\xF3", "kocsimester", "kocsir\xFAd", "kocsiszekr\xE9ny", "kocsivizsg\xE1l\xF3", "kocsonya", "kocsony\xE1s koronggomba", "k\xF3d", "k\xF3djel", "koeduk\xE1lt", "koffer", "koh\xE1szat", "koh\xF3m\xE9rn\xF6k", "koin\xE9", "kokain", "kok\xE1rda", "kokkol\xE1s", "koksz", "kokt\xE9lrendez\xE9s", "k\xF3kuszcukor", "k\xF3kuszliszt", "k\xF3kuszreszel\xE9k", "k\xF3ladi\xF3", "kolb\xE1szka", "koldusbot", "kolera", "kolhozf\xF6ld", "kollag\xE9n", "kollegialit\xE1s", "kollektivista", "kolline\xE1ris vektor", "kolna", "kolomejka", "kolomp\xEDr", "kolonializmus", "kolumbiai", "komaasszony", "komb\xE1jnos", "kombin\xE1lt ciklus", "kombin\xE9", "kom\xE9di\xE1s", "komika", "komisszi\xF3", "kommand\xF3s", "kommenzalizmus", "kommunista", "kommutat\xEDv f\xE9lgy\u0171r\u0171", "komm\xFCn\xE1r", "komolys\xE1g", "komorna", "kompatibilit\xE1s", "kompetencia", "komplementer halmaz", "komplex egys\xE9ggy\xF6k", "komplex m\xE1trix", "komplex sz\xE1m hatv\xE1nyoz\xE1sa", "komplex sz\xE1m trigonometrikus alakja", "komplex sz\xE1mok oszt\xE1sa", "komplex test", "komponens", "komp\xF3t", "komputertomogr\xE1fia", "koncentr\xE1l\xF3k\xE9pess\xE9g", "koncertterem", "kondenz\xE1ci\xF3", "kond\xE9r", "kondicion\xE1l\xF3", "konfekci\xF3", "konferenciaterem", "konfliktus", "konfront\xE1ci\xF3", "kongresszus", "kongruenciarendszer", "konjug\xE1lt", "konkaten\xE1ci\xF3", "konkolyperje", "konnektor", "konstit\xFAci\xF3", "konszenzus", "kontamin\xE1ci\xF3", "konteo", "kontingens", "kontinuumhipot\xE9zis", "kontrahajt\xE1s", "kontrasztanyag", "kont\xFAr", "kontyvir\xE1gf\xE9l\xE9k", "konvergencia", "konvex burok", "konvol\xFAci\xF3", "konzervativizmus", "konzervguly\xE1s", "konzervhal", "konzervk\xE9sz\xEDtm\xE9ny", "konzisztenciameg\u0151rz\xE9s", "konzol", "konzulens", "k\xF3nya s\xE1rma", "konyha", "konyhakert", "konyhamalac", "konyhanyelv", "konyhaszekr\xE9ny", "koordin\xE1tageometria", "koordin\xE1ta-rendszer", "kop\xE1s", "kopasz tamariska", "kopek", "kopja", "kopog\xF3bog\xE1r", "koponyaalkat", "koponyal\xE9kel\xE9s", "koponyatet\u0151", "koponyavarrat", "koppant\xE1s", "k\xF3r", "korai porhany\xF3sgomba", "korall ny\xE1lkagomba", "korallfa", "korallkaktusz", "korallvir\xE1g", "korav\xE9ns\xE9g", "korcs", "korcsolyap\xE1lya", "kord", "kordonk\xF6t\xE9l", "koreai jegenyefeny\u0151", "k\xF3r\xE9lettan", "korhat\xE1r", "korhely", "korifeus", "k\xF3rlap", "korl\xE1toz\xE1s", "korm\xE1nyalak\xEDt\xE1s", "korm\xE1nyf\u0151", "korm\xE1nyker\xE9k", "korm\xE1nyos", "korm\xE1nyprogram", "korm\xE1nyszerv", "korm\xE1nyv\xE1ls\xE1g", "korm\xE1nyz\xF3", "kormos mirigygomba", "kornist\xE1rnics", "korom", "koronaf\xFCrt", "koronatan\xFA", "koron\xE1z\xE1s", "korongvir\xE1g", "korpaf\u0171", "korpor\xE1ci\xF3", "korrektor", "korrepetitor", "kors\xF3", "korszellem", "k\xF3rterem", "kort\xFCnet", "k\xF3rusegylet", "korz\xF3", "kos\xE1rlabda", "kosborf\xE9l\xE9k", "koszek\xE1ns", "koszinuszt\xE9tel", "koszt", "koszt\xFCmkab\xE1t", "kotl\xF3sty\xFAk", "kotr\xF3g\xE9p", "k\xF3tyavetye", "kov\xE1csk\xF6t\xE9ny", "kov\xE1csoltvas", "kovalens k\xF6t\xE9s", "kovarianciam\xE1trix", "kov\xE1szos uborka", "koz\xE1k", "kozmog\xF3nia", "k\u0151", "k\u0151b\xE1ny\xE1sz", "k\xF6bgy\xF6kf\xFCggv\xE9ny", "k\u0151cser\xE9p", "k\xF6df\xE1tyol", "k\xF6dk\xFCrt", "k\xF6d\xF6ss\xE9g", "k\u0151fali pinty\u0151", "k\u0151halom", "k\xF6k\xE9ny", "k\u0151korszak", "k\xF6lcs\xF6nad\xF3", "k\xF6lcs\xF6n\xF6s indukci\xF3", "k\xF6lcs\xF6n\xF6ss\xE9g", "k\xF6lcs\xF6nz\u0151hely", "k\xF6ld\xF6kkarika", "k\u0151len", "k\xF6lespehely", "k\xF6lniillat\xFA p\xF3kh\xE1l\xF3sgomba", "k\xF6ltem\xE9ny", "k\xF6lt\u0151kir\xE1ly", "k\xF6lt\xF6zk\xF6d\xE9s", "k\xF6lts\xE9gsz\xE1m\xEDt\xE1s", "k\xF6ly\u0171", "k\u0151m\u0171ves", "k\xF6nt\xF6rfalaz\xE1s", "k\xF6nnycsont", "k\xF6nnyelv\xE1laszt\xE1s", "k\xF6nnyez\u0151p\xE1lma", "k\xF6nnymirigy", "k\xF6nny\u0171g\xE9pkezel\u0151", "k\xF6nny\u0171zene", "k\xF6ny\xF6kfesz\xEDt\u0151 izom", "k\xF6ny\xF6kl\u0151p\xE1rk\xE1ny", "k\xF6ny\xF6r\xFClet", "k\xF6nyvadom\xE1ny", "k\xF6nyvbar\xE1t", "k\xF6nyvecske", "k\xF6nyvel\u0151n\u0151", "k\xF6nyv\xE9szet", "k\xF6nyvjegyz\xE9k", "k\xF6nyvkeresked\xE9s", "k\xF6nyvki\xE1ll\xEDt\xE1s", "k\xF6nyvk\xF6t\xE9szet", "k\xF6nyvkukac", "k\xF6nyvnap", "k\xF6nyvpiac", "k\xF6nyvszekr\xE9ny", "k\xF6nyvt\xE1r", "k\xF6nyvt\xE1rtan", "k\xF6nyv\xFAjdons\xE1g", "k\xF6nyvvitel", "k\u0151olajfinom\xEDt\xE1s", "k\u0151olajmez\u0151", "k\xF6penyke", "k\xF6p\xF6nyegforgat\xF3", "k\xF6r sugara", "k\xF6rb\xE9lyegz\u0151", "k\xF6rfolyos\xF3", "k\xF6rf\xFCggv\xE9ny", "k\xF6rhaj", "k\u0151risbog\xE1r", "k\u0151ris-ripacsgomba", "k\xF6r\xEDv", "k\xF6rk\xF6r", "k\xF6rm\xE1trix", "k\xF6rmozg\xE1s", "k\xF6rnyezetbiztons\xE1g", "k\xF6rnyezettan", "k\xF6rorvos", "k\xF6r\xF6m\xE1pol\xE1s", "k\xF6r\xF6mh\xE1z", "k\xF6r\xF6mlakk", "k\xF6r\xF6mpassz", "k\xF6r\xF6mreszel\u0151", "k\xF6r\xF6mvir\xE1g", "k\xF6rrajz", "k\xF6rszelet", "k\xF6rtefa", "k\xF6rtep\xE1linka", "k\xF6rtike", "k\xF6r\xFClm\xE9ny", "k\xF6rzet", "k\u0151sz\xE1li kecske", "k\u0151szikla", "k\u0151szobor", "k\xF6sz\xF6n\u0151lev\xE9l", "k\xF6sz\xF6r\u0171s", "k\xF6teked\xE9s", "k\xF6tel\xE9k", "k\xF6teless\xE9gteljes\xEDt\xE9s", "k\xF6t\xE9lf\u0171", "k\xF6t\xE9lh\xFAz\xE1s", "k\xF6t\xE9lp\xE1lya", "k\xF6t\xE9lver\u0151", "k\xF6t\xE9nyruha", "k\u0151tiszafa", "k\xF6t\u0151f\xE9k", "k\xF6t\u0151jel", "k\u0151t\xF6r\u0151cserje", "k\xF6t\xF6tt\xE1ru", "k\xF6t\xF6z\xE9s", "k\xF6tszer", "k\xF6v\xE9rs\xE9g", "k\xF6vetelm\xE9ny", "k\xF6vetkezetess\xE9g", "k\xF6vet\u0151", "k\xF6virig\xF3", "k\xF6zakarat", "k\xF6zbens\u0151\xE9rt\xE9k-tulajdons\xE1g", "k\xF6zbez\xE1rt sz\xF6g", "k\xF6zeg", "k\xF6zelharc", "k\xF6zels\xE9g", "k\xF6z\xE9p-amerikai", "k\xF6zepes harmatf\u0171", "k\xF6z\xE9pfok", "k\xF6z\xE9phegys\xE9g", "k\xF6z\xE9piskol\xE1s", "k\xF6z\xE9pp\xE1ly\xE1s", "k\xF6z\xE9ps\u0151 k\xF6rtike", "k\xF6z\xE9pszer\u0171s\xE9g", "k\xF6z\xE9p\xFClet", "k\u0151zet", "k\xF6zfogyaszt\xE1s", "k\xF6zgy\u0171l\xE9s", "k\xF6zhivatalnok", "k\xF6zj\xF3", "k\xF6zk\xF3rh\xE1z", "k\xF6zleked\xE9sbiztons\xE1g", "k\xF6zleked\xE9spolitika", "k\xF6zmond\xE1s", "k\xF6zn\xE9p", "k\xF6zoktat\xE1s", "k\xF6z\xF6ns\xE9ges ag\xE1v\xE9", "k\xF6z\xF6ns\xE9ges aranyes\u0151", "k\xF6z\xF6ns\xE9ges bab\xE9r", "k\xF6z\xF6ns\xE9ges borb\xE1laf\u0171", "k\xF6z\xF6ns\xE9ges b\xFCkk", "k\xF6z\xF6ns\xE9ges csillaggomba", "k\xF6z\xF6ns\xE9ges di\xF3", "k\xF6z\xF6ns\xE9ges \xE9desgy\xF6ker\u0171 p\xE1fr\xE1ny", "k\xF6z\xF6ns\xE9ges fagyal", "k\xF6z\xF6ns\xE9ges forr\xE1smoha", "k\xF6z\xF6ns\xE9ges f\xFCstike", "k\xF6z\xF6ns\xE9ges gyerty\xE1n", "k\xF6z\xF6ns\xE9ges gyujtov\xE1nyf\u0171", "k\xF6z\xF6ns\xE9ges herny\xF3p\xE1zsit", "k\xF6z\xF6ns\xE9ges jezs\xE1men", "k\xF6z\xF6ns\xE9ges k\xEDgy\xF3nyelv", "k\xF6z\xF6ns\xE9ges kutyasz\xF6m\xF6rcs\xF6g", "k\xF6z\xF6ns\xE9ges ligetmoha", "k\xF6z\xF6ns\xE9ges mah\xF3nia", "k\xF6z\xF6ns\xE9ges m\xE9zp\xE1zsit", "k\xF6z\xF6ns\xE9ges napvir\xE1g", "k\xF6z\xF6ns\xE9ges olajfa", "k\xF6z\xF6ns\xE9ges oroszl\xE1nfog", "k\xF6z\xF6ns\xE9ges paprika", "k\xF6z\xF6ns\xE9ges petrezselyemgomba", "k\xF6z\xF6ns\xE9ges r\xE1kvir\xE1g", "k\xF6z\xF6ns\xE9ges sp\xE1rga", "k\xF6z\xF6ns\xE9ges szobafikusz", "k\xF6z\xF6ns\xE9ges tengerif\u0171", "k\xF6z\xF6ns\xE9ges t\xF6k", "k\xF6z\xF6ns\xE9ges ty\xFAkh\xFAr", "k\xF6z\xF6ns\xE9ges vasf\u0171", "k\xF6z\xF6ns\xE9ges v\xF6r\xF6s mangrove", "k\xF6z\xF6ny", "k\xF6z\xF6s szemmozgat\xF3 ideg", "k\xF6z\xF6ss\xE9gi t\xE1vols\xE1gtart\xE1s", "k\xF6zpark", "k\xF6zponti idegrendszer", "k\xF6zrem\u0171k\xF6d\xE9s", "k\xF6zt\xE1rsas\xE1g", "k\xF6ztudom\xE1s\xFA", "k\xF6zut\xE1lat", "k\xF6z\xFCzem", "k\xF6zvet\xEDt\xE9s", "k\xF6zz\xE9t\xE9tel", "k\xF6zsz\xFCks\xE9glet", "kr\xE1terk\xE9pz\u0151d\xE9s", "krecli", "kr\xE9mfagylalt", "kr\xE9msajt", "krepp", "kr\xE9tai datolyap\xE1lma", "kret\xE9ns\xE9g", "krikett", "kriminalisztika", "krinolin", "kriptogr\xE1fia", "krist\xE1lyalakzat", "krist\xE1lydetektor", "krist\xE1lym\u0171szer", "krist\xE1lyrendszer", "krist\xE1lyv\xE1za", "krisztallogr\xE1fia", "kritika", "krizoberill", "krokodilb\u0151r", "kr\xF3kusz", "kromof\xE1g", "kr\xF3ms\xE1rga galambgomba", "kr\xF3nika\xEDr\xF3", "kroton", "krumplibog\xE1r", "krumplih\xE9j", "krumplipaprik\xE1s", "Kruskal-algoritmus", "kubai badargomba", "kuck\xF3", "kudarc", "kuglip\xE1lya", "kugl\xF3fforma", "kukac", "kukker", "kukor\xE9kol\xE1s", "kukoricacs\u0151", "kukoricafoszt\xE1s", "kukoricakem\xE9ny\xEDt\u0151", "kukoricapehely", "kukoricat\xF6r\xE9s", "kulacs", "kulcscsont", "kulcsmez\u0151", "kulikab\xE1t", "kullancs", "kult\xFArattas\xE9", "kult\xFArforradalom", "kult\xFArk\xF6zpont", "kult\xFArt\xF6rt\xE9n\xE9sz", "kultuszminiszter", "kun", "kuncsaft", "kuns\xE1gi b\xFCkk\xF6ny", "k\xFAp t\xE9rfogata", "kupacs", "kupad\xF6nt\u0151", "kupec", "kupler\xE1j", "kupolacsarnok", "k\xFAposkalap\xFA lisztes\u0151zl\xE1bgomba", "kur\xE1tor", "kurcsatovium", "kurjant\xE1s", "k\xFArm\xE1szana", "kuruc", "kurvahajcs\xE1r", "k\xFAsz\xE1s", "k\xFAsz\xF3 bogl\xE1rka", "k\xFAsz\xF3 hortenzia", "k\xFAt", "kutat\xF3akna", "kutat\xF3int\xE9zet", "kutat\xF3orvos", "kutat\xF3terem", "k\xFAt\xE9p\xEDt\xE9s", "kutrica", "kutyabaj", "kutyaeledel", "kutyaf\xE9le", "kutyah\u0171s\xE9g", "kutyakozmetika", "kutya\xF3l", "kutyaszor\xEDt\xF3", "kutyatejf\xE9l\xE9k", "kutyav\xE1s\xE1r", "kuvik", "k\xFClcs\xEDn", "k\xFCldet\xE9s", "k\xFCld\xF6tts\xE9g", "k\xFClker", "k\xFCll\u0151folyond\xE1r", "k\xFCl\xF6n\xE1ll\xF3s\xE1g", "k\xFCl\xF6nbs\xE9g", "k\xFCl\xF6nc", "k\xFCl\xF6nj\xE1rat", "k\xFCl\xF6n\xF3ra", "k\xFCl\xF6ntud\xF3s\xEDt\xF3", "k\xFCls\xEDkgr\xE1f", "k\xFCls\u0151s\xE9g", "k\xFCltakar\xF3", "k\xFCl\xFCgy\xE9r", "k\xFClvil\xE1g", "k\u0171rium", "k\xFCrt\u0151", "k\xFCrtvir\xE1g", "k\xFCty\xFC", "k\xFCzd\u0151sport", "kvadratikus algoritmus", "kvadratikus", "kvantifik\xE1ci\xF3", "kvantumelm\xE9let", "kvarcl\xE1mpa", "kvartett", "kvintesszencia", "kv\xF3ta", "l\xE1badoz\xE1s", "l\xE1bas", "l\xE1bbeli", "l\xE1bcsont", "labdacs", "labdaj\xE1t\xE9k", "labdar\xFAg\xE1s", "labdar\xFAg\xF3-egyes\xFClet", "labdar\xFAg\xF3sport", "labdar\xFAg\xF3-vil\xE1gbajnoks\xE1g", "labdavezet\xE9s", "l\xE1bd\xFCb\xF6rg\xE9s", "l\xE1bfej", "l\xE1bhegy", "labioplasztika", "l\xE1bizzad\xE1s", "l\xE1bk\xF6z\xE9pcsont", "l\xE1bmozg\xE1s", "labod\xE1s diszn\xF3par\xE9j", "l\xE1bos", "l\xE1bseb", "l\xE1bsz\xE1rcsont", "l\xE1bsz\xEDj", "l\xE1btart\xE1s", "l\xE1btenisz", "l\xE1bt\xF6r\xE9s", "l\xE1bujj", "l\xE1bv\xEDz", "lacrosse", "ladik", "lag\xFAna", "l\xE1gy sz\xE1jpad", "l\xE1gyac\xE9l", "l\xE1gy\xEDt\xF3szer", "l\xE1gysz\xE1jpademel\u0151 izom", "lahmacun", "l\xE1jk", "lak\xE1lyoss\xE1g", "lak\xE1scsere", "lak\xE1shitel", "lak\xE1stextil", "lakat", "lakatosmester", "lakberendez\xE9s", "lakhelyv\xE1ltoztat\xE1s", "lakkoz\xE1s", "lak\xF3aut\xF3", "lak\xF3haj\xF3", "lak\xF3kocsi", "lakoma", "lakoss\xE1g", "lak\xF3t\xE1rs", "laktanya", "l\xE1makolostor", "l\xE1mpa", "l\xE1mpaerny\u0151", "l\xE1mpagy\xFAjtogat\xF3", "l\xE1mpal\xE1z", "l\xE1mpa\xFCveg", "lam\xFAr", "l\xE1ncg\xF6rbe", "l\xE1ncolat", "l\xE1ndzsa", "l\xE1ndzs\xE1s f\xFCzike", "l\xE1ng", "l\xE1nggomba", "l\xE1ngsz\xEDn\u0171 t\u0151kegomba", "l\xE1ngv\xF6r\xF6s p\xF3kh\xE1l\xF3sgomba", "lant", "lantlevel\u0171 t\xF6lgy", "lanzoprazol", "l\xE1nygimn\xE1zium", "l\xE1nykor\xFA", "l\xE1nyrabl\xF3", "lao", "lapalap\xEDt\xE1s", "lapbetilt\xE1s", "lapenged\xE9ly", "l\xE1pi ezerj\xF3f\u0171", "l\xE1pi n\xE1dtippan", "lap\xEDtott-kalap\xFA csiperke", "Laplace-egyenlet", "lapocka", "lapocka-nyelvcsonti izom", "lapos\xFCveg", "lappcserje", "lapsz\xE9l", "lapterjeszt\u0151", "lapu", "l\xE1pvid\xE9k", "laringol\xF3gia", "l\xE1rva", "lass\xEDt\xE1s", "laszti", "l\xE1tatlanban", "l\xE1that\xF3s\xE1g", "latin-amerikai", "l\xE1tk\xE9p", "l\xE1tnokzs\xE1lya", "l\xE1togatotts\xE1g", "l\xE1t\xF3k\xE9reg", "l\xE1tonya", "l\xE1t\xF3t\xE1vols\xE1g", "l\xE1tszattud\xF3s", "l\xE1tv\xE1ny", "latyak", "lavina", "lazacc\xE1pa", "lazas\xE1g", "l\xE1zh\u0151m\xE9r\u0151", "lazul\xE1s", "lead\xE1s", "le\xE1ll\xE1s", "le\xE1ny\xE1g", "le\xE1nyk\xE9r\xE9s", "le\xE1nysz\xF6ktet\u0151", "lebeg\u0151pontos sz\xE1m", "lebonyol\xEDt\xE1s", "l\xE9c", "l\xE9cker\xEDt\xE9s", "lecs\xF3", "lecs\xFAsz\xE1s", "le\xE9g\xE9s", "leereszt\xE9s", "lefokoz\xE1s", "lef\xFAj\xE1s", "legalit\xE1s", "l\xE9gbubor\xE9k", "l\xE9gellen\xE1ll\xE1s", "Legendre-szimb\xF3lum", "leg\xE9nyes", "legfels\u0151bb b\xEDr\xF3s\xE1g", "l\xE9gg\xF6mbkos\xE1r", "l\xE9ghaj\xF3z\xE1s", "l\xE9gi k\xF6zleked\xE9s", "l\xE9gicsap\xE1s", "l\xE9giforgalom-ir\xE1ny\xEDt\xE1s", "l\xE9gikisasszony", "l\xE9gi\xF3s", "l\xE9git\xE1mad\xE1s", "l\xE9gkalap\xE1cs", "legkisebb k\xF6z\xF6s t\xF6bbsz\xF6r\xF6s", "l\xE9gk\xF6r", "l\xE9gnyom\xE1sm\xE9r\u0151", "l\xE9g\xF6rv\xE9ny", "l\xE9gszennyez\xE9s", "l\xE9gtorn\xE1sz", "l\xE9gv\xE9delem", "l\xE9gz\xE9s", "l\xE9gzs\xE1k", "legyez\u0151", "legyez\u0151vir\xE1g", "l\xE9gyott", "lehangolts\xE1g", "lehetetlens\xE9g", "lehurrog\xE1s", "le\xEDr\xE1s", "lej\xE1tsz\xE1s", "lejt\u0151", "l\xE9kel\xE9s", "lek\xE9pez\xE9s", "lek\xF6telez\xE9s", "lekv\xE1ros\xFCveg", "l\xE9legz\xE9s", "l\xE9lekb\xFAv\xE1r", "l\xE9lekl\xE1t\xF3", "l\xE9lekveszt\u0151", "lel\xE9p\xE9s", "lelk\xE9sz", "lelkifurdal\xE1s", "lelkip\xE1sztor", "lel\u0151hely", "lem\xE9r\xE9s", "lemezes p\xF6feteg", "lemezj\xE1tsz\xF3", "lemeztektonika", "lemond\xE1s", "lencse", "lencsek\xE9plet", "lend\xFClet", "lengyel", "lenmag", "lenv\xE1szon", "lenyel\xE9s", "leone", "lep\xE1rl\xE1s", "l\xE9pcs\u0151h\xE1z", "leped\u0151", "lep\xE9nyfa", "l\xE9p\xE9s", "l\xE9p\xE9ssz\xE1ml\xE1l\xF3", "lepkes\xFAly", "lepr\xE1s", "lerakat", "lereag\xE1l\xE1s", "les", "lesifot\xF3s", "lesz\xE1ll\xE1s", "lesz\xE1ll\xF3p\xE1lya", "leszbi", "leszop\xE1s", "letart\xF3ztat\xE1si parancs", "let\xE9tem\xE9nyes", "l\xE9tforma", "l\xE9tminimum", "l\xE9tra", "l\xE9tsz\xE1mcs\xF6kkent\xE9s", "leukocitop\xE9nia", "leva", "levalbuterol", "leveg\u0151hi\xE1ny", "leveg\u0151mozg\xE1s", "leveg\u0151ztet\xE9s", "lev\xE9lbog\xE1r", "levelez\xE9s", "lev\xE9lhord\xF3", "lev\xE9lke", "lev\xE9lk\xE9zbes\xEDt\u0151", "lev\xE9lnehez\xE9k", "lev\xE9ltakar\xF3", "lev\xE9lt\xE1rosn\u0151", "lev\xE9ltet\u0171", "levendula", "leves", "levesest\xE1l", "levespor", "levita", "levofloxacin", "lex\xE9ma", "lexikografikus", "Leyland-ciprus", "l\xE9zerfegyver", "libab\u0151r", "libam\xE1j", "libanoni c\xE9drus", "libasor", "libatepert\u0151", "libat\xF6p\xF6rty\u0171", "liberalizmus", "l\xEDceum", "licit\xE1l\xE1s", "lid\xE9rcf\xE9ny", "liechtensteini", "liftakna", "ligat\xFAra", "ligeti csillagvir\xE1g", "ligeti tin\xF3ru", "lignit", "likelihood-f\xFCggv\xE9ny", "lila csenkesz", "lila \xF6k\xF6rfarkk\xF3r\xF3", "lila tejel\u0151gomba", "lilah\xFAs\xFA gereben", "lil\xE1s gereben", "lil\xE1sbarna d\xF6ggomba", "lil\xE1sod\xF3 sz\u0151rgomba", "lil\xE1ssz\xE1r\xFA agg\xF3f\u0171", "liliom", "Lima paszulybab", "limfocita", "limon\xE1d\xE9", "line\xE1ris algebra alapt\xE9tele", "line\xE1ris egyenlet", "line\xE1ris egyenletrendszerek m\xE1trixos alakja", "line\xE1ris helyettes\xEDt\xE9s", "line\xE1ris lek\xE9pez\xE9s k\xE9ptere", "line\xE1ris lek\xE9pez\xE9s", "line\xE1ris \xF6sszef\xFCgg\u0151s\xE9g", "line\xE1ris t\xE9r", "line\xE1ris transzform\xE1ci\xF3 karakterisztikus polinomja", "line\xE1ris transzform\xE1ci\xF3 saj\xE1tvektora", "linezolid", "linzer", "lip\xF3ma", "lisztatka", "lisztes berkenye", "lisztf\xE9reg", "lisztjegy", "lisztszag\xFA t\xF6lcs\xE9rgomba", "liter\xE1l", "litoszf\xE9ra", "liv\xF3", "lizinka", "l\xF3\xE1llom\xE1ny", "l\xF3bab", "l\xF3betegs\xE9g", "l\xF3ca", "locsol\xF3fej", "l\xF3denkab\xE1t", "l\xF3farok", "logaritmikus keres\xE9s", "l\xF3g\xE1s", "logikai ekvivalencia", "logikai kapu", "logikai szitaformula", "log\xF3", "logosz", "l\xF3idom\xEDt\xE1s", "lokaliz\xE1ci\xF3", "lokni", "l\xF3k\xF3rh\xE1z", "lom", "lomberd\u0151", "lombik", "lombkorona", "lombsz\xF6cske", "lompos", "lond\xEDner", "lopakod\xE1s", "lop\xF3", "lordmajor", "l\xF3retekfa", "l\xF3szak\xE9rt\u0151", "l\xF3sz\u0151rf\xFCl\u0151ke", "l\xF3t\xE1s-fut\xE1s", "loti", "lott\xF3z\xE1s", "l\xF3tuszszilva", "l\xF3\xFAsztat\xF3", "lovagl\xE1s", "lovagrend", "lovas", "lovass\xE1g", "lov\xE1sz", "lovetta", "l\u0151csl\xE1b", "l\u0151gyapot", "l\xF6k\xE9sg\xE1tl\xF3", "l\xF6kh\xE1r\xEDt\xF3", "l\u0151port\xE1r", "l\u0151szer", "l\xF6tty", "l\xF6v\xE9s", "l\u0151vil\xE1g", "luc", "lucernacs\xEDra", "lucos tobozf\xFCl\u0151ke", "l\xFAdg\xE9ge", "l\xFAdtalpbet\xE9t", "luftballon", "l\xFAgos\xEDt\xF3", "lumb\xE1g\xF3", "lupe", "lut\xE9cium", "lutri", "luxushotel", "l\xFCktet\xE9s", "lyukas\xF3ra", "maca", "macesz", "maci", "mack\xF3ruha", "macskabagoly", "macskagy\xF6k\xE9rf\xE9l\xE9k", "macskakapar\xE1s", "macskamenta", "macskaugr\xE1s", "mad\xE1m", "mad\xE1rberkenye", "mad\xE1rcsapat", "mad\xE1reledel", "mad\xE1rfaj", "mad\xE1rfog\xE1s", "mad\xE1rhang", "mad\xE1rinfluenza", "mad\xE1rj\xF3slat", "mad\xE1rkeser\u0171f\u0171", "mad\xE1rnyelv", "mad\xE1rraj", "mad\xE1rs\xF3skaf\xE9l\xE9k", "mad\xE1rtej", "mad\xE1rtoj\xE1s", "mad\xE1rveszedelem", "maffia", "magabiztos", "mag\xE1nb\xE1nya", "mag\xE1n\xE9let", "mag\xE1nerd\u0151", "mag\xE1nhatalom", "mag\xE1njogi", "mag\xE1norvos", "mag\xE1nszem\xE9ly", "mag\xE1n\xFCgy", "mag\xE1nz\xE1rka", "mag\xE1nnyomoz\xF3", "magas csuk\xF3ka", "magas k\xFApvir\xE1g", "magasfesz\xFClts\xE9g", "magaskordon", "magass\xE1g", "magasztal\xE1s", "magazin", "magf\xFAzi\xF3", "m\xE1gia", "magl\xFAd", "m\xE1gn\xE1s", "m\xE1gneses vektorpotenci\xE1l", "magnetikus", "magnezit", "magn\xF3kazetta", "magonc", "magt\xE9r", "magvet\u0151", "magzatelhajt\xF3", "magyal", "magyar \xE1b\xE9c\xE9", "magyar k\xF6k\xF6rcsin", "magyar m\xF3dszer", "magyar palka", "magyar t\xF6lgy", "magyar z\xF6rg\u0151f\u0171", "magyarbors", "magyarfal\xF3", "magyars\xE1g", "mahag\xF3nif\xE9l\xE9k", "m\xE1jashurka", "m\xE1jfolt", "m\xE1jgomb\xF3c", "m\xE1jkr\xE9m", "majolika", "majomkir\xE1ly", "majompar\xE1d\xE9", "majomtej", "majon\xE9zm\xE1rt\xE1s", "m\xE1jr\xE1k", "maj\xFAr\xE1szana", "m\xE1jusi p\xF3kh\xE1l\xF3sgomba", "makad\xE1mdi\xF3", "makar\xE1szana", "makett", "makk", "m\xE1kn\xF6v\xE9ny", "makrahal", "makrogazdas\xE1gtan", "malac", "malachit", "malacp\xF6rk\xF6lt", "mal\xE1j", "malajziai", "mal\xE1ta", "m\xE1l\xE9", "mal\xEDcia", "m\xE1lna", "m\xE1lnav\xF6r\xF6s tin\xF3ru", "malomg\xE1t", "malomk\u0151", "malter", "m\xE1lyvacserje", "mamb\xF3", "mammutfeny\u0151", "mamut", "mancs", "mand\xE1tum", "mandrag\xF3ra", "manduk\xE1szana", "mandulafeny\u0151", "mandulaliszt", "mandulasav", "mandzsetta", "mandzs\xFAriai", "mang\xE1nac\xE9l", "m\xE1ngorl\xF3", "mangrovep\xE1lmaf\xE9l\xE9k", "manifesztum", "mani\xF3ka", "mank\xF3ker\xE9k", "manom\xE9ter", "mantra", "manx", "mappa", "maracuja", "marad\xE9koszt\xE1ly", "maradv\xE1ny", "mar\xE1s", "maravirok", "m\xE1rgaf\xF6ld", "margitvir\xE1g", "marhab\xE9lsz\xEDn", "marhafaggy\xFA", "marhahajcs\xE1r", "marhal\xE1bsz\xE1r", "marhanyelv", "marhas\xE1g", "marhatok\xE1ny", "mari", "marimba", "m\xE1rkah\u0171s\xE9g", "m\xE1rkin\u0151", "markot\xE1nyos", "m\xE1rna", "marokszed\u0151", "marsall", "m\xE1rt\xE1s", "m\xE1rt\xEDr", "m\xE1rv\xE1nycsarnok", "m\xE1rv\xE1nyszobor", "marxizmus-leninizmus", "masiniszta", "masni", "m\xE1sodik szem\xE9ly", "m\xE1sodrend\u0171 differenci\xE1legyenlet", "m\xE1sol\xF3g\xE9p", "m\xE1svil\xE1g", "maszkab\xE1l", "m\xE1sz\xF3ka", "massz\xE1zs", "massz\u0151r", "mat\xE9", "matematika r\xE9szter\xFClete", "matematikai inga", "matematikai nyelv\xE9szet", "materialista", "matrac", "m\xE1trix ellentettje", "m\xE1trix invert\xE1lhat\xF3s\xE1ga", "m\xE1trix nullit\xE1sa", "m\xE1trix permanense", "m\xE1trix skal\xE1rral val\xF3 szorz\xE1sa", "m\xE1trix", "m\xE1trixm\u0171velet", "m\xE1trixok szorz\xE1sa", "matr\xF3zbl\xFAz", "matszjendr\xE1szana", "maurit\xE1niai", "maxim\xE1lis folyam-minim\xE1lis v\xE1g\xE1s t\xE9tele", "maximum-likelihood becsl\xE9s", "m\xE1zli", "m\xE1zsa", "mazsolasz\u0151l\u0151", "mec\xE9n\xE1s", "m\xE9cs", "m\xE9cses", "medalion", "medencecsont", "meder", "m\xE9diat\xF6rt\xE9n\xE9sz", "medikus", "med\xFAza", "medvebarlang", "medve\xE9nek", "medvek\xF6r\xF6mf\xE9l\xE9k", "medvesz\u0151l\u0151", "mefenaminsav", "megalap\xEDt\xE1s", "megal\xE1ztat\xE1s", "meg\xE1ll\xE1s", "megalom\xE1n", "megb\xE1nt\xE1s", "megb\xE9k\xFCl\xE9s", "megb\xEDzat\xE1s", "megb\xEDzott", "megegyez\xE9s", "megel\u0151z\xE9s", "meg\xE9rkez\xE9s", "meger\u0151szakol\xE1s", "megfejt\xE9s", "megfeleltet\xE9s", "megfigyel\u0151", "megfontolts\xE1g", "meggondol\xE1s", "meghajt\xF3program", "meghatalmazott", "meghitts\xE9g", "megh\xEDv\xF3", "megh\u0171l\xE9s", "megism\xE9tl\u0151d\xE9s", "megjelen\xE9s", "megkegyelmez\xE9s", "megk\xF6t\xE9s", "megk\xFCl\xF6nb\xF6ztet\xE9s", "megl\xE1t\xE1s", "megmenek\xFCl\xE9s", "megmunk\xE1l\xE1s", "megnevez\xE9s", "megnyit\xE1s", "megold\xE1svektor", "megoszt\xE1s", "megpr\xF3b\xE1ltat\xE1s", "megrendel\u0151lap", "megrong\xE1l\xE1s", "megsemmis\xEDt\xE9s", "megszak\xEDt\xE1s", "megsz\xE1llotts\xE1g", "megsz\xE1ml\xE1lhat\xF3an v\xE9gtelen halmaz", "megszok\xE1s", "megsz\xF6ktet\xE9s", "megtakar\xEDt\xE1s", "megtekint\xE9s", "megt\xE9r\xEDt\xE9s", "megt\xE9veszt\xE9s", "megtorl\xE1s", "meg\xFCresed\xE9s", "megv\xE1ltoztatott", "megvet\xE9s", "megye", "meggyfa", "meggy\u0151z\u0151d\xE9s", "m\xE9h\xE1llom\xE1ny", "m\xE9hbetegs\xE9g", "m\xE9helt\xE1vol\xEDt\xE1s", "m\xE9h\xE9szet", "m\xE9hfarkas", "m\xE9hkapar\xE1s", "m\xE9hkir\xE1lyn\u0151", "m\xE9hlep\xE9ny", "m\xE9hraj", "m\xE9hsejt ny\xE1lkagomba", "m\xE9hteny\xE9szt\u0151", "m\xE9hvir\xE1g", "meizli", "melankolikus", "meleg", "meleged\xE9s", "meleg\xEDt\u0151", "melegkezel\xE9s", "melegszendvics", "mell", "mell\xE9besz\xE9l\xE9s", "mell\xE9kajt\xF3", "mell\xE9kbika", "mell\xE9kes", "mell\xE9khaj\xF3", "mell\xE9khere farka", "mell\xE9kkereset", "mell\xE9kn\xE9v", "mell\xE9kpajzsmirigy", "mell\xE9ksz\xF6g", "mell\xE9kv\xE1g\xE1ny", "mell\xE9kvonal", "mell\xE9nyke", "mellkas", "mellnagyobb\xEDt\xE1s", "melltart\xF3", "mell\xFCreg", "mel\xF3dia", "m\xE9lt\xE1nyl\xE1s", "m\xE9lt\xF3s\xE1g", "m\xE9lygar\xE1zs", "m\xE9lyh\u0171t\u0151szekr\xE9ny", "m\xE9lys\xE9g", "m\xE9lytenger", "memantin", "mem\xF3riazavar", "mendemonda", "mened\xE9kjog", "menek\xFCl\xE9s", "men\xE9s", "menetd\xEDj", "menetir\xE1ny", "menetrend", "menetv\xE1g\xF3", "menlev\xE9l", "menstru\xE1ci\xF3", "mentalit\xE1s", "m\xE9ntelep", "mentes\xFCl\xE9s", "ment\u0151aut\xF3", "ment\u0151fa", "ment\u0151l\xE1da", "ment\u0151s", "ments\xE9g", "men\xFCpont", "menyasszonyjel\xF6lt", "menyegz\u0151", "menyhal", "mennybolt", "mennyezetl\xE1mpa", "mennyk\u0151", "m\xE9rce", "m\xE9regfog", "m\xE9regtan", "m\xE9r\xE9s", "m\xE9ret", "m\xE9retgazdas\xE1goss\xE1g", "merev korallgomba", "merevlevel\u0171 napraforg\xF3", "m\xE9rges \xE1d\xE1z", "m\xE9rges sz\xF6m\xF6rce", "Merkel-izom", "m\xE9rlegcs\xE9sze", "m\xE9rlegk\xF6nyv", "m\xE9rn\xF6k", "m\xE9rn\xF6kn\u0151", "m\xE9r\u0151\xE1llom\xE1s", "mer\u0151leges vet\xEDt\xE9s", "m\xE9r\u0151\xF3n", "Mersenne-pr\xEDm", "m\xE9rtani sorozat", "m\xE9rt\xE9khiteles\xEDt\xE9s", "mer\xFCl\u0151forral\xF3", "mesegy\u0171jtem\xE9ny", "mesek\xF6nyv", "mesevil\xE1g", "mesterdalnok", "mestergerenda", "mesterked\xE9s", "mesterlev\xE9l", "mesterremek", "mesters\xE9ges neur\xE1lis h\xE1l\xF3zat", "mestersz\xF3", "mestervizsga", "m\xE9sz\xE1rosleg\xE9ny", "meszely", "m\xE9szhabarcs", "m\xE9szk\u0151", "messzes\xE9g", "metaadat", "metadon", "metaf\xF3ra", "met\xE1n", "met\xE9lt", "met\xE9ng", "meteorol\xF3gia", "m\xE9ter\xE1ru", "m\xE9terrendszer", "metical", "metil\xE9ndioxi", "metiltesztoszteron", "metohexit\xE1l", "metr\xF3\xE1llom\xE1s", "metsz\xE9spont", "metsz\u0151pont", "mexik\xF3i datolyauborka", "mexik\xF3i hikoridi\xF3", "mexik\xF3i \xF6rd\xF6gm\xE1k", "mexik\xF3i", "m\xE9zbogy\xF3", "mezei aszat", "mezei csiperke", "mezei kakukkf\u0171", "mezei kom\xF3csin", "mezei mohacs\xE9szegomba", "mezei s\xF3ska", "mezei tars\xF3ka", "mezei veronika", "m\xE9zesfa", "m\xE9zg\xE1s \xE9ger", "mezolitikum", "mez\u0151gazda", "mez\u0151ny", "m\xE9zp\xE1zsit", "m\xE9zs\xE1rga l\xE1pigomba", "m\xE9zszag\xFA ned\u0171gomba", "mic\xE9lium", "miel\xF3ma", "mihaszna", "mikol\xF3gus", "mikrobiol\xF3gia", "mikrofon", "mikrohull\xE1m\xFA s\xFCt\u0151", "mikron", "mikroseb\xE9szet", "mikul\xE1s", "mili\u0151", "milligramm", "milliomosn\u0151", "mim\xF3za", "mindenes puska", "mindenszentek", "miniat\xFAra", "minigolf", "minimalizmus", "miniszter", "minisztertan\xE1cs", "min\u0151s\xE9gbiztos\xEDt\xE1s", "mintaasztalos", "mintaf\xE9rj", "mintap\xE9ld\xE1ny", "minyon", "mirhaf\u0171", "mirigyv\xE1lad\xE9k", "mise", "mism\xE1s", "misztella", "mitesszer", "m\xEDtosz", "mizantr\xF3pia", "mizu", "mobilit\xE1s", "mocs\xE1r", "mocs\xE1ri agg\xF3f\u0171", "mocs\xE1ri ibolya", "mocs\xE1ri kocsord", "mocs\xE1ri lednek", "mocs\xE1ri tisztesf\u0171", "mocs\xE1rt\xF6lgy", "mocsok", "modalit\xE1s", "modellez\xE9s", "modor", "m\xF3dosul\xE1s", "m\xF3dszertan", "mogul", "mogyor\xF3barna cs\xE9szegomba", "mogyor\xF3fa", "mogyor\xF3s h\xF3lyagfa", "mogyor\xF3vaj", "moh\xE1k", "moh\xF3s\xE1g", "m\xF3k\xE1r", "m\xF3kusfarkmoha", "mold\xE1viai", "molekulas\xFAly", "molin\xF3", "moln\xE1rkocsi", "moly", "molyhos ny\xEDr", "molyhoskalap\xFA susulyka", "monda", "mondat", "mond\xF3ka", "mongolk\u0151r\xF3zsa", "monocita", "monokli", "monopolt\u0151ke", "monotonit\xE1s", "Monte-Carlo-m\xF3dszer", "montezuma-feny\u0151", "m\xF3r", "morbidit\xE1s", "morfinista", "morfol\xF3gia", "mormol\xE1s", "morva tin\xF3ru", "m\xF3s\xE1s", "mosd\xF3szappan", "mos\xF3", "mosogat\xF3g\xE9p", "mos\xF3g\xE9p", "mos\xF3medve", "mos\xF3szer", "mostohaanya", "mostohagyerek", "mostohasz\xFCl\u0151", "moszatp\xE1fr\xE1ny", "motiv\xE1ci\xF3", "motoralkatr\xE9sz", "motorcs\xF3nak", "motorh\xE1ztet\u0151", "motorker\xE9kp\xE1ros", "motoros", "motorpr\xF3ba", "motor\xFCzemanyag", "motring", "moxibuszci\xF3", "mozaikpadl\xF3", "mozdonyford\xEDt\xF3", "mozdulatlans\xE1g", "mozg\xE1s", "mozg\xE1sszerv", "mozg\xF3\xE1rus", "mozgol\xF3d\xE1s", "mozicsillag", "mozisz\xEDn\xE9sz", "mozs\xE1r\xE1gy\xFA", "MP3 lej\xE1tsz\xF3", "mrit\xE1szana", "muflon", "muhar", "mukt\xE1szana", "mulat\xF3", "m\xFAlt idej\u0171 mell\xE9kn\xE9vi igen\xE9v", "multihalmaz", "multiplicit\xE1s", "mulya", "mund\xE9r", "mung\xF3babcs\xEDra", "munkaalkalom", "munka\xE1tal\xE1ny", "munkabesz\xFCntet\xE9s", "munkabrig\xE1d", "munkadarab", "munkaegys\xE9g", "munkaer\u0151hi\xE1ny", "munkaf\xE1zis", "munkafel\xFCgyel\u0151", "munkag\xF6d\xF6r", "munkah\xE9t", "munkair\xE1ny\xEDt\xF3", "munkakedv", "munkakezd\xE9s", "munkak\xF6r\xFClm\xE9ny", "munkak\xF6zvet\xEDt\u0151", "munk\xE1lat", "munk\xE1ltat\xF3", "munkamennyis\xE9g", "munkan\xE9lk\xFCli-t\xE1mogat\xE1s", "munka\xF3ra", "munkaprogram", "munk\xE1sakad\xE9mia", "munk\xE1s\xE1rul\xF3", "munk\xE1sbiztos\xEDt\xE1s", "munk\xE1scsapat", "munk\xE1segyes\xFClet", "munk\xE1s\xE9rdek", "munk\xE1sk\xE1der", "munk\xE1smozgalom", "munk\xE1sn\u0151", "munk\xE1sruha", "munk\xE1svonat", "munkaszolg\xE1lat", "munkasz\xFCneti nap", "munkater\xE1pia", "munka\xFCgyi miniszter", "munkav\xE1llal\xF3", "munkaviszony", "murvaf\xFCrt", "musculus deltoideus", "musk\xE1tli", "musk\xE1tliszag\xFA susulyka", "muskot\xE1lysz\u0151l\u0151", "must\xE1r", "must\xE1rmagcs\xEDra", "muszkli", "mut\xE1ci\xF3", "mutat\xF3sz\xE1m", "mutatv\xE1nysz\xE1m", "muzulm\xE1n", "muzsikus", "m\u0171anyag", "m\u0171b\xEDr\xE1lat", "m\u0171b\xFAtor", "m\u0171egyetem", "m\u0171eml\xE9kv\xE9delem", "m\u0171\xE9rt\u0151", "m\u0171fogsor", "m\u0171gumi", "m\u0171harag", "m\u0171hiba", "m\u0171ipar", "m\u0171kedvel\u0151", "m\u0171k\xE9z", "m\u0171korcsoly\xE1z\xF3", "m\u0171k\xF6d\xE9s", "m\u0171lakatos", "m\u0171lovarn\u0151", "m\u0171rep\xFCl\xE9s", "m\u0171sorad\xE1s", "m\u0171sorvezet\u0151", "m\u0171szaki tudom\xE1nyok", "m\u0171szer\xE9sz", "m\u0171sz\xF3", "m\u0171term\xE9k", "m\u0171t\u0151orvos", "m\u0171tr\xE1gya", "m\u0171v\xE9gtag", "m\u0171veleti er\u0151s\xEDt\u0151", "m\u0171veletre z\xE1rt", "m\u0171velts\xE9g", "m\u0171v\xE9szbej\xE1r\xF3", "m\u0171v\xE9szet", "m\u0171v\xE9szett\xF6rt\xE9net", "m\u0171v\xE9szh\xE1zass\xE1g", "m\u0171v\xE9szn\xE9v", "m\u0171v\xE9sztehets\xE9g", "m\u0171vezet\u0151", "Mycena zephirus", "n\xE1bhj\xE1szana", "nacion\xE1l\xE9", "n\xE1d", "n\xE1dbuzog\xE1ny", "n\xE1dfed\xE9l", "n\xE1di k\xEDgy\xF3gomba", "n\xE1dk\xE9p\u0171 csenkesz", "n\xE1dorisp\xE1n", "nadr\xE1gcsat", "nadr\xE1ggomb", "nadr\xE1gszab\xE1s", "nadr\xE1gsz\xEDj", "nadragulya", "n\xE1drengeteg", "n\xE1dsz\xE9k", "n\xE1dv\xE1g\xF3", "nagy aranka", "nagy csal\xE1n", "nagy d\xF6ggomba", "nagy g\xF6rgetegizom", "nagy l\xE1bujj", "nagy \u0151zl\xE1bgomba", "nagy szigma jel\xF6l\xE9s", "nagy v\xF6lgycsillag", "nagyapa", "nagyb\xE1tya", "nagyb\u0151g\u0151", "nagyd\xEDj", "nagyfesz\xFClts\xE9g", "nagyfr\xF6ccs", "nagyherceg", "nagyiparos", "nagykan\xE1l", "nagykeresked\u0151", "nagyk\xF6z\xF6ns\xE9g", "nagylevel\u0171 csodamogyor\xF3", "nagylevel\u0171 t\xF6lgy", "nagymami", "nagyn\xE9nike", "nagypapa", "nagys\xE1g", "nagysp\xF3r\xE1s homoki-cs\xE9szegomba", "nagysp\xF3r\xE1s szitagomba", "nagyszer\u0171s\xE9g", "nagytakar\xEDt\xE1s", "nagyterm\xE9s\u0171 szerbt\xF6vis", "nagyujj", "nagyvadas vad\xE1szter\xFClet", "nagyvir\xE1g\xFA kaffern\u0151szirom", "nagyvir\xE1g\xFA liliomfa", "n\xE1huatl", "nakfa", "nanom\xE9ter", "nap\xE9jegyenl\u0151s\xE9g", "naperny\u0151", "napf\xE9ny", "napf\xFCrd\u0151", "napih\xEDr", "napisajt\xF3", "napkit\xF6r\xE9s", "napk\xF6zi", "naplop\xF3", "Nap\xF3leon-f\xE9le h\xE1romsz\xF6gek", "nappal", "napraforg\xF3mag", "naprendszer", "napszak", "napsz\xE9l", "napt\xE1r", "napt\xE1vols\xE1g", "napvil\xE1g", "narancsbarna \xE1lc\xF6l\xF6pgomba", "narancseper", "narancsh\xE9j", "narancslekv\xE1r", "narancsos mohacs\xE9szegomba", "narancss\xE1rga csoportos-cs\xE9szegomb\xE1cska", "narancss\xE1rga laskagomba", "narancsszeg\xE9ly\u0171 k\xEDgy\xF3gomba", "narancssz\xEDn\u0171 enyveskorallgomba", "narancssz\xEDn\u0171 k\xE9regfek\xE9ly-gomb\xE1cska", "narancssz\xEDn\u0171 s\xE1sliliom", "narancsv\xF6r\xF6s \xE1lr\xF3kagomba", "narancsv\xF6r\xF6s pereszke", "narancsv\xF6r\xF6s tejel\u0151gomba", "nark\xF3", "narr\xE1tor", "naspolya", "n\xE1szaj\xE1nd\xE9k", "n\xE1szmisztika", "n\xE1szuram", "n\xE1tha", "n\xE1trium-klorid", "natto", "nav\xE1b", "navig\xE1tor", "ndonga", "nebul\xF3", "ned\u0171", "nedvess\xE9gm\xE9r\u0151", "neg\xE1ci\xF3", "n\xE9gercs\xF3k", "negyedd\xF6nt\u0151", "negyed\xF3ra", "n\xE9gyesimpulzus", "n\xE9gyfej\u0171 combizom", "n\xE9gysz\xF6g", "n\xE9gyzetes m\xE1trix karakterisztikus egyenlete", "n\xE9gyzetes m\xE1trix", "n\xE9gyzetkilom\xE9ter", "neh\xE9z\xE1sv\xE1ny", "neh\xE9zf\xE9mszennyez\xE9s", "neh\xE9zs\xE9g", "neh\xE9zs\xFAly", "neje", "nekrof\xEDlia", "nekt\xE1r", "nelson", "n\xE9ma", "n\xE9mber", "nemes alma", "nemes m\xE1jvir\xE1g", "nemesg\xE1z", "nemess\xE9g", "nemeukleid\xE9szi geometria", "nemezes k\xF6ld\xF6k\xF6sgomba", "nemezkalap", "nemis\xE9g", "nemline\xE1ris programoz\xE1s", "nemtermin\xE1lis", "nemt\xF6r\u0151d\xF6ms\xE9g", "nemzetbiztons\xE1g", "nemzeti bank", "nemzetk\xF6zis\xE9g", "n\xE9nike", "neof\xF3bia", "neokonzervat\xEDv", "neon", "neonf\xE9ny", "n\xE9p", "n\xE9p\xE1radat", "n\xE9pbetegs\xE9g", "n\xE9pbut\xEDt\xE1s", "n\xE9pdal", "n\xE9pellens\xE9g", "n\xE9pfaj", "n\xE9pf\xFCrd\u0151", "n\xE9phangulat", "n\xE9pkonyha", "n\xE9pl\xE9lek", "n\xE9pm\u0171v\xE9sz", "n\xE9pny\xFAz\xF3", "nepper", "n\xE9ps\xE9g", "n\xE9pszavaz\xE1s", "n\xE9pt\xF6meg", "nept\xFAnium", "n\xE9pvez\xE9r", "neszel\xE9s", "neur\xE1lis h\xE1l\xF3zat", "neurol\xF3gus", "neuropszichol\xF3gia", "neutr\xE1lis", "neutronbomba", "n\xE9vad\xF3", "n\xE9vbet\u0171", "nevel\xE9s", "nevel\u0151anya", "nevel\u0151sz\xFCl\u0151", "nevets\xE9g", "nevezett", "n\xE9vh\xE1zass\xE1g", "n\xE9vk\xE1rtya", "n\xE9vmagyaros\xEDt\xE1s", "n\xE9vmutat\xF3", "n\xE9vrokons\xE1g", "n\xE9vsz\xF3k\xE9pz\xE9s", "n\xE9vt\xE1r", "n\xE9v\xFCnnep", "newton", "n\xE9z\xE9s", "n\xE9z\u0151k\xF6z\xF6ns\xE9g", "niacin", "nig\xE9riai", "nikkel", "niktof\xF3bia", "nincstelens\xE9g", "nitr\xE1t", "nitroglicerin", "Nobel-d\xEDj", "nokedli", "nonsalansz", "norfloxacin", "norm\xE1l alak", "normalit\xE1s", "norm\xE1lt vektort\xE9r", "norm\xE1s", "notabilit\xE1s", "november", "n\xF3zi", "n\u0151cs\xE1b\xE1sz", "n\u0151gy\u0171l\xF6let", "n\u0151iess\xE9g", "n\u0151nap", "n\u0151rabl\xF3", "n\u0151st\xE9ny r\xF3ka", "n\u0151szirom", "n\xF6veked\xE9s", "n\xF6vend\xE9k", "n\xF6v\xE9nybetegs\xE9g", "n\xF6v\xE9nyfaj", "n\xF6v\xE9nyirt\xF3", "n\xF6v\xE9nynemzets\xE9g", "n\xF6v\xE9nytan", "n\xF6v\xE9nyv\xE9d\u0151szer", "n\xF6v\xE9s", "n-test probl\xE9ma", "nug\xE1t", "nukleon", "nukuoro", "nullit\xE1s", "nullt\xE9r", "nun", "nutka ciprus", "n\xFC\xE1nsz", "ny\xE1jass\xE1g", "nyakb\u0151r", "nyak\xE9k", "nyakl\xE1nc", "nyak\xF6rves szegf\u0171gomba", "nyakszirtcsont", "ny\xE1l", "nyalat\xF3", "ny\xE1lkah\xE1rtya", "ny\xE1lk\xE1s t\u0151kegomba", "ny\xE1lmirigy", "ny\xE1r", "nyaral\xF3hely", "ny\xE1rfa-\xE9rdestin\xF3ru", "ny\xE1rfa-pereszke", "ny\xE1rfa-t\u0151kegomba", "ny\xE1ri laskagomba", "ny\xE1riorgona", "ny\xE1rspolg\xE1r", "nyavalyg\xE1s", "nyeles agancsgomba", "nyeletlen c\xF6l\xF6pgomba", "nyelv alatti mirigy", "nyelv\xE1pol\xE1s", "nyelvbotl\xE1s", "nyelvcsere", "nyelv\xE9sz", "nyelvfejleszt\xE9s", "nyelv-garat ideg", "nyelvhaszn\xE1lat", "nyelvhiba", "nyelvj\xE1t\xE9k", "nyelvkurzus", "nyelvm\u0171vel\xE9s", "nyelvp\xE1fr\xE1ny", "nyelvszak", "nyelvtanfolyam", "nyelvtan\xF3ra", "nyelvtipol\xF3gia", "nyelvtud\xE1s", "nyelvv\xE1ltozat", "nyenyere", "nyereg\xEDz\xFClet", "nyerem\xE9nyk\xF6lcs\xF6n", "nyeres\xE9gv\xE1gy", "nyer\u0151sz\xE1m", "nyerses\xE9g", "nyersvas", "nyestc\xE1pa", "nyilall\xE1s", "ny\xEDl\xE1sz\xE1r\xF3", "ny\xEDlgy\xF6k\xE9r", "ny\xEDlt halmaz", "ny\xEDlts\xE1g", "nyilv\xE1noss\xE1g", "ny\xEDr", "ny\xEDrfacukor", "ny\xEDrfajdkakas", "ny\xEDrfavessz\u0151", "nyirokgomba", "nyiroksz\xF6vet", "nyitott s\xE9ta", "nyitvaterm\u0151", "nyolcezres", "nyom", "nyom\xE1spr\xF3ba", "nyomb\xE9l", "nyomdahiba", "nyomd\xE1szat", "nyomi", "nyom\xF3gomb", "nyomor\xE9k", "nyom\xF3szil\xE1rds\xE1g", "nyomtat\xF3", "nyomt\xE1v", "nyoszolya", "ny\xF6sz\xF6rg\xE9s", "nyugalom", "nyugati k\xE9kperje", "nyugati szam\xF3cafa", "nyugat-k\xEDnai szomor\xFA ciprus", "nyugd\xEDjaz\xE1s", "nyugi", "nyugtat\xF3szer", "ny\xFAjt\xF3deszka", "ny\xFAlfarkf\u0171", "ny\xFAl\xF3sod\xE1s", "ny\xFAlpecsenye", "ny\xFAltagy", "nyuszif\xFCl", "ny\xFCzsg\xE9s", "o\xE1zis", "objektivit\xE1s", "objektumorient\xE1lt programoz\xE1s", "\xF3bor", "obszidi\xE1n", "oceanogr\xE1fia", "\xF3cskapiac", "ocsm\xE1nys\xE1g", "oda\xE9rkez\xE9s", "oda\xFAt", "odvas keltike", "ofloxacin", "\xF3g\xF6r\xF6g", "ohmos ellen\xE1ll\xE1s", "okarina", "okirat-hamis\xEDt\xE1s", "okkers\xE1rga fatin\xF3ru", "okkultizmus", "okm\xE1ny", "\xF3korkutat\xE1s", "okostelefon", "okozat", "okta\xE9der", "oktat\xE1s", "oktat\xF3film", "oktogon", "\xF3l", "ol\xE1hpap", "olaj\xE1llam", "olajbarna p\xF3kh\xE1l\xF3sgomba", "olajfa", "olajfinom\xEDt\xF3", "olajkincs", "olajmez\u0151", "olajs\xE1rga fapereszke", "olajsz\xFCrke \u0151zl\xE1bgomba", "olajv\xE1llalat", "olajz\xF6ldes p\xF3kh\xE1l\xF3sgomba", "olasz szerbt\xF6vis", "olcs\xF3s\xE1g", "oldalas", "oldalkocsi", "oldals\xE1v", "oldalt\xE1mad\xE1s", "oldat", "OLF", "olimpia", "ol\xEDvaolaj", "olivz\xF6ld cs\xE9szegomba", "\xF3lomb\xE1nya", "\xF3lomkatona", "\xF3lomlap", "\xF3lom\xF6nt\xE9s", "\xF3lomv\xEDz", "olt\xE1rgyertya", "olt\xF3anyag", "olvad\xE1s", "olvasm\xE1ny", "olvas\xF3jel", "olvas\xF3l\xE1mpa", "olvaszt\xE1s", "\xF3mega", "oml\xE1svesz\xE9ly", "ond\xF3h\xF3lyag", "\xF3nix", "onomasztika", "ontol\xF3gia", "opci\xF3", "oper\xE1ci\xF3s rendszer", "operat\xEDv program", "operettsz\xEDnh\xE1z", "\xF3piumf\xFCgg\u0151", "opportunizmus", "optikai sz\xE1l", "optimista", "\xF3ra", "\xF3rad\xEDj", "\xF3rajav\xEDt\xE1s", "\xF3raketyeg\xE9s", "\xF3ralap", "\xF3ram\u0171", "\xF3rarug\xF3", "\xF3rasz\xE1m", "\xF3ratart\xF3", "\xF3ratorony", "\xF3razseb", "orbon\xE1sz", "ordas", "ord\xEDt\xE1s", "oregoni hamisciprus", "Ore-t\xE9tel", "organizmus", "orgazmus", "orgonas\xEDp", "\xF3ri\xE1s bokrosgomba", "\xF3ri\xE1s hibiszkusz", "\xF3ri\xE1s mamutfeny\u0151", "\xF3ri\xE1s passi\xF3gy\xFCm\xF6lcs", "\xF3ri\xE1s s\xFCnkaktusz", "\xF3ri\xE1s tuja", "\xF3ri\xE1s", "\xF3ri\xE1scs\xE9sze", "\xF3ri\xE1sk\xEDgy\xF3", "\xF3ri\xE1sp\xF6feteg", "\xF3ri\xE1s-t\xFCnd\xE9rr\xF3zsa", "orientalista", "orig\xF3", "orjaleves", "orm\xE1nyliliom", "orogenezis", "oromzat", "oroszk\xF6nyv", "oroszl\xE1nfog", "oroszl\xE1nsz\xE1j", "orrcimpa", "orrhegy", "orrlyuk", "orrs\xF6v\xE9nyferd\xFCl\xE9s", "orr\xFCreg", "ors\xF3f\xE9reg", "ors\xF3s p\xF3kh\xE1l\xF3sgomba", "orsz\xE1galap\xEDt\xF3", "orsz\xE1g\xE9p\xEDt\xE9s", "Orsz\xE1gh\xE1z", "orsz\xE1gn\xE9v", "orsz\xE1g\xFAt", "ortogon\xE1lis m\xE1trixok", "ortogon\xE1lis vet\xFCletvektor", "ortop\xE9dia", "orvl\xF6v\xE9sz", "orvosdoktor", "orvosh\xE9t", "orvosi atrac\xE9l", "orvosi k\xF6r\xF6mvir\xE1g", "orvosi pemetef\u0171", "orvosi sz\xE9kf\u0171", "orvosi veronika", "orvosjel\xF6lt", "orvosnemzed\xE9k", "orvoss\xE1g", "orvost\xE1rs", "orvosszer", "orvvad\xE1sz", "ostor", "ostorsz\xEDj", "ostromg\xE9p", "oszcill\xE1tor", "oszl\xE1s", "oszlopm\xE1trix", "oszlopvektor", "osztal\xE9k", "oszt\xE1lyb\xE9ke", "oszt\xE1lyel\u0151jog", "oszt\xE1lyfelbont\xE1s", "oszt\xE1lyg\u0151g", "oszt\xE1lyhelyzet", "oszt\xE1lyk\xF6nyv", "oszt\xE1lynyelv", "oszt\xE1ly\xF6sszet\xE9tel", "oszt\xE1lysorsjegy", "oszt\xE1lytal\xE1lkoz\xF3", "oszt\xE1lyt\xE1rsn\u0151", "oszt\xE1lyvezet\u0151", "osztand\xF3", "oszthat\xF3s\xE1g", "osztott p\xF6feteg", "osztr\xE1k s\xE1rk\xE1nyf\u0171", "\xF3templom", "ouzo", "\xF3v\xE1ros", "overstimulation", "\xF3v\xF3hely", "oxaliplatin", "oxig\xE9n", "oxprenolol", "ozm\xF3zis", "\xD6", "\xF6bl\xEDt\xE9s", "\xF6bl\xF6cske", "\xF6d\xE9ma", "\xF6koegyens\xFAly", "\xF6kosziszt\xE9ma", "\xF6k\xF6lharc", "\xF6k\xF6lv\xEDv\xF3", "\xF6k\xF6rfarkk\xF3r\xF3", "\xF6k\xF6rszem", "\xF6l", "\xF6lel\xE9s", "\xF6lt\xF6ny", "\xF6lt\xF6z\u0151", "\xF6mleng\xE9s", "\xF6nadjung\xE1lt m\xE1trix", "\xF6narck\xE9p", "\xF6nbizalom", "\xF6nder\xFCl\xE9s", "\xF6nell\xE1t\xE1s", "\xF6nfegyelem", "\xF6ng\xF3l", "\xF6ngyullad\xE1s", "\xF6nim\xE1dat", "\xF6nk\xE9ny", "\xF6nkifejez\xE9s", "\xF6nkontroll", "\xF6nkritika", "\xF6nm\xE9rs\xE9kl\xE9s", "\xF6nol\xF3gus", "\xF6nsajn\xE1lat", "\xF6ntelts\xE9g", "\xF6ntisztul\xE1s", "\xF6nt\xF6ttvas", "\xF6nt\xF6z\u0151cs\u0151", "\xF6ntudat", "\xF6nv\xE9delem", "\u0151rangyal", "\xF6rd\xF6gc\xE9rna", "\xF6rd\xF6ghal", "\xF6rd\xF6gszek\xE9r laskagomba v\xE1ltozat", "\xF6rd\xF6g\u0171z\u0151", "\xF6regapa", "\xF6regkor", "\xF6regt\xE9szta", "\u0151rgr\xF3fs\xE1g", "\u0151rizet", "\u0151rkanonok", "\u0151rl\xE9s", "\xF6rm\xE9nygy\xF6k\xE9r", "\xF6r\xF6k", "\xF6r\xF6kjog", "\xF6r\xF6kl\xE9stan", "\xF6r\xF6k\xF6s", "\xF6r\xF6kz\xF6ld puszp\xE1ng", "\xF6r\xF6mapa", "\xF6r\xF6mk\xF6nny", "\xF6r\xF6mrivalg\xE1s", "\xF6r\xF6mujjong\xE1s", "\u0151rs\xE9g", "\u0151rszem", "\u0151r\xFCltekh\xE1za", "\xF6rv\xE9nyf\xFCz\xE9r", "\u0151s", "\u0151sanyag", "\u0151sbemutat\xF3", "\u0151sdi\xE1k", "\u0151sember", "\u0151sevang\xE9lium", "\u0151sforma", "\u0151shegys\xE9g", "\u0151sis\xE9g", "\u0151skommunizmus", "\u0151sk\u0151kor", "\u0151sk\u0151zet", "\u0151slakos", "\u0151sl\xE9nytan", "\u0151smonda", "\u0151snyelv", "\u0151sr\xE9g\xE9szet", "\u0151ssejtbe\xFCltet\xE9s", "\u0151st\xE1rsadalom", "\u0151stermel\u0151", "\u0151stulok", "\u0151svil\xE1g", "\u0151szents\xE9ge", "\u0151szi v\xE9rf\u0171", "\u0151szibarackfa", "\u0151szint\xE9tlens\xE9g", "\xF6sszead\xE1s", "\xF6sszees\xE9s", "\xF6sszef\xE9rhetetlens\xE9g", "\xF6sszefon\xF3d\xE1s", "\xF6sszeg", "\xF6sszehasonl\xEDt\xE1s", "\xF6ssze\xEDr\xE1s", "\xF6sszekapcsolhat\xF3s\xE1g", "\xF6sszen\u0151tt ripacsgomba", "\xF6ssz\xE9rt\xE9k", "\xF6sszetart\xE1s", "\xF6sszetett sz\xE1m", "\xF6sszet\u0171z\xE9s", "\xF6sszevisszas\xE1g", "\xF6sszhang", "\xF6sszj\xF6vedelem", "\u0151sszl\xE1v", "\xF6ssztermel\xE9s", "\xF6szt\xF6ke", "\xF6szt\xF6n\xE9let", "\xF6szv\xE9r", "\xF6tlev\xE9lk\xE9j\u0171 ak\xE9bia", "\xF6tsz\xF6g", "\xF6tv\xF6s", "\xF6v", "\xF6vest\xF6nk\u0171 p\xF3kh\xE1l\xF3sgomba", "\u0151z", "\u0151zcomb", "\u0151zike", "\xF6z\xF6nn\xF6v\xE9ny", "\xF6zvegyasszony", "\u0151zsuta", "pacal", "pacifista", "p\xE1col", "pacsni", "p\xE1dahaszt\xE1szana", "padl\xE1s", "padl\xE1st\u0171z", "padlizs\xE1nkr\xE9m", "padl\xF3csempe", "padl\xF3kefe", "padl\xF3viasz", "paella", "p\xE1fr\xE1nyfeny\u0151", "pagony", "pajszer", "pajzsika", "pajzsmirigyvizsg\xE1lat", "p\xE1ka", "pakli", "paksam\xE9ta", "palack", "palackoz\xE1s", "palacsintat\xF6ltel\xE9k", "palaolaj", "pal\xE1ver", "paleo", "paleoklimatol\xF3gia", "p\xE1lesz", "pali", "p\xE1linkaf\u0151zde", "p\xE1link\xE1spoh\xE1r", "palka", "pallos", "p\xE1lmacukor", "p\xE1lmazs\xEDr", "palotah\xF6lgy", "p\xE1lya", "p\xE1lyakeresztez\u0151d\xE9s", "p\xE1lya\u0151r", "p\xE1ly\xE1zat", "pamacsos szem\xF6lcs\xF6sgomba", "pampaf\u0171", "pamutharisnya", "panamai", "panaszos", "p\xE1nc\xE9ler\u0151d", "p\xE1nc\xE9lgr\xE1n\xE1t", "p\xE1nc\xE9llemez", "p\xE1nc\xE9lruha", "p\xE1nc\xE9lvonat", "pancser", "pandeizmus", "pandzs\xE1bi", "pang\xE1s", "p\xE1nikszindr\xF3ma", "pannon nyelesp\xF6feteg", "p\xE1nt", "p\xE1ntlika", "pantoprazol", "papa", "papag\xE1j galambgomba", "pap\xE1ja", "p\xE1paszemf\u0171", "papi", "pap\xEDrgy\xE1r", "pap\xEDrk\xEDgy\xF3", "pap\xEDrlemez", "pap\xEDrp\xE9nz", "pap\xEDrszalv\xE9ta", "pap\xEDrzacsk\xF3", "papn\xE9", "paprikajancsi", "paprikavir\xE1g", "papsapka kaktusz", "papucscip\u0151", "papucsos k\xEDgy\xF3gomba", "p\xE1r", "parabola cs\xFAcspontja", "par\xE1d\xE9", "paradicsomkar\xF3", "paradicsommad\xE1r", "paradicsomp\xFCr\xE9", "paradicsomsz\xF3sz", "paradontol\xF3gia", "parafadug\xF3", "parafr\xE1zis", "parajf\u0151zel\xE9k", "paral\xEDzis", "param\xE9teres egyenlet", "parancsnok", "parancssor", "parap\xE1fr\xE1nyfa", "paraszkavedekatriaf\xF3bia", "parasztasszony", "parasztfi\xFA", "paraszth\xE1z", "parasztorsz\xE1g", "parat\xEDfusz", "parazita", "par\xE1zsburgonya", "par\xE1zstapl\xF3", "p\xE1rbesz\xE9d", "parci\xE1lis differenci\xE1legyenlet", "p\xE1rducgal\xF3ca", "parenyica", "parf\xFCm\xE9ria", "p\xE1rhuzamos", "paripa", "park", "parkerd\u0151", "parkol\xF3", "parkol\xF3jegy", "parlag", "parlagi mohacs\xE9szegomba", "parlagi r\xF3zsa", "p\xE1rl\xE1si bor", "parmez\xE1nsajt", "p\xE1rnamoha", "par\xF3ka", "p\xE1rolg\xE1s", "p\xE1ros f\xFCggv\xE9ny", "p\xE1ros\xEDt\xE1s", "part", "p\xE1rt\xE1ll\xE1s", "p\xE1rtb\xFCntet\xE9s", "partedli", "p\xE1rtember", "p\xE1rtfegyelem", "p\xE1rtf\xF3rum", "partfut\xF3", "p\xE1rth\xE1z", "parti n\xE1dtippan", "part\xEDci\xF3", "p\xE1rtigazolv\xE1ny", "p\xE1rtiroda", "partiz\xE1n", "p\xE1rtjelv\xE9ny", "p\xE1rtklub", "p\xE1rtk\xF6zpont", "p\xE1rtlista", "p\xE1rtnap", "p\xE1rtoktat\xE1s", "p\xE1rtonk\xEDv\xFCli", "partrasz\xE1ll\xE1s", "p\xE1rtszervezet", "p\xE1rttitk\xE1rs\xE1g", "p\xE1rtv\xE1lasztm\xE1ny", "p\xE1rtvezet\u0151", "p\xE1rtvisz\xE1ly", "pasa", "pascsim\xF3tt\xE1n\xE1szana", "passacaglia", "pastu", "paszom\xE1ny", "passzol\xE1s", "pasztin\xE1k", "p\xE1sztor\xE9let", "p\xE1sztorj\xE1t\xE9k", "p\xE1sztorkutya", "p\xE1sztorlev\xE9l", "p\xE1sztor\xF3ra", "p\xE1sztort\xE1nc", "paszt\u0151r\xF6z\xE9s", "patak", "patakpart", "paterol", "patin\xE1s \xE1lszarvasgomba", "patk\xF3", "patk\xF3sarok", "patol\xF3gus", "patriarch\xE1tus", "patriotizmus", "patr\xF3nus", "pattanty\xFA", "patyolatfeh\xE9r kehelygomb\xE1cska", "p\xE1va", "p\xE1vakakas", "p\xE1vi\xE1n", "p\xE1zsit", "Peano-axi\xF3m\xE1k", "pecsenye", "pecsenyeliba", "pecs\xE9t", "pecs\xE9tviaszgomba", "ped\xE1l", "pedof\xEDlia", "pehelypaplan", "pejotl", "p\xE9ks\xE9g", "p\xE9lda", "p\xE9ld\xE1nysz\xE1m", "pelik\xE1n", "pelyhes fat\xF6lcs\xE9rgomba", "pelyhest\xF6nk\u0171 bocskorosgomba", "pemetef\u0171", "pen\xE9sz", "penget\u0151", "penne", "pentobarbit\xE1l", "p\xE9nz\xE1raml\xE1s", "p\xE9nzb\xE1nya", "p\xE9nzecske-ripacsgomba", "p\xE9nzesutalv\xE1ny", "p\xE9nzhi\xE1ny", "p\xE9nzk\xEDn\xE1lat", "p\xE9nzlevel\u0171 pilea", "p\xE9nzpiac", "p\xE9nzt\xE1rablak", "p\xE9nzt\xE1rnapl\xF3", "p\xE9nzt\xE1rosn\u0151", "p\xE9nz\xFCgyi bizotts\xE1g", "p\xE9nz\xFCgy\u0151r", "p\xE9nzverde", "p\xE9nzzavar", "p\xE9p", "p\xE9ra", "perd\xFClet", "peremizs", "peres", "peresztrojka", "perg\u0151dob", "perih\xE9lium", "periodiz\xE1ci\xF3", "perje", "perk\xE1l", "perleked\u0151", "permetez\u0151szer", "permut\xE1ci\xF3 inverzi\xF3sz\xE1ma", "pernahajder", "peror\xE1ci\xF3", "Perron-vektor", "pertli", "perverz", "perzsa selyemak\xE1c", "perzsa", "pesto", "pesszimizmus", "pete", "p\xE9terfi-cs\xFCdf\u0171", "petidin", "petrok\xE9mia", "petrolk\xE9mia", "pettyeskosbor", "pezsg\u0151f\xFCrd\u0151", "p\xE9zsma", "p\xE9zsmam\xE1lyva", "p\xE9zsmar\xF3zsa", "pia", "piaci kapitaliz\xE1ci\xF3", "Picard-t\xE9tel", "pihe", "pihen\u0151nap", "pih\xE9s ter\xFCl\u0151laskagomba", "pikkely\xE1g\xFAmoha", "pikkelyes harmatgomba", "pikkelyes t\xF6lcs\xE9rgomba", "pikkelyk\xE9s l\xE1nggomb\xE1cska", "pikol\xF3", "pil\xE1f", "pilla", "pillanatragaszt\xF3", "pillang\xF3fa", "pillang\xF3vir\xE1g", "pillav\xE1z", "pill\xE9r", "pil\xF3taf\xFClke", "pimp\xF3", "pince", "pincemester", "pinc\xE9rl\xE1ny", "pinc\xE9szet", "pindolol", "pingponglabda", "pinka", "pintycs\u0151r\u0171 moha", "pipa", "piperacillin", "piperek\xE9szlet", "pipogya", "piramisrendszer", "pirit", "pir\xEDt\xF3skeny\xE9r", "pirog", "piros cs\xE9szegomba", "piros g\xF3lyaorr", "piros l\xE1mpa", "piros sarkanty\xFAvir\xE1g", "piros", "piros-fekete fa", "pirotechnika", "pirul\xE1s", "pirul\xF3 zsemlegomba", "pisk\xF3ta", "pislant", "piszkavas", "piszkozat", "pisztoly", "Pitagorasz-t\xE9tel", "piton", "pityere", "pity\xF3ka", "pixelm\xE9lys\xE9g", "pizzafut\xE1r", "pizsama", "placc", "plak\xE1t", "plan\xE9ta", "plaszticit\xE1s", "plasztilin", "platform", "plat\xF3ni test", "pl\xE9b\xE1niatemplom", "pl\xE9h", "pletykaf\xE9szek", "plioc\xE9n", "plut\xF3nium", "pocak", "podagra", "po\xE9ta", "pofaszak\xE1ll", "pog\xE1csa", "pogi", "poggy\xE1szkocsi", "poh\xE1r", "poh\xE1rka", "poh\xE1rsz\xE9k", "p\xF3kbang\xF3", "p\xF3kh\xE1l\xF3h\xE1rtya", "p\xF3khas", "pokr\xF3c", "polc", "polg\xE1ri jog", "polg\xE1rmester", "polg\xE1rs\xE1g", "poli\xE9der \xE9lgr\xE1fja", "polig\xE1mia", "polimer", "polinom foka", "polinomgy\u0171r\u0171", "polipeptid", "polisz\xE9mia", "politikus", "polka", "polon\xE9z", "poloskaszag\xFA tejel\u0151gomba", "p\xF3ly\xE1s", "pomp\xE1s f\xFCl\u0151ke", "pomp\xE1s kutyatej", "pomp\xE1s szabalp\xE1lma", "pompoml\xE1ny", "pongida", "p\xF3nil\xF3", "pontfelh\u0151diagram", "pontosvessz\u0151", "pontsz\xE1m", "pontuszi t\xF6lgy", "ponyvareg\xE9ny", "pop\xE9nekes", "popul\xE1ci\xF3", "p\xF3r", "porcel\xE1n", "porcika", "porcos f\xFClesgomba", "p\xF3r\xE9hagyma", "porhany\xF3sgomba", "porlaszt\xF3", "pornogr\xE1fia", "porol\xF3", "poronty", "poroszka", "porszem", "portalan\xEDt\xE1s", "port\xF3b\xE9lyeg", "portya", "porz\xF3fa", "p\xF3sta", "postafi\xF3k", "postahivatal", "postamester", "post\xE1saut\xF3", "posta\xFCgy", "poszm\xE9hbang\xF3", "poszt\xF3nadr\xE1g", "poszt\xF3zubbony", "p\xF3tanyag", "p\xF3thitel", "p\xF3tkocsi", "p\xF3tl\xE1s", "p\xF3tszer", "p\xF3tvizsga", "poty\xE1z\xF3", "pozakonazol", "poz\xEDci\xF3", "pozit\xEDv hozz\xE1\xE1ll\xE1s", "pozol\xF3gia", "pozsg\xE1s \u0151szir\xF3zsa", "p\xF6f\xE9kel\xE9s", "p\xF6rgetty\u0171", "p\xF6r\xF6ly", "p\xF6szm\xE9te", "pragmatizmus", "pr\xE1n\xE1j\xE1ma", "praxis", "precizit\xE1s", "pr\xE9dik\xE1tor", "prednizolon", "preferencia", "prel\xE1tus", "premier", "pr\xE9post", "pr\xE9rikutya", "pr\xE9smust", "pressz\xF3s", "prezi", "priccs", "pr\xEDmfelbont\xE1s", "primit\xEDv polinom", "pr\xEDmteszt", "pritaminpaprika", "priznic", "pr\xF3baf\xFClke", "pr\xF3bareggeli", "pr\xF3bat\xE9tel", "processzor", "pr\xF3f\xE9cia", "profil", "program", "programsz\xE1ml\xE1l\xF3", "prokari\xF3ta", "proktol\xF3gus", "prolet\xE1rdiktat\xFAra", "prom\xE9tium", "propagandaanyag", "propanol", "propoliszgomba", "prosperit\xE1s", "prosztaglandin", "prosztatat\xFAlteng\xE9s", "protekci\xF3", "protestantizmus", "proton", "proviz\xF3rium", "pr\xF3za\xEDr\xF3", "pr\xFCd\xE9ria", "pszeudok\xF3d", "pszichi\xE1ter", "pszichofizika", "pszichoterapeuta", "Ptolemaiosz-t\xE9tel", "publicista", "pucer\xE1j", "p\xFAderpamacs", "pufajka", "puffer", "puhas\xE1g", "puki", "pulcsi", "pulmonol\xF3gia", "pulzus", "pulykahere", "pulykamell", "pulykas\xFClt", "pumpa", "p\xFAp", "p\xFApos egyr\xE9t\u0171tapl\xF3", "puritanizmus", "puskaagy", "puskam\u0171ves", "pusk\xE1z\xF3", "puszipajt\xE1s", "pusztai \xE1lk\xEDgy\xF3gomba", "pusztai csiperke", "pusztai ned\u0171gomba", "putri", "p\xFCl\xF3n", "p\xFCnk\xF6sdvas\xE1rnap", "p\xFCsp\xF6kfeny\u0151", "p\xFCsp\xF6ks\xE9g", "rab", "rabeprazol", "rabl\xF3", "rabl\xF3c\xE1pa", "rabl\xF3h\xE1bor\xFA", "rabl\xF3lovag", "rabl\xF3vez\xE9r", "rabszolgamunka", "racion\xE1lis f\xFCggv\xE9ny", "racka", "r\xE1csh\xE1l\xF3", "radar", "radi\xE1tor", "r\xE1di\xF3", "radioaktivit\xE1s", "r\xE1di\xF3csend", "r\xE1di\xF3hull\xE1m", "r\xE1di\xF3k\xE9sz\xFCl\xE9k", "radiol\xF3gus", "r\xE1di\xF3s", "r\xE1di\xF3technika", "r\xE1dium", "r\xE1f", "rag", "ragadoz\xF3 mad\xE1r", "r\xE1galmaz\xF3", "r\xE1g\xE1s", "ragaszt\xF3szalag", "r\xE1gcs\xE1l\xF3", "r\xE1g\xF3l\xE1b", "ragu", "r\xE1hagyatkoz\xE1s", "r\xE1illeszt\xE9s", "rajong\xE1s", "rajt", "rajvonal", "rajzlap", "rajzol\xF3", "r\xE1k", "rak\xE9ta", "rak\xE9takil\xF6v\u0151\xE1llom\xE1s", "r\xE1kfene", "rak\xF3", "r\xE1koll\xF3vir\xE1g", "rakott k\xE1poszta", "r\xE1kp\xE1nc\xE9l", "rakt\xE1r", "rakt\xE1rk\xF6nyv", "rali", "ramipril", "Ramsey-t\xE9tel", "r\xE1ncos galambgomba", "r\xE1ncos t\xE1rcsagomba", "r\xE1ncoskalap\xFA p\xF3kh\xE1l\xF3sgomba", "randev\xFAz\xE1s", "rangid\u0151s", "ranglista", "rangsorol\xE1s", "r\xE1ntott gombafej", "r\xE1ntott sajt", "raponcharangvir\xE1g", "r\xE1spoly", "rasszista", "r\xE1termetts\xE9g", "ravaszkod\xE1s", "r\xE1z\xE1s", "reakci\xF3", "reaktor", "re\xE1liskola", "rebarbara", "recepci\xF3", "rec\xE9shagym\xE1j\xFA n\u0151szirom", "red\u0151", "red\u0151sgomba", "refer\xE1tum", "reflex", "reform", "refr\xE9n", "reg\xE9ny\xEDr\xF3", "reggel", "r\xE9gi\xF3", "r\xE9gis\xE9gkeresked\u0151", "regresszi\xF3anal\xEDzis", "regul\xE1ris gr\xE1f", "reinkarn\xE1ci\xF3", "rejtelem", "rejtjelez\xE9s", "rekeny\u0151", "rekettyebokor", "reklam\xE1ci\xF3", "rekl\xE1mc\xE9g", "rekl\xE1mf\xFCzet", "rekl\xE1mk\xF6lts\xE9g", "rekl\xE1mprogram", "rekl\xE1mt\xE1bla", "rekorder", "rektor", "rekurz\xEDv halmaz", "rekviem", "rel\xE1ci\xF3s adatb\xE1zis-kezel\u0151 rendszer", "rel\xE1ci\xF3s modell", "relativizmus", "relief", "remeg\xE9s", "rem\xE9nytelens\xE9g", "remi", "r\xE9mk\xE9p", "r\xE9muralom", "rend", "rendellenes fejl\u0151d\xE9s", "rend\xE9sz", "rendez\xE9si tulajdons\xE1gok", "rendezett h\xE1rmas", "rendezett sz\xE1mp\xE1r", "rendezv\xE9nyszervez\xE9s", "rendh\xE1z", "rend\u0151raut\xF3", "rend\u0151r-f\u0151kapit\xE1nys\xE1g", "rend\u0151rkocsi", "rend\u0151r\u0151rs", "rendsz\xE1m", "rendszerelm\xE9let", "rendszergazda", "rendszerv\xE1lt\xE1s", "reneg\xE1t", "renin", "r\xE9nszarvasagancs", "r\xE9pa", "r\xE9patorta", "reped\xE9s", "reperto\xE1r", "reprezent\xE1ci\xF3", "rept\xE9r", "rep\xFCl\xE9stan", "rep\xFCl\u0151alakulat", "rep\xFCl\u0151benzin", "rep\xFCl\u0151brig\xE1d", "rep\xFCl\u0151ezred", "rep\xFCl\u0151forgalom", "rep\xFCl\u0151g\xE9pcsarnok", "rep\xFCl\u0151g\xE9pgy\xE1rt\xE1s", "rep\xFCl\u0151g\xE9pmotor", "rep\xFCl\u0151g\xE9p-szerel\u0151", "rep\xFCl\u0151g\xE9pz\xFAg\xE1s", "rep\xFCl\u0151hang\xE1r", "rep\xFCl\u0151iskola", "rep\xFCl\u0151katasztr\xF3fa", "rep\xFCl\u0151kutya", "rep\xFCl\u0151nap", "rep\xFCl\u0151posta", "rep\xFCl\u0151sebess\xE9g", "rep\xFCl\u0151szerencs\xE9tlens\xE9g", "rep\xFCl\u0151t\xE1vols\xE1g", "rep\xFCl\u0151utaz\xE1s", "resti", "r\xE9szbenrendezett halmaz", "r\xE9szecskefizika", "r\xE9szeg", "r\xE9szes eset", "r\xE9szf\xE9lcsoport", "r\xE9szgy\u0171r\u0171", "r\xE9szlegvezet\u0151", "r\xE9szrehajl\xE1s", "r\xE9sztvev\u0151", "r\xE9szv\xE9nyindex", "r\xE9szv\xE9nyt\xE1rsas\xE1g", "r\xE9szv\xE9t", "r\xE9szvev\u0151", "r\xE9teggomba", "retekcs\xEDra", "reter\xE1t", "retesz", "r\xE9ti bogl\xE1rka", "r\xE9ti here", "r\xE9ti kakukktorma", "r\xE9ti l\xF3rom", "r\xE9ti pal\xE1stf\u0171", "r\xE9ti szegf\u0171", "retina", "r\xE9torom\xE1n", "rettenthetetlens\xE9g", "reuma", "revansizmus", "revizionista", "revolver", "r\xE9z\xE1gy\xFA", "rezerv\xE1tum", "r\xE9zg\xE1lic", "rezg\u0151 s\xE1s", "rezisztencia", "reznek", "r\xE9zp\xE9nz", "rez\xFCm\xE9", "r\xE9zv\xF6r\xF6s tin\xF3ru", "rezs\xF3", "riad\xF3", "ri\xE1l", "ribanc", "ribiszkef\xE9l\xE9k", "ribonukleinsav", "ricotta", "riel", "Riemann-sejt\xE9s", "rigli", "rig\xF3poh\xE1r", "riksa", "ringlisp\xEDl", "ripacs", "ritka m\xE1trix", "ritkas\xE1g", "ritu\xE1l\xE9", "rivalg\xE1s", "rizibizi", "rizling", "rizsbehozatal", "rizsfogyaszt\xE1s", "rizsk\xE1sa", "rizsleves", "rizspar\xE9j", "rizsterm\xE9s", "robaj", "robban\xF3motor", "Robertson-Seymour-t\xE9tel", "robotember", "robotpil\xF3ta", "rock and roll", "r\xF3dli", "roham", "rohamsisak", "rojtos t\xE1ny\xE9rosgereben", "r\xF3kagomba", "r\xF3kasz\xEDn\u0171 t\xF6lcs\xE9rgomba", "rokon", "rol\xE1d", "roma", "r\xF3mai", "romanid", "rombol\xF3bomba", "romhalmaz", "roml\xE1s", "roncs", "rongybaba", "ropog\xE1s", "rosta", "rostkender", "rosszabbod\xE1s", "rosszas\xE1g", "rosszindulat\xFA szoftver", "rot\xE1tork\xF6peny", "rovarcsal\xE1d", "rovargy\u0171jt\u0151", "rovarl\xE1rva", "rovarrendszertan", "rov\xE1sbet\u0171", "rov\xE1s\xEDr\xE1s", "rovat", "rozetta", "rozs", "r\xF3zsabimb\xF3", "r\xF3zsafa", "r\xF3zsahiml\u0151", "r\xF3zsalonc", "r\xF3zs\xE1s csigagomba", "r\xF3zs\xE1s k\xEDgy\xF3gomba", "r\xF3zs\xE1s tejel\u0151p\xF6feteg", "r\xF3zs\xE1sfeh\xE9r susulyka", "r\xF3zs\xE1slemez\u0171 galambgomba", "r\xF3zs\xE1slemez\u0171 tejel\u0151gomba", "r\xF3zs\xE1svarj\xFAh\xE1j", "r\xF3zsasz\xEDn\xE9l\u0171 k\xEDgy\xF3gomba", "r\xF3zsasz\xEDn\u0171 fonalgomba", "rozscip\xF3", "rozsdafoltos k\xEDgy\xF3gomba", "rozsd\xE1s r\xF3zsa", "rozsdas\xE1rga t\xF6lcs\xE9rgomba", "rozsf\xF6ld", "rozsnok", "r\u0151f", "r\xF6gbi", "r\xF6gz\xEDt\xE9s", "r\xF6ntgen", "r\xF6pc\xE9dula", "r\xF6plabdacsapat", "r\xF6pp\xE1lya", "r\u0151t fagomba", "r\u0151t tejel\u0151gomba", "r\xF6tyi", "r\xF6vid\xE1ru-keresked\xE9s", "r\xF6vid\xEDt\xE9sjegyz\xE9k", "r\xF6vidpill\xE1s s\xF6rt\xE9scs\xE9szegomba", "r\xF6vidt\xE1vfut\xF3", "RSA-algoritmus", "rubel", "Rubik-kocka", "ruca\xF6r\xF6mf\xE9l\xE9k", "r\xFAdarany", "r\xFAdugr\xE1s", "rugalmas sz\xE1l", "rug\xE1s", "ruha", "ruh\xE1cska", "ruhakiv\xE1g\xE1s", "ruhasz\xE1r\xEDt\xF3", "ruhatiszt\xEDt\xF3", "ruhazs\xE1k", "rumba", "r\xFAna", "ruszli", "rut\xE9n", "r\xFAzs", "r\xFCfke", "r\xFChatka", "S", "sacc", "s\xE1f\xE1r", "s\xE1fr\xE1nyos zebralev\xE9l", "s\xE1fr\xE1nysz\xEDn\u0171 likacsgomba", "saj\xE1tb\xE1zis", "saj\xE1ts\xE1g", "sajmeggy", "sajt\xE1r", "sajtkr\xE9mleves", "sajt\xF3attas\xE9", "sajt\xF3hiba", "sajt\xF3t\xE1j\xE9koztat\xF3", "sajtruha", "sajt\xFCzem", "sakk-matt", "sakkt\xE1bla", "salabakter", "salaktalan\xEDt\xF3", "sal\xE1tagalambbegy", "sal\xE1tat\xE1l", "sal\xE9tromsav", "sallangos g\xF3lyaorr", "salsa", "s\xE1m\xE1nfa", "s\xE1mfa", "sampinyon", "sansz", "sanzon\xE9nekes", "s\xE1padt cs\xE9szegomb\xE1cska", "sapka", "s\xE1r", "s\xE1rdob\xE1l\xE1s", "s\xE1rga bunk\xF3gomba", "s\xE1rga cs\xE9szegomb\xE1cska", "s\xE1rga f\xE9lg\xF6mbgomba", "s\xE1rga g\xFCm\u0151gomba", "s\xE1rga harmatgomba", "s\xE1rga k\xE9nvir\xE1ggomba", "s\xE1rga koronggomb\xE1cska", "s\xE1rga l\xE1pbuzog\xE1ny", "s\xE1rga ned\u0171gomba", "s\xE1rga pereszke", "s\xE1rga r\xE9tgomba", "s\xE1rga selyemm\xE1lyva", "s\xE1rga t\u0151kegomba", "s\xE1rga v\xEDzit\xF6k", "s\xE1rga\xE1rvacsal\xE1n", "s\xE1rgabors\xF3leves", "s\xE1rgadinnye", "s\xE1rgagum\xF3s f\xFCl\u0151ke", "s\xE1rgah\xFAs\xFA tin\xF3ru", "s\xE1rgalemez\u0171 b\xE9kagomba", "s\xE1rgalemez\u0171 pereszke", "s\xE1rga\xF6ves p\xF3kh\xE1l\xF3sgomba", "s\xE1rgap\xF3rus\xFA k\xE9reggomba", "s\xE1rg\xE1s egyr\xE9t\u0171tapl\xF3", "s\xE1rg\xE1s susulyka", "s\xE1rg\xE1sbarna foltgomba", "s\xE1rg\xE1sfeh\xE9r k\xEDgy\xF3gomba", "s\xE1rg\xE1sv\xF6r\xF6s gereben", "s\xE1rg\xE1sz\xF6ld p\xF3kh\xE1l\xF3sgomba", "s\xE1rgat\xF6nk\u0171 \xE1ld\xFCcsk\u0151gomba", "s\xE1rgaviola", "s\xE1rgul\xF3tej\u0171 tejel\u0151gomba", "sarjadz\xF3gomba", "sark", "sarkanty\xFAka", "s\xE1rk\xE1nyfeny\u0151", "s\xE1rk\xE1nygy\xF6k\xE9rf\xE9l\xE9k", "Sarkcsillag", "sarkk\u0151", "sarkt\xE9tel", "sarl\xF3", "s\xE1rm", "saroglya", "sarokcsont", "sarokh\xE1z", "sarokpolc", "sarokvas", "s\xE1rszem", "sas", "s\xE1sf\xE9l\xE9k", "s\xE1skahad", "s\xE1sliliom", "s\xE1t\xE1n", "s\xE1tor", "s\xE1tort\xE1bor", "s\xE1v", "savany\xFAs\xE1g", "savass\xE1g", "s\xE1vos f\xE1sgereben", "savtartalom", "Sch\xF6nemann-Eisenstein-krit\xE9rium", "scont\xF3", "seb\xE1gy", "sebess\xE9gm\xE9r\u0151", "seb\xE9sz", "sebezhet\u0151s\xE9g", "s\xE9dkender", "seg\xE9danyag", "seg\xE9dlelk\xE9sz", "seg\xE9dorvos", "seg\xE9lyakci\xF3", "seg\xE9lyhely", "seg\xE9lysz\xE1ll\xEDtm\xE1ny", "seggfej", "seg\xEDt\u0151k\xE9szs\xE9g", "sejk", "sejtburj\xE1nz\xE1s", "sejt\xE9s", "sejthal\xE1l", "sejtk\xF6zpont", "sejtmembr\xE1n", "sejtoszt\xF3d\xE1s", "sejtsz\xF6vet", "sejt\xFCreg", "selejt", "selyem", "selyemcukor", "selyemfonal", "selyemk\xF3r\xF3f\xE9l\xE9k", "selyempap\xEDr", "selyemszoknya", "selymes bogl\xE1rka", "selymes susulyka", "semleges\xEDt\xE9s", "semmittev\xE9s", "sepr\u0151", "sepr\u0151rothad\xE1s", "sepr\u0171ny\xE9l", "sercli", "sereg\xE9ly", "s\xE9relem", "serleg", "s\xE9r\xF3", "serte", "sert\xE9s\xE1r", "sert\xE9sdagad\xF3", "sert\xE9sh\xE1j", "sert\xE9skaraj", "sert\xE9sk\xF6r\xF6m", "sert\xE9s\xF3l", "sert\xE9sp\xF6rk\xF6lt", "sert\xE9steny\xE9szt\xE9s", "sert\xE9sv\xE1s\xE1r", "sert\xE9sv\xE9sz", "sert\xE9ssz\xEDv", "s\xE9rthetetlens\xE9g", "s\xE9rvk\xF6t\u0151", "s\xE9t\xE1l\xF3utca", "shakshuka", "shimeji", "s\xEDbajnoks\xE1g", "siebold-juhar", "siets\xE9g", "s\xEDfut\xE1s", "Sik\xE1n", "sik\xE9r", "sikert\xE9nyez\u0151", "s\xEDkgeometria", "sikk", "sikl\xF3erny\u0151", "s\xEDknegyed", "s\xEDk\xFCveg", "s\xEDl\xE9c", "sil\xF3", "sima nyelesp\xF6feteg", "simafeny\u0151", "simas\xFCveg\u0171 kucsmagomba", "simli", "s\xEDncsavar", "sint\xE9r", "s\xEDparadicsom", "sipka", "siralomh\xE1z", "s\xEDr\xE1s\xF3", "s\xEDrfelirat", "s\xEDrk\u0151", "s\xEDrs\xE1szana", "sisakvir\xE1g", "s\xEDugr\xE1s", "siv\xE1rs\xE1g", "s\xEDz\xE9s", "skal\xE1ris szorzat", "skalpol\xE1s", "skarl\xE1t", "skizofr\xE9nia", "sk\xF3t", "SL l\xF6ved\xE9k", "sl\xE1gvort", "slattyog\xE1s", "slozi", "slusszkulcs", "sm\xE1r", "smarni", "sminkes", "smukk", "s\xF3", "s\xF3der", "sodr\xF3fa", "sof\u0151r", "s\xF3gorasszony", "s\xF3gun", "sokas\xE1g", "sokkol\xF3", "sokszav\xFA posz\xE1ta", "sokt\xE9rd\u0171 salamonpecs\xE9t", "sokvir\xE1g\xFA napraforg\xF3", "s\xF3lya", "som", "sommelier", "sonkahagyma", "sonorai szabalp\xE1lma", "s\xF3r", "soremel\u0151", "sorkatona", "sorozat", "sors", "sorst\xE1rs", "sort\xF6r\xE9s", "s\xF3ska", "s\xF3skaf\u0151zel\xE9k", "s\xF3sv\xEDz", "s\xF3tart\xF3", "soviniszta", "s\xF3z\xF3", "s\xF6r", "s\xF6r\xE9leszt\u0151", "s\xF6r\xE9tes vad\xE1szpuska", "s\xF6rgy\xE1r", "s\xF6r\xF6shord\xF3", "s\xF6rperec", "s\xF6rt\xE9s d\xFCcsk\u0151gomba", "s\xF6t\xE9t energia", "s\xF6t\xE9t r\xE9teggomba", "s\xF6t\xE9t tin\xF3ru", "s\xF6t\xE9t", "s\xF6t\xE9ted\u0151 galambgomba", "s\xF6t\xE9tk\xF6ld\xF6k\u0171 t\xF6lcs\xE9rgomba", "s\xF6t\xE9tlila \u0151szir\xF3zsa", "s\xF6t\xE9tpikkely\u0171 gereben", "s\xF6t\xE9tt\xF6nk\u0171 fokhagymagomba", "s\xF6v\xE9nyv\xE1g\xF3", "spaletta", "spanifer", "spanyolfal", "spanyolviasz", "sp\xE1rgasal\xE1ta", "spatula", "specifik\xE1ci\xF3", "spektroszk\xF3pia", "spen\xF3t", "spermabank", "spicc", "spinning", "spiritizmus", "spiritualizmus", "spondeusz", "sp\xF3rol\xE1s", "sportaut\xF3", "sportbolt", "sportcsapat", "sport\xE9let", "sporteszk\xF6z", "sporthaj\xF3", "sporthorg\xE1sz", "sportjelv\xE9ny", "sportklub", "sportk\xF6zvet\xEDt\xE9s", "sportl\xF6v\xE9szet", "sportm\u0171sor", "sportoktat\xF3", "sport\xF6lt\xF6ny", "sportpolitika", "sportrep\xFCl\u0151g\xE9p", "sportstadion", "sportszelet", "sportszer\u0171s\xE9g", "sporttelep", "sporttiszt", "sport\xFCnnep\xE9ly", "sportzak\xF3", "sr\xE9dli", "stabil bor", "stadion", "stallum", "stangli", "statika", "statiszt\xE9ria", "st\xE1tusz", "steksz", "stigma", "stimmel", "Stokes-t\xE9tel", "stopper", "stracciatella", "strandlabdar\xFAg\xE1s", "strang", "strat\xE9gia", "strimfli", "stroncium", "strukturalizmus", "st\xFAdi\xF3felv\xE9tel", "subick", "sud\xE1rzs\xE1lya", "sugalom", "sugaras zsoltina", "sug\xE1rizom", "sug\xE1rtest", "sug\xE1rz\xE1sm\xE9r\u0151", "suhanc", "sujt\xE1sos papsapkagomba", "s\xFAlyar\xE1ny", "s\xFAlydob\xF3", "s\xFAlyemel\u0151", "s\xFAlyf\xFCrd\u0151", "s\xFAlyk\xFCl\xF6nbs\xE9g", "s\xFAlym\xE9r\u0151", "sulyok", "s\xFAlyosb\xEDt\xE1s", "s\xFAlyp\xE1t", "s\xFAlyvesztes\xE9g", "sum\xE1k", "surm\xF3", "susog\xF3fa", "suta", "sutyer\xE1k", "s\xFCkets\xE9g", "s\xFCll\u0151h\xEDn\xE1r", "s\xFClt krumpli", "s\xFCndiszn\xF3-\u0151zl\xE1bgomba", "s\xFCni", "s\xFCpped\xE9k", "s\xFCrg\xF6l\u0151d\xE9s", "s\u0171r\xEDtett tej", "s\u0171r\u0171 m\xE1trix", "s\u0171r\u0171vir\xE1g\xFA bibircsvir\xE1g", "s\xFCtnival\xF3", "s\xFCt\u0151forma", "s\xFCt\u0151lap\xE1t", "s\xFCt\u0151t\xF6k", "s\xFCvegfa", "sv\xE1bbog\xE1r", "sv\xE1jci", "sv\xE1rtli", "sv\xE9dasztal", "sv\xE9dszekr\xE9ny", "svindli", "szabad ember", "szabadalombitorl\xE1s", "szabadegyh\xE1z", "szabadf\xF6ldi", "szabadid\u0151", "szabadkik\xF6t\u0151", "szabadoss\xE1g", "szabads\xE1gharc", "szabads\xE1gid\u0151", "szabads\xE1gszeretet", "szabadvektor", "szab\xE1lyelleness\xE9g", "szab\xE1lyoz\xE1s", "szab\xE1lytalans\xE1g", "szab\xE1sz", "szab\xF3n\u0151", "szabv\xE1nym\xE9ret", "szachar\xF3z", "szadizmus", "szafl\xF3r", "szaggatottm\xE1jmoha", "szagl\xF3k\xF6zpont", "szagos galambgomba", "szagos pereszke", "szagos t\xF6lcs\xE9rpereszke", "Szaharov-d\xEDj", "sz\xE1jbetegs\xE9g", "sz\xE1jgyullad\xE1s", "szajinka", "sz\xE1jmaszk", "sz\xE1jpadmandula", "sz\xE1jr\xE9sz", "sz\xE1jszag", "sz\xE1jt\xFCk\xF6r", "sz\xE1jzug", "szak\xE1cs", "szakad\xE1r", "szakajt\xF3", "szak\xE1llasag\xE1ma", "szakaszosan defini\xE1lt f\xFCggv\xE9ny", "szake", "szak\xE9rt\u0151", "szakirodalom", "szakk\xE9pes\xEDt\xE9s", "szakk\xF6nyv", "szaklap", "szakminiszter", "szak\xF3ca", "szaksajt\xF3", "szaksz\xF3kincs", "szaktanfolyam", "szaktudom\xE1ny", "szakv\xE9lem\xE9nyez\xE9s", "szalad\xE1s", "szalagf\xE9reg", "szalagos likacsosgomba", "szalamandra", "sz\xE1laskalap\xFA p\xF3kh\xE1l\xF3sgomba", "sz\xE1lkaperje", "sz\xE1lk\xE1sfeny\u0151", "sz\xE1ll\xE1s", "sz\xE1ll\xEDt\xE1s", "sz\xE1ll\xEDt\xF3", "sz\xE1ll\xEDt\xF3szalag", "sz\xE1ll\xF3ige", "szalmabor", "szalmakalap", "szalmapapucs", "szalmavir\xE1g", "szalmonellafert\u0151z\xE9s", "szalonkab\xE1t", "szalonnabog\xE1r", "sz\xE1loptika", "sz\xE1m", "szam\xE1dhi", "szam\xE1rf\xFCl", "szam\xE1rk\xF6h\xF6g\xE9s", "szam\xE1rpingvin", "szamba", "sz\xE1melm\xE9let alapt\xE9tele", "sz\xE1mfejt\xE9s", "sz\xE1m\xEDt\xE1s", "sz\xE1m\xEDt\xE1studom\xE1ny", "sz\xE1m\xEDt\xF3g\xE9pes nyelv\xE9szet", "sz\xE1m\xEDt\xF3g\xE9pv\xEDrus", "sz\xE1mjelz\u0151", "sz\xE1mlab\xE9lyeg", "sz\xE1ml\xE1l\xE1s", "sz\xE1ml\xE1z\xE1s", "sz\xE1mnyelv", "szamoj\xE9d", "sz\xE1mol\xF3t\xE1bla", "sz\xE1moz\xE1s", "sz\xE1mrendszer", "sz\xE1mszer\xEDj", "sz\xE1mtani k\xF6z\xE9p", "sz\xE1mtest", "sz\xE1m\u0171z\xE9s", "sz\xE1mvev\u0151sz\xE9k", "sz\xE1n", "szand\xE1lcip\u0151", "szango", "szankci\xF3", "szant\xE1l", "szant\xF3lan\xE1szana", "szapor\xEDt\xF3anyag", "szapotilfa", "szappanfaf\xE9l\xE9k", "szappanoz", "sz\xE1r", "sz\xE1razmalom", "sz\xE1rcsa", "sz\xE1rd \xE1lt\xF6lcs\xE9rgomba", "szareptai must\xE1r", "sz\xE1r\xEDt\xF3g\xE9p", "szarkal\xE1b", "szarkof\xE1g", "sz\xE1rmaz\xE9k", "sz\xE1rnyasapr\xF3l\xE9k", "sz\xE1rnyasp\xE1st\xE9tom", "sz\xE1rnycs\xFAcs", "sz\xE1rnyt\xE1vols\xE1g", "szaru", "szarusod\xE1s", "szarv\xE1ng\xE1szana", "szarvas hagyma", "szarvasborj\xFA", "szarvasf\xE9l\xE9k", "szarvaskerep", "szarvast\u0151r", "szat\xEDr", "szatur\xE1lt gr\xE1f", "sza\xFAd-ar\xE1biai", "szavanna", "szavaz\xE1s", "szavaz\xF3c\xE9dula", "sz\xE1z sz\xE1zal\xE9k", "sz\xE1zadparancsnok", "sz\xE1zl\xE1b\xFA", "sz\xE1zszorsz\xE9p", "sze\xE1nsz", "szecsuani bors", "szederbokor", "szedimentol\xF3gia", "szedresv\xF6lgyi berkenye", "szegecsfej\u0171 gy\xF6k\xE9rgomba", "szeg\xE9nys\xE9g", "szegf\u0171bors", "szegf\u0171szeg", "szegy", "sz\xE9gyenb\xE9lyeg", "szeizmogr\xE1f", "szejt\xE1n", "sz\xE9kelyguly\xE1s", "szekeres", "sz\xE9khely", "szeklice", "szekr\xE9ny\xE1gy", "szektor", "sz\xE9lbar\xE1zda", "szelegilin", "szel\xE9n", "szelenol\xF3gia", "sz\xE9ler\u0151m\u0171", "sz\xE9leslemez\u0171 f\xFCl\u0151ke", "sz\xE9leslevel\u0171 harangvir\xE1g", "sz\xE9less\xE1v\xFA", "szelet", "sz\xE9lfog\xF3", "sz\xE9lh\xE1moss\xE1g", "szel\xEDdgesztenyefa", "sz\xE9lir\xE1nyjelz\u0151", "sz\xE9lker\xE9k", "szellemi tulajdon", "szellem\xF3ri\xE1s", "szellemv\xE1ros", "sz\xE9llovagl\xE1s", "szell\u0151z\xE9s", "sz\xE9lmalomgr\xE1f", "sz\xE9lroham", "sz\xE9ls\u0151s\xE9g", "sz\xE9lv\xE9d\u0151", "sz\xE9lvihar", "szem j\xE1rul\xE9kos k\xE9sz\xFCl\xE9kei", "szembes\xEDt\xE9s", "szemcse", "szemcs\xE9s csengetty\u0171gomba", "szemcs\xE9sgomba", "szemellenz\u0151s sapka", "szem\xE9lyazonoss\xE1g", "szem\xE9lyg\xE9pkocsi", "szem\xE9lyis\xE9gfejleszt\xE9s", "szem\xE9lyn\xE9v", "szem\xE9lyzet", "szem\xE9remdomb", "szemesk\xE1v\xE9", "szem\xE9t", "szemetes", "szemetesv\xF6d\xF6r", "szem\xE9tlap\xE1t", "szem\xE9tsz\xE1ll\xEDt\xE1s", "szemfed\u0151", "szemgoly\xF3", "szemidefinit", "szemkisz\xE1rad\xE1s", "szeml\xE9letm\xF3d", "szemmozg\xE1s", "szem\xF6lcs\xF6s \xE1lszarvasgomba", "szem\xF6ld\xF6k", "szempillant\xE1s", "szemtelens\xE9g", "szem\xFCvegtok", "szemz\xE9s", "sz\xE9na", "sz\xE9nal\xE1z", "szen\xE1tor", "sz\xE9nb\xE1ny\xE1szat", "sz\xE9ncs\xFAcs", "szendvicsember", "szendvicst\xE9tel", "sz\xE9n\xE9get\u0151", "szenes likacsosgomba", "szeneskanna", "sz\xE9ng\xE1z", "sz\xE9nhi\xE1ny", "szenilit\xE1s", "sz\xE9nkedvel\u0151 sz\xFCrkef\xFCl\u0151ke", "sz\xE9nkos\xE1r", "sz\xE9n-monoxid", "sz\xE9npor", "sz\xE9nrak\xE1s", "sz\xE9nsav", "Szent Korona", "sz\xE9ntabletta", "szentbesz\xE9d", "szent\xE9lyrekeszt\u0151", "szentgy\xF3n\xE1s", "szentj\xE1nosbog\xE1r", "szentperje", "sz\xE9nvasal\xF3", "szenved\xE9s", "sz\xE9nvon\xF3", "szenny", "szennyez\u0151forr\xE1s", "szennyv\xEDzcsatorna", "sz\xE9panya", "szepar\xE9", "sz\xE9p\xEDr\xE1s", "sz\xE9pl\xE9lek", "sz\xE9ps\xE9g", "sz\xE9ps\xE9gide\xE1l", "sz\xE9ps\xE9gszalon", "sz\xE9psz\xFCle", "szerb luc", "szerbhorv\xE1t", "szerd\xE1r", "szerecsendi\xF3fa", "szerelmes", "szerel\u0151", "szerelv\xE9ny", "szerencsefi", "szerencsek\xEDv\xE1nat", "szerencsesz\xE1m", "szerencsevad\xE1sz", "szerepk\xF6r", "szeretetadom\xE1ny", "szerhaszn\xE1lat", "szerkeszt\u0151", "szerkezetv\xE1lt\xE1s", "szersz\xE1mac\xE9l", "szersz\xE1mosl\xE1da", "szertart\xE1soss\xE1g", "szerv", "szerver", "szervezet", "szerviz", "szervrendszer", "szerz\xE9s", "szerzett immunit\xE1s", "szerz\u0151d\xE9sm\xF3dos\xEDt\xE1s", "szesz\xE9ly", "szeszf\u0151zde", "sz\xE9toszt\xE1s", "sz\xE9tv\xE1l\xE1s", "szexfilm", "szexturizmus", "szez\xE1mf\u0171", "szez\xE1mpaszta", "szf\xE9ra", "szib\xE9riai szil", "sziborgium", "szieszta", "sziget\xE1llam", "szigetel\u0151anyag", "szigetnyelv", "szigettenger", "szignat\xFAra", "szigor\xFAs\xE1g", "sziki \xE1rokvir\xE1g", "sziki csiperke", "sziki \xFAtif\u0171", "sziklagyepi nyelesp\xF6feteg", "sziklai g\xF6rbesz\xE1r\xFAmoha", "sziklai nefelejcs", "sziklaiternye", "sziklalak\xE1s", "sziklaoml\xE1s", "sziklev\xE9l", "szila", "szildenafil", "szil\xEDcium", "sziluett", "szilvalevel\u0171 bangita", "szilveszter", "szimbolikus logika", "szimf\xF3nia", "szimmetriacsoport", "szimmetrikus digit\xE1lis el\u0151fizet\u0151i vonal", "szimmetrikus rel\xE1ci\xF3", "szimp\xF3zium", "szin", "sz\xEDnb\u0151r", "szindikalizmus", "sz\xEDnel\xE9s", "sz\xEDn\xE9rt\xE9k", "sz\xEDn\xE9sz", "sz\xEDn\xE9szg\xE1rda", "sz\xEDnev\xE1lt\xF3 kutyatej", "sz\xEDnfolt", "szingli", "sz\xEDnhat\xE1s", "sz\xEDnh\xE1zl\xE1togat\xE1s", "sz\xEDnh\xFAs", "sz\xEDnigazs\xE1g", "sz\xEDnitanoda", "sz\xEDnkever\xE9s", "sz\xEDnk\xF6r", "szinkronicit\xE1s", "sz\xEDnlap", "sz\xEDnm\u0171", "szin\xF3dus", "sz\xEDnorgia", "sz\xEDnpadmester", "sz\xEDnsk\xE1la", "szint", "szinter", "szintetiz\xE1tor", "szintjel", "szinusz hiperbolikusz", "sz\xEDnvaks\xE1g", "sz\xEDnv\xE1lt\xF3 ned\u0171gomba", "sz\xEDnvonal", "szipka", "szir\xE9na", "szirogy", "szirti agg\xF3f\u0171", "szirti sziklaiternye", "szisztematika", "szitak\xF6t\u0151", "szitka jegenyefeny\u0151", "szitu", "szitty\xF3p\xE1zsit", "szivar", "sziv\xE1rv\xE1ny", "sz\xEDv\xE1s", "sz\xEDvbelh\xE1rtya", "sz\xEDvbillenty\u0171", "sz\xEDv\xE9lyess\xE9g", "szivi", "sz\xEDvkamra", "sz\xEDvlevel\u0171 gyerty\xE1n", "sz\xEDv\xF3s sztr\xF3macs\xE9szegomba", "sz\xEDvpitvar", "sz\xEDvseb\xE9sz", "sz\xEDv\xFCgy", "sz\xEDvz\xF6rej", "szkarabeusz", "szkinhed", "szkr\xE9per", "szleng", "szmog", "sznobizmus", "sz\xF3alkot\xE1s", "szoba", "szobabels\u0151", "szobacica", "szobad\xEDsz", "szobafest\u0151", "szobaf\u0151n\xF6k", "szobakulcs", "szobaleveg\u0151", "szobaparancsnok", "szobatiszta", "sz\xF3belis\xE9g", "szobr\xE1szat", "szoci", "sz\xF3cikk", "sz\xF3csavar\xE1s", "sz\xF3csoport", "sz\xF3dav\xEDz", "sz\xF3elvon\xE1s", "sz\xF3ficam", "szoftver", "sz\xF3f\u0171z\xE9s", "sz\xF3halmoz\xE1s", "sz\xF3hasad\xE1s", "sz\xF3ja", "sz\xF3jalecitin", "sz\xF3jap\xFCr\xE9", "sz\xF3j\xE1t\xE9k", "szok\xE1s", "sz\xF3kimond\xE1s", "szoknyavad\xE1sz", "szol\xE1rium", "szolf\xE9zs", "szolg\xE1latvezet\u0151", "szolgalom", "szolg\xE1ltat\xF3", "szoli", "szolmiz\xE1ci\xF3", "sz\xF3ma", "szombat", "szomnambulizmus", "szomor\xFAf\u0171z", "szomsz\xE9dasszony", "szomsz\xE9ds\xE1g", "szonda", "sz\xF3noklattan", "sz\xF3p\xE1rbaj", "sz\xF3rakoz\xE1s", "szorb", "szor\xEDt\xE1s", "sz\xF3r\xF3", "szorong\xE1s", "sz\xF3r\xF6vid\xFCl\xE9s", "szorz\xE1s", "sz\xF3sz", "sz\xF3szedet", "sz\xF3szerkezet", "sz\xF3tag\xEDr\xE1s", "sz\xF3t\xE1r\xEDr\xE1s", "sz\xF3t\xF6bbs\xE9g", "sz\xF3v\xE1lt\xE1s", "sz\xF3viv\u0151", "sz\xF6g", "sz\xF6gf\xFCggv\xE9ny", "sz\xF6gletes z\xE1r\xF3jel", "sz\xF6gsebess\xE9g", "sz\xF6k\xE9si sebess\xE9g", "sz\xF6k\u0151k\xFAt", "sz\u0151l\xE9szet", "sz\u0151l\u0151f\xFCrt", "sz\u0151l\u0151lev\xE9l", "sz\u0151l\u0151m\u0171vel\xE9s", "sz\u0151l\u0151skert", "sz\u0151l\u0151termel\xE9s", "sz\u0151l\u0151\xFCltetv\xE9ny", "sz\xF6m\xF6rcs\xF6g", "sz\u0151nyegk\xE1rpit", "sz\u0151nyegporol\xF3", "sz\xF6rfdeszka", "sz\u0151rgomba", "sz\u0151rmoha", "sz\xF6rny\u0171s\xE9g", "sz\u0151r\xF6s vesep\xE1fr\xE1ny", "sz\u0151rsz\xE1lhasogat\xE1s", "sz\u0151rt\xFCsz\u0151", "sz\xF6sz\xF6s f\u0171r\xE9szgomba", "sz\xF6sz\xF6s tintagomba", "sz\xF6veg\xEDr\xF3", "sz\xF6veg\xF6sszef\xFCgg\xE9s", "sz\xF6vet", "sz\xF6vetkezet", "sz\xF6vets\xE9gi kapit\xE1ny", "sz\xF6v\xF6de", "sz\xF6v\u0151sz\xE9k", "sztalaktit", "sztearin", "sztereolitogr\xE1fia", "sztigmergia", "sztomatol\xF3gus", "sztr\xE1da", "sztrichninfa", "sztyepp", "szubdukci\xF3", "szubszidiarit\xE1s", "szud\xE1ni", "sz\xFAdoku", "szufla", "szuhar", "szula", "szulbakt\xE1m", "szult\xE1nkeny\xE9r", "szum\xF3", "szunna", "sz\xFAnyogh\xE1l\xF3", "sz\xFAnyogriaszt\xF3", "szuperfoly\xE9konys\xE1g", "szuperintendens", "szuperkulcs", "szupermodell", "szupersz\xE1m\xEDt\xF3g\xE9p", "szuprem\xE1cia", "sz\xFAr\xE1s", "sz\xFAr\xF3fegyver", "sz\xFAr\xF3lop\xF3", "sz\xFAr\xF3s csodabogy\xF3", "sz\xFAr\xF3s szerbt\xF6vis", "szusi", "sz\xFAtra", "szuverenit\xE1s", "sz\u0171k\xF6lk\xF6d\xE9s", "sz\xFCks\xE9ges \xE9s el\xE9gs\xE9ges felt\xE9tel", "sz\xFCks\xE9glet", "sz\xFCks\xE9gszer\u0171s\xE9g", "sz\xFCle", "sz\xFCl\xE9sz", "sz\xFClet\xE9si hely", "sz\xFClet\xE9snapos", "sz\xFCl\u0151anya", "sz\xFCl\u0151f\xF6ld", "sz\xFCl\u0151haza", "sz\xFCl\u0151otthon", "sz\xFCnet", "sz\xFCnid\u0151", "sz\xFCret", "sz\xFCrjekt\xEDv line\xE1ris lek\xE9pez\xE9s", "sz\xFCrke di\xF3", "sz\xFCrke gy\u0171r\u0171stin\xF3ru", "sz\xFCrke juhar", "sz\xFCrke mohagomba", "sz\xFCrke porcika", "sz\xFCrke tamariska", "sz\xFCrkeagy", "sz\xFCrkecs\xFAcs\xFA csengetty\u0171gomba", "sz\xFCrkepikkely\u0171 csengetty\u0171gomba", "sz\xFCrk\xE9s \u0151zl\xE1bgomba", "sz\xFCrkes\xE9g", "sz\xFCrk\xE9sk\xE9kt\xF6nk\u0171 pitykegomba", "sz\xFCrk\xE9slila pereszke", "sz\xFCrk\xFClet", "sz\u0171r\u0151lap", "sz\u0171rszab\xF3", "sz\u0171zdoh\xE1ny", "sz\u0171zgulya", "sz\u0171znemz\xE9s", "sz\xFCzs\xE9", "szvasztik\xE1szana", "szvit", "t\xE1bl\xE1sfeny\u0151", "t\xE1bor", "t\xE1bornok", "tabu", "taco", "tadalafil", "tag", "tagd\xEDj", "t\xE1g\xEDt\xF3", "tagorsz\xE1g", "tahiti", "t\xE1jegys\xE9g", "t\xE1j\xE9p\xEDt\xE9szet", "tajgagy\xF6k\xE9r", "t\xE1jsz\xF3", "tajvani", "tak\xE1cs", "takar\xE9kb\xE9lyeg", "takar\xE9koss\xE1g", "takar\xEDt\xE1s", "takarm\xE1nygabona", "takarm\xE1nyrozs", "takony", "tala", "talajfizika", "talajlak\xF3 szem\xF6lcs\xF6sgomba", "talajm\u0171vel\xE9s", "talajtorna", "tal\xE1l\xE9konys\xE1g", "tal\xE1lkoz\xF3", "tal\xE1l\xF3s k\xE9rd\xE9s", "talapzat", "talentum", "talizm\xE1n", "tallium", "talp", "talpb\xE9l\xE9s", "talpnyal\xE1s", "talpraesetts\xE9g", "tamarindusfa", "t\xE1maszpont", "t\xE1mfal", "t\xE1mogat\xF3", "tan\xE1cs", "tan\xE1cskoz\xE1s", "tan\xE1cstalans\xE1g", "tan\xE1r \xFAr", "t\xE1ncest", "t\xE1ncl\xE9p\xE9s", "t\xE1ncol\xE1s", "t\xE1ncparkett", "t\xE1nczene", "tandoori", "tanfel\xFCgyel\u0151s\xE9g", "tangerin", "tan\xEDt\xF3", "tank", "tank\xF6nyv", "tanonc", "tant\xE1l", "tant\xE9tel", "tan\xFAbizonys\xE1g", "tanulm\xE1ny", "tanul\xF3l\xE1ny", "tan\xFAs\xEDtv\xE1ny", "tanya", "t\xE1ny\xE9rantenna", "t\xE1ny\xE9rka", "t\xE1ny\xE9rpolc", "t\xE1ny\xE9rtart\xF3", "tapad\xE1s", "tapad\xF3szerv", "tapasztal\xE1s", "t\xE1pegys\xE9g", "tap\xE9tav\xE1g\xF3", "tapintat", "t\xE1pl\xE1l\xE1s", "t\xE1pl\xE1lkoz\xE1studom\xE1ny", "tapl\xF3gomba faj", "tapos\xF3zs\xE1k", "tapsonc", "t\xE1pv\xEDz", "tarack", "tarajos pajzsika", "t\xE1rcsa", "tar\xE9j", "t\xE1rgyal\xE1s", "t\xE1rgyeset", "t\xE1rgysorsj\xE1t\xE9k", "tarisznya", "tarka koronaf\xFCrt", "tarka n\xE1dtippan", "tarka pettyeskosbor", "tarka zsurl\xF3", "tarkak\xE9rg\u0171 feny\u0151", "t\xE1rkony", "tarl\xF3", "tarl\xF3here", "t\xE1rnics", "t\xE1rol\xF3", "t\xE1rsadalom\xE1br\xE1zol\xE1s", "t\xE1rsadalompolitika", "t\xE1rsas vad\xE1szat", "t\xE1rsash\xE1z", "t\xE1rsasvacsora", "t\xE1rscs\xE1sz\xE1r", "t\xE1rskeres\u0151", "t\xE1rs\xF6r\xF6k\xF6s", "t\xE1rsulat", "t\xE1rsszerz\u0151", "tartal\xE9kj\xE1t\xE9kos", "tartalom", "tart\xE1lykocsi", "tart\xE1s", "tart\xF3s\xEDt\xE1s", "tart\xF3zkod\xE1s", "tasak", "t\xE1skak\xE9sz\xEDt\u0151", "tasmaniai", "t\xE1t", "tat\xE1rbifsztek", "t\xE1tika", "tatu", "tavacska", "tavaszi d\xF6ggomba", "tavaszi kankalin", "tavaszi likacsosgomba", "tavaszi t\u0151zike", "t\xE1vf\u0171t\xE9s", "t\xE1virat", "t\xE1vjelz\u0151", "t\xE1vlat", "t\xE1vol\xEDt\xE1s", "t\xE1voll\xE9t", "t\xE1vols\xE1gi aut\xF3busz", "t\xE1voz\xE1s", "taxi", "taxon\xF3mia", "teacserje", "teaf\u0151zet", "tealev\xE9l", "te\xE1sk\xE9szlet", "teavaj", "t\xE9bolyda", "technokr\xE1cia", "t\xE9gelyfog\xF3", "t\xE9glalapf\xFCggv\xE9ny", "t\xE9glav\xF6r\xF6s susulyka", "teh\xE9nbarna fak\xF3gomba", "teh\xE9ntin\xF3ru", "teherbe ejt", "teherforgalom", "teherhaj\xF3", "tehermentess\xE9g", "tehertaxi", "tehervontat\xE1s", "teizmus", "tejbet\xF6k", "tejesasszony", "tejfeh\xE9r \xE1lk\xEDgy\xF3gomba", "tejf\xF6l", "tejliszt", "tejop\xE1l", "tejsav\xF3", "tejsz\xF6vetkezet", "teke", "teker\u0151lant", "tekerv\xE9nyess\xE9g", "tekla", "tekn\u0151s", "t\xE9kozl\xE1s", "t\xE9lak", "telefonbesz\xE9lget\xE9s", "telefonh\xEDv\xE1s", "telefonk\xE9sz\xFCl\xE9k", "telefon-\xF6sszek\xF6ttet\xE9s", "telefonsz\xE1mla", "telekad\xF3", "telemetria", "telepes", "telep\xFCl\xE9s", "teleszk\xF3p", "telev\xEDzi\xF3ad\xE1s", "telev\xEDzi\xF3program", "t\xE9li \xE1lom", "t\xE9li j\xE1zmin", "t\xE9li szarvasgomba", "t\xE9likab\xE1t", "tel\xEDtett gr\xE1f", "teljes diszjunkt\xEDv norm\xE1lforma", "teljes p\xE1ros gr\xE1f", "teljes t\xF6bbp\xF3lus\xFA gr\xE1f", "teljes\xEDt\xE9s", "teljess\xE9g", "t\xE9ltemet\u0151", "temet\xE9s", "temet\u0151bog\xE1r", "temet\u0151\u0151r", "templomajt\xF3", "templomhaj\xF3", "templomszolga", "tendencia", "tengelic", "tengelyhatalom", "tengelyt\xF6r\xE9s", "tenger\xE1raml\xE1s", "tenger\xE9szdal", "tenger\xE9sztiszt", "tengeri m\xE9rf\xF6ld", "tengerifonal", "tengerih\xEDn\xE1r", "tengerisal\xE1ta", "tengermell\xE9ki k\xE1ka", "tengerparti bagolyf\u0171", "tengerparti mamutfeny\u0151", "tengerparti susulyka", "tengerszint", "tengerz\xE1r", "teniszez\u0151", "teniszj\xE1tszma", "tenisztorna", "tenofovir", "t\xE9ny", "teny\xE9rj\xF3sl\xE1s", "teny\xE9szbika", "teny\xE9szkan", "t\xE9nyez\u0151", "teol\xF3gus", "teoz\xF3fia", "tepsi", "terapeuta", "tercett", "t\xE9rdfix", "t\xE9rdhajt\xE1s", "t\xE9rdkal\xE1cscsont", "t\xE9rdr\xF6gz\xEDt\u0151", "t\xE9rdv\xE9d\u0151", "t\xE9relem", "terembajnoks\xE1g", "terep", "terepj\xE1r\xF3", "t\xE9rfogat", "terhel\xE9s", "t\xE9rid\u0151", "t\xE9r\xEDt\xE9s", "terjed\xE9s", "terj\u0151ke k\xEDgy\xF3szisz", "t\xE9rk\xE9p\xE9sz", "t\xE9rk\xE9pismeret", "t\xE9rk\xE9pl\xE9pt\xE9k", "t\xE9rk\xE9pt\xE1r", "t\xE9rk\xF6zbiztos\xEDt\xF3", "term\xE9k", "term\xE9kmegjelen\xEDt\xE9s", "termel\u0151", "term\xE9s", "term\xE9szet", "term\xE9szetes \xE9rtelmez\xE9si tartom\xE1ny", "term\xE9szetes sz\xE1mok halmaza", "term\xE9szetj\xE1r\xE1s", "term\xE9szettudom\xE1ny", "termeszt\xE9s", "termesztett t\xF6k", "termin\xE1l", "termodinamika", "termoszt\xE1t", "term\u0151hely", "term\u0151test", "terpeszked\u0151 kifejez\xE9s", "terrorista", "ter\xFCletfejleszt\xE9s", "terv", "tervezet", "tervoszt\xE1ly", "tes\xF3", "test\xE1pol\xE1s", "test\xE9kszer", "testfel\xE9p\xEDt\xE9s", "testh\u0151m\xE9rs\xE9klet", "test\u0151r", "testt\xF6meg", "testv\xE9rb\xE1tya", "testv\xE9rharc", "testv\xE9rk\xF6zs\xE9g", "testv\xE9rp\xE1rt", "teszt", "tesztoszteron", "t\xE9tel", "t\xE9tlens\xE9g", "tet\u0151ablak", "tet\u0151fok", "tet\u0151terasz", "tetraf\xF3bia", "tetszhalott", "tettes", "tettv\xE1gy", "teuton", "t\xE9v\xE9csatorna", "tev\xE9kenys\xE9g", "tevesz\u0151r", "t\xE9vk\xE9pzet", "texasi hikoridi\xF3", "textilfest\xE9s", "textilipar", "textilvegy\xE9szet", "Thal\xE9sz-t\xE9tel", "tibetol\xF3gia", "tigrisk\xEDgy\xF3", "tigrisszel\xEDd\xEDt\u0151", "tilink\xF3", "t\xEDm\xE1r", "timf\xF6ldliszt", "t\xEDmusz", "tini", "tinta", "tintahalgomba", "tintatart\xF3", "tipp", "t\xEDpusbakancs", "t\xEDpuscip\u0151", "t\xEDpusjelz\xE9s", "t\xEDpusterv", "tir\xE1zsdug\xF3", "tiszafaf\xE9l\xE9k", "Tisza-parti margitvir\xE1g", "tiszt\xE1s", "tiszt\xE1tlans\xE1g", "tisztelet", "tiszteletk\xF6r", "tisztesf\u0171", "tisztiorvos", "tiszt\xEDt\xF3t\u0171z", "tiszttart\xF3", "tit\xE1nbuzog\xE1ny", "titkos\xEDr\xE1s", "titkosszolg\xE1lat", "titoktart\xE1si szerz\u0151d\xE9s", "tivornya", "tizedespont", "tizenegysz\xF6g", "tizenk\xE9tsz\xF6g", "t\xF3", "toborz\xE1s", "tobozf\xFCl\u0151ke", "t\xF3csa", "t\xF3fonal", "toj\xE1sd\xEDsz\xEDt\xE9s", "toj\xE1sf\u0151z\u0151", "toj\xE1sleves", "toj\xE1srak\xE1s", "toj\xE1st\xE1nc", "tok piszin", "Tokarev-pisztoly", "tokol\xF3gia", "toldal\xE9k", "tollas f\xFCgg\xF6nymoha", "tollaslabda", "tollbokr\xE9ta", "tollforg\xF3", "tollhegy", "tollp\xE1rna", "tollsepr\u0171", "tolm\xE1cs", "tol\xF3kasza", "tol\xF3s\xFAly", "tolvaj", "tolvajnyelv", "tompalevel\u0171 b\xE9kasz\u0151l\u0151", "tomp\xEDt\xE1s", "tonik", "t\xF3part", "topogr\xE1fia", "topologikus r\xE9szgr\xE1f", "toposz", "t\xF3ra", "torlasz", "torna", "tornagyakorlat", "torn\xE1sz", "torokf\xE1j\xE1s", "torokhurut", "toronyh\xE1z", "torped\xF3c\xE1pa", "tortaforma", "tortellini", "torz\xEDt\xE1s", "t\xF3t", "tot\xE1lk\xE1osz", "tot\xF3", "tov\xE1bbfejlesztett g\xE1zh\u0171t\xE9ses atomreaktor", "toxikol\xF3gus", "t\xF6bbdimenzi\xF3s adatb\xE1zis", "t\xF6bblet", "t\xF6bbnyelv\u0171s\xE9g", "t\xF6bbs\xE9g", "t\xF6bbv\xE1ltoz\xF3s polinom", "t\xF6k", "t\u0151kefej", "t\u0151kehalm\xE1j", "t\xF6k\xE9letes sz\xE1m", "t\u0151kem\u0171vel\xE9sm\xF3d", "t\u0151k\xE9s\xFCzem", "t\xF6kf\u0151zel\xE9k", "t\xF6lcs\xE9r", "t\xF6lcs\xE9res szagosgereben", "t\xF6lcs\xE9rpereszke", "t\u0151lev\xE9lr\xF3zsa", "t\xF6lgyfa", "t\xF6lgyfak\xE9reg", "t\xF6lgyfa-ter\xFCl\u0151gomba", "t\xF6lt\xE9ny\xF6v", "t\xF6lt\u0151", "t\xF6lt\xF6tt csirke", "t\xF6mb", "t\xF6meg", "t\xF6megfogyaszt\xE1s", "t\xF6megn\xF6vel\xE9s", "t\xF6megsz\xE1m", "t\xF6meggyilkos", "t\xF6m\xEDt\u0151anyag", "t\xF6mj\xE9nfa", "t\xF6ml\xF6c", "t\xF6m\xF6r\xEDt\xE9s", "t\xF6mzsi p\xF3kh\xE1l\xF3sgomba", "t\xF6nk\xF6ly", "t\xF6nk\xF6s kacskagomba", "t\xF6pszli", "t\xF6redelem", "t\xF6r\xE9keny porhany\xF3sgomba", "t\xF6r\xE9s", "t\xF6rk\xF6ly", "t\xF6rleszt\xE9s", "t\xF6rl\u0151rongy", "t\xF6r\xF6k n\u0151szirom", "t\xF6r\xF6kf\xFCrd\u0151", "t\xF6r\xF6kr\xF3zsa", "t\xF6rpe bor\xF3ka", "t\xF6rpe lob\xE9lia", "t\xF6rpe susulyka", "t\xF6rpe", "t\xF6rpeg\xE9m", "t\xF6rpemandarin", "t\xF6rpes\xF3lyom", "t\xF6rt\xE9n\xE9sz", "t\xF6rt\xE9net\xEDr\xF3", "t\xF6rt\xE9nettud\xF3s", "t\xF6r\xFClk\xF6z\u0151", "t\xF6rv\xE9nyess\xE9g", "t\xF6rv\xE9nyhoz\xF3", "t\xF6rv\xE9nysz\xE9k", "t\xF6rv\xE9nyszolga", "t\xF6rzs", "t\xF6rzsfa", "t\xF6rzskar", "t\xF6rzsoldat", "t\xF6rzstiszt", "t\xF6rzsvev\u0151", "t\u0151szomsz\xE9d", "t\xF6vis alatti izom", "t\xF6visbokor", "t\xF6vises lep\xE9nyfa", "t\xF6viskoszor\xFA", "t\u0151zeg\xE1fonya", "t\u0151zegmoha-gy\xE1szoscs\xE9szegomba", "t\u0151zegrozmaring", "t\u0151zsde", "trachoma", "tragacs", "tr\xE1gyacs\xE9szegomba", "tr\xE1gyal\xE9", "traktorista", "transzcendens egyenlet", "transzform\xE1ci\xF3", "transzparens", "transzpoz\u0131\u0301ci\xF3", "tranzisztor", "tranzitivit\xE1s", "trapezoid", "traumatol\xF3gia", "tr\xE9fli", "tr\xE9ner", "triangulum", "trib\xFCn", "trifla\xE1rul\xF3 gomba", "trigonometrikus f\xFCggv\xE9ny", "tril\xF3gia", "trioxid", "triskaidekaf\xF3bia", "trivi\xE1lis line\xE1ris kombin\xE1ci\xF3", "tr\xF3fea", "troli", "trombitafolyand\xE1r", "trombocita", "tr\xF3n", "troposzf\xE9ra", "truv\xE1j", "TT-pisztoly", "tuberkul\xF3zis", "tucat\xE1ru", "tud\xE1sanyag", "tudat", "tudatos\xEDt\xE1s", "tudattalan", "tudom\xE1nyfiloz\xF3fia", "tudom\xE1s", "tud\xF3sg\xE1rda", "tud\xF3sk\xE9pz\xE9s", "tud\xF3st\xEDpus", "tuja", "tulaez\xFCst", "tulajdonjog", "tulajdons\xE1g", "t\xFAler\u0151", "t\xFAlhatalom", "tulip\xE1n-cs\xE9szegomba", "t\xFAlkap\xE1s", "t\xFAlnyom\xE1s", "t\xFAlpart", "t\xFAlterhelts\xE9g", "tumor", "tun\xE9ziai", "t\xFAra", "t\xFAr\xE1s", "turb\xE1nliliom", "turbolya", "Turing-g\xE9p v\xE9g\xE1llapota", "turista", "turistaegyes\xFClet", "turist\xE1skod\xE1s", "turista\xFAt", "turmalin", "turner-t\xF6lgy", "t\xFAr\xF3f\xE1nk", "t\xFAr\xF3s", "tusf\xFCrd\u0151", "tutaj", "tuzson-cickafark", "t\xFCd\u0151", "t\xFCd\u0151emb\xF3lia", "t\xFCd\u0151\xF6d\xE9ma", "t\xFCk\xF6r", "t\xFCk\xF6rsz\xF3", "t\xFCkr\xF6z\u0151d\xE9s", "t\xFCll", "t\xFCnd\xE9r\xE1lom", "t\xFCnd\xE9rkert", "t\xFCnd\xE9rorsz\xE1g", "t\xFCnd\xE9rvil\xE1g", "t\xFCnetcsoport", "t\xFCnti", "t\xFCrelem", "t\xFCrkiz", "t\xFCskebokor", "t\xFCsk\xE9s gal\xF3ca", "t\xFCsk\xE9s s\xF6r\xE9nygomba", "t\xFCsz\u0151", "t\xFCt\xFC", "t\xFCzel\u0151anyag", "t\xFCz\xE9rs\xE9g", "t\u0171z\xE9ssz\xE1m", "t\u0171zf\xE9szek", "t\u0171zharc", "t\u0171zifa", "t\u0171zim\xE1d\xF3", "t\u0171zk\xE1r", "t\u0171zl\xE9pcs\u0151", "t\u0171znyom-sz\xFCrkef\xFCl\u0151ke", "t\u0171zolt\xF3aut\xF3", "t\u0171zolt\xF3haj\xF3", "t\u0171zolt\xF3l\xE9tra", "t\u0171zolt\xF3ruha", "t\u0171zolt\xF3szert\xE1r", "t\u0171z\u0151g\xE9p", "t\u0171zp\xE1rbaj", "t\u0171zrend\xE9szet", "t\u0171zt\xF6vis", "t\u0171zvezet\xE9s", "t\u0171zsz\xFCnet", "tviszt", "ty\xFAkgomba", "ty\xFAkketrec", "ty\xFAk\xF6r\xF6m", "ty\xFAktoj\xE1s", "uborkagomba", "udd\xEDj\xE1na bandha", "udvarh\xF6lgy", "udvarmester", "ugar", "ugia", "ugr\xF3", "ugr\xF3k\xF6t\xE9l", "uhubagoly", "\xFAjbesz\xE9l", "\xFAjdons\xE1g", "\xFAjgazdag", "\xFAj\xEDt\xE1s", "\xFAjj\xE1\xE9p\xEDt\xE9s", "ujjas s\xE1s", "ujjhajt\xF3ka", "ujjperc", "\xFAjonc", "\xFAjrahasznos\xEDt\xE1s", "\xFAjratervez\xE9s", "\xFAjs\xE1gcikk", "\xFAjs\xE1g\xEDr\xF3n\u0151", "\xFAjs\xE1gpap\xEDr", "ukr\xE1n macskamenta", "ulti", "ultramikroszk\xF3p", "uncia", "undorm\xE1ny", "unikornis", "unit\xE1rius", "univerz\xE1lis kvantor", "unoka", "unokah\xFAg", "unokatestv\xE9r", "ununkvadium", "ununtrium", "uralkod\xF3", "uram", "urapidil", "\xFArasztala", "\xFArdolga", "\xFArf\xE9le", "\xFArh\xF6lgy", "\xFArlovas", "\xFArn\u0151", "uruszol\xE1s", "ustr\xE1szana", "usz\xE1lyhaj\xF3", "uszi", "\xFAsz\xF3 v\xEDzibogl\xE1rka", "\xFAsz\xF3bajnok", "\xFAsz\xF3gumi", "\xFAsz\xF3m\xE1jmoha", "\xFAsz\xF3nadr\xE1g", "\xFAsz\xF3ruha", "\xFAsz\xF3temp\xF3", "usztr\xE1szana", "ut\xE1lat", "ut\xE1nkeres\xE9s", "ut\xE1nzat", "utask\xEDs\xE9r\u0151", "utassz\xE1m", "utaz\xE1si \xFCgyn\xF6k", "utaz\xF3l\xE1da", "\xFAtbiztos", "utcab\xE1l", "utcagyerek", "utcak\xE9p", "utcal\xE1ny", "utcasepr\u0151", "utcaszerte", "\xFAtegyenget\u0151", "uterotonikum", "\xFAtif\u0171", "\xFAtimarsall", "\xFAtit\xE1ska", "utkat\xE1szana", "\xFAtlev\xE9l", "\xFAtmester", "ut\xF3d", "ut\xF3erjed\xE9s", "ut\xF3hat\xE1s", "ut\xF3kor", "ut\xF3n\xE9vk\xF6nyv", "ut\xF3term\xE9k", "\xFAt\u0151r", "\xFAtsz\u0171k\xFClet", "utthita ardha dhanur\xE1szana", "\xFAtt\xF6r\u0151", "\xFAtt\xF6r\u0151t\xE1bor", "\xFAtvonal", "uzsonnaabrosz", "\xFCd\xEDt\u0151", "\xFCd\xFCl\u0151haj\xF3", "\xFCdv\xF6ss\xE9g", "\xFCdv\xF6zlet", "\xFCdvrivalg\xE1s", "\xFCgybuzgalom", "\xFCgyeletes", "\xFCgy\xE9szs\xE9g", "\xFCgyf\xE9lk\xF6r", "\xFCgykezel\xE9s", "\xFCgyn\xF6k", "\xFCgyv\xE9dbojt\xE1r", "\xFCgyvezet\u0151n\u0151", "\xFCkapa", "\xFCknagypapa", "\xFCkunoka", "\xFCld\xF6ztet\xE9s", "\xFCl\xE9s", "\xFCl\xE9srend", "\xFCln\xF6k", "\xFCl\u0151csont", "\xFCl\u0151ideg", "\xFCl\u0151mohaf\xE9l\xE9k", "\xFCltetv\xE9ny", "\xFCnnepelt", "\xFCnnepl\u0151", "\xFCnneps\xE9grendez\u0151", "\xFCreg", "\xFCregest\xF6nk\u0171 szegf\u0171gomba", "\xFCresed\xE9s", "\u0171rhaj\xF3s", "\u0171rkapszula", "\u0171rm\xE9ret", "\u0171r\xF6lt\xF6zet", "\u0171rpolitika", "\u0171rruha", "\u0171rszonda", "\u0171rutaz\xE1s", "\xFCr\xFCgy", "\xFCst", "\xFCst\xF6k\xF6s gy\xF6ngyike", "\xFCst\xF6k\xF6sg\xE9m", "\xFCsz\xF6ggomba", "\xFCtegparancsnok", "\xFCt\xE9s", "\xFCtk\xF6zet", "\xFCt\u0151\xE9r", "\xFCt\u0151k\xE1rtya", "\xFCveg", "\xFCvegasztal", "\xFCvegbont\xF3", "\xFCvegcsepp", "\xFCvegdug\xF3", "\xFCvegez\xE9s", "\xFCvegfest\xE9s", "\xFCveggomb", "\xFCvegharang", "\xFCvegh\xE1zi cs\xE9szegomba", "\xFCvegkalitka", "\xFCvegkocka", "\xFCvegm\xE1z", "\xFCvegpap\xEDr", "\xFCvegsz\xE1l", "\xFCvegt\xE1bla", "\xFCvegt\xF6r\u0151 kalap\xE1cs", "\xFCveggyapot", "\xFCv\xF6lt\xE9s", "\xFCzem", "\xFCzemanyagcella", "\xFCzemeg\xE9szs\xE9g\xFCgy", "\xFCzemgazdas\xE1g", "\xFCzemigazgat\xF3", "\xFCzemkezdet", "\xFCzemm\xE9rn\xF6k", "\xFCzemr\xE9szleg", "\xFCzemterv", "\xFCzemzavar", "\u0171z\xE9s", "\xFCzletasszony", "\xFCzlethelyis\xE9g", "\xFCzletk\xF6t\u0151", "\xFCzletszab\xE1lyzat", "\xFCzletvezet\u0151", "vacok", "vacsoracsillag", "vad", "vadalmafa", "vad\xE1sz", "vad\xE1szati id\xE9ny", "vad\xE1szbot", "vad\xE1sz\xE9vad", "vad\xE1szf\xFCllent\xE9s", "vad\xE1szh\xE1z", "vad\xE1szjegy", "vad\xE1szk\xE9s", "vad\xE1szkutya", "vad\xE1szles", "vad\xE1szmez\u0151", "vad\xE1szpuska", "vad\xE1szr\xE9sz", "vad\xE1szsz\xE9k", "vad\xE1sztanya", "vad\xE1szter\xFClet", "vad\xE1sztr\xF3fea", "vad\xE1szzs\xE1km\xE1ny", "vadb\xFAv\xF3", "vadcseresznye", "vaddiszn\xF3karaj", "vadember", "vadf\xF6ld", "vadgazd\xE1lkod\xF3", "vadgesztenyef\xE9l\xE9k", "v\xE1dirat", "vadkacsavad\xE1szat", "vadkecske", "vadkutya", "v\xE1dlott", "vadmalac", "vadm\xE9h", "vadny\xFAl", "vadorz\xF3", "v\xE1dpont", "vadrizs", "vadsnidling", "vadsz\u0151l\u0151", "vadzab", "v\xE1g\xE1s kapacit\xE1sa", "vagdalt", "v\xE1g\xF3eszk\xF6z", "v\xE1g\xF3mad\xE1rf\xE9l\xE9k", "v\xE1g\xF3s\xFAly", "v\xE1gy\xE1lom", "vagyon\xE1truh\xE1z\xE1s", "vagyon\u0151r", "vajaskifli", "vajdas\xE1g", "vajmester", "vajtart\xF3", "vak\xE1ci\xF3", "vakb\xE9lgyullad\xE1s", "vakcina", "vakl\xE1rma", "vakond", "vakrep\xFCl\xE9s", "v\xE1kuum", "vakvezet\u0151 kutya", "v\xE1laszb\xE9lyeg", "v\xE1laszt\xE1si megfigyel\u0151", "v\xE1laszt\xF3fejedelem", "v\xE1laszt\xF3polg\xE1r", "valid\xE1ci\xF3", "v\xE1llalat", "vall\xE1s", "vall\xE1serk\xF6lcs", "vall\xE1sh\xE1bor\xFA", "vall\xE1soss\xE1g", "vall\xE1stan\xEDt\xE1s", "vall\xE1s\xFCgy", "v\xE1llcs\xFAcs", "v\xE1ll\xEDz\xFClet", "v\xE1llp\xE1nt", "val\xF3di fogolybogy\xF3", "v\xE1logat\xE1s", "val\xF3s sz\xE1megyenes", "val\xF3s\xE1g", "val\xF3sz\xEDn\u0171s\xE9gsz\xE1m\xEDt\xE1s", "v\xE1ls\xE1gst\xE1b", "v\xE1lt\xF3\xE1ram", "v\xE1lt\xF3l\xE1z", "v\xE1lt\xF3szelep", "v\xE1ltoz\xE1s", "v\xE1ltoz\xE9kony cs\xE9szegomba", "v\xE1ltoz\xE9kony kocsony\xE1sp\xF6feteg", "v\xE1ltoz\xE9kony tin\xF3ru", "v\xE1ltoztat\xE1s", "v\xE1lyog", "v\xE1lyogt\xE9gla", "v\xE1mhat\xE1r", "v\xE1mos", "v\xE1mszed\u0151", "v\xE1muni\xF3", "van", "vandalizmus", "v\xE1ndor", "v\xE1ndork\xF6lt\u0151", "v\xE1ndorpr\xE9dik\xE1tor", "v\xE1ndors\xF3lyom", "v\xE1ndorz\xE1szl\xF3", "vanillincukor", "v\xE1r", "v\xE1ralja", "v\xE1r\xE1rok", "var\xE1zsfa", "var\xE1zsk\xF6r", "var\xE1zsl\xF3f\u0171", "var\xE1zssz\xF3", "v\xE1rbirtok", "v\xE1rfal", "varf\u0171", "v\xE1rh\xE1bor\xFA", "vari\xE1ns", "varj\xFA", "varj\xFAk\xF6r\xF6m", "v\xE1rkapit\xE1ny", "v\xE1rkatona", "v\xE1rmegye", "v\xE1r\xF3csarnok", "v\xE1rosfal", "v\xE1rosh\xE1za", "v\xE1roslak\xF3", "v\xE1rosr\xE9sz", "v\xE1rosvezet\xE9s", "v\xE1r\u0151rs\xE9g", "v\xE1rpince", "varroda", "v\xE1rrom", "v\xE1rta", "v\xE1rt\xFCz\xE9r", "v\xE1rv\xE9d\u0151", "vas\xE1gy", "vasal\xF3deszka", "v\xE1s\xE1rl\xE1s", "vas\xE1rnap", "vasbeton", "vaseg\xE9szs\xE9g", "vasfegyelem", "vasgy\xFAr\xF3", "vasipar", "vaskeresked\xE9s", "vaskoh\xF3", "vaskos porhany\xF3sgomba", "vasmag", "vasm\u0171ves", "vas\xF6nt\xF6de", "vasr\xE1cs", "vastagb\xE9lgyullad\xE1s", "vastaggally\xFA k\xF6rte", "vastags\xE1g", "vast\xFCd\u0151", "vasutasnap", "vas\xFAtigazgat\xF3s\xE1g", "vaszabi", "vasszigor", "vatta", "v\xE1z", "vazekt\xF3mia", "v\xE9c\xE9", "v\xE9d\xE1nta", "v\xE9denc", "v\xE9djegy", "v\xE9d\u0151", "v\xE9d\u0151besz\xE9d", "v\xE9d\u0151felszerel\xE9s", "v\xE9d\u0151keszty\u0171", "v\xE9d\u0151\u0151rizet", "v\xE9d\u0151szellem", "v\xE9d\u0151\xFCgyv\xE9d", "vega", "v\xE9gb\xE9l", "v\xE9gbemegy", "v\xE9ges Abel-csoportok alapt\xE9tele", "v\xE9ges halmaz", "veget\xE1ci\xF3", "vegetat\xEDv szaporod\xE1s", "v\xE9gperiodikus sorozat", "v\xE9grendelet", "v\xE9gtag", "v\xE9gtelen hat\xE1r\xE9rt\xE9k", "v\xE9gterm\xE9k", "v\xE9gzetcserje", "vegyes \xFAsz\xE1s", "vegy\xE9sz", "vegyjel", "vegy\xFCl\xE9ksz\xF3", "vehemencia", "vekni", "v\xE9kony szitty\xF3", "vektor hossza", "vektor", "vektorhalmaz ortogon\xE1lis komplementere", "vektormennyis\xE9g", "vektorok sz\xF6ge", "vektort\xE9r gener\xE1torrendszere", "v\xE9lelem", "v\xE9lem\xE9nyhatalom", "v\xE9letlen hozz\xE1f\xE9r\xE9s\u0171 mem\xF3ria", "velocip\xE9d", "vel\xFAr", "v\xE9na", "vend\xE9g", "vend\xE9ghaj", "vend\xE9gkar\xF3", "vend\xE9gl\xE1t\xF3", "vend\xE9gl\u0151", "vend\xE9gs\xE9g", "venezuelai", "Venn-diagram", "v\xE9nuszdomb", "v\xE9nuszhaj", "v\xE9r", "v\xE9r\xE1ldozat", "v\xE9ralvad\xE9k", "v\xE9r\xE1t\xF6mleszt\xE9s", "v\xE9rb\xEDr\xF3s\xE1g", "v\xE9rb\xFCkk", "v\xE9rcsepp", "ver\xE9b", "v\xE9rehull\xF3 fecskef\u0171", "vereked\xE9s", "ver\xE9s", "v\xE9reshurka", "v\xE9rfolt", "v\xE9rh\xF3lyag", "v\xE9rkering\xE9s", "v\xE9rlemezke", "v\xE9rminta", "vernissz\xE1zs", "v\xE9rnyom\xE1sm\xE9r\u0151", "v\xE9ront\xF3 pimp\xF3", "ver\u0151f\xE9ny", "v\xE9rpatak", "vers", "verseny", "versenybizotts\xE1g", "versenyfutam", "versenyhaj\xF3", "versenyk\xE9pess\xE9g", "versenym\u0171", "versenyszek\xE9r", "versenyz\u0151", "versl\xE1b", "v\xE9rszilva", "v\xE9rtan\xFA", "v\xE9rtestv\xE9r", "v\xE9rv\xE9tel", "v\xE9rv\xF6r\xF6s bibircsgomba", "v\xE9rv\xF6r\xF6s ribiszke", "v\xE9rz\xE9s", "vesebaj", "vesek\u0151", "vesep\xE1fr\xE1ny", "vesevel\u0151", "v\xE9sz", "vesz\xE9ly", "v\xE9szhelyzet", "v\xE9szkij\xE1rat", "vessz\u0151kaktusz", "vessz\u0151s f\xFCz\xE9ny", "veszt\xE9s", "v\xE9tek", "vet\xE9lked\xE9s", "vetem\xE9nyes", "vet\xE9sforg\xF3", "vet\xE9si varj\xFA", "v\xE9tkess\xE9g", "vet\u0151bar\xE1zda", "vet\u0151vir\xE1g", "vev\xE9s", "vezekl\xE9s", "vez\xE9rcikk", "vez\xE9rcsillag", "vez\xE9reszme", "vez\xE9rf\xE9rfi\xFA", "vez\xE9rgondolat", "vez\xE9rigazgat\xF3", "vez\xE9rk\xE9pviselet", "vez\xE9rk\xF6r", "vez\xE9rmot\xEDvum", "vez\xE9rs\xEDk", "vez\xE9rsz\xF3lam", "vez\xE9rvonal", "vezet\xE9s", "vezet\u0151k\xE9pess\xE9g", "viadal", "viaszbogy\xF3f\xE9l\xE9k", "viaszrepk\xE9ny", "viaszvir\xE1g", "vicclap", "vid\xE1mpark", "vide\xF3", "videokazetta", "videoszerkeszt\xE9s", "vidrakeser\u0171f\u0171", "vigalom", "v\xEDgasz", "vignetta", "vigyor", "vihardag\xE1ly", "vihargy\xFAjt\xF3", "viharl\xE9c", "viharsir\xE1ly", "v\xEDkend", "vil\xE1gbajnoks\xE1g", "vil\xE1gcs\xFAcs", "vil\xE1gfi", "vil\xE1gh\xEDr", "vil\xE1g\xEDt\xF3 t\xF6lcs\xE9rgomba", "vil\xE1g\xEDt\xF3moha", "vil\xE1gj\xE1rv\xE1ny", "vil\xE1gm\xE9ret", "vil\xE1gnyelv", "vil\xE1gpiac", "vil\xE1gr\xE9sz", "vil\xE1gt\xE9rk\xE9p", "vil\xE1g\u0171r", "vilajet", "vill\xE1mcs\u0151d\xFClet", "villamos", "villamoskocsi", "villamosmotor", "villamossz\xE9k", "villany", "villanycseng\u0151", "villanyf\xE9ny", "villanygy\xE1r", "villanyhuzal", "villanyk\xF6rte", "villanymotor", "villanyp\xE1sztor", "villanyszerel\u0151", "villany\xFAjs\xE1g", "villanyvonat", "vill\xE1skulcs", "vimedli", "vinil-klorid", "viola", "vir\xE1g\xE1gy", "vir\xE1g\xE1rus", "vir\xE1gbolt", "vir\xE1gd\xEDsz", "vir\xE1ges\u0151", "vir\xE1gherny\xF3", "vir\xE1gkar\xF3", "vir\xE1gkert\xE9sz", "vir\xE1gkos\xE1r", "vir\xE1gl\xE1da", "vir\xE1gn\xE9v", "vir\xE1golaj", "vir\xE1gosod\xE1s", "vir\xE1gpor", "vir\xE1gs\xE1s", "vir\xE1gsziget", "vir\xE1gt\xE1l", "vir\xE1gt\u0151", "vir\xE1gz\xE1s", "virg\xE1cs", "virradat", "virtu\xE1lis mag\xE1nh\xE1l\xF3zat", "v\xEDrusbetegs\xE9g", "viselet", "visz\xE1lykod\xE1s", "viszkozim\xE9ter", "viszontl\xE1t\xE1s", "viszonysz\xF3", "visszacsatol\xE1s", "visszafejl\u0151d\xE9s", "visszah\xFAz\xF3d\xE1s", "visszakeres\xE9s", "visszal\xE9p\u0151 keres\xE9s", "visszasz\xE1ml\xE1l\xE1s", "visszatoloncol\xE1s", "visszav\xE1g\xE1s", "visszavezet\xE9s a lehetetlenre", "vissz\xE9rt\xE1gul\xE1s", "vita", "vit\xE1lkapacit\xE1s", "vitel", "vit\xE9zvir\xE1g", "vitorl\xE1s", "vitorl\xE1z\xE1s", "v\xEDv\xE1s", "v\xEDv\xF3mester", "viza", "v\xEDz\xE1ll\xE1s", "v\xEDz\xE1radat", "v\xEDzbont\xE1s", "v\xEDzcsobog\xE1s", "v\xEDzduzzaszt\xF3", "vizelet", "v\xEDzelnyel\u0151", "vizeny\u0151", "v\xEDzer\u0151m\u0171", "v\xEDzes\xE9s", "vizespalack", "v\xEDzfej", "v\xEDzfelv\xE9tel", "v\xEDzfestm\xE9ny", "v\xEDzfoly\xE1s", "v\xEDzf\xFCgg\xF6ny", "v\xEDzgazd\xE1lkod\xE1s", "v\xEDzgy\xF3gyint\xE9zet", "v\xEDzh\xE1l\xF3zat", "v\xEDzhord\xF3", "v\xEDzh\u0171t\xE9s", "v\xEDzi h\xEDd\u0151r", "v\xEDzi pajzsgomba", "v\xEDzi\xE1llat", "v\xEDzibivaly", "v\xEDzibolha", "v\xEDzicsiga", "v\xEDzig\xE9ny", "v\xEDzikal\xE1sz", "v\xEDzililiom", "v\xEDzim\xE1k", "v\xEDzi\xF3", "v\xEDzipipa", "v\xEDzip\xF3l\xF3", "v\xEDzis\xED", "vizit", "v\xEDzit\xF6k", "v\xEDziv\xE1s", "v\xEDzkem\xE9nys\xE9g", "v\xEDzkiszor\xEDt\xE1s", "v\xEDzk\u0151", "v\xEDzkult\xFAra", "v\xEDzl\xE9pcs\u0151", "v\xEDzmagass\xE1g", "v\xEDzm\xE9rce", "vizm\xE9rt\xE9k", "v\xEDzmos\xE1s", "v\xEDznyel\u0151akna", "v\xEDz\xF3ra", "v\xEDz\xF6z\xF6n", "v\xEDzparti tejel\u0151gomba", "v\xEDztakar\xE9koss\xE1g", "v\xEDztartalom", "v\xEDzt\xE9r", "v\xEDzt\xF6lcs\xE9r", "v\xEDzt\xFCk\xF6r", "v\xEDzv\xE1laszt\xF3", "v\xEDzvezet\xE9kszerel\u0151", "v\xEDzzuhatag", "vizsgal\xE1z", "v\xEDzszab\xE1lyoz\xE1s", "v\xEDzszint", "v\xEDzszolg\xE1ltat\xE1s", "voks", "volfr\xE1m", "von", "von\xE1s", "vonatk\xEDs\xE9r\u0151", "von\xEDt\xE1s", "von\xF3s hangszer", "vontat\xF3haj\xF3", "vonz\xE1s", "vonz\xF3d\xE1s", "v\xF6d\xF6r", "v\xF6lgy", "v\xF6rheny", "v\xF6r\xF6s bolyg\xF3", "v\xF6r\xF6s fokf\xF6ldirekettye", "v\xF6r\xF6s hi\xFAz", "v\xF6r\xF6s k\u0151t\xF6r\u0151cserje", "v\xF6r\xF6s ribiszke", "v\xF6r\xF6s tapl\xF3", "v\xF6r\xF6s v\xE9rcse", "v\xF6r\xF6sbarna papsapkagomba", "v\xF6r\xF6sbarna t\u0171znyom-cs\xE9szegomb\xE1cska", "v\xF6r\xF6sbor", "v\xF6r\xF6ses k\xE9nvir\xE1ggomba", "v\xF6r\xF6ses susulyka", "v\xF6r\xF6sfeny\u0151", "v\xF6r\xF6sfoltos csigagomba", "v\xF6r\xF6shangya", "v\xF6r\xF6sizz\xE1s", "v\xF6r\xF6sl\xE1b\xFA p\xF3kh\xE1l\xF3sgomba", "v\xF6r\xF6smoszat", "v\xF6r\xF6s\xF6d\u0151h\xFAs\xFA tejel\u0151gomba", "v\xF6r\xF6spikkelyes p\xF3kh\xE1l\xF3sgomba", "v\xF6r\xF6stej\u0171 k\xEDgy\xF3gomba", "v\xF6r\xF6st\xFCsk\xE9s csucsor", "vriks\xE1szana", "vulkanizmus", "vuvuzela", "walesi", "Waring-probl\xE9ma", "webb\xF6ng\xE9sz\u0151", "Wedderburn-t\xE9tel", "Wikisz\xF3t\xE1r", "xenof\xF3bia", "xhosa", "xil\xF3z", "yen", "zab", "zabf\xF6ld", "zabkorpa", "zabosb\xFCkk\xF6ny", "zabszem", "zacsk\xF3", "zagyval\xE9k", "zaj\xE1rtalom", "zajm\xE9r\u0151", "zaklat\xE1s", "zalai b\xFCkk\xF6ny", "z\xE1logh\xE1z", "z\xE1logk\xF6lcs\xF6n", "zamat", "z\xE1por", "zapotafa", "z\xE1rad\xE9k", "zar\xE1ndoklat", "z\xE1rdaf\u0151n\xF6kn\u0151", "z\xE1rjegy", "z\xE1r\xF3izom", "z\xE1r\xF3ra", "z\xE1rsz\xE1mad\xE1s", "z\xE1rt halmaz", "z\xE1rts\xE1g", "z\xE1szl\xF3alj", "z\xE1szl\xF3avat\xE1s", "z\xE1szl\xF3erd\u0151", "z\xE1szl\xF3r\xFAd", "z\xE1szl\xF3shal", "z\xE1szl\xF3szentel\xE9s", "z\xE1szl\xF3viv\u0151", "z\xE1v\xE1r", "zavarts\xE1g", "zebralev\xE9l", "zeller", "zel\xF3ta", "zeneakad\xE9mia", "zenehallgat\xE1s", "zenek\xF6lt\u0151", "zenem\u0171v\xE9sz", "zeneszekr\xE9ny", "zenetudom\xE1ny", "zergebogl\xE1r", "z\xE9rusoszt\xF3", "zig\xF3ta", "zloty", "zokni", "zoledronsav", "zom\xE1ncoz\xF3", "zongorahangol\xF3", "zongoraj\xE1t\xE9kos", "zongor\xE1s", "zongoratan\xEDt\xE1s", "zool\xF3gus", "z\xF6kken\u0151", "z\xF6ld fodorka", "z\xF6ld sepr\u0151moha", "z\xF6ldbabf\u0151zel\xE9k", "z\xF6ldbors\xF3konzerv", "z\xF6ldes gurgolya", "z\xF6ldes pitykegomba", "z\xF6ldes t\u0151kegomb\xE1cska", "z\xF6ldess\xE1rga tin\xF3ru", "z\xF6ldfoltos \u0151zl\xE1bgomba", "z\xF6ldhas\xFA", "z\xF6ldh\xFAr", "z\xF6ldike ujjaskosbor", "z\xF6ld\xF6vezet", "z\xF6ldperem\u0171 p\xF3kh\xE1l\xF3sgomba", "z\xF6ldsapk\xE1s", "z\xF6lds\xE9g\xE1rus", "z\xF6lds\xE9ges", "z\xF6lds\xE9gh\xE1moz\xF3", "z\xF6lds\xE9gragu", "z\xF6ldtakarm\xE1ny", "z\xF6ld\xFCl\u0151 csengetty\u0171gomba", "z\xF6ld\xFCl\u0151t\xF6nk\u0171 susulyka", "z\xF6m", "z\xF6rg\u0151f\u0171", "zubbony", "zug", "z\xFAg\xE1s", "zugfirk\xE1sz", "zugiv\xF3", "z\xFAg\xF3", "zuhan\xE1s", "zuhany", "zuhanyf\xFCrd\u0151", "zuhatag", "zulu", "z\xFAza", "z\xFAzda", "zuzm\xF3", "zuzm\xF3tan", "z\xFAz\xF3malom", "z\xFCll\xE9s", "z\xFCmm\xF6g\xE9s", "z\xFCrj\xE9n", "zs\xE1ba", "zsakaranda", "zsakett", "zs\xE1khord\xF3", "zs\xE1km\xE1nyszerz\xE9s", "zs\xE1kol\xE1s", "zs\xE1kos csillaggomba", "zs\xE1kruha", "zs\xE1kutca", "zsalu", "zs\xE1lya", "zs\xE1lyacs\xEDra", "zsand\xE1r", "zs\xE1ner", "zsar\xE1tnok", "zsarnok", "zsarol\xE1s", "zsarol\xF3program", "zsaru", "zs\xE9", "zsebkend\u0151", "zsebk\xF6nyv", "zseblop\xE1s", "zseb\xF3ra", "zsebsz\xF3t\xE1r", "zsebtolvajl\xE1s", "zsel\xE9", "zsell\xE9rke", "zsemle", "zsemlecip\xF3", "zsemlegomb\xF3c", "zsemlekocka", "zsemlesz\xEDn\u0171 fak\xF3gomba", "zsend\xFCl\xE9s", "zsenialit\xE1s", "zserb\xF3", "zserny\xE1k", "zsib\xE1ru", "zsibbad\xE1s", "zsibv\xE1s\xE1r", "zsid\xF3cseresznye", "zsid\xF3gy\u0171l\xF6let", "zsid\xF3negyed", "zsid\xF3t\xF6rv\xE9ny", "zsid\xF3ver\xE9s", "zsilip", "zsinag\xF3ga", "zsindely", "zsindelyez\xE9s", "zsineg", "zsin\xF3rd\xEDsz", "zsin\xF3r\xEDr\xE1s", "zsin\xF3rmester", "zs\xEDr", "zsir\xE1f", "zs\xEDrdaganat", "zs\xEDrfolt", "zs\xEDrk\u0151", "zs\xEDrmirigy", "zs\xEDrpap\xEDr", "zs\xEDrpecs\xE9t", "zs\xEDrsav", "zs\xEDrsert\xE9s", "zs\xEDrszalonna", "zs\xEDrsz\xF6vet", "zs\xEDrtartalom", "zs\xEDrt\xF6meg", "zsiv\xE1nybecs\xFClet", "zsoldoskatona", "zsomb\xE9k", "zsongl\u0151r", "zs\xF6rt\xF6l\u0151d\xE9s", "zsugorgat\xE1s", "zs\xFApszalma", "zs\xFArkocsi", "zsurn\xE1l", "zs\u0171rieln\xF6k"];
var F13 = ["abajgat", "abbahagyat", "abbahagyogat", "abc\xFAgol", "aberr\xE1l", "ablakoz", "abort\xE1l", "\xE1br\xE1nd\xEDt", "\xE1br\xE1ndul", "abszolutiz\xE1l", "abszolv\xE1l", "ac\xE9los\xEDt", "\xE1csing\xF3zik", "\xE1csol", "\xE1csorog", "ad", "adal\xE9kol", "adal\xE9kolgat", "adapt\xE1l\xF3dtat", "adjuszt\xE1l", "adom\xE1zgat", "ad\xF3t fizet", "ad\xF3ztat", "adressz\xE1l", "aduttoz", "ad-vesz", "\xE1gadzik", "\xE1g\xE1l", "\xE1gaskodik", "\xE1gasodik", "\xE1gazik", "aggat", "agglutin\xE1l", "aggreg\xE1l", "agnoszk\xE1l", "agyabugy\xE1l", "agyagol", "agyagolgat", "agyal", "\xE1gyat vet", "\xE1gyaz\xF3dik", "\xE1gyban marad", "agyon\xE1zik", "agyoncs\xE9pel", "agyondolgoztat", "agyon\xE9g", "agyongy\xF6t\xF6r", "agyonhallgat", "agyon\xEDr", "agyonk\xEDnoz", "agyonl\xF6vet", "agyonmagasztal", "agyons\xFAjt", "agyons\xFCl", "agyontapos", "agyonver", "agyonz\xFAz", "\xE1gy\xFAz", "\xE1h\xEDt", "\xE1h\xEDtatoskodik", "\xE1h\xEDtozik", "aj\xE1nlgat", "\xE1jtatoskodik", "\xE1jul", "\xE1juldozik", "ajv\xE9kol", "ajz", "akad\xE1lyoztat", "akar", "akar\xF3dzik", "akasztat", "akklimatiz\xE1l", "akkumul\xE1l", "akn\xE1z", "aktualiz\xE1l", "al\xE1bbsz\xE1ll", "al\xE1besz\xE9l", "al\xE1d\xFAcol", "al\xE1firkant", "al\xE1g\xF6rb\xFCl", "al\xE1k\xEDn\xE1l", "alak\xEDtgat", "alakul", "al\xE1l\xF6k", "al\xE1mer\xFCl", "alamizsn\xE1lkodik", "al\xE1z", "al\xE1zatoskodik", "al\xE1zkodik", "al\xE9l", "aljaz", "alkalmatlankodik", "alkoholiz\xE1l", "alkonyul", "alkotm\xE1nyoz", "\xE1ll", "\xE1llap\xEDt", "\xE1llapodik", "\xE1lldog\xE1l", "allegoriz\xE1l", "\xE1llv\xE1nyoz", "\xE1lmodozik", "\xE1lmos\xEDt", "\xE1ltalmegy", "altat", "alulexpon\xE1l", "alulfinansz\xEDroz", "alult\xE1pl\xE1l", "amerikaniz\xE1l", "amerikaniz\xE1l\xF3dik", "amortiz\xE1l", "\xE1mul", "andal\xEDt", "antagoniz\xE1l", "antedat\xE1l", "anticip\xE1l", "apaszt", "apell\xE1l", "apr\xF3l\xE9koskodik", "apr\xF3z", "ar\xE1nyos\xEDt", "aranyoz", "araszol", "\xE1raszt", "\xE1raz", "\xE1rbocoz", "arcoskodik", "ar\xE9n\xE1zik", "\xE1rkol", "artikul\xE1l", "\xE1rverez", "\xE1s\xEDtozik", "\xE1szkol", "asszimil\xE1l", "assziszt\xE1l", "asszoci\xE1l", "asz\xFAsodik", "\xE1talakul", "\xE1tall", "\xE1t\xE1ramlik", "\xE1t\xE1zik", "\xE1tbasz", "\xE1tb\xFCkken", "\xE1tced\xE1l", "\xE1tcser\xE9l", "\xE1t\xE9pit", "\xE1terez", "\xE1tfagy", "\xE1tfagyaszt", "\xE1tfegyverez", "\xE1tfogalmaz", "\xE1tf\xFAr\xF3dik", "\xE1thangzik", "\xE1tharap", "\xE1that", "\xE1th\xEDv", "\xE1thivatkozik", "\xE1thord", "\xE1titat\xF3dik", "\xE1t\xEDvel", "\xE1tizz\xEDt", "\xE1tjut", "\xE1tjuttat", "\xE1tk\xE9l", "\xE1tkoz", "\xE1tk\xF6t", "\xE1tk\xF6t\xF6z", "\xE1tk\xFAr", "\xE1tk\xFCld", "\xE1tl\xE1tszik", "\xE1tl\xE9nyeg\xEDt", "atletiz\xE1l", "atl\xE9tiz\xE1l", "\xE1tlyukaszt", "\xE1tment", "\xE1tny\xFAl", "\xE1t\xF6lt\xF6zik", "\xE1t\xF6mleszt", "\xE1tr\xE1g", "\xE1trohan", "\xE1tsiet", "\xE1tsorol", "\xE1tstartol", "\xE1tszab", "\xE1tszalad", "\xE1tsz\xE1moz", "\xE1tszellem\xEDt", "\xE1tszellem\xFCl", "\xE1tsz\u0151", "\xE1tt\xE9r", "\xE1tter\xEDt", "\xE1ttol", "\xE1ttolt", "\xE1tugr\xE1l", "\xE1tut\xE1l", "\xE1tv\xE1gtat", "\xE1tv\xE1ltozik", "\xE1tv\xE1ndorol", "\xE1tveget\xE1l", "\xE1tv\xE9sz", "\xE1tv\xE9szel", "\xE1tvillan", "\xE1tvisz", "autentikif\xE1l", "authentik\xE1l", "aut\xF3zik", "avanzs\xE1l", "avasodik", "avat", "avatkozik", "avul", "\xE1zik", "azonosul", "\xE1ztat", "bab\xE1zik", "babon\xE1z", "babr\xE1lgat", "b\xE1dogoz", "bag\xF3zik", "bagzik", "b\xE1gyad", "b\xE1gyadozik", "b\xE1jol", "b\xE1jolog", "balzsamoz", "b\xE1n", "bandukol", "bankol", "barcog", "bark\xE1csol", "barmol", "barn\xE1llik", "baromkodik", "baszakszik", "baszkur\xE1l", "baszogat", "b\xE1tor\xEDt", "b\xE1torodik", "battyog", "baz\xEDroz", "bazsev\xE1l", "beadagol", "be\xE1gyaz", "be\xE1gyaz\xF3dik", "beaj\xE1nl", "beakad", "bealkonyodik", "bealkonyul", "be\xE1ramlik", "bearanyoz", "be\xE1raz", "be\xE1zik", "bebetonoz", "bebiztos\xEDt", "bebodor\xEDt", "beborul", "bebotork\xE1l", "beb\xFAjik", "beb\xFAtorozkodik", "bec\xE9loz", "becikkelyez", "becipz\xE1roz", "becsatol", "becsekkol", "becsepegtet", "becser\xE9l", "becsin\xE1l", "becsomagoltat", "becsuk", "bedeszk\xE1z", "bedilizik", "bedrogoz", "be\xE9get", "be\xE9kel", "beerd\u0151s\xEDt", "beer\u0151s\xEDt", "beesteledik", "befagyott", "befal", "befalcol", "befejel", "befeketedik", "befeket\xEDt", "befelh\u0151s\xF6dik", "bef\xE9rk\u0151zik", "beford\xEDt", "befuccsol", "bef\xFAj", "bef\xFAr", "befuttat", "bef\xFCgg\xF6ny\xF6z", "bef\xFCrdik", "bef\xFCves\xEDt", "begazol", "beg\xE9pel", "begerjed", "beg\xF6nd\xF6r\xF6dik", "beg\xF6rcs\xF6l", "begub\xF3dzik", "begub\xF3zik", "begur\xEDt", "begy\xF6m\xF6sz\xF6l", "begyullad", "begy\u0171lik", "behabzsol", "behagy", "behaj\xF3z", "behaj\xF3zik", "behamvaz", "behat", "behavaz", "behelyettes\xEDt", "behengerel", "beh\xF3dol", "beh\xFAroz", "beh\xFAz\xF3dik", "beh\u0171t", "beindul", "beir\xE1ny\xEDt", "be\xEDrat", "beiratkozik", "beiszik", "bejelenti", "bejelentkezik", "bejut", "bejuttat", "bekak\xE1l", "bekakil", "bekap", "bek\xE9k\xFCl", "b\xE9k\xE9l", "b\xE9ken", "bekever", "bek\xEDs\xE9r", "b\xE9k\xEDt", "b\xE9kly\xF3z", "bekonfer\xE1l", "bekopog", "bekormoz", "bek\xF6t\xF6z", "bekrep\xE1l", "bekr\xE9t\xE1z", "bekukkant", "bekukucsk\xE1l", "b\xE9k\xFCl", "belakatol", "belakik", "bel\xE1zasodik", "beleakad", "beleavatkozik", "belebesz\xE9l", "belebonyol\xEDt", "belebonyol\xF3dik", "beleborzad", "beleborzong", "belebotlik", "bel\xE9cez", "belecsap", "belecs\xEDp", "beledob", "beleer\u0151ltet", "bele\xE9rt\u0151dik", "belefeledkezik", "belefog", "belegabalyodik", "belehajt", "belehal", "bele\xEDr", "beleiv\xF3dik", "belek\xE1bul", "belekarol", "belekever", "belekeveredik", "belek\xF6t", "belek\xFAr", "belel", "b\xE9lel", "belelapoz", "belel\xE1t", "bel\xE9legzik", "belel\u0151", "belen\xE9z", "belenget", "belenyugszik", "beleolvas", "belep", "belepampog", "belerak", "beler\xE1z", "beler\xFAg", "belesulykol", "beles\xFCpped", "beleszalad", "beleszeret", "beleszokik", "belesz\xF6kik", "beletanul", "beletapos", "belet\xF6m", "beleugat", "bele\xFCtk\xF6zik", "belevegy\xEDt", "belever", "belevesz", "belev\xE9sz", "belevil\xE1g\xEDt", "belez", "belez\xFAg", "belezs\xFAfol", "belop\xF3zik", "belovagol", "bel\xF6k", "bem\xE1zol", "bemeleg\xEDt", "bem\xE9lyed", "bem\xE9ly\xEDt", "bemer", "bem\xE9r", "bemer\xEDt", "bemes\xE9l", "bemetsz", "bemond", "bemosakszik", "bem\xF3szerol", "bemutat", "b\xE9n\xE1zik", "benedves\xEDt", "ben\xE9pes\xEDt", "benevez", "ben\xE9z", "b\xE9n\xEDt", "benn\xE9g", "bennlakik", "bennpusztul", "bennragad", "bennreked", "ben\u0151", "b\xE9nul", "beny\xE1laz", "beny\xEDlik", "benyom", "benyomul", "beny\xFAjt", "beolt", "beolvad", "beolvas", "beolvaszt", "beomlik", "beoszt", "be\xF6lt", "be\xF6mlik", "bepac\xE1z", "bepakol", "bepaliz", "bepanaszol", "bepelenk\xE1z", "beperel", "bepettyez", "bepi\xE1l", "bepillant", "bepiszk\xEDt", "bepolosk\xE1z", "bep\xF3ly\xE1z", "beporoz", "bep\xF3tol", "bep\xF6r\xF6g", "bep\xFAderez", "beragad", "beragaszt", "beragyog", "berak", "ber\xE1nt", "bereked", "berekeszt", "b\xE9rel", "berendel", "berendezkedik", "berep\xFCl", "beretv\xE1l", "berezel", "berhel", "berk\xE9l", "b\xE9rm\xE1l", "b\xE9rmentes\xEDt", "berohan", "beront", "berov\xE1tkol", "ber\xFAg", "beruh\xE1z", "berzenkedik", "bes\xE1roz", "besavany\xEDt", "besiet", "besorol", "besoroz", "bes\xF3z", "bes\xF6t\xE9tedik", "bes\xFAg", "besuszterol", "bes\xFCllyeszt", "bes\xFCpped", "bes\u0171r\xEDt", "beszakad", "beszalad", "besz\xE1ll", "besz\xE1ll\xE1sol", "besz\xE1m\xEDt", "besz\xE1moz", "besz\xE1r\xEDt", "beszeg", "besz\xE9lget", "besz\xE9ltet", "beszennyez", "beszerel", "beszervez", "besz\xEDv", "besziv\xE1rog", "besz\xF3l", "beszolg\xE1ltat", "besz\xF3r", "beszor\xEDt", "beszoroz", "beszorul", "besz\xFAr", "besz\xFAr\xF3dik", "besz\xFCntet", "besz\u0171r", "besz\u0171r\u0151dik", "bet\xE1jol", "betakar", "betakar\xEDt", "betanul", "betart", "betegeskedik", "betegszik", "beteker", "betekint", "betelep\xEDt", "betelepszik", "beteljesedik", "beteljes\xFCl", "betemet", "bet\xE9p", "beter\xEDt", "betervez", "betess\xE9kel", "betesz", "betet\u0151z", "bet\xE9ved", "betint\xE1z", "betlehemez", "bet\xF3dul", "betojik", "betol", "betolakodik", "betold", "betonoz", "bet\xF6lt", "bet\xF6r", "betud", "bet\u0171r", "bet\u0171z", "beugrat", "be\xFAszik", "beutazik", "be\xFCl", "be\xFCltet", "be\xFCt", "be\xFCvegez", "bev\xE1g", "bevagdal", "bevagon\xEDroz", "bevakol", "bev\xE1laszt", "bev\xE1lik", "bevall", "bev\xE1lt", "bev\xE1r", "bevarr", "bev\xE9gez", "bev\xE9gz\u0151dik", "bever", "beverbuv\xE1l", "bevet", "bev\xE9t", "beviharzik", "bevil\xE1g\xEDt", "bevisz", "bevizez", "bevon", "bevonul", "bezab\xE1l", "bez\xE1r", "bez\xE1rk\xF3zik", "bez\xE1r\xF3dik", "bez\xE1rul", "bezavar", "bez\xFAg", "bezsebel", "bezs\xFAfol", "b\xEDbel\u0151dik", "biceg", "bifl\xE1z", "bili\xE1rdozik", "bilincsel", "billeget", "bimb\xF3dzik", "b\xEDr", "b\xEDr\xE1lgat", "b\xEDr\xE1skodik", "b\xEDrs\xE1gol", "birtokol", "bitorol", "b\xEDz", "bizonyul", "biztat", "biztos\xEDt", "biztos\xEDt\xE9kszekr\xE9ny", "bizsereg", "blam\xE1l", "blam\xEDroz", "blans\xEDroz", "bliccel", "blokkol", "b\xF3biskol", "bocs\xE1t", "b\xF3d\xEDt", "bodros\xEDt", "b\xF3dul", "boh\xF3ckodik", "b\xF3kl\xE1szik", "b\xF3kol", "bokrosodik", "bokszol", "boldog\xEDt", "boldogul", "b\xF3logat", "bolondozik", "bolydul", "bolygat", "bolyhoz", "bomlaszt", "boncol", "bonyolul", "bootol", "bord\xE1z", "borjadzik", "borjazik", "borogat", "borong", "borotv\xE1lkozik", "borozgat", "borozik", "borul", "borzad", "borzaszt", "borzol", "borzongtat", "bosszankodik", "bosszant", "bosszul", "botork\xE1l", "botr\xE1nkozik", "botr\xE1nkoztat", "b\xF6ffent", "b\xF6f\xF6g", "b\u0151g", "b\xF6k", "b\xF6lcselkedik", "b\xF6mb\xF6l", "b\xF6ng\xE9sz", "b\xF6ng\xE9szget", "b\xF6ng\xE9szik", "b\xF6rt\xF6n\xF6z", "b\u0151sz\xEDt", "b\u0151sz\xFCl", "b\u0151v\xEDt", "b\u0151v\xFCl", "bratyizik", "brav\xF3zik", "bridzsel", "brill\xEDroz", "brunzol", "bruny\xE1l", "bubor\xE9kol", "b\xFAg", "bug\xE1zik", "bugybor\xE9kol", "buggyan", "bugyog", "buher\xE1l", "buj\xE1lkodik", "bujdosik", "b\xFAjik", "bujk\xE1l", "bujt", "bujtogat", "bukd\xE1csol", "bukfencezik", "bukik", "bukkan", "bulizik", "bumlizik", "bund\xE1zik", "burj\xE1nzik", "burkol", "b\xFAs\xEDt", "but\xE1skodik", "but\xEDt", "b\xFAtoroz", "b\xFAv\xE1rkodik", "buzd\xEDt", "buzog", "b\xFCffent", "b\xFCf\xF6g", "b\u0171nh\u0151dik", "b\xFCszk\xE9lkedik", "b\xFCtyk\xF6l", "b\u0171v\xE9szkedik", "b\u0171v\xF6l", "c\xE1fol", "cammog", "c\xE1p\xE1zik", "caplat", "ced\xE1l", "celebr\xE1l", "c\xE9lozgat", "centrifug\xE1l", "centr\xEDroz", "c\xE9rn\xE1z", "cicom\xE1z", "cifr\xE1z", "cig\xE1nykerekezik", "cikiz", "cimbor\xE1l", "c\xEDmez", "cimpelkedik", "cinkel", "cipel", "cipz\xE1roz", "ciripel", "cirk\xE1l", "cir\xF3gat", "civakodik", "civiliz\xE1l", "cizell\xE1l", "cukroz", "cuppog", "csacsog", "cs\xE1csog", "csahol", "csajozik", "csakliz", "csal", "csalogat", "cs\xE1mcsog", "csap", "csap\xE1zik", "csapkod", "csap\xF3dik", "cs\xE1pol", "csapong", "csapoz", "csatangol", "csat\xE1zik", "csatlakoztat", "csatol", "csatorn\xE1z", "csattan", "csattant", "csattint", "csattog", "csattogtat", "csavar", "csavargat", "csavarodik", "csavarog", "csavaroz", "cselleng", "csemp\xE9z", "csen", "csencsel", "csendes\xEDt", "cseng", "csenget", "csepeg", "csepegtet", "cs\xE9pel", "cseppfoly\xF3s\xEDt", "cserbenhagy", "cser\xE9l", "cserez", "cseszeget", "cseszekedik", "csesztet", "csetel", "csettint", "cseveg", "cs\xE9v\xE9l", "csever\xE9szik", "csicsereg", "csicsizik", "csig\xE1z", "csihad", "csikar", "csiklandoz", "csikorgat", "csikorog", "cs\xEDkoz", "csilingel", "csillagoz", "csill\xE1mlik", "csillan", "csillapodik", "csillapul", "csillog", "csillogtat", "csinosodik", "csintalankodik", "cs\xEDp", "csipeget", "csipked", "csipk\xE9z", "csipog", "cs\xEDr\xE1tlan\xEDt", "cs\xEDr\xE1zik", "cs\xEDr\xE1ztat", "csiripel", "csit\xEDt", "csobban", "cs\xF3cs\xE1l", "csom\xF3sodik", "csom\xF3z", "csonk\xEDt", "cs\xF3r", "csordog\xE1l", "csorog", "csoszog", "cs\xF3v\xE1l", "cs\u0151dbejut", "cs\u0151d\xFCl", "cs\xF6kev\xE9nyesedik", "cs\xF6k\xF6ny\xF6sk\xF6dik", "cs\xF6m\xF6sz\xF6l", "cs\xF6ng", "cs\xF6p\xF6g", "cs\xF6p\xF6gtet", "cs\xF6rgedez", "cs\xF6rgedezik", "cs\xF6rget", "cs\xF6r\xF6g", "cs\xF6r\xF6mp\xF6l", "cs\xFAf\xEDt", "cs\xFAfol\xF3dik", "csuk", "csuklik", "cs\xFAnyul", "csurd\xEDt", "csurgat", "csurog", "csuszamlik", "cs\xFAszk\xE1l", "cs\xFAsztat", "csutakol", "cs\xFCcs\xF6r\xEDt", "cs\xFCgged", "cs\xFCggeszt", "cs\xFCng", "cs\u0171r", "dacoskodik", "dadog", "dagad", "dagadozik", "dajk\xE1l", "dall", "dalmahodik", "dalol", "dalolgat", "darabol", "dauerol", "deb\xFCt\xE1l", "decentraliz\xE1l", "decim\xE1l", "dedik\xE1l", "deform\xE1l", "degener\xE1l", "degrad\xE1l", "deheroiz\xE1l", "dehidr\xE1l", "dehidrat\xE1l", "dehumaniz\xE1l", "dekartelliz\xE1l", "dekkol", "deklar\xE1l", "dekor\xE1l", "deleg\xE1l", "delejez", "delir\xE1l", "demobiliz\xE1l", "demokratiz\xE1l", "demonetiz\xE1l", "denatur\xE1l", "denomin\xE1l", "depolariz\xE1l", "deport\xE1l", "deprim\xE1l", "depriv\xE1l", "der\xEDt", "dermed", "dermeszt", "der\xFCl", "destabiliz\xE1l", "deszk\xE1z", "desztill\xE1l", "detoxik\xE1l", "detroniz\xE1l", "d\xE9vajkodik", "dezert\xE1l", "dezodor\xE1l", "dezoxid\xE1l", "d\xE9zsm\xE1l", "diadalmaskodik", "diagnosztiz\xE1l", "dializ\xE1l", "d\xEDcs\xE9rtess\xE9k", "dics\u0151it", "dics\u0151\xEDt", "didereg", "digitaliz\xE1l", "dikt\xE1l", "dinamiz\xE1l", "dinsztel", "diplom\xE1zik", "diskur\xE1l", "d\xEDszeleg", "diszkrimin\xE1l", "diszkvalifik\xE1l", "diszperg\xE1l", "disszid\xE1l", "dob", "dobban", "dobbant", "dobog", "dobol", "dobozol", "dohog", "dohosodik", "dokkol", "doktor\xE1l", "dokument\xE1l", "dolgoztat", "domborodik", "domesztik\xE1l", "domin\xE1l", "dong", "doppingol", "dorb\xE9zol", "dorg\xE1l", "dorombol", "d\xF3zerol", "d\xF6b\xF6g", "d\xF6c\xF6g", "d\xF6f", "d\xF6fk\xF6d", "d\xF6ng", "d\xF6nget", "d\xF6ngics\xE9l", "d\xF6ng\xF6l", "d\xF6rg\xF6l", "d\xF6rg\xF6l\u0151zik", "d\xF6r\xF6g", "dr\xE1g\xEDt", "dr\xE1gul", "dramatiz\xE1l", "dressz\xEDroz", "drogoz", "dr\xF3toz", "drukkol", "dubajozik", "d\xFAcol", "dud\xE1l", "d\xFAdol", "dudorodik", "dug", "dugaszol", "dugul", "d\xFAl", "dulakodik", "dum\xE1l", "dupl\xE1z", "durmol", "durran", "duruzsol", "durv\xE1skodik", "durv\xEDt", "durvul", "d\xFAs\xEDt", "duzzad", "duzzan", "duzzaszt", "duzzog", "d\xFCb\xF6r\xF6g", "d\xFCh\xF6dik", "d\xFCh\xF6ng", "d\xFCh\xF6s\xEDt", "d\u0171l", "d\xFCledezik", "d\xFCl\xF6ng", "d\xFCl\xF6ng\xE9l", "d\xFCnny\xF6g", "dzsal", "dzsiggel", "eb\xE9del", "\xE9bred", "\xE9bredezik", "\xE9breszt", "ecsetel", "\xE9desedik", "\xE9desget", "\xE9des\xEDt", "edz", "\xE9g", "egaliz\xE1l", "eger\xE9szik", "eg\xE9sz\xEDt", "egzec\xEDroz", "egybecsomagol", "egybeesik", "egybefoglal", "egybefon\xF3dik", "egybeforrad", "egybef\xFCgg", "egybegy\u0171jt", "egybegy\u0171lik", "egybeh\xEDv", "egybekel", "egybevet", "egybevon", "egyenesedik", "egyenget", "egyenl\xEDt", "egyet\xE9rt", "egyezkedik", "egyeztet", "egys\xE9ges\xEDt", "egyszer\u0171s\xEDt", "\xE9hezik", "ejakul\xE1l", "\xE9jszak\xE1zik", "ejt", "\xE9kel", "\xE9kes\xEDt", "\xE9keskedik", "ek\xE9z", "\xE9ktelenkedik", "\xE9l", "el\xE1br\xE1ndozik", "elad", "elad\xF3sodik", "elagyabugy\xE1l", "elaj\xE1nd\xE9koz", "el\xE1jul", "elakad", "elakaszt", "elakn\xE1s\xEDt", "elal\xE9l", "el\xE1ll\xEDt", "elaltat", "el\xE1ltat", "el\xE1m\xEDt", "el\xE1mul", "elandal\xEDt", "elapad", "elapaszt", "elapr\xF3z", "el\xE1rverez", "elavul", "el\xE1zik", "elbagatelliz\xE1l", "elb\xE1gyad", "elb\xE1jol", "elbalt\xE1z", "elb\xE1mul", "elbarik\xE1doz", "elb\xE1tortalan\xEDt", "elb\xE1tortalanodik", "elbesz\xE9l", "elbesz\xE9lget", "elb\xEDr", "elb\xEDr\xE1l", "elbizonytalan\xEDt", "elbizonytalanodik", "elbliccel", "elb\xF3biskol", "elbocs\xE1t", "elboldogul", "elbolond\xEDt", "elbomlik", "elbont", "elbor\xEDt", "elborul", "elborzad", "elborzaszt", "elbujt", "elbukik", "elbuktat", "elbut\xEDt", "elb\u0171v\xF6l", "elcipel", "elcs\xE1b\xEDt", "elcsacsog", "elcsakliz", "elcsal", "elcsap", "elcsen", "elcsendes\xEDt", "elcsendes\xFCl", "elcs\xE9pel", "elcser\xE9l", "elcseveg", "elcsig\xE1z", "elcs\xEDp", "elcsit\xEDt", "elcsod\xE1lkozik", "elcs\xF3r", "elcs\xF6ndes\xFCl", "elcs\xFAf\xEDt", "elcs\xFAszik", "elcs\xFCgged", "elcs\xFCggeszt", "eldalol", "eldob", "eld\u0151l", "eld\xF6nt", "eld\xF6rd\xFCl", "eldug", "eldugaszol", "eldugul", "eldurran", "eldurrant", "eldurv\xEDt", "eldurvul", "\xE9led", "el\xE9gedetlenkedik", "elegend\u0151", "eleget", "el\xE9get", "el\xE9g\xEDt", "el\xE9gszik", "el\xE9gt\xE9telt vesz", "elegyedik", "elektriz\xE1l", "elektroliz\xE1l", "\xE9lelmez", "elemel", "elem\xE9szt", "elemez", "\xE9l\xE9nk\xEDt", "\xE9l\xE9nk\xFCl", "eleny\xE9szik", "elereszt", "eler\u0151tlenedik", "eler\u0151tlen\xEDt", "\xE9leszt", "elevenedik", "eleven\xEDt", "el\xE9v\xFCl", "\xE9lez", "elf\xE1raszt", "elf\xE1s\xEDt", "elf\xE1sul", "elf\xE1tyoloz", "elfecs\xE9rel", "elfed", "elfeh\xE9redik", "elfeketedik", "elfeled", "elfelejt", "elfelejtet", "elfelejt\u0151dik", "elfenekel", "elf\xE9r", "elfogad", "elfogat", "elfogyaszt", "elfolyat", "elfonnyad", "elford\xEDt", "elforg\xE1csol\xF3dik", "elf\xF6ldel", "elf\xFCgg\xF6ny\xF6z", "elf\u0171t", "elg\xE1zol", "elg\xE1zos\xEDt", "elg\xE9mberedik", "elg\xE9pies\xEDt", "elgondol", "elg\xF6rb\xEDt", "elgurul", "elgyeng\xEDt", "elgyeng\xFCl", "elgy\xF6ng\xEDt", "elhadar", "elhagy", "elhaj\xEDt", "elhajlik", "elhajol", "elhaj\xF3zik", "elh\xE1l", "elhalad", "elhal\xE1lozik", "elhalmoz", "elhalv\xE1ny\xEDt", "elhalv\xE1nyul", "elhamvaszt", "elhangol", "elhangzik", "elhantol", "elh\xE1ny", "elhappol", "elhasad", "elhasal", "elhaszn\xE1l\xF3dik", "elhat\xE1rol", "elhebeg", "elherd\xE1l", "elhervad", "elhervadt", "elhervaszt", "elhesseget", "elhib\xE1z", "elhideg\xFCl", "elhint", "elh\xEDresztel", "elhisz", "elhitet", "elh\xEDv", "elh\xF3d\xEDt", "elhom\xE1lyos\xEDt", "elhom\xE1lyosul", "elhord", "elhoz", "elhull", "elhullat", "elhuny", "elhurcol", "elh\xFAz", "elh\xFAz\xF3dik", "elidegen\xEDt", "elid\u0151zik", "eligaz\xEDt", "eligazodik", "elig\xE9nytelenedik", "elijeszt", "elillan", "elinal", "elind\xEDt", "elindul", "elism\xE9tel", "eliszkol", "elj\xE1r", "eljegyez", "\xE9ljenez", "elj\xF6n", "eljut", "eljuttat", "elk\xE1b\xEDt", "elk\xE1bul", "elkalandozik", "elkan\xE1szodik", "elkap", "elk\xE1pr\xE1ztat", "elk\xE1rhozik", "elkedvetlenedik", "elkedvetlen\xEDt", "elk\xE9k\xFCl", "elkel", "elkend\u0151z", "elk\xE9ped", "elk\xE9peszt", "elk\xE9pzel", "elk\xE9r", "elkeresztel", "elk\xE9rgesedik", "elkerget", "elker\xEDt", "elker\xFCl", "elkeser\xEDt", "elk\xE9sik", "elk\xE9sz\xEDt", "elk\xE9sz\xFCl", "elkeveredik", "elkezd", "elk\xEDs\xE9r", "elk\xF3borol", "elkoboz", "elkocsony\xE1sodik", "elkomorodik", "elkopik", "elkoptat", "elkorcsosul", "elkorhad", "elkotr\xF3dik", "elk\xF6d\xF6s\xEDt", "elk\xF6lt", "elk\xF6lt\xF6zik", "elk\xF6nyvel", "elk\xF6sz\xF6n", "elk\xF6t", "elk\xF6vet", "elkurvul", "elk\xFCld", "elk\xFCl\xF6n\xEDt", "elk\xFCl\xF6n\xFCl", "ell\xE1t", "ellazul", "ellehetetlen\xEDt", "ellen\xE1ll", "ellenez", "ellenjegyez", "ellenkezik", "ellens\xE9geskedik", "ellens\xFAlyoz", "ellenszeg\xFCl", "ellentart", "ellent\xE9telez", "ellentmond", "ellenvet\xE9st tesz", "ellenzi", "ellep", "ell\xE9p", "ellik", "ell\xF3g", "ellop", "ellopakodik", "ell\xF6k", "ell\xF6v\xF6ld\xF6z", "ellustul", "elmagyarar\xE1z", "elmarad", "elmaszatol", "elm\xE1szik", "elmegy", "elm\xE9lyed", "elm\xE9ly\xEDt", "elm\xE9ly\xFCl", "elm\xE9rges\xEDt", "elmer\xEDt", "elmer\xFCl", "elmes\xE9l", "elmeszel", "elmeszesedik", "elmond", "elmorzsol", "elmos", "elmos\xF3dik", "elmosogat", "elmosolyodik", "elmozd\xEDt", "elmozdul", "elmulaszt", "elm\xFAlik", "elnadr\xE1gol", "elnagyol", "eln\xE1sp\xE1ngol", "elnehez\xEDt", "eln\xE9m\xEDt", "eln\xE9ptelen\xEDt", "elnevez", "eln\xE9z", "elnyel", "elnyer", "elnyom", "elny\xFAjt", "elny\u0171", "elold", "eloldalog", "eloldoz", "elolvad", "elolvas", "elolvaszt", "elont", "eloszlat", "eloszlik", "eloszt", "el\u0151\xE1ll", "el\u0151\xE1ll\xEDt", "el\u0151bukkan", "el\u0151fizet", "el\u0151form\xE1l", "el\u0151h\xEDv", "el\u0151hoz", "el\u0151hozakodik", "el\u0151ir\xE1nyoz", "el\u0151jegyez", "el\u0151j\xF6n", "el\u0151kel\u0151sk\xF6dik", "el\u0151keres", "el\u0151ker\xFCl", "el\xF6l", "el\u0151legez", "el\u0151l\xE9p", "el\u0151l\xE9ptet", "el\xF6lt", "el\u0151meleg\xEDt", "el\u0151nyomul", "el\u0151re jelez", "el\u0151re l\xE1t", "el\u0151rebocs\xE1t", "el\u0151rehalad", "el\u0151rejut", "el\u0151remozd\xEDt", "el\u0151remozog", "el\u0151renyomul", "el\u0151reny\xFAlik", "el\u0151retart", "el\u0151retekint", "el\u0151retesz", "el\u0151ret\xF6r", "el\u0151reugrik", "el\u0151rukkol", "\xE9l\u0151sk\xF6dik", "el\u0151teremt", "el\u0151terjeszt", "el\u0151v\xE1nszorog", "el\u0151var\xE1zsol", "el\u0151vesz", "el\u0151vezet", "el\u0151z", "elp\xE1rolog", "elp\xE1rologtat", "elp\xE1rtol", "elpaterol", "elpatkol", "elpazarol", "elp\xE9necol", "elperzsel", "elpirul", "elpocs\xE9kol", "elpuhul", "elpuszt\xEDt", "elpusztul", "elrabol", "elragad", "elragadtat", "elrak", "elrakt\xE1roz", "elrejt", "elrekeszt", "elrendel", "elrendez", "elreped", "elrep\xFCl", "elrettent", "elriaszt", "elrohan", "elront", "elrothad", "elsaj\xE1t\xEDt", "els\xE1ncol", "els\xE1ntik\xE1l", "els\xE1pad", "els\xE1rg\xEDt", "els\xE1rgul", "elsatny\xEDt", "elsatnyul", "elsek\xE9lyesedik", "elsiet", "elsikkaszt", "elsim\xEDt", "elsimul", "elsodor", "elsomford\xE1l", "elsorvad", "els\xF3z", "els\xF6p\xF6r", "els\xF6t\xE9tedik", "els\xF6t\xE9t\xEDt", "elsuhan", "els\xFCllyed", "els\xFCllyeszt", "els\xFCpped", "els\xFCt", "elszab", "elszabadul", "elszakad", "elszak\xEDt", "elszalad", "elsz\xE1ll", "elsz\xE1ll\xEDt", "elsz\xE1mol", "elsz\xE1n", "elsz\xE1rad", "elsz\xE1r\xEDt", "elsz\xE9d\xEDt", "elszelel", "elszemtelenedik", "elszenes\xEDt", "elszenved", "elszigetel", "elsz\xEDntelen\xEDt", "elsz\xEDv", "elszokik", "elszomor\xEDt", "elszomorodik", "elsz\xF6kik", "elsz\xF6ktet", "elszunnyad", "elsz\xFAr", "eltaccsol", "eltakar", "eltakar\xEDt", "eltakarodik", "eltal\xE1l", "elt\xE1ncol", "elt\xE1ntor\xEDt", "eltapos", "eltasz\xEDt", "elt\xE1vol\xEDt", "elt\xE1vozik", "eltekint", "elt\xE9kozol", "eltelik", "elt\xE9p", "elterel", "elter\xEDt", "elterjed", "elterjeszt", "elter\xFCl", "elt\xE9r\xFCl", "eltervez", "\xE9ltet", "elt\xE9ved", "elt\xE9veszt", "eltikkad", "eltilt", "eltol\xF3dik", "eltorlaszol", "eltorol", "eltorz\xEDt", "eltorzul", "elt\xF6m", "elt\xF6m\u0151dik", "eltulajdon\xEDt", "elt\xFAloz", "eltunyul", "elt\xFAr", "eltussol", "elt\u0171n\u0151dik", "el\xFAszik", "elutazik", "el\xFCgyetlenkedik", "el\u0171z", "elvadul", "elv\xE1g\xF3dik", "elv\xE1gtat", "elv\xE1gt\xE1zik", "elv\xE1gy\xF3dik", "elvakul", "elv\xE1laszt", "elv\xE1llal", "elv\xE1ndorol", "elv\xE1r", "elv\xE1sik", "elvegy\xFCl", "elv\xE9kony\xEDt", "elv\xE9konyodik", "elverg\u0151dik", "elv\xE9rzik", "elveszejt", "elvesz\xEDt", "elveszt", "elveszteget", "elvet", "elv\xE9t", "elvet\xE9l", "elvez\xE9nyel", "elvezet", "elvonatkoztat", "elvontat", "elvonul", "elz\xE1logos\xEDt", "elz\xE1r", "elzar\xE1ndokol", "elz\xE1rk\xF3zik", "elz\xE1r\xF3dik", "elzavar", "elz\xF6ld\xFCl", "elz\xFAg", "elzsibbad", "elzsibbaszt", "emberkedik", "emel", "emelint", "\xE9melyedik", "\xE9melyeg", "\xE9mely\xEDt", "em\xE9szt\u0151dik", "emigr\xE1l", "emleget", "emulge\xE1l", "\xE9nekel", "enged\xE9lyez", "engesztel", "enyeleg", "enyh\xFCl", "enyvez", "eped", "epedezik", "\xE9r", "\xE9rdekel", "\xE9rdekl\u0151dik", "\xE9rdemel", "erd\u0151s\xEDt", "ered", "eredm\xE9nyez", "ereszt", "\xE9retts\xE9gizik", "erez", "\xE9rintkezik", "erjed", "erjeszt", "\xE9rlel", "\xE9rlel\u0151dik", "ernyed", "erny\u0151z", "er\u0151d\xEDt", "er\u0151ltet", "er\u0151s\xF6dik", "er\u0151szakol", "er\u0151tlen\xEDt", "\xE9rtekezik", "\xE9rtes\xEDt", "\xE9rtes\xFCl", "\xE9rtetlenkedik", "\xE9rv\xE9nytelen\xEDt", "\xE9rz\xE9kel", "\xE9rz\xE9keny\xFCl", "\xE9rzeleg", "\xE9rzelmeskedik", "\xE9rz\xE9stelen\xEDt", "esdekel", "esk\xFCd\xF6zik", "esteledik", "eszel", "eszk\xE1b\xE1l", "eszk\xF6z\xF6l", "eszm\xE9l", "eszm\xE9ny\xEDt", "\xE9szrevesz", "\xE9sszer\u0171s\xEDt", "eszterg\xE1l", "\xE9tet", "\xE9tkezik", "evaku\xE1l", "evangeliz\xE1l", "evez", "ev\u0151dik", "\xE9v\u0151dik", "exhum\xE1l", "exorciz\xE1l", "expon\xE1l", "export\xE1l", "exterioriz\xE1l", "extrapol\xE1l", "ez\xFCst\xF6z", "facsar", "faggat", "f\xE1jlal", "fakad", "fak\xEDt", "fakul", "fal", "falaz", "falcol", "fanatiz\xE1l", "fant\xE1zi\xE1l", "fantomiz\xE1l", "fanyalog", "farag", "faragcs\xE1l", "farol", "fas\xEDroz", "f\xE1s\xEDt", "fasiz\xE1l", "f\xE1sul", "favoriz\xE1l", "fecc\xF6l", "fecseg", "fecs\xE9rel", "fecskendez", "fegyverez", "feh\xE9redik", "feh\xE9r\xEDt", "fejez", "fejteget", "feket\xE9zik", "feket\xEDt", "f\xE9kez\u0151dik", "f\xE9l", "fel\xE1gaskodik", "felaggat", "felaj\xE1nl", "felajz", "felakad", "fel\xE1ldoz", "fel\xE1ll", "fel\xE1ll\xEDt", "felapr\xEDt", "felapr\xF3z", "fel\xE1rbocoz", "fel\xE1s", "felavat", "felb\xE1tor\xEDt", "felbecs\xFCl", "f\xE9lbehagy", "felb\xE9lyegez", "f\xE9lbemarad", "f\xE9lbeszakad", "f\xE9lbeszak\xEDt", "felbillen", "felbillent", "felbiztat", "felbolydul", "felbolygat", "felbomlaszt", "felbomlik", "felbont", "felbor\xEDt", "felborul", "felborzad", "felborzol", "felbosszant", "felbotlik", "felb\u0151sz\xEDt", "felbujt", "felbukik", "felbukkan", "felbuktat", "felbuzd\xEDt", "felbuzog", "felcsarnakol", "felcsatol", "felcsavar", "felcser\xE9l", "felcser\xE9l\u0151dik", "felcs\xE9v\xE9z", "felcsig\xE1z", "felcsillan", "felcsin\xE1l", "felcs\xEDp", "felcs\xFAsztat", "feldarabol", "felder\xEDt", "felder\xFCl", "feld\xEDsz\xEDt", "feldob", "feldolgoz", "feld\u0151l", "feld\xF6nt", "feld\xF6rzs\xF6l", "feld\xFAl", "felduzzad", "feld\xFCh\xEDt", "feld\xFCh\xF6dik", "feld\u0171l", "fel\xE9bred", "fel\xE9breszt", "feled", "feledkezik", "fel\xE9get", "felegyenesedik", "felejt\u0151dik", "fel\xE9kes\xEDt", "fel\xE9l", "fel\xE9l\xE9nk\xEDt", "fel\xE9leszt", "feleleven\xEDt", "felemel", "felem\xE9szt", "felenged", "fel\xE9p\xEDt", "fel\xE9r", "feler\u0151s\xEDt", "fel\xE9rt\xE9kel", "felesel", "feleszm\xE9l", "felez", "felfal", "felfed", "felfegyverez", "felfegyverkezik", "felfejl\u0151dik", "felfejt", "felfesz\xEDt", "felfigyel", "felfog", "felfokoz", "felford\xEDt", "felfordul", "felforgat", "felforr", "felfortyan", "felfut", "felf\xFAv\xF3dik", "felf\u0171t", "felf\u0171z", "felgerjed", "felgomboly\xEDt", "felg\xF6mb\xF6ly\xEDt", "felgy\xF3gyul", "felgyors\xEDt", "felgyorsul", "felgy\xFAjt", "felgy\u0171jt", "felgy\u0171l", "felgy\xFClemlik", "felgy\u0171lik", "felgy\u0171r", "felh\xE1bor\xEDt", "felh\xE1borodik", "felhagy", "felhajszol", "felhajt", "felhangol", "felhangzik", "felh\xE1nytorgat", "felhas\xEDt", "felhasogat", "felhaszn\xE1l", "felhatalmaz", "felheccel", "felhelyez", "felhev\xEDt", "felhev\xFCl", "felh\xEDg\xEDt", "felh\xEDv", "felhizlal", "felhord", "felhorgos\xEDt", "felhoz", "felh\xF6rpint", "felhurcol", "felh\xFAz", "felh\xFAz\xF3dzkodik", "felid\xE9z", "felingerel", "fel\xEDr", "feliratoz", "felismer", "felitat", "felizgul", "felj\xE1r", "feljav\xEDt", "feljegyez", "feljelent", "feljogos\xEDt", "felj\xF6n", "feljut", "feljuttat", "felkant\xE1roz", "felkap", "felkap\xE1l", "felkapaszkodik", "felkapcsol", "felkavar", "felkel", "felk\xE9l", "felkelt", "felk\xE9pel", "felk\xE9r", "felkeres", "felk\xE9sz\xFCl", "felkever", "felki\xE1lt", "felk\xEDn\xE1l", "felkoppint", "felkorb\xE1csol", "felk\xF6h\xF6g", "felk\xF6lt\xF6zik", "felk\xF6sz\xF6nt", "felk\xF6t", "felkutat", "felk\xFCld", "fell\xE1ngol", "fell\xE1rm\xE1z", "fell\xE1zad", "fellaz\xEDt", "fell\xE1z\xEDt", "fell\xE9legzik", "fellelkesedik", "fellelkes\xEDt", "fellelkes\xFCl", "fellend\xEDt", "fellend\xFCl", "fellep", "fellobbant", "fellobog\xF3z", "fell\xF6k", "felmagasztal", "felmagzik", "felmegy", "felmeleg\xEDt", "felmelegszik", "felmer", "felm\xE9r", "felmer\xFCl", "felmetsz", "felmin\u0151s\xEDt", "felmond", "felmorajlik", "felmordul", "felmorzsol", "felmos", "felmutat", "felnagy\xEDt", "feln\xE9gyel", "felnevel", "felny\xE1rsal", "felnyer\xEDt", "felny\xEDlik", "felnyit", "felold\xF3dik", "feloldoz", "felolt", "felolvas", "felolvaszt", "feloszlat", "feloszt", "fel\xF6klel", "fel\xF6lel", "fel\xF6lt", "fel\xF6lt\xF6ztet", "fel\u0151r\xF6l", "felparcell\xE1z", "felpattan", "felpeckel", "felpezsd\xEDt", "felpezsd\xFCl", "felpiszk\xE1l", "felpofoz", "felp\xF6rget", "felpr\xF3b\xE1l", "felpuffaszt", "felpump\xE1l", "felragaszt", "felrak", "felr\xE1nt", "felravataloz", "felr\xE1z", "f\xE9lre\xE1ll", "f\xE9lrebesz\xE9l", "f\xE9lrebillen", "f\xE9lrecs\xFAszik", "f\xE9lredob", "f\xE9lre\xE9rt", "f\xE9lre\xE9rtelmez", "f\xE9lreford\xEDt", "f\xE9lrefordul", "f\xE9lreh\xEDv", "f\xE9lreh\xFAz\xF3dik", "f\xE9lreismer", "f\xE9lrelep", "f\xE9lrel\xE9p", "f\xE9lrel\xF6k", "f\xE9lremagyar\xE1z", "f\xE9lremegy", "f\xE9lrenevel", "f\xE9lren\xE9z", "f\xE9lrerak", "f\xE9lretesz", "f\xE9lretol", "f\xE9lreugrik", "f\xE9lrevonul", "felriad", "felriaszt", "felr\xF3", "felrohan", "felr\xFAg", "felruh\xE1z", "felseg\xEDt", "felseper", "felsiet", "felsikolt", "fels\xF3hajt", "felsorakozik", "felsorakoztat", "felsorol", "fels\xFCl", "felszabad\xEDt", "felszabadul", "felszakad", "felszalad", "felsz\xE1mol", "felsz\xE1nt", "felszaporodik", "felsz\xE1rad", "felszarvaz", "felszeletel", "felsz\xEDt", "felsz\xEDv", "felsz\xEDv\xF3dik", "felszokik", "felsz\xF3lal", "felszolg\xE1l", "felsz\xF3l\xEDt", "felsz\xF6kik", "felsz\xF6kken", "felsz\xFAr", "feltal\xE1l", "felt\xE1lal", "felt\xE1mad", "felt\xE1maszt", "feltankol", "feltart", "feltart\xF3ztat", "felt\xE1rul", "f\xE9lt\xE9kenykedik", "felteker", "feltekercsel", "feltekint", "felt\xE9p", "felterjeszt", "feltesz", "feltol", "felt\u0151k\xE9s\xEDt", "felt\xF6lt", "felt\xF6r", "felt\xF6r\xF6l", "feltup\xEDroz", "felt\xFAr", "felt\xFCntet", "felt\u0171r", "felt\u0171z", "felugrik", "fel\xFCd\xEDt", "fel\xFCd\xFCl", "fel\xFCgyel", "fel\xFCl", "fel\xFClb\xEDr\xE1l", "fel\xFCl\xEDr", "fel\xFClkerekedik", "fel\xFClm\xFAl", "fel\xFClvizsg\xE1l", "fel\xFCt", "felv\xE1g", "felv\xE1lt", "felvarr", "felv\xE1s\xE1rol", "felv\xE1zol", "felver", "felv\xE9rtez", "felvesz", "felvet", "felvezet", "felvidul", "felvigy\xE1z", "felvil\xE1gos\xEDt", "felvillan", "felvillanyoz", "felvir\xE1goztat", "felvirrad", "felvon", "felzaklat", "felzavar", "felz\xFAdul", "felz\xFAg", "f\xE9mjelez", "fen", "fennakad", "fenn\xE1ll", "fennh\xE9j\xE1z", "fennmarad", "fenntart", "feny\xEDt", "f\xE9nym\xE1sol", "f\xE9r", "ferd\xEDt", "ferd\xFCl", "f\xE9regtelen\xEDt", "ferment\xE1l", "fert\u0151z\u0151dik", "f\xE9s\xFCl", "fesz\xE9lyez", "feszeng", "fesz\xEDt", "f\xE9szkel", "fesz\xFCl", "fetisiz\xE1l", "fetreng", "fiatal\xEDt", "fiatalodik", "fic\xE1nkol", "fick\xE1ndozik", "figyel", "figyelemmel k\xEDs\xE9r", "fik\xE1z", "filmez", "finansz\xEDroz", "fingik", "finom\xEDt", "finomkodik", "finomodik", "finomul", "fintorog", "firk\xE1l", "firk\xE1lgat", "fitogtat", "fityeg", "fitym\xE1l", "fix\xEDroz", "flamb\xEDroz", "flancol", "flang\xE1l", "fl\xF6rt\xF6l", "fluidiz\xE1l", "fluktu\xE1l", "fog", "fogad", "fogadkozik", "fogalmaz", "fogan", "foganatos\xEDt", "fogaz", "fog\xF3dzik", "fogy", "fogyatkozik", "fogy\xF3k\xFAr\xE1zik", "fojtogat", "fokol", "fokoz", "fokoz\xF3dik", "f\xF3kusz\xE1l", "folyat", "foly\xF3s\xEDt", "folytat", "fon", "foncsorol", "foncsoroz", "fon\xF3dik", "fontol", "ford\xEDt", "fordul", "forgalmaz", "forgol\xF3dik", "form\xE1l", "formaliz\xE1l", "form\xE1z", "forog", "forrad", "forradalmas\xEDt", "forr\xE1z", "forsz\xEDroz", "fortyog", "foszforeszk\xE1l", "fot\xF3zik", "f\u0151", "f\xF6deraliz\xE1l", "f\xF6laj\xE1nl", "f\xF6ld\u0151l", "f\xF6lemel", "f\xF6lseg\xEDt", "f\xF6lvesz", "fraterniz\xE1l", "friss\xEDt", "frocliz", "frott\xEDroz", "fr\xF6csk\xF6l", "fr\xF6cs\xF6g", "f\xFA", "fuccsol", "f\xFAjdog\xE1l", "f\xFAjtat", "fuldoklik", "fund\xE1l", "funkcion\xE1l", "furakodik", "furat", "furuly\xE1zik", "fuser\xE1l", "futam\xEDt", "futamodik", "futkos", "fut\xF3sz\xE1raz", "futtat", "fuvalkodik", "fuvaroz", "f\xFAv\xF3dik", "f\xFCggeszt", "f\xFCgg\u0151z", "f\xFClel", "f\xFCllent", "f\xFCrk\xE9sz", "f\xFCst\xF6l\xF6g", "f\xFCttyent", "f\xFCty\xFCl", "f\u0171z", "gabaly\xEDt", "g\xE1gog", "galloz", "galvaniz\xE1l", "g\xE1ly\xE1zik", "g\xE1ncsol", "g\xE1ncsoskodik", "g\xE1nyol", "garant\xE1l", "gar\xE1zd\xE1lkodik", "gard\xEDroz", "gargariz\xE1l", "garn\xEDroz", "gaty\xE1zik", "gazdag\xEDt", "gazdagodik", "gazd\xE1lkodik", "g\xE1zol", "gazsul\xE1l", "gellert kap", "gener\xE1l", "generaliz\xE1l", "gennyed", "gennyesedik", "gerebly\xE9z", "gerjed", "gerjeszt", "germaniz\xE1l", "gesztikul\xE1l", "glettel", "golfozik", "gombol", "gondoskodik", "gonoszkodik", "goromb\xE1skodik", "g\u0151gics\xE9l", "g\xF6mb\xF6ly\xF6dik", "g\xF6nd\xF6r\xEDt", "g\xF6nnol", "g\xF6rb\xEDt", "g\xF6rcs\xF6l", "g\xF6rdeszk\xE1zik", "g\xF6rd\xFCl", "g\xF6rget", "g\xF6rkorcsoly\xE1zik", "g\u0151z\xF6l\xF6g", "granul\xE1l", "grassz\xE1l", "gratul\xE1l", "grav\xEDroz", "grindol", "grundol", "guber\xE1l", "gub\xF3zik", "guggol", "guggol\xE1s", "gum\xEDroz", "g\xFAnyol", "g\xFAnyol\xF3dik", "gurgul\xE1zik", "gur\xEDt", "gurul", "guszt\xE1l", "gyakorlatozik", "gyal\xE1z", "gyal\xE1zkodik", "gyalul", "gy\xE1mol\xEDt", "gyanakodik", "gyanakszik", "gyan\xEDt", "gyarap\xEDt", "gyarapodik", "gyarapszik", "gyarmatos\xEDt", "gyeng\xE9lkedik", "gyilkol", "gy\xF3gykezel", "gyoml\xE1l", "gy\xF3nik", "gy\xF6keresedik", "gy\xF6ng\xEDt", "gy\xF6ng\xFCl", "gy\xF6ny\xF6rk\xF6dik", "gy\xF6ny\xF6rk\xF6dtet", "gy\xF6tr\u0151dik", "gy\u0151z", "gy\u0151zedelmeskedik", "gy\u0151z\u0151dik", "gy\xFAjtogat", "gy\xFAl", "gyullad", "gy\xFClekezik", "gy\u0171l\xF6lk\xF6dik", "gy\xFCm\xF6lcs\xF6zik", "gy\u0171r", "gy\u0171r\u0151dik", "gy\u0171r\u0171dzik", "hablatyol", "h\xE1bor\xEDt", "h\xE1borodik", "h\xE1bor\xFAskodik", "habozik", "hadakozik", "hadar", "hadon\xE1szik", "h\xE1g", "hahot\xE1zik", "hajaz", "hajcsik\xE1l", "hajlong", "hajnalodik", "haj\xF3k\xE1zik", "hajol", "haj\xF3zik", "hal", "h\xE1l", "h\xE1l\xE1l", "hal\xE1lozik", "halandzs\xE1zik", "hal\xE1szik", "halaszt", "halasztgat", "haldoklik", "hallat", "hallgat\xF3zik", "hallgattat", "hallik", "hallucin\xE1l", "halmoz\xF3dik", "hal\xF3dik", "halogat", "h\xE1l\xF3z", "halv\xE1nyodik", "h\xE1mlik", "hamvaszt", "handaband\xE1zik", "hangoztat", "hangszerel", "h\xE1nt", "hant\xE1zik", "h\xE1ntol", "h\xE1ny", "hanyatlik", "hanyatt esik", "h\xE1nykol\xF3dik", "h\xE1ny\xF3dik", "hapcizik", "h\xE1pog", "har\xE1csol", "harag\xEDt", "h\xE1ramlik", "harangoz", "harapd\xE1l", "h\xE1rf\xE1zik", "h\xE1r\xEDt", "harmadol", "harmoniz\xE1l", "h\xE1romszoroz", "h\xE1romszoroz\xF3dik", "hasal", "hasogat", "hasznos\xEDt", "hasznosul", "hat", "hatalmaskodik", "hatalmaz", "hat\xE1lytalan\xEDt", "hat\xE1rol", "hat\xE1roz", "hat\xE1stalan\xEDt", "hatol", "h\xE1traesik", "h\xE1trafordul", "h\xE1tr\xE1ltat", "h\xE1tramarad", "h\xE1tran\xE9z", "haverkodik", "hazahoz", "hazakerekezik", "hazaker\xE9kp\xE1rozik", "h\xE1zal", "hazamegy", "hazard\xEDroz", "h\xE1zas\xEDt", "hazatal\xE1l", "hazatelep\xEDt", "hazautazik", "hazav\xE1r", "hazavezet", "hazavisz", "h\xE1zias\xEDt", "hazudtol", "hebeg", "heccel", "heged", "heged\xFCl", "hegyesedik", "hekkel", "helleniz\xE1l", "helybenhagy", "helyesb\xEDt", "helyesel", "helyezkedik", "helyre\xE1ll\xEDt", "helyrebillen", "helyrehoz", "helyreigaz\xEDt", "helyt\xE1ll", "helytelen\xEDt", "hempereg", "hemzseg", "hengerel", "hentel", "hentereg", "heny\xE9l", "herd\xE1l", "hervad", "hesseget", "hesszel", "hessz\xF6l", "hetvenkedik", "hever", "hev\xEDt", "hev\xFCl", "h\xE9zagol", "hezit\xE1l", "hi\xE1nyol", "hi\xE1nyt szenved", "hi\xE1nyzik", "hib\xE1sodik", "hib\xE1z", "hib\xE1ztat", "hibridiz\xE1l", "hidal", "hidroliz\xE1l", "higgad", "himb\xE1l\xF3dzik", "h\xEDmez", "hint", "hint\xE1zik", "hipnotiz\xE1l", "h\xEDresztel", "historiz\xE1l", "hisz", "hiszteriz\xE1l", "hiteget", "hitelez", "hi\xFAs\xEDt", "h\xEDvat", "h\xEDvogat", "h\xEDzeleg", "hizlal", "hohmecol", "holoc\xE9n", "homogeniz\xE1l", "homorodik", "honol", "honor\xE1l", "honos\xEDt", "honosodik", "horg\xE1szik", "horgaszt", "horgol", "horgos\xEDt", "horkol", "horol", "hortyog", "horzsol", "hozat", "hozz\xE1ad", "hozz\xE1ad\xF3dik", "hozz\xE1csatol", "hozz\xE1fog", "hozz\xE1f\u0171z", "hozz\xE1\xEDr", "hozz\xE1j\xE1rul", "hozz\xE1jut", "hozz\xE1kapcsol", "hozz\xE1kever", "hozz\xE1kezd", "hozz\xE1l\xE1t", "hozz\xE1ny\xFAl", "hozz\xE1ragad", "hozz\xE1ragaszt", "hozz\xE1rendel", "hozz\xE1seg\xEDt", "hozz\xE1simul", "hozz\xE1szokik", "hozz\xE1szoktat", "hozz\xE1sz\xF3l", "hozz\xE1tapad", "hozz\xE1tartozik", "hozz\xE1tesz", "h\u0151b\xF6r\xF6g", "h\u0151kezel", "h\xF6kken", "h\xF6kkent", "h\xF6mp\xF6ly\xF6g", "h\xF6r\xF6g", "h\xF6rpint", "h\u0151sk\xF6dik", "h\u0151z\xF6ng", "huhog", "hull\xE1mlovagol", "humaniz\xE1l", "humoriz\xE1l", "huncutkodik", "huny", "huny\xE1szkodik", "hunyor\xEDt", "hunyorog", "hurcol", "hurrog", "h\xFAz\xF3dik", "h\xFAz\xF3dozik", "h\u0171l", "h\xFCly\xE9skedik", "h\u0171s\xEDt", "h\u0171s\xF6l", "h\u0171t", "idead", "idealiz\xE1l", "idegenkedik", "idegeskedik", "idegez", "idehoz", "idej\xF6n", "iden\xE9z", "idevonz", "idomul", "id\u0151s\xF6dik", "id\u0151zik", "ifj\xEDt", "ifjodik", "ifrik\xE1l", "ig\xE1z", "igazgat", "igaz\xEDt", "igazodik", "igenel", "\xEDg\xE9r", "\xEDg\xE9rget", "ig\xE9z", "ihlet", "ijed", "ijeszt", "ikszel", "iktat", "illatos\xEDt", "illatozik", "illet", "illik", "im\xE1d", "im\xE1dkozik", "immuniz\xE1l", "implement\xE1l", "impon\xE1l", "import\xE1l", "improviz\xE1l", "ind\xEDt", "ind\xEDtv\xE1nyoz", "indokol", "induk\xE1l", "ing", "ingadozik", "ing\xE1zik", "inger\xFCl", "inhal\xE1l", "inspir\xE1l", "install\xE1l", "integr\xE1l", "integr\xE1l\xF3dik", "interpell\xE1l", "int\xE9z", "int\xE9zkedik", "int\xE9zm\xE9nyes\xEDt", "int\xE9zm\xE9nyes\xFCl", "ioniz\xE1l", "iparkodik", "iparos\xEDt", "\xEDr", "iramodik", "\xEDrat", "iratkozik", "irgalmaz", "irigykedik", "iriz\xE1l", "irrit\xE1l", "irt", "irt\xF3zik", "ismerkedik", "ismertet", "ism\xE9telget", "iszlamiz\xE1l", "iszogat", "iszonyodik", "itat", "\xEDt\xE9l", "\xEDt\xE9lkezik", "ittasul", "ivartalanit", "\xEDvel", "iz\xE9l", "izgul", "\xEDzlel", "\xEDzlik", "izmosodik", "izmozik", "izol\xE1l", "izomeriz\xE1l", "izzik", "izz\xEDt", "jajgat", "jajvesz\xE9kel", "jammerol", "j\xE1rat", "j\xE1rk\xE1l", "j\xE1rul", "j\xE1tszik", "j\xE1tsz\xF3dik", "jav\xEDtgat", "jegecesedik", "jegel", "jegyzetel", "jelenik", "jelen\xEDt", "jelentet", "jelk\xE9pez", "jobb\xEDt", "j\xF3dlizik", "j\xF3lesik", "j\xF3llakik", "j\xF3pofizik", "j\xF3t\xE1ll", "j\xF3v\xE1\xEDr", "j\xF6vedelmez", "j\xF6vend\xF6l", "j\xF6v\xE9s", "juttat", "k\xE1b\xEDt", "k\xE1bul", "kacar\xE1szik", "kac\xE9rkodik", "kacs\xE1zik", "kacsint", "kagyl\xF3zik", "kajakozik", "kaj\xE1l", "kajtat", "kalandozik", "kalap\xE1l", "kalauzol", "kalibr\xE1l", "kalimp\xE1l", "kal\xF3zkodik", "kamel", "kancsal\xEDt", "kanoniz\xE1l", "k\xE1nt\xE1l", "kanyarodik", "kanyarog", "kap\xE1l", "kaparint", "kapaszkodik", "kapat", "kapkod", "k\xE1pr\xE1zik", "k\xE1pr\xE1ztat", "k\xE1r\xE1l", "karambolozik", "karamelliz\xE1l", "karattyol", "karbantart", "karboniz\xE1l", "karbur\xE1l", "karcs\xFAs\xEDt", "kardoskodik", "kardozik", "karik\xE1ra l\u0151", "karik\xEDroz", "k\xE1rog", "karol", "k\xE1romkodik", "k\xE1romol", "k\xE1ros\xEDt", "k\xE1rosodik", "k\xE1rosul", "k\xE1rpitoz", "k\xE1rtol", "kaserol", "kas\xEDroz", "kaszabol", "kasz\xE1l", "kassz\xEDroz", "kataliz\xE1l", "katalogiz\xE1l", "katapult\xE1l", "kategoriz\xE1l", "kat\xE9terez", "katoliz\xE1l", "katon\xE1skodik", "kattan", "kattintgat", "kattog", "kavar", "kavarog", "k\xE1v\xE9zik", "kavirny\xE1l", "kecmereg", "keccs\xF6l", "kecsegtet", "kedveskedik", "kef\xE9l", "kegyelmez", "kegyeskedik", "kegyetlenkedik", "kekeckedik", "k\xE9k\xEDt", "kel", "kelepel", "keletkezik", "kell", "kellemetlenkedik", "keltez", "kem\xE9nyedik", "k\xE9mlel", "kempingezik", "kend\u0151z", "keneget", "kenyerez", "k\xE9nyeskedik", "k\xE9nyeztet", "k\xE9nyszer\xEDt", "k\xE9ped", "k\xE9pes\xEDt", "kepeszt", "k\xE9peszt", "k\xE9pez", "k\xE9pzel", "k\xE9pzeleg", "k\xE9pzel\u0151dik", "k\xE9pz\u0151dik", "k\xE9rd", "k\xE9rdez\u0151sk\xF6dik", "k\xE9rd\u0151jelez", "k\xE9reget", "kerekedik", "kerekezik", "ker\xE9kp\xE1rozik", "k\xE9relmez", "k\xE9rem", "kerepel", "keresg\xE9l", "kereskedik", "keresztelkedik", "keresztez\u0151dik", "kereszt\xFClhajt", "kereszt\xFClmegy", "k\xE9ret", "keretez", "kering", "kering\u0151zik", "ker\xEDt", "k\xE9rlel", "k\xE9r\u0151dzik", "k\xE9rv\xE9nyez", "k\xE9sel", "k\xE9slekedik", "k\xE9sleltet", "k\xE9sni", "k\xE9sztet", "k\xE9sz\xFCl\u0151dik", "k\xE9tel", "k\xE9telkedik", "k\xE9ts\xE9gbeesik", "k\xE9tszerez", "kett\xE9\xE1gazik", "kett\xE9oszt", "kett\xE9t\xF6r", "kett\xE9v\xE1laszt", "kett\u0151z", "ketyeg", "ketyizik", "kettyint", "keveredik", "k\xE9zbes\xEDt", "kezdem\xE9nyez", "kezeskedik", "k\xE9zimunk\xE1zik", "ki\xE1br\xE1nd\xEDt", "ki\xE1br\xE1ndul", "kiadagol", "kiagyal", "kiakad", "kiakaszt", "kiakn\xE1z", "kialak\xEDt", "kialakul", "kialkuszik", "ki\xE1ll", "ki\xE1ll\xEDt", "kialszik", "kiapad", "kiapaszt", "ki\xE1rad", "ki\xE1ramlik", "ki\xE1rus\xEDt", "kibabr\xE1l", "kibekkel", "kib\xE9k\xFCl", "kibelez", "kibesz\xE9l", "kibet\u0171z", "kibillen", "kibillent", "kib\xEDr", "kibiztos\xEDt", "kibocs\xE1t", "kibogoz", "kibomlik", "kibontakozik", "kibor\xEDt", "kiborul", "kibotork\xE1l", "kib\u0151v\xEDt", "kib\u0151v\xFCl", "kib\xFAjik", "kibukik", "kibukkan", "kicipz\xE1roz", "kicsal", "kicsap", "kicsap\xF3dik", "kicsapong", "kicsatol", "kicsavar", "kics\xE9pel", "kicser\xE9l", "kicsikar", "kicsin\xE1l", "kicsinos\xEDt", "kicsinyel", "kics\xEDp", "kics\xEDr\xE1zik", "kicsomagol", "kicsordul", "kics\xFAcsosodik", "kics\xFAfol", "kider\xFCl", "kidob", "kidomborodik", "kid\u0151l", "kid\xF6nt", "kid\xF6rzs\xF6l", "kidudorodik", "kidug", "kidurran", "ki\xE9g", "kieg\xE9sz\xEDt", "ki\xE9get", "kiegyenesedik", "kiegyenes\xEDt", "kiegyenl\xEDt", "kiegyens\xFAlyoz", "kiegyens\xFAlyoz\xF3dik", "kiegyezik", "ki\xE9heztet", "kiejt", "kiel\xE9g\xEDt", "kiel\u0151z", "kiemel", "kiemelkedik", "kienged", "kiengesztel", "ki\xE9rdemel", "kier\u0151ltet", "kier\u0151szakol", "ki\xE9rt\xE9kel", "kieszel", "kieszk\xF6z\xF6l", "kifacsar", "kifaggat", "kifakad", "kifakul", "kif\xE1rad", "kifarag", "kif\xE1raszt", "kifecseg", "kifeh\xE9redik", "kifeh\xE9r\xEDt", "kifejez", "kifelejt", "kif\xE9nyes\xEDt", "kifest", "kifesz\xEDt", "kificam\xEDt", "kificamodik", "kifigur\xE1z", "kifingik", "kifinom\xEDt", "kifinomul", "kifizet", "kifizet\u0151dik", "kifog", "kifog\xE1sol", "kifogy", "kifordul", "kiforr", "kif\u0151z", "kifullad", "kifullaszt", "kifund\xE1l", "kif\xFAr", "kifut", "kif\xFCggeszt", "kif\xFCrk\xE9sz", "kif\xFCst\xF6l", "kif\xFCty\xFCl", "kif\u0171z", "kigan\xE9z", "kig\xFAvad", "kigy\xF3gy\xEDt", "kigy\xF3gyul", "kigyoml\xE1l", "k\xEDgy\xF3zik", "kigy\xF6ny\xF6rk\xF6dik", "kigy\xFAl", "kihagy", "kihajol", "kihaj\xF3z", "kihajt", "kihal", "kih\xE1moz", "kihangs\xFAlyoz", "kih\xE1ny", "kiharcol", "kihaszn\xE1l", "kihat", "kihegyesedik", "kihegyez", "kihelyez", "kiher\xE9l", "kih\xEDv", "kihord", "kihoz", "kihull", "kih\xFAz", "kih\u0171l", "kih\xFCvelyez", "kiigaz\xEDt", "kiiktat", "kiindul", "ki\xEDr", "kiirt", "kiismer", "kiiszik", "kij\xE1tszik", "kijav\xEDt", "kij\xF3zan\xEDt", "kij\xF3zanodik", "kij\xF6n", "kikap", "kikapcsol", "kikecmereg", "kikel", "kik\xE9mlel", "kikeres", "kikerget", "kiker\xFCl", "kik\xE9sz\xEDt", "kikiab\xE1l", "kik\xEDs\xE9r", "kikocsizik", "kikosaraz", "kikotor", "kikotyog", "kik\xF6lt", "kik\xF6lt\xF6zik", "kik\xF6p", "kik\xF6t", "kik\xF6vetkeztet", "kikrist\xE1lyosodik", "kik\xFCld", "kik\xFCsz\xF6b\xF6l", "kilakoltat", "kil\xE1t", "kilehel", "kil\xE9p", "kiloccsan", "kil\xF3g", "kil\u0151", "kil\xF6k", "kil\xF6vell", "kilyuggat", "kilyukad", "kilyukaszt", "kimagaslik", "kimagoz", "kimar", "kimarad", "kim\xE1szik", "kimaxol", "kimegy", "k\xEDm\xE9l", "kimelegedik", "kim\xE9ly\xEDt", "kimenek\xFCl", "kiment", "kimer", "kim\xE9r", "kimer\xEDt", "kimer\xFCl", "kimeszel", "kimos", "kimozd\xEDt", "kimozdul", "kimunk\xE1l", "kim\u0171vel", "k\xEDn\xE1lkozik", "kinevet", "kinevez", "kin\xE9z", "k\xEDnl\xF3dik", "kin\u0151", "kinyal", "kinyiffan", "kinyiffant", "kiny\xEDr", "kinyit", "kinyom", "kinyomtat", "kiny\xFAjt", "kiny\xFAlik", "kiny\xFAvad", "kiny\xFAvaszt", "kiokos\xEDt", "kiold", "kiolt", "kiolvad", "kiolvas", "kiolvaszt", "kiont", "ki\xF6bl\xEDt", "ki\xF6l", "ki\xF6lt", "ki\xF6lt\xF6zik", "ki\xF6mlik", "kipakol", "kip\xE1rolog", "kip\xE9c\xE9z", "kipender\xEDt", "kiperk\xE1l", "kipip\xE1l", "kipirul", "kipofoz", "kiporci\xF3z", "kipr\xE9sel", "kipr\xF3b\xE1l", "kipuhatol", "kipurcan", "kipuszt\xEDt", "kipusztul", "kirabol", "kirad\xEDroz", "kiragad", "kirakodik", "kir\xE1ndul", "kir\xE1nt", "kir\xE1z", "kirekeszt", "kirep\xFCl", "kirobban", "kirohan", "kir\xFAg", "kirukkol", "kir\xFCgyezik", "kisajtol", "kisebbedik", "kiseg\xEDt", "k\xEDs\xE9rel", "k\xEDs\xE9rletez", "kisiet", "kisminkel", "kisorsol", "kisug\xE1rzik", "kiszab", "kiszabad\xEDt", "kiszagol", "kiszakad", "kiszak\xEDt", "kiszalad", "kisz\xE1ll", "kisz\xE1rad", "kiszaszerol", "kisz\xE9lesedik", "kisz\xE9les\xEDt", "kiszell\u0151ztet", "kiszenved", "kiszerel", "kiszervez", "kisz\xEDnez", "kisz\xEDv", "kisziv\xE1rog", "kiszivatty\xFAz", "kiszolg\xE1l", "kiszolg\xE1ltat", "kisz\xF3r", "kiszor\xEDt", "kisz\xFAr", "kisz\u0171r", "kitaccsol", "kitagad", "kit\xE1g\xEDt", "kit\xE1gul", "kitakar", "kitakar\xEDt", "kital\xE1l", "kit\xE1lal", "kitan\xEDt", "kitapint", "kitapogat", "kitapos", "kit\xE1r", "kitart", "kit\xE1rul", "kitasz\xEDt", "kiteker", "kitelep\xEDt", "kiteny\xE9szt", "kit\xE9p", "kit\xE9r", "kitereget", "kiter\xEDt", "kitermel", "kitervel", "kitesz", "kitilt", "kitiszt\xEDt", "kitisztul", "kitol", "kitoloncol", "kit\xF6lt", "kit\xF6m", "kit\xF6r", "kit\xF6r\xF6l", "kitud\xF3dik", "kit\xFAr", "kit\u0171nik", "kit\u0171z", "kiugrik", "ki\xFAjul", "kiutal", "kiutas\xEDt", "ki\xFCgyeskedik", "ki\xFCltet", "ki\xFCr\xEDt", "ki\xFCr\xFCl", "ki\xFCt", "ki\u0171z", "kiv\xE1g", "kiv\xE1j", "kivakar", "kiv\xE1laszt", "kiv\xE1lik", "kiv\xE1logat", "kiv\xE1lt", "kivan", "k\xEDv\xE1ncsiskodik", "kiv\xE1ndorol", "kiv\xE1r", "kivasal", "kiv\xE1s\xE1rol", "kiv\xE9d", "kiv\xE9gez", "kiv\xE9rzik", "kiv\xE9s", "kives\xE9z", "kivesz", "kiv\xE9sz", "kiv\xE9telez", "kivet\xEDt", "kivez\xE9nyel", "kivil\xE1g\xEDt", "kivir\xE1gzik", "kivirul", "kivitelez", "kiv\xEDv", "kivizsg\xE1l", "kivon", "kivonatol", "kivonul", "kiz\xE1r", "kizavar", "kizecc\xF6l", "kiz\xF6kken", "kizs\xE1km\xE1nyol", "kizsebel", "kizsigerel", "klappol", "klikkel", "klimp\xEDroz", "kl\xF3noz", "koagul\xE1l", "k\xF3borog", "k\xF3borol", "koboz", "k\xF3cer\xE1j", "kockul", "kocog", "kocsik\xE1zik", "kocsit hajt", "kocsizik", "k\xF3dol", "kohol", "kokett\xE1l", "k\xF3kler", "koldul", "kollektiviz\xE1l", "koloniz\xE1l", "kombin\xE1l", "kom\xE9di\xE1zik", "kommend\xE1l", "kommunik\xE1l", "kommuniz\xE1l", "komolyodik", "kompenz\xE1l", "komplik\xE1l", "kompon\xE1l", "kompromitt\xE1l", "koncentr\xE1l", "kondicion\xE1l", "konfigur\xE1l", "konfront\xE1l\xF3dik", "konkretiz\xE1l", "konkur\xE1l", "konspir\xE1l", "konszolid\xE1l", "kont\xE1rkodik", "kontempl\xE1l", "kont\xEDroz", "kontroll\xE1l", "konverg\xE1l", "konvert\xE1l", "konzerv\xE1l", "kooper\xE1l", "koopt\xE1l", "kop\xE1csol", "kopaszodik", "kopaszt", "kopik", "kop\xEDroz", "koplal", "koppan", "koppint", "koptat", "korcsoly\xE1zik", "korhad", "korhol", "korizik", "korl\xE1toz", "korog", "koron\xE1z", "korosodik", "korrepet\xE1l", "korrig\xE1l", "korrump\xE1l", "korszer\u0171s\xEDt", "korteskedik", "kortyint", "kortyol", "k\xF3stolgat", "k\xF3sz\xE1l", "koszol", "kotkod\xE1csol", "kotor", "kotor\xE1szik", "kott\xE1z", "kotyog", "kov\xE1csol", "k\xF3v\xE1lyog", "k\xF6d\xF6s\xEDt", "k\xF6hint", "k\xF6lcs\xF6nad", "k\xF6lcs\xF6nk\xE9r", "k\xF6lcs\xF6n\xF6z", "k\xF6lcs\xF6nvesz", "k\xF6lt\xF6zik", "k\xF6lt\xF6zk\xF6dik", "k\xF6nt\xF6rfalaz", "k\xF6nnyebb\xEDt", "k\xF6nnyebb\xFCl", "k\xF6nnyez", "k\xF6nnyezik", "k\xF6nny\xEDt", "k\xF6ny\xF6k\xF6l", "k\xF6nyvel", "k\xF6pk\xF6d", "k\xF6p\xF6ly\xF6z", "k\xF6p\xFCl", "k\xF6rbej\xE1r", "k\xF6r\xEDt", "k\xF6r\xFClfog", "k\xF6r\xFClhat\xE1rol", "k\xF6r\xFClmet\xE9l", "k\xF6r\xFCln\xE9z", "k\xF6r\xFClvesz", "k\xF6r\xFClz\xE1r", "k\xF6rvonalaz", "k\xF6rvonalaz\xF3dik", "k\xF6sz\xF6n", "k\xF6sz\xF6nt", "k\xF6sz\xF6r\xFCl", "k\xF6tekedik", "k\xF6telez", "k\xF6t\u0151dik", "k\xF6t\xF6zk\xF6dik", "k\xF6vesedik", "k\xF6vetel\u0151zik", "k\xF6vetkeztet", "k\xF6vez", "k\xF6v\xFCl", "k\xF6zbej\xF6n", "k\xF6zbenj\xE1r", "k\xF6zbev\xE1g", "k\xF6zeleg", "k\xF6zel\xEDt", "k\xF6zlekedik", "k\xF6z\xF6l", "k\xF6z\xF6mb\xF6s\xEDt", "k\xF6z\xF6s\xEDt", "k\xF6z\xF6s\xFCl", "k\xF6zpontos\xEDt", "k\xF6zread", "k\xF6zrebocs\xE1t", "k\xF6zrefog", "k\xF6zrehat", "k\xF6zrej\xE1tszik", "k\xF6zrevesz", "k\xF6zrez\xE1r", "k\xF6zvet\xEDt", "krep\xE1l", "kr\xE9t\xE1z", "krist\xE1lyos\xEDt", "kritiz\xE1l", "kuglizik", "kukacoskodik", "kukor\xE9kol", "kuksol", "kukucsk\xE1l", "kullog", "kuncog", "kunyer\xE1l", "kupakol", "kuporgat", "kuporodik", "kurblizik", "kuriz\xE1l", "kurjant", "kurk\xE1szik", "kuruzsol", "kurv\xE1lkodik", "kushad", "kussol", "kusz\xE1l", "k\xFAszik", "kutat", "kutyagol", "k\xFCl\xF6nb\xF6zik", "k\xFCl\xF6nb\xF6ztet", "k\xFCl\xF6n\xEDt", "k\xFCl\xF6n\xFCl", "k\xFCl\xF6nv\xE1laszt", "k\xFCrt\xF6l", "k\xFCszk\xF6dik", "kv\xE1derez", "l\xE1badozik", "l\xE1batlankodik", "lacafac\xE1zik", "l\xE1gy\xEDt", "l\xE1jkol", "lajstromoz", "lakatol", "lakkoz", "lakm\xE1rozik", "lakozik", "l\xE1ncol", "landol", "l\xE1ngra lobbant", "lankad", "lap\xE1tol", "lap\xEDt", "lapoz", "lappang", "lapul", "l\xE1rm\xE1z", "l\xE1rm\xE1zik", "l\xE1t", "l\xE1ttamoz", "lav\xEDroz", "l\xE1zasodik", "laz\xEDt", "l\xE1z\xEDt", "l\xE1z\xEDt\xE1s", "lazul", "lazs\xE1l", "lead", "lead\xF3zik", "lealacsony\xEDt", "lealacsonyodik", "leal\xE1z", "lealkuszik", "le\xE1ll", "le\xE1ll\xEDt", "leapad", "leapaszt", "learat", "le\xE1ztat", "lebarn\xEDt", "lebarnul", "l\xE9becol", "lebecsm\xE9rel", "lebecs\xFCl", "lebeg", "lebegtet", "leb\xE9lyegez", "lebesz\xE9l", "lebilincsel", "lebillen", "lebocs\xE1t", "lebont", "lebonyol\xF3dik", "lebor\xEDt", "leborul", "lebotork\xE1l", "lebukik", "lebzsel", "lecipz\xE1roz", "leck\xE9ztet", "lecsap", "lecsatol", "lecsavar", "lecsendes\xEDt", "lecser\xE9l", "lecsillapodik", "lecsiszol", "lecsorog", "lecs\xF6kkent", "lecsuk", "lecsupasz\xEDt", "lecs\xFAszik", "lecs\xFCng", "ledolgoz", "led\u0151l", "led\xF6nt", "led\xF6rzs\xF6l", "le\xE9g", "le\xE9get", "leegyszer\u0171s\xEDt", "leejt", "leemel", "le\xE9p\xEDt", "leereszkedik", "le\xE9rt\xE9kel", "leesik", "leeszik", "lefagyaszt", "lefarag", "lef\xE1tyoloz", "lefed", "lefegyverez", "lefejel", "lefejez", "lefejt", "lef\xE9kez", "lefekszik", "lefektet", "lefest", "lef\xE9s\xFCl", "lefetyel", "lefitym\xE1l", "lefizet", "lefog", "lefogad", "lefoglal", "lefogy", "lefokoz", "leford\xEDt", "lefordul", "leforr\xE1z", "lef\xF6l\xF6z", "lefr\xF6csk\xF6l", "lef\xFAj", "lef\xFClel", "legel", "legel\xE9szik", "legeltet", "leg\xF6mb\xF6ly\xEDt", "legyeng\xEDt", "legyeng\xFCl", "legyez", "legyezget", "legyint", "legy\u0151z", "legy\u0171r", "lehagy", "lehaj\xEDt", "lehajlik", "lehajol", "lehajt", "lehalkit", "lehallgat", "leharap", "lehel", "lehelyez", "lehengerel", "lehet", "lehetetlen\xEDt", "lehet\u0151v\xE9 tesz", "lehidal", "lehiggad", "lehord", "lehorgaszt", "lehorgonyoz", "lehorzsol", "lehoz", "lehull", "lehuny", "lehurrog", "leh\xFAz", "leh\u0171l", "leh\u0171t", "leig\xE1z", "lej\xE1r", "lej\xE1rat", "lej\xE1tsz\xF3dik", "lejegyez", "lejmol", "lej\xF6n", "lejsztol", "lejt", "lekapar", "lekapcsol", "lekaszabol", "lekasz\xE1l", "l\xE9kel", "lekenyerez", "lek\xE9pez", "lekerek\xEDt", "lekezel", "lekicsinyel", "lekop", "lekopik", "lekopog", "lekott\xE1z", "lek\xF6p", "lek\xF6r\xF6z", "lek\xF6sz\xF6n", "lek\xF6telez", "lektor\xE1l", "lekuporodik", "lek\xFCzd", "lelakatol", "lel\xE1ncol", "lelass\xEDt", "lel\xE9p", "leleplez", "leleplez\u0151dik", "lelkesedik", "lelkes\xEDt", "lel\xF3g", "lelohad", "lel\u0151", "lemarad", "lem\xE9r", "lemer\xFCl", "lem\xE9sz\xE1rol", "lemetsz", "lemeztelen\xEDt", "lemin\u0151s\xEDt", "lemmatiz\xE1l", "lemos", "lend\xFCl", "leng", "lenget", "lenyakaz", "lenyes", "lenyom", "lenyomoz", "lenyugszik", "lenyugtat", "leny\xFAl", "leny\xFAz", "leny\u0171g\xF6z", "leolt", "leolvas", "leomlik", "le\xF6bl\xEDt", "le\xF6l", "le\xF6nt", "lep", "l\xE9p", "leparkol", "lep\xE1rol", "lepattan", "l\xE9pdel", "lep\xE9nzel", "leperk\xE1l", "lepihen", "leplez", "leporol", "lep\u0151dik", "lepr\xE9sel", "l\xE9ptet", "lepusztul", "ler\xE1g", "leragad", "lerajzol", "lerak", "lerakodik", "lerak\xF3dik", "ler\xE1nt", "ler\xE1z", "lereag\xE1l", "ler\xE9szegedik", "lereszel", "lerobban", "lerogy", "lerohan", "leront", "leroskad", "ler\xF6gz\xEDt", "ler\xF6vid\xEDt", "les", "leseg\xEDt", "leselkedik", "lesiet", "lesiklik", "lesim\xEDt", "leskel\u0151dik", "lesodor", "lesov\xE1nyodik", "les\xF6p\xF6r", "lespriccel", "les\xFAjt", "lesutul", "les\xFCllyeszt", "les\xFCpped", "lesz", "leszaggat", "leszakad", "leszak\xEDt", "leszalad", "lesz\xE1ll", "lesz\xE1m\xEDt", "lesz\xE1mol", "leszavaz", "leszek", "leszel", "leszerel", "leszerepel", "leszid", "lesz\xEDv", "leszokik", "leszoktat", "lesz\xF3l", "lesz\xF3l\xEDt", "leszor\xEDt", "lesz\xF6gez", "lesz\xFAr", "lesz\u0171r", "letagad", "letakar", "letapos", "letarol", "let\xE1rol", "leteker", "letekeredik", "letelep\xEDt", "let\xE9r", "l\xE9tes\xEDt", "letilt", "letiszt\xE1z", "letiszt\xEDt", "letorkol", "let\xF6r", "let\xF6rik", "let\xF6r\xF6l", "l\xE9trehoz", "l\xE9trej\xF6n", "letromfol", "leugrik", "le\xFCl", "le\xFClepedik", "le\xFCltet", "le\xFCt", "lev\xE1g", "levakar", "lev\xE1laszt", "lev\xE1lik", "levelez", "lever", "levesz", "levet", "levetk\u0151zik", "levetk\u0151ztet", "levezet", "levon", "lez\xE1r", "l\xE9zeng", "lez\xFAdul", "lezuhanyozik", "lez\xFClleszt", "libeg", "liberaliz\xE1l", "licit\xE1l", "likvid\xE1l", "lilul", "lincsel", "liofiliz\xE1l", "list\xE1z", "l\xF3b\xE1l", "lobban", "lobog", "lobogtat", "loccsan", "locsog", "l\xF3d\xEDt", "l\xF3g", "l\xF3gat", "lohad", "lombosodik", "lomtalan\xEDt", "lopakodik", "lop\xF3zik", "lovagol", "l\u0151d\xF6r\xF6g", "l\xF6kd\xF6s", "l\xF6kd\xF6s\u0151dik", "l\xF6ty\xF6g", "l\xF6vell", "l\xF6vet", "lubickol", "l\xFAgos\xEDt", "l\xFAgoz", "lust\xE1lkodik", "l\xFCktet", "lyuggat", "lyukaszt", "macer\xE1l", "magasztal", "mag\xE1z", "magnetiz\xE1l", "magol", "magyar\xE1zkodik", "magyaros\xEDt", "majmol", "majr\xE9zik", "majszol", "makacskodik", "makog", "m\xE1ngorol", "man\u0151verez", "mar", "marakodik", "marcangol", "marhul", "m\xE1rt", "m\xE1rtogat", "m\xE1s\xEDt", "maszatol", "m\xE1szik", "m\xE1szk\xE1l", "maszk\xEDroz", "massz\xEDroz", "maszturb\xE1l", "materializ\xE1l", "mattol", "maximaliz\xE1l", "m\xE1zol", "mechaniz\xE1l", "megac\xE9loz", "megad", "megadatik", "megad\xF3ztat", "megagit\xE1l", "meg\xE1gyaz", "megakad", "megakaszt", "megalak\xEDt", "megalapoz", "megal\xE1z", "megalkot", "megalkuszik", "meg\xE1ll", "meg\xE1llap\xEDt", "meg\xE1llapodik", "megalvad", "meg\xE1rad", "meg\xE1rt", "meg\xE1s", "megavasodik", "meg\xE1zik", "megbabon\xE1z", "megbarn\xEDt", "megbarnul", "megbecs\xFCl", "megb\xE9k\xEDt", "megb\xE9k\xFCl", "megb\xE9lyegez", "megb\xE9n\xEDt", "megb\xE9nul", "megbesz\xE9l", "megbetegedik", "megbetegszik", "megbilincsel", "megbillen", "megbillent", "megb\xEDr\xE1l", "megbirk\xF3zik", "megb\xEDrs\xE1gol", "megbizonyosodik", "megbocs\xE1t", "megbokrosodik", "megboldogul", "megbolond\xEDt", "megbolydul", "megbolygat", "megbomlik", "megbont", "megbonyol\xEDt", "megborotv\xE1l", "megborsoz", "megborzad", "megborzol", "megborzong", "megborzongtat", "megbotr\xE1nkoztat", "megb\xFAjik", "megbukik", "megbund\xE1z", "megb\u0171nh\u0151dik", "megc\xE1fol", "megcsal", "megcsap", "megcsapol", "megcser\xE9l", "megcsin\xE1l", "megcsod\xE1l", "megcs\xF3kol", "megcsom\xF3sodik", "megcs\xF6m\xF6rlik", "megcs\xFAnyul", "megcs\xFAszik", "megcs\u0171r", "megdagad", "megdagaszt", "megdar\xE1l", "megdermed", "megdermeszt", "megd\xE9zsm\xE1l", "megdics\xE9r", "megdob", "megdob\xE1l", "megdohosodik", "megd\xF6bben", "megd\xF6glik", "megd\u0151l", "megd\xF6nt", "megd\xF6rg\xF6l", "megd\xF6rzs\xF6l", "megdr\xE1gul", "megdupl\xE1z\xF3dik", "meg\xE9des\xEDt", "megedz", "meg\xE9g", "meg\xE9get", "megegyezik", "meg\xE9hezik", "megel\xE9gszik", "meg\xE9l\xE9nk\xFCl", "meg\xE9ljenez", "megel\u0151z", "megemel", "megeml\xEDt", "megenged", "megenyh\xFCl", "meg\xE9p\xEDt", "meg\xE9r", "meg\xE9rdekl\u0151dik", "meg\xE9rdemel", "megereszkedik", "meg\xE9rez", "meg\xE9rik", "meg\xE9rint", "meg\xE9rkezik", "meg\xE9rlel", "meger\u0151ltet", "meger\u0151s\xEDt", "meger\u0151s\xF6dik", "meger\u0151szakol", "meg\xE9rt", "meg\xE9rtet", "megesik", "megesket", "megesk\xFCszik", "megeszik", "megetet", "megfagyaszt", "megf\xE1jdul", "megfedd", "megfejt", "megfeledkezik", "megfelel", "megf\xE9leml\xEDt", "megfelez", "megfellebbez", "megfen", "megfeneklik", "megfeny\xEDt", "megf\xE9r", "megfert\u0151z", "megfest", "megf\xE9s\xFClk\xF6dik", "megfesz\xEDt", "megfiatal\xEDt", "megfigyel", "megfilmes\xEDt", "megfizet", "megfog", "megfogad", "megfogamzik", "megfogan", "megfojt", "megfoltoz", "megfonnyaszt", "megforgat", "megfoszt", "megf\u0151z", "megf\xFAj", "megfullad", "megfullaszt", "megf\xFAr", "megfutamodik", "megfuttat", "megf\xFClled", "megf\xFCrdet", "megf\xFCr\xF6szt", "megf\xFCst\xF6l", "megg\xE1tol", "meggazdagodik", "meggondol", "megh\xE1g", "meghagy", "meghajlik", "meghal", "meghalad", "meghall", "meghallgat", "meghamis\xEDt", "megh\xE1moz", "megharagszik", "megh\xE1romszoroz", "megh\xE1romszoroz\xF3dik", "meghasad", "meghat", "meghatalmaz", "meghat\xF3dik", "megh\xE1tr\xE1l", "megh\xE1zasodik", "meghazudtol", "meghi\xFAs\xEDt", "meghi\xFAsul", "megh\xEDv", "megh\xEDzik", "megh\xF3d\xEDt", "meghonos\xEDt", "meghonosodik", "meghosszabb\xEDt", "meghoz", "megh\xF6kken", "megh\xF6kkent", "megh\u0151k\xF6l", "meghuny\xE1szkodik", "meghurcol", "megh\xFAz\xF3dik", "megh\u0171l", "megh\u0171lt", "megh\xFCly\xFCl", "megigaz\xEDt", "meg\xEDg\xE9r", "megig\xE9z", "megijed", "megijeszt", "megillet", "megind\xEDt", "megindul", "meginog", "meginterj\xFAvol", "megismer", "megismertet", "megism\xE9tl\u0151dik", "megitat", "meg\xEDt\xE9l", "meg\xEDzes\xEDt", "megizzad", "megj\xE1r", "megj\xE1rja", "megj\xE1tszik", "megjavul", "megjelenik", "megjel\xF6l", "megj\xF3sol", "megj\xF6n", "megj\xF6vend\xF6l", "megjutalmaz", "megkap", "megkaparint", "megkapaszkodik", "megkarcol", "megkavar", "megkedvel", "megkem\xE9nyedik", "megken", "megk\xE9r", "megk\xE9rdez", "megkeres", "megkeresztel", "megkeresztelkedik", "megk\xE9sel", "megkeser\xEDt", "megkett\u0151z", "megkettyint", "megkezd", "megkezd\u0151dik", "megk\xEDm\xE9l", "megk\xEDn\xE1l", "megk\xEDnoz", "megk\xEDv\xE1n", "megkock\xE1ztat", "megkomolyodik", "megkompon\xE1l", "megkopaszt", "megkopik", "megkorb\xE1csol", "megkoron\xE1z", "megk\xF3stol", "megk\xF6nnyebb\xFCl", "megk\xF6nny\xEDt", "megk\xF6ny\xF6r\xFCl", "megk\xF6sz\xF6n", "megk\xF6sz\xF6r\xFCl", "megk\xF6t", "megk\xF6t\xF6z", "megk\xF6vesedik", "megk\xF6vez", "megk\xFCld", "megk\xFCl\xF6nb\xF6ztet", "megk\xFCzd", "megl\xE1gy\xEDt", "megl\xE1gyul", "megl\xE1ncol", "meglangyos\xEDt", "meglapul", "megl\xE1togat", "meglaz\xEDt", "megleck\xE9ztet", "megl\xE9p", "megles", "meglincsel", "megl\xF3b\xE1l", "megl\xF3g", "meglop", "megl\xF6k", "megmar", "megmarad", "megm\xE1s\xEDt", "megm\xE1szik", "megmelegedik", "megmeleg\xEDt", "megmenek\xFCl", "megmerevedik", "megm\xE9rgez", "megm\xE9telyez", "megmond", "megmos", "megmozd\xEDt", "megmozdul", "megmurd\xE1l", "megmutat", "megmutatkozik", "megm\u0171vel", "megnagyobb\xEDt", "megnedves\xEDt", "megn\xE9gyszerez\u0151dik", "megnehez\xEDt", "megnemes\xEDt", "megnevel", "megnevettet", "megnevez", "megn\xE9z", "megn\xE9zet", "megn\xF6vel", "megnyes", "megny\xEDlik", "megny\xEDr", "megnyirb\xE1l", "megnyit", "megnyom", "megnyomor\xEDt", "megnyugtat", "megny\xFAjt", "megny\xFAlik", "megny\xFAz", "megokol", "megokosodik", "megolvas", "megolvaszt", "megoper\xE1l", "megoszt", "meg\xF3v", "meg\xF6l", "meg\xF6lel", "meg\xF6nt\xF6z", "meg\xF6regszik", "meg\u0151riz", "meg\u0151rl\u0151dik", "meg\xF6r\xF6k\xEDt", "meg\u0151r\xF6l", "meg\xF6r\xFCl", "meg\u0151r\xFCl", "meg\u0151sz\xFCl", "megparancsol", "megpatkol", "megpend\xEDt", "megpermetez", "megpihen", "megpillant", "megpir\xEDt", "megp\xF6rget", "megp\xF6rk\xF6l", "megpr\xF3b\xE1l", "megpuh\xEDt", "megpuhul", "megr\xE1g", "megragad", "megr\xE1galmaz", "megragaszt", "megr\xE1nd\xEDt", "megr\xE1ndul", "megr\xE1nt", "megr\xE1z", "megregul\xE1z", "megreked", "megremeg", "megr\xE9m\xEDt", "megr\xE9m\xFCl", "megrend\xEDt", "megrend\xFCl", "megrenget", "megreped", "megrepeszt", "megr\xE9szeg\xEDt", "megreszel", "megrezzen", "megriad", "megriaszt", "megr\xEDkat", "megritk\xEDt", "megritkul", "megr\xF3", "megromlik", "megroppan", "megrothad", "megr\xF6k\xF6ny\xF6dik", "megs\xE1rgul", "megsavanyodik", "megsebes\xEDt", "megsebes\xFCl", "megsebez", "megs\xE9rt", "megsimogat", "megsirat", "megsodor", "megsokszoroz", "megsokszoroz\xF3dik", "megs\xF3z", "megsp\xE9kel", "megs\xFAg", "megsuhint", "megs\xFCket\xEDt", "megs\xFCket\xFCl", "megs\xFCl", "megs\xFCrget", "megszab", "megszabad\xEDt", "megszakad", "megszak\xEDt", "megsz\xE1ll", "megsz\xE1moz", "megsz\xE1n", "megszed", "megsz\xE9gyen\xEDt", "megsz\xE9gyen\xFCl", "megszel\xEDd\xEDt", "megszel\xEDd\xFCl", "megszem\xE9lyes\xEDt", "megszeml\xE9l", "megszeppen", "megsz\xE9p\xFCl", "megszeret", "megszerez", "megszervez", "megszil\xE1rdul", "megsz\xEDv", "megszoktat", "megsz\xF3lal", "megsz\xF3l\xEDt", "megszoptat", "megsz\xF3r", "megszor\xEDt", "megszoroz", "megsz\xF6kik", "megsz\xF6ktet", "megsz\xFCl", "megsz\u0171nik", "megsz\xFCntet", "megsz\u0171r", "megtakar\xEDt", "megtalpal", "megt\xE1mad", "megt\xE1maszt", "megt\xE1mogat", "megtan\xEDt", "megt\xE1ntor\xEDt", "megtanul", "megtapos", "megt\xE1rgyal", "megtart\xF3ztat", "megtehet", "megteker", "megtekint", "megtelik", "megt\xE9p\xE1z", "megt\xE9r", "megterhel", "megt\xE9r\xEDt", "megterm\xE9keny\xEDt", "megt\xE9r\xFCl", "megtestes\xEDt", "megtesz", "megt\xE9veszt", "megtilt", "megtisztel", "megtiszt\xEDt", "megtizedel", "megtollasodik", "megtorol", "megtorpan", "megt\xF6lt", "megt\xF6r", "megt\xF6r\xF6l", "megt\xF6rt\xE9nik", "megtr\xE9f\xE1l", "megtudakol", "meg\xFAjhodik", "meg\xFAj\xEDt", "meg\xFAjul", "megun", "megundorodik", "meg\xFAszik", "meg\xFCl", "meg\xFCnnepel", "meg\xFCresedik", "megvadul", "megv\xE1g", "megvak\xEDt", "megvakul", "megv\xE1laszol", "megv\xE1laszt", "megv\xE1lt", "megv\xE1ltozik", "megv\xE1ltoztat", "megv\xE1ltoztat\xE1s", "megv\xE1r", "megv\xE9d", "megveret", "megvet", "megvezet", "megviccel", "megvigasztal\xF3dik", "megvil\xE1g\xEDt", "megvil\xE1gosodik", "megvirrad", "megvisel", "megvitat", "megvon", "megzabol\xE1z", "megzavar", "megzavarodik", "megz\xF6rd\xFCl", "megzsarol", "megy", "meggyal\xE1z", "meggyan\xFAs\xEDt", "meggy\xE1szol", "meggyeng\xFCl", "meggyilkol", "meggy\xF6keresedik", "meggy\xF6t\xF6r", "meggy\u0151z", "meggy\u0151z\u0151dik", "meggy\xFAjt", "meggy\xFAr", "m\xE9h\xE9szkedik", "mekeg", "melegedik", "mell\xE9\xE1ll", "mell\xE9besz\xE9l", "mell\xE9kel", "mell\xEDroz", "mell\u0151z", "mel\xF3zik", "m\xE9ltat", "m\xE9ltatlankodik", "m\xE9lt\xF3ztatik", "m\xE9lyed", "m\xE9ly\xEDt", "m\xE9ly\xFCl", "memoriz\xE1l", "menek\xFCl", "meneszt", "menetel", "ment", "mentaliz\xE1l", "menteget", "menteget\u0151zik", "mentem", "mentes\xEDt", "mentes\xFCl", "mered", "meredezik", "mereget", "m\xE9reget", "m\xE9regtelen\xEDt", "mereng\xE9s", "mer\xE9szel", "merevedik", "m\xE9rgesedik", "m\xE9rges\xEDt", "m\xE9rgez", "mer\xEDt", "m\xE9rs\xE9kel", "mer\xFCl", "mes\xE9l", "mesterkedik", "m\xE9sz\xE1rol", "meszel", "meszesedik", "metaboliz\xE1l", "metasztatiz\xE1l", "met\xE9l", "m\xE9telyez", "m\xE9zel", "militariz\xE1l", "m\xEDmel", "miniat\xFCriz\xE1l", "minimaliz\xE1l", "min\u0151s\xEDt", "mint\xE1z", "mism\xE1sol", "mitiz\xE1l", "mobiliz\xE1l", "moccan", "mocskol", "moderniz\xE1l", "m\xF3dosul", "m\xF3k\xE1zik", "m\xF3kol", "molyol", "mond", "monologiz\xE1l", "monopoliz\xE1l", "mont\xEDroz", "morajlik", "moraliz\xE1l", "morfond\xEDroz", "mormol", "morzs\xE1l", "mosakodik", "mosdik", "m\xF3szerol", "motiv\xE1l", "motoriz\xE1l", "motoszk\xE1l", "mozdul", "mozg\xF3s\xEDt", "mozog", "mulaszt", "mulat", "mulattat", "m\xFAlik", "munk\xE1l", "munk\xE1lkodik", "mut\xE1l", "mutatkozik", "muti", "mutogat", "muzsik\xE1l", "m\u0171k\xF6dtet", "m\u0171stoppol", "m\u0171vel", "m\u0171vel\u0151dik", "m\u0171v\xE9szkedik", "nacionaliz\xE1l", "nagyk\xE9p\u0171sk\xF6dik", "nagyobbodik", "nagyol", "nagyoskodik", "nagyzol", "napl\xF3z", "napol", "napozik", "nassol", "n\xE1th\xE1sodik", "naturaliz\xE1l", "navig\xE1l", "nazaliz\xE1l", "n\xE9gyel", "nehez\xEDt", "neheztel", "nekid\u0151l", "nekifog", "nekigy\xFCrk\u0151zik", "nekil\xE1t", "nekimegy", "nekit\xE1mad", "nekit\xE1maszkodik", "nekiveselkedik", "n\xE9lk\xFCl\xF6z", "nem azonosul", "nemes\xEDt", "n\xE9metes\xEDt", "n\xE9m\xEDt", "nemz", "n\xE9pes\xEDt", "n\xE9pszer\u0171s\xEDt", "n\xE9ptelenedik", "neszel", "neutraliz\xE1l", "nevet", "nevetg\xE9l", "nevettet", "nevez", "n\xE9z", "n\xE9zeget", "nincs", "n\xF3gat", "noszogat", "n\u0151", "n\u0151s\xEDt", "n\u0151s\xFCl", "n\xF6vekedik", "n\xF6veszt", "n\u0151zik", "nyafog", "ny\xE1jaskodik", "nyakal", "nyakaz", "nyaldos", "nyalogat", "nyaral", "nyargal", "nyavalyog", "ny\xE1vog", "nyekken", "nyer\xE9szkedik", "nyergel", "nyikorog", "nyilatkozik", "nyilatkoztat", "nyilv\xE1n\xEDt", "nyilv\xE1ntart", "nyilv\xE1ntart\xE1sba vesz", "nyilv\xE1nul", "nyit", "nyiv\xE1kol", "nyom", "nyomaszt", "nyomkod", "nyom\xF3dik", "nyomorgat", "nyomorog", "nyomoz", "ny\xF6sz\xF6r\xF6g", "nyugalmaz", "nyugd\xEDjba megy", "nyugszik", "nyugt\xE1z", "ny\xFAjt\xF3zik", "ny\xFAjt\xF3zkodik", "ny\xFAl", "ny\xFAl\xF3sodik", "ny\u0171", "ny\u0171gl\u0151dik", "ny\u0171g\xF6z", "ny\xFCst\xF6l", "\xF3b\xE9gat", "obo\xE1zik", "odaad", "odacsap", "odadob", "oda\xE9g", "oda\xE9r", "odaer\u0151s\xEDt", "odafordul", "odahat", "odah\xEDv", "odah\xFAz", "odaint", "oda\xEDt\xE9l", "odaj\xF6n", "odak\xF6t", "odales", "odamegy", "odamond", "odamondogat", "odasiet", "odasimul", "odas\xF3z", "odatal\xE1l", "oda\xFCt", "odav\xE1g", "odaver", "odavet", "odavezet", "odavonz", "od\xE9bb\xE1ll", "\xF3dzkodik", "\xF3hajt", "ok\xE1d", "okol", "okos\xEDt", "okoz", "okvetetlenkedik", "olajoz", "\xF3l\xE1lkodik", "old", "old\xF3dik", "oldoz", "olt", "oltalmaz", "olvasgat", "olvastat", "omladozik", "omlik", "ondol\xE1l", "ont", "opaliz\xE1l", "oper\xE1l", "optimaliz\xE1l", "organiz\xE1l", "orient\xE1l", "orog\xE9n", "oroz", "oszlik", "osztogat", "osztozkodik", "\xF3v", "\xF3vakodik", "oxid\xE1l", "oxid\xE1l\xF3dik", "ozoniz\xE1l", "\xF6bl\xF6get", "\xF6bl\xF6s\xF6dik", "\u0151d\xF6ng", "\xF6klendezik", "\xF6kl\xF6z", "\xF6ld\xF6k\xF6l", "\xF6ld\xF6s", "\xF6lel", "\xF6lt", "\xF6lt\xF6zik", "\xF6lt\xF6zk\xF6dik", "\xF6mleng", "\xF6mlik", "\xF6n\xE1ll\xF3sodik", "\xF6nt\xF6z", "\xF6regedik", "\xF6reg\xEDt", "\u0151rizetbe vesz", "\u0151rj\xEDt", "\u0151rk\xF6dik", "\u0151rl\u0151dik", "\xF6r\xF6kl\u0151dik", "\u0151r\xFCl", "\xF6rvendezik", "\xF6rvendeztet", "\xF6rv\xE9nylik", "\xF6sszeakad", "\xF6ssze\xE1ll\xEDt", "\xF6ssze\xE1zik", "\xF6sszebar\xE1tkozik", "\xF6sszebesz\xE9l", "\xF6sszebonyol\xEDt", "\xF6sszeborul", "\xF6sszeborzad", "\xF6sszeborzol", "\xF6sszeb\xFAjik", "\xF6sszecsap", "\xF6sszecsatol", "\xF6sszecsavar", "\xF6sszecsavargat", "\xF6sszecser\xE9l", "\xF6sszecs\xEDp", "\xF6sszecsomagol", "\xF6sszecsom\xF3sodik", "\xF6sszecs\u0151d\xFCl", "\xF6sszecsuk", "\xF6sszed\u0151l", "\xF6sszed\xF6nt", "\xF6sszeegyeztet", "\xF6ssze\xE9r", "\xF6sszeesik", "\xF6sszeesk\xFCszik", "\xF6sszef\xE9r", "\xF6sszef\xE9rcel", "\xF6sszefog", "\xF6sszefoglal", "\xF6sszefon", "\xF6sszefon\xF3dik", "\xF6sszeforr", "\xF6sszefut", "\xF6sszef\u0171z", "\xF6sszegerebly\xE9z", "\xF6sszegez", "\xF6sszeg\xF6mb\xF6ly\xF6dik", "\xF6sszegubancol\xF3dik", "\xF6sszegy\u0171jt\xF6get", "\xF6sszegy\u0171r", "\xF6sszegy\u0171r\u0151dik", "\xF6sszehajt", "\xF6sszeh\xE1zasodik", "\xF6sszehord", "\xF6sszeh\xFAz", "\xF6sszeh\xFAz\xF3dik", "\xF6ssze\xEDr", "\xF6sszej\xE1tszik", "\xF6sszej\xF6n", "\xF6sszekapargat", "\xF6sszekapaszkodik", "\xF6sszekapcsol", "\xF6sszekavar", "\xF6sszeken", "\xF6sszekeveredik", "\xF6sszek\xF6lt\xF6zik", "\xF6sszek\xF6t", "\xF6sszek\xF6t\xF6z", "\xF6sszekuporgat", "\xF6sszekuporodik", "\xF6sszekusz\xE1l", "\xF6sszelap\xEDt", "\xF6sszemaszatol", "\xF6sszem\xE9r", "\xF6sszemorzsol", "\xF6sszenyom", "\xF6sszenyom\xF3dik", "\xF6sszeomlik", "\xF6sszepakol", "\xF6sszep\xE1ros\xEDt", "\xF6sszepiszk\xEDt", "\xF6sszeragad", "\xF6sszer\xE1ndul", "\xF6sszer\xE1z", "\xF6sszer\xE1zk\xF3dik", "\xF6sszerezzen", "\xF6sszerogy", "\xF6sszeroppant", "\xF6sszer\xFAg", "\xF6sszesereglik", "\xF6sszes\xEDt", "\xF6sszesodor", "\xF6sszeszakad", "\xF6sszeszalad", "\xF6sszeszid", "\xF6sszeszor\xEDt", "\xF6sszesz\u0171k\xFCl", "\xF6sszet\xE1kol", "\xF6sszetapad", "\xF6sszetapos", "\xF6sszetart", "\xF6sszeteker", "\xF6sszetekeredik", "\xF6sszet\xE9p", "\xF6sszeterel", "\xF6sszetesz", "\xF6sszet\xF6m\xF6r\xEDt", "\xF6sszet\xF6r", "\xF6sszet\xF6rik", "\xF6sszet\u0171z", "\xF6ssze\xFCl", "\xF6sszevarr", "\xF6sszev\xE1s\xE1rol", "\xF6sszevegy\xFCl", "\xF6sszever", "\xF6sszevesz", "\xF6sszevet", "\xF6sszevon", "\xF6sszezavar", "\xF6sszezavarodik", "\xF6sszez\xF6rd\xFCl", "\xF6sszez\xFAz", "\xF6sszezs\xFAfol", "\xF6sszpontos\xEDt", "\xF6sszpontosul", "\xF6szt\xF6k\xE9l", "\xF6szt\xF6n\xF6z", "\xF6tletel", "\xF6tlik", "\xF6tv\xF6z", "pac\xE1z", "pack\xE1zik", "p\xE1hol", "pajta", "pakol", "palackoz", "pal\xE1stol", "pall\xE9roz", "p\xE1ly\xE1z", "p\xE1ly\xE1zik", "pampog", "panaszkodik", "panaszol", "p\xE1nc\xE9loz", "pancsol", "pang", "p\xE1nikol", "pan\xEDroz", "papol", "paprik\xE1z", "par\xE1d\xE9zik", "paraliz\xE1l", "parancsolgat", "par\xE1zik", "par\xE1zn\xE1lkodik", "p\xE1rbajozik", "parcell\xE1z", "par\xEDroz", "parkol", "parodiz\xE1l", "p\xE1rolog", "p\xE1rosodik", "p\xE1rtfogol", "partizik", "p\xE1rtoskodik", "p\xE1rzik", "passz\xEDroz", "passzol", "passzolgat", "paszt\xF6riz\xE1l", "paszt\u0151r\xF6z", "patakzik", "patron\xE1l", "pattan", "pattint", "pattog", "p\xE1tyolgat", "p\xE1v\xE1skodik", "ped\xE1lozik", "pedik\u0171r\xF6z", "pendlizik", "p\xE9nzel", "pepecsel", "p\xE9pes\xEDt", "perd\xFCl", "perecel", "pereg", "perel", "pereskedik", "perk\xE1l", "permut\xE1l", "pezsd\xFCl", "pezseg", "pi\xE1l", "pihentet", "pihizik", "pikkel", "pinc\xE9rkedik", "pinc\xE9z", "ping\xE1l", "pip\xE1zik", "piper\xE9szkedik", "pirkad", "piros\xEDt", "pirul", "pis\xE1l", "pislog", "piszk\xEDt", "piszkol", "piszkol\xF3dik", "piszmog", "pisszeg", "pitizik", "pityereg", "pittyeg", "plagiz\xE1l", "plan\xEDroz", "pletyk\xE1l", "pletyk\xE1lkodik", "pletyk\xE1zik", "pockol", "pof\xE1zik", "pofoz", "polariz\xE1l", "polcol", "polemiz\xE1l", "polimeriz\xE1l", "pol\xEDroz", "politiz\xE1l", "p\xF3ly\xE1z", "pontos\xEDt", "populariz\xE1l", "porci\xF3z", "por\xEDt", "porlad", "porlaszt", "porol", "poroz", "porsz\xEDv\xF3zik", "pos\xEDroz", "p\xF3tol", "poty\xE1zik", "pottyan", "p\xF3zol", "p\xF6f\xE9kel", "p\xF6ffed", "p\xF6ffeszkedik", "p\xF6f\xF6g", "p\xF6rk\xF6l", "p\xF6rlekedik", "p\xF6r\xF6g", "p\xF6rsen", "p\xF6ty\xF6g", "preciz\xEDroz", "pr\xE9dik\xE1l", "prefer\xE1l", "prejudik\xE1l", "presszion\xE1l", "pressz\xF3zik", "prior\xE1l", "pr\xF3b\xE1lkozik", "profil\xEDroz", "prognosztiz\xE1l", "programoz", "programozik", "progredi\xE1l", "propag\xE1l", "prostitu\xE1l", "prostitu\xE1l\xF3dik", "protest\xE1l", "protezs\xE1l", "prozelitiz\xE1l", "pr\xFCnty\xF6g", "pucol", "puffad", "puffan", "pufferel", "puh\xEDt", "puhul", "pukkad", "pukkadozik", "pukkan", "pumpol", "punnyad", "p\xFApoz", "pusk\xE1zik", "pusmog", "puszil", "p\xFCf\xF6l", "r\xE1ad", "r\xE1akad", "r\xE1akaszt", "r\xE1\xE1ll", "r\xE1b\xE1mul", "r\xE1besz\xE9l", "r\xE1b\xEDr", "r\xE1bizony\xEDt", "r\xE1bor\xEDt", "r\xE1borul", "r\xE1bukkan", "r\xE1c\xE1fol", "racionaliz\xE1l", "r\xE1csap", "r\xE1csavar", "raccsol", "radikaliz\xE1l", "rad\xEDroz", "r\xE1d\u0151l", "r\xE1d\xF6nt", "r\xE1\xE9r", "r\xE1er\u0151ltet", "r\xE1er\u0151s\xEDt", "r\xE1er\u0151szakol", "r\xE1esik", "r\xE1farag", "r\xE1f\xE1zik", "r\xE1fekszik", "rafin\xE1l", "r\xE1fizet", "r\xE1fog", "r\xE1ford\xEDt", "r\xE1f\xF6rmed", "ragad", "r\xE1galmaz", "ragaszkodik", "ragaszt", "r\xE1gcs\xE1l", "ragoz", "r\xE1gy\xFAjt", "r\xE1hajt", "r\xE1h\xE1rul", "r\xE1helyez", "r\xE1hizlal", "r\xE1hull", "r\xE1h\xFAz", "r\xE1\xEDg\xE9r", "r\xE1illeszt", "r\xE1\xEDr", "r\xE1ismer", "rajong", "r\xE1j\xF6n", "rajtakap", "rajzik", "r\xE1kap", "r\xE1kapcsol", "r\xE1ken", "r\xE1k\xE9nyszer\xEDt", "r\xE1ki\xE1lt", "rakodik", "rakonc\xE1tlankodik", "r\xE1k\xF6ny\xF6k\xF6l", "r\xE1k\xF6t", "rakt\xE1roz", "r\xE1l\xE9p", "r\xE1m\xE9r", "r\xE1mered", "r\xE1mol", "r\xE1mutat", "randal\xEDroz", "randal\xEDrozik", "r\xE1ndul", "r\xE1nehezedik", "r\xE1nevel", "r\xE1n\xE9z", "r\xE1ngat\xF3zik", "r\xE1nt", "r\xE1ord\xEDt", "r\xE1\xF6nt", "r\xE1rak", "r\xE1s\xFCt", "r\xE1sz\xE1ll", "r\xE1sz\xE1n", "r\xE1szerel", "r\xE1sz\xF3l", "r\xE1szolg\xE1l", "r\xE1szorul", "r\xE1t\xE1mad", "r\xE1t\xE1maszkodik", "r\xE1tapint", "r\xE1tapos", "r\xE1teker", "r\xE1ter\xEDt", "r\xE1tesz", "r\xE1t\xF6r", "r\xE1tukm\xE1l", "r\xE1v\xE1g", "r\xE1varr", "ravaszkodik", "r\xE1vezet", "r\xE1vil\xE1g\xEDt", "r\xE1visz", "r\xE1zend\xEDt", "r\xE1zk\xF3dik", "r\xE1zk\xF3dtat", "reag\xE1l", "rebesget", "recseg-ropog", "reggelizik", "regisztr\xE1l", "regn\xE1l", "regul\xE1z", "rehabilit\xE1l", "rejt", "rejteget", "rejt\u0151zik", "rejt\u0151zk\xF6dik", "reked", "rekeszt", "rekl\xE1moz", "rekonstru\xE1l", "relativiz\xE1l", "relax\xE1l", "rem\xE9l", "rem\xE9nykedik", "r\xE9m\xEDt", "r\xE9m\xFCl", "rendbehoz", "rendelkezik", "rendreutas\xEDt", "rendszeres\xEDt", "rendszerez", "rend\xFCl", "renget", "renov\xE1l", "reorganiz\xE1l", "reped", "repedezik", "rep\xEDt", "reprezent\xE1l", "restelkedik", "r\xE9szegeskedik", "r\xE9szeg\xEDt", "reszel", "r\xE9szesedik", "r\xE9szes\xFCl", "reszket", "reszk\xEDroz", "r\xE9szt vesz", "reteszel", "retteg", "retten", "rettent", "retus\xE1l", "revide\xE1l", "rezd\xFCl", "rezeg", "rezzen", "r\xED", "riad", "riaszt", "richten", "rik\xE1csol", "rik\xEDt", "rikolt", "r\xEDmel", "ring", "ringat", "riny\xE1l", "risztel", "ritkul", "r\xF3", "robban", "robog", "robotol", "rod\xE1zik", "r\xF3k\xE1zik", "rokonszenvez", "romantiz\xE1l", "romlik", "ropog", "ropogtat", "roppan", "rost\xE1l", "rostokol", "rosszalkodik", "rosszall", "rothad", "rothaszt", "rov\xE1tkol", "r\xF6f\xF6g", "r\xF6gt\xF6n\xF6z", "r\xF6h\xF6g", "r\xF6k\xF6ny\xF6dik", "r\xF6ntgenez", "r\xF6p\xEDt", "r\xF6stell", "r\xF6vid\xEDt", "r\xF6vid\xFCl", "rug\xF3zik", "ruh\xE1z", "rukkol", "r\xFAtul", "r\xFAzsoz", "r\xFChell", "Sablon:hunige2", "Sablon:\xFAjige", "s\xE1f\xE1rkodik", "saj\xE1t\xEDt", "sajn\xE1lkozik", "sajog", "sajtol", "sakkozik", "s\xE1ntik\xE1l", "s\xE1pad", "s\xE1paszt", "s\xE1rg\xE1llik", "s\xE1rgul", "sarkanty\xFAz", "sasol", "sat\xEDroz", "s\xE1toroz", "savany\xEDt", "savaz", "sebes\xEDt", "sebez", "seg\xE9lyez", "seg\xEDt", "sejtet", "selejtez", "selyp\xEDt", "semleges\xEDt", "semmis\xEDt", "semmiz", "senyved", "serceg", "sercint", "sereglik", "s\xE9rteget", "s\xE9r\xFCl", "s\xE9tafik\xE1l", "s\xE9t\xE1l", "s\xE9t\xE1lgat", "settenkedik", "s\xEDel", "sik\xE1l", "siker\xFCl", "sik\xEDt", "sikkaszt", "siklik", "sikolt", "s\xEDkra sz\xE1ll", "silabiz\xE1l", "simfel", "sim\xEDt", "simul", "sink\xF3f\xE1l", "s\xEDnyl\u0151dik", "sip\xEDtozik", "s\xEDpol", "sir\xE1nkozik", "sirat", "sistereg", "sivalkodik", "siv\xEDt", "skalpol", "skand\xE1l", "skubizik", "slattyog", "slihtol", "slisszol", "smacizik", "smakkol", "sm\xE1rol", "sminkel", "sm\xEDrol", "sm\xFAzol", "sodor", "sodr\xF3dik", "s\xF3hajtozik", "sok\xE1ig alszik", "sokkol", "sokszoros\xEDt", "sokszoroz", "sokszoroz\xF3dik", "sompolyog", "sop\xE1nkodik", "sorakozik", "sorakoztat", "sorol", "soroz", "sorsol", "sorvad", "sov\xE1nyodik", "s\xF3z", "s\xF6p\xF6r", "spannol", "spanol", "specializ\xE1l", "sp\xE9kel", "spekul\xE1l", "spil\xE1zik", "spillerkedik", "spinningel", "sp\xF3rol", "sportol", "spriccel", "sprintel", "stabiliz\xE1l", "staf\xEDroz", "stagn\xE1l", "standardiz\xE1l", "steppel", "steriliz\xE1l", "stigmatiz\xE1l", "stiliz\xE1l", "st\xEDr\xF6l", "stoppol", "str\xE1zs\xE1l", "stresszel", "subickol", "s\xFAg", "sugall", "sugalmaz", "sug\xE1roz", "sug\xE1rzik", "sugdol\xF3zik", "suhan", "suhint", "suhog", "s\xFAjt", "sulykol", "s\xFAlyosb\xEDt", "s\xFAlypontoz", "s\xFAlyz\xF3zik", "sum\xE1kol", "s\xFArol", "surran", "surrog", "susog", "suvickol", "suvikszol", "s\xFCketel", "s\xFCket\xEDt", "s\xFCket\xFCl", "s\xFCl", "s\xFCllyeszt", "s\xFCpped", "s\xFCppedezik", "s\xFCrget", "s\u0171r\u0171s\xF6dik", "s\xFCtk\xE9rezik", "s\xFCv\xEDt", "s\xFCv\xF6lt", "szab", "szabad\xEDt", "szabadul", "szabdal", "szabot\xE1l", "szagl\xE1sz", "szaglik", "szagtalan\xEDt", "sz\xE1guld", "sz\xE1j\xE1ba r\xE1g", "sz\xE1jal", "szajk\xF3z", "szakad", "szakadozik", "szakv\xE9lem\xE9nyez", "szaladg\xE1l", "sz\xE1ll\xE1sol", "szalut\xE1l", "szamb\xE1zik", "sz\xE1m\xEDt", "sz\xE1m\xEDtgat", "sz\xE1ml\xE1l", "sz\xE1ml\xE1z", "sz\xE1mol", "sz\xE1monk\xE9r", "sz\xE1moz", "sz\xE1mszer\u0171s\xEDt", "sz\xE1m\u0171z", "sz\xE1n", "szankcion\xE1l", "sz\xE1nk\xF3zik", "sz\xE1nt", "szaporodik", "sz\xE1rmazik", "sz\xE1rmaztat", "sz\xE1rnyal", "sz\xE1rnyaz", "szarvaz", "szatiriz\xE1l", "szaval", "szavatol", "sz\xE9deleg", "sz\xE9d\xEDt", "sz\xE9d\xFCl", "szeg", "szegecsel", "szeg\xE9nyedik", "szeg\xFCl", "sz\xE9gyen\xEDt", "sz\xE9gyenkezik", "sz\xE9gyen\xFCl", "sz\xE9jjelfut", "szek\xE1l", "sz\xE9kel", "szek\xEDroz", "szel", "szelekt\xE1l", "sz\xE9les\xFCl", "szeletel", "szellem\xFCl", "szellent", "szell\u0151zik", "szell\u0151ztet", "szembe\xE1ll\xEDt", "szembe\xF6tlik", "szembes\xEDt", "szembes\xFCl", "szembesz\xE1ll", "szemel", "szem\xE9lyes\xEDt", "szemerk\xE9l", "szem\xE9tkedik", "szemez", "szeml\xE9l", "szeml\xE9l\u0151dik", "szeml\xE9ltet", "szemtelenkedik", "szendereg", "szenesedik", "szentel", "szenveleg", "szenzibiliz\xE1l", "szennyez", "szepar\xE1l", "sz\xE9p\xEDtget", "sz\xE9p\xEDtkezik", "sz\xE9p\xFCl", "szerel", "szerelmesedik", "szerencs\xE9tlenkedik", "szeretkezik", "szeretne", "szerten\xE9z", "szerv\xE1l", "szervezkedik", "szerv\xEDroz", "szerz\u0151dik", "szerz\u0151dtet", "sz\xE9t\xE1gazik", "sz\xE9tapr\xF3z", "sz\xE9tbasz", "sz\xE9tbomlaszt", "sz\xE9tbomlik", "sz\xE9tbont", "sz\xE9tcsap", "sz\xE9tdarabol", "sz\xE9tdob\xE1l", "sz\xE9tesik", "sz\xE9tforg\xE1csol", "sz\xE9thasad", "sz\xE9thord", "sz\xE9th\xFAz", "sz\xE9tkapcsol", "sz\xE9tk\xFCrt\xF6l", "sz\xE9tlap\xEDt", "sz\xE9tm\xE1llik", "sz\xE9tmarcangol", "sz\xE9tmorzsol", "sz\xE9tnyom", "sz\xE9toszlik", "sz\xE9toszt", "sz\xE9tpukkad", "sz\xE9tr\xE1g", "sz\xE9treped", "sz\xE9troppan", "sz\xE9tszaggat", "sz\xE9tszakad", "sz\xE9tszak\xEDt", "sz\xE9tszerel", "sz\xE9tsz\xF3r\xF3dik", "sz\xE9ttapos", "sz\xE9tt\xE9p", "sz\xE9tter\xEDt", "sz\xE9tterjed", "sz\xE9tterpeszt", "sz\xE9tt\xF6r", "sz\xE9tt\xF6rdel", "sz\xE9ttrombit\xE1l", "sz\xE9tv\xE1g", "sz\xE9tv\xE1laszt", "sz\xE9tv\xE1lik", "szexel", "sz\xED", "szigetel", "szikr\xE1zik", "szil\xE1rd\xEDt", "szil\xE1rdul", "szimatol", "szimboliz\xE1l", "szimpatiz\xE1l", "szimul\xE1l", "sz\xEDn\xE9szkedik", "sz\xEDnez", "sz\xEDnlel", "sz\xEDntelenedik", "szintetiz\xE1l", "szip\xE1kol", "szipog", "szipolyoz", "szipork\xE1zik", "sziszeg", "sz\xEDt", "szit\xE1l", "sz\xEDv", "sziv\xE1rogtat", "szivat", "szivatty\xFAz", "sz\xEDveskedik", "sz\xEDv\xF3dik", "sz\xEDv\xF3skodik", "sz\xEDv\xF3zik", "szkennel", "szlop\xE1l", "szocializ\xE1l", "szoftverhib\xE1t elt\xE1vol\xEDt", "szoktat", "sz\xF3l", "sz\xF3lal", "sz\xF3laltat", "szolg\xE1ltat", "sz\xF3l\xEDt", "szolmiz\xE1l", "szomorkodik", "sz\xF3nokol", "szopik", "szoptat", "sz\xF3rakozik", "szorgoskodik", "sz\xF3r\xF3dik", "szorong", "szorongat", "szort\xEDroz", "szorul", "sz\xF3sz\xE1ty\xE1rkodik", "sz\xF3tagol", "sz\xF3t\xE1roz", "sz\u0151", "sz\xF6kd\xE9csel", "sz\xF6kik", "sz\u0151k\xEDt", "sz\xF6kken", "sz\xF6ktet", "sz\xF6rf\xF6l", "sz\xF6rf\xF6zik", "sz\u0151rtelen\xEDt", "sz\xF6szm\xF6t\xF6l", "sz\xF6vegel", "sz\xF6vegez", "sz\xF6vetkezik", "szponzor\xE1l", "sztorn\xEDroz", "sztr\xE1jkol", "szublim\xE1l", "szuny\xE1l", "szunnyad", "szuszakol", "szuszog", "sz\u0171k\xEDt", "sz\u0171k\xF6lk\xF6dik", "sz\xFCks\xE9ge van", "sz\u0171k\xFCl", "sz\xFCnetel", "sz\xFCneteltet", "sz\u0171nik", "sz\xFCntet", "sz\u0171r", "sz\xFCrcs\xF6l", "sz\xFCrk\xFCl", "t\xE1boroz", "t\xE1borozik", "t\xE1g\xEDt", "taglal", "tagol", "t\xE1gul", "t\xE1j\xE9koz\xF3dik", "t\xE1jol", "takar\xEDt", "takarm\xE1nyoz", "takarodik", "takar\xF3dzik", "taknyol", "t\xE1kol", "taks\xE1l", "tal\xE1l", "t\xE1lal", "tall\xF3z", "tall\xF3zik", "tam\xE1skodik", "t\xE1maszkodik", "t\xE1maszt", "tan\xE1cskozik", "tanakodik", "t\xE1ncol", "t\xE1ncoltat", "t\xE1ntor\xEDt", "t\xE1ntorodik", "t\xE1ntorog", "tanul", "tanulm\xE1nyoz", "tan\xFAskodik", "tany\xE1zik", "tapad", "t\xE1p\xE1szkodik", "taperol", "tapint", "t\xE1pl\xE1lkozik", "tapogat\xF3zik", "t\xE1r", "t\xE1rcs\xE1z", "t\xE1rgyal", "tarh\xE1l", "tariszny\xE1l", "tarol", "t\xE1rsalog", "t\xE1rsul", "tart", "tart\xF3s\xEDt", "tartozik", "tart\xF3zkodik", "tart\xF3ztat", "t\xE1rul", "tasz\xEDt", "t\xE1tog", "t\xE1tong", "t\xE1vol\xEDt", "t\xE1volodik", "t\xE9bl\xE1bol", "tegez", "teherbe esik", "tehermentes\xEDt", "tehet", "tehetetlenkedik", "tejel", "teker", "tekeredik", "tekereg", "tekerget", "teket\xF3ri\xE1zik", "tek\xE9zik", "tekint", "tekintetbe vesz", "telel", "telepedik", "telepszik", "telep\xFCl", "telet\xF6lt", "telik", "tel\xEDt", "teljesedik", "teljes\xFCl", "tematiz\xE1l", "temper\xE1l", "teng\u0151dik", "teniszezik", "tenyerel", "teny\xE9szik", "t\xE9nykedik", "teoretiz\xE1l", "tereget", "terel", "teremt", "teremtetik", "terhel", "t\xE9r\xEDt", "terjeszkedik", "term\xE9keny\xEDt", "termeszt", "terpeszkedik", "terroriz\xE1l", "ter\xFCl", "t\xE9r\xFCl", "test\xE1l", "testesedik", "testes\xEDt", "tesz", "tesztel", "tesz-vesz", "tetet", "t\xE9tlenkedik", "tetov\xE1l", "t\xE9tov\xE1zik", "tetszeleg", "tev\xE9kenykedik", "t\xE9v\xFAton j\xE1r", "tilol", "tiltakozik", "tipeg", "tipiz\xE1l", "tiplizik", "tipor", "tippel", "tiranniz\xE1l", "tisztel", "tiszteleg", "titkol", "titkol\xF3zik", "titkos\xEDt", "tivorny\xE1zik", "t\xEDzszerez", "toboroz", "tojik", "tolakodik", "toldal\xE9kol", "toll\xE1szkodik", "tologat", "toloncol", "tolong", "tombol", "toniz\xE1l", "torkol", "torkretiz\xE1l", "torlaszol", "torlaszt", "torl\xF3dik", "torz\xEDt", "torzul", "totoj\xE1zik", "tov\xE1bbad", "tov\xE1bb\xE1ll", "tov\xE1bb\xEDt", "tov\xE1bbjut", "tov\xE1bbvisz", "t\xF6bbsz\xF6r\xF6z", "t\xF6k\xE9l", "t\u0151k\xE9sedik", "t\xF6m", "t\xF6nkremegy", "t\xF6nkrever", "t\xF6pped", "t\xF6rdel", "t\xF6rekedik", "t\xF6rekszik", "t\xF6rleszkedik", "t\xF6rleszt", "t\xF6r\u0151dik", "t\xF6r\xF6l", "t\xF6r\xF6lget", "t\xF6rtet", "t\xF6r\xFCl", "traccsol", "traf\xE1l", "tr\xE1g\xE1rkodik", "tr\xE1gy\xE1z", "trall\xE1zik", "trancs\xEDroz", "transzcend\xE1l", "tr\xE9csel", "tr\xE9f\xE1l", "tr\xE9f\xE1lkozik", "tren\xEDroz", "trivializ\xE1l", "trollkodik", "tromfol", "tr\xF3nol", "tr\xFCkk\xF6zik", "tud", "tudakoz\xF3dik", "tudat", "tudatosul", "tud\xF3s\xEDt", "tukm\xE1l", "t\xFAlad", "t\xFAladagol", "t\xFAlad\xF3ztat", "t\xFAl\xE1rad", "t\xFAlbecs\xFCl", "t\xFAlbonyol\xEDt", "t\xFAlburj\xE1nzik", "t\xFAlcsordul", "t\xFAldics\xE9r", "t\xFAldob", "t\xFAler\u0151ltet", "t\xFAl\xE9rt\xE9kel", "t\xFAlfesz\xEDt", "t\xFAlfizet", "t\xFAlf\u0171t", "t\xFAlhabzik", "t\xFAlhajszol", "t\xFAlhajt", "t\xFAlhalmoz", "t\xFAlhangol", "t\xFAlhangs\xFAlyoz", "t\xFAlharsog", "t\xFAlhev\xEDt", "t\xFAlhord", "t\xFAlh\xFAz", "t\xFAlh\u0171t", "t\xFAlj\xE1r", "t\xFAlj\xE1tszik", "t\xFAljegyez", "t\xFAljut", "t\xFAlkiab\xE1l", "t\xFAlkompenz\xE1l", "t\xFAlkomplik\xE1l", "t\xFAlk\xF6ltekezik", "t\xFAll\xE9p", "t\xFAllicit\xE1l", "t\xFAll\u0151", "t\xFAlmegy", "t\xFAlmutat", "t\xFAln\xE9pes\xEDt", "t\xFAln\u0151", "t\xFAlny\xFAlik", "t\xFAl\xF6lt\xF6zik", "t\xFAlragyog", "t\xFAlsz\xE1rnyal", "t\xFAlt\xE1pl\xE1l", "t\xFAltel\xEDt", "t\xFAlteljes\xEDt", "t\xFAlteng", "t\xFAlterhel", "t\xFAlterjed", "t\xFAltesz", "t\xFAlt\xF6lt", "t\xFAlzs\xFAfol", "tunkol", "tup\xEDroz", "t\xFAr", "turist\xE1skodik", "turk\xE1l", "t\xFCkr\xF6z", "t\xFClekedik", "t\xFCnd\xF6klik", "t\xFCnd\xF6k\xF6l", "t\xFCrelmetlenkedik", "t\xFCrt\u0151ztet", "t\xFCsszent", "t\xFCssz\xF6g", "t\u0171z", "t\xFCzel", "udvarol", "ugat", "ugrat", "\xFAjhodik", "\xFAj\xEDt", "\xFAjj\xE1\xE9leszt", "\xFAjj\xE1teremt", "ujjong", "\xFAjraegyes\xFCl", "\xFAjra\xE9led", "\xFAjra\xE9leszt", "\xFAjrakezd", "\xFAjraolvas", "\xFAjratervez", "un", "undorodik", "uriz\xE1l", "\xFAszik", "usz\xEDt", "utal", "ut\xE1nahoz", "ut\xE1naj\xE1r", "ut\xE1nan\xE9z", "ut\xE1nt\xF6lt", "uzsonn\xE1zik", "\xFCcs\xF6r\xF6g", "\xFCd\xEDt", "\xFCd\xFCl", "\xFCdv\xF6z\xF6l", "\xFCdv\xF6z\xFCl", "\xFCget", "\xFCgyel", "\xFCgyeskedik", "\xFCgyetlenkedik", "\xFCgyk\xF6dik", "\xFCgyv\xE9dkedik", "\xFCld\xF6z", "\xFClep\xEDt", "\xFCl\xE9sezik", "\xFCresedik", "\xFCtk\xF6zik", "\xFCvegez", "\xFCv\xF6lt", "\xFCzen", "vacakol", "vacog", "vacsor\xE1zik", "v\xE1daskodik", "vagon\xEDroz", "v\xE1gtat", "v\xE1gt\xE1zik", "v\xE1gyakozik", "v\xE1gyik", "v\xE1j", "vaj\xFAdik", "vakar\xF3dzik", "vakar\xF3zik", "v\xE1laszol", "valid\xE1l", "v\xE1llal", "v\xE1llalkozik", "vallat", "valoriz\xE1l", "val\xF3sul", "v\xE1ltogat", "van", "v\xE1nszorog", "vaporiz\xE1l", "v\xE1r", "v\xE1rakozik", "var\xE1zsol", "v\xE1rhat", "vartyog", "vastagodik", "v\xE9dekezik", "vedel", "vedlik", "v\xE9gbevisz", "v\xE9gez", "v\xE9ghez visz", "v\xE9gigalszik", "v\xE9gigcsin\xE1l", "v\xE9gighajt", "v\xE9gighallgat", "v\xE9gigj\xE1r", "v\xE9gigm\xE9r", "v\xE9gigmond", "v\xE9grehajt", "v\xE9grendelkezik", "vegz\xE1l", "v\xE9gz\u0151dik", "vegyelemez", "v\xE9lelmez", "v\xE9n\xEDt", "v\xE9n\xFCl", "ver", "vereget", "verekedik", "ver\xEDt\xE9kezik", "vermel", "ver\u0151dik", "v\xE9rtez", "v\xE9rzik", "v\xE9s", "vesz", "veszekedik", "veszekszik", "v\xE9szel", "vesz\xE9lyeztet", "veszk\u0151dik", "vessz\u0151z", "veszteget", "vet", "v\xE9t", "vet\xE9l", "v\xE9telez", "vet\xE9lkedik", "vetemedik", "v\xE9tkezik", "vetk\u0151zik", "v\xE9t\xF3z", "vezekel", "viaszol", "vibr\xE1l", "vid\xEDt", "vidul", "vigad", "vigasztal\xF3dik", "vigy\xE1z", "vigyorog", "vihog", "vil\xE1g\xEDt", "vil\xE1gosodik", "villanyoz", "vir\xEDt", "virrad", "virraszt", "virtualiz\xE1l", "virul", "viselkedik", "vis\xEDt", "visz", "visz\xE1lykodik", "viszket", "viszonoz", "viszony\xEDt", "viszonyul", "visszaad", "visszaakaszt", "visszabesz\xE9l", "visszabillen", "visszabotork\xE1l", "visszacser\xE9l", "visszacsin\xE1l", "visszaenged", "visszaesik", "visszafizet", "visszafogad", "visszafojt", "visszafordul", "visszagondol", "visszahajt", "visszahat", "visszah\xE1tr\xE1l", "visszahelyez", "visszah\xEDv", "visszahord", "visszah\u0151k\xF6l", "visszah\xFAz", "visszaigazol", "visszajut", "visszakap", "visszakapcsol", "visszak\xE9r", "visszakozik", "visszak\xF6sz\xF6n", "visszak\xF6vetel", "visszak\xFCld", "visszal\xE9p", "visszal\xE9pett", "visszamegy", "visszapattan", "visszarak", "visszaretten", "visszasiet", "visszaszalad", "visszasz\xE1ll", "visszaszerez", "visszatal\xE1l", "visszat\xE1ncol", "visszatasz\xEDt", "visszateker", "visszatekint", "visszat\xE9r", "visszat\xE9r\xEDt", "visszatesz", "visszatoloncol", "visszat\xF6r", "visszat\u0171r", "visszaugrik", "vissza\xFCt", "visszav\xE1gy\xF3dik", "visszav\xE1lt", "visszav\xE1r", "visszav\xE1s\xE1rol", "visszaver", "visszaver\u0151dik", "visszavesz", "visszavezet", "visszavisz", "vitat", "vit\xE1zik", "vitorl\xE1zik", "v\xEDv", "vizel", "vizsg\xE1l\xF3dik", "volt", "voltak", "von", "vonakodik", "vonatkozik", "vonatkoztat", "von\xEDt", "vonz\xF3dik", "vony\xEDt", "v\xF6r\xF6s\xEDt", "v\xF6r\xF6slik", "v\xF6r\xF6s\xF6dik", "v\xF6r\xF6s\xFCl", "vulgariz\xE1l", "vulkaniz\xE1l", "zab\xE1l", "zabhegyez\xE9s", "zabl\xE1z", "zabol\xE1z", "zabr\xE1l", "zajong", "zaklat", "z\xE1porozik", "z\xE1r", "zar\xE1ndokol", "z\xE1r\xE1s", "z\xE1rk\xF3zik", "z\xE1r\xF3dik", "z\xE1rul", "zavarja", "zavarodik", "zecc\xF6l", "zen\xE9l", "zen\xE9s\xEDt", "zen\xE9t szerez", "zeng", "zokog", "zongor\xE1zik", "z\xF6kken", "z\xF6ldellik", "z\xF6ld\xFCl", "z\xF6rd\xFCl", "z\xF6rget", "z\xF6r\xF6g", "zrik\xE1l", "z\xFAdul", "z\xFAg", "z\xFAgat", "z\xFAgol\xF3dik", "zuhan", "zuhanyozik", "zuhog", "z\xFCllik", "zs\xE1kol", "zsarnokoskodik", "zsend\xFCl", "zsen\xEDroz", "zs\xEDroz", "zs\xF6rt\xF6l\u0151dik", "zs\xFAfol", "zsugorgat", "zsugor\xEDt", "zsugorodik", "zsuppol", "zs\u0171rizik"];
var V13 = { adjective: K13, adverb: M15, conjunction: C14, interjection: P14, noun: N17, verb: F13 };
var D18 = V13;
var O12 = { title: "Hungarian", animal: r19, commerce: z15, date: d19, finance: v14, internet: u19, name: S16, phone_number: A16, word: D18 };
var ra2 = O12;

// ../../node_modules/@faker-js/faker/dist/esm/chunk-7F72AJZR.mjs
init_esm_shims();
var e20 = ["###", "###/#", "##", "##/#", "#", "#/#"];
var t20 = ["{{address.city_prefix}} {{name.last_name}}", "{{name.last_name}}{{address.city_suffix}}"];
var r20 = ["\u0540\u0575\u0578\u0582\u057D\u056B\u057D\u0561\u0575\u056B\u0576", "\u0531\u0580\u0587\u0565\u056C\u0575\u0561\u0576", "\u0531\u0580\u0587\u0574\u057F\u0575\u0561\u0576", "\u0540\u0561\u0580\u0561\u057E\u0561\u0575\u056B\u0576", "\u0546\u0578\u0580"];
var o20 = ["\u0561\u056F\u0565\u0580\u057F", "\u0561\u0577\u0565\u0576", "\u0561\u0577\u0561\u057F"];
var m20 = ["\u0531\u0544\u0546", "\u0531\u0564\u0580\u0562\u0565\u057B\u0561\u0576", "\u0531\u056C\u0562\u0561\u0576\u056B\u0561", "\u0531\u056C\u056A\u056B\u0580", "\u0531\u0574\u0565\u0580\u056B\u056F\u0575\u0561\u0576 \u054D\u0561\u0574\u0578\u0561", "\u0531\u0574\u0565\u0580\u056B\u056F\u0575\u0561\u0576 \u054E\u056B\u0580\u057B\u056B\u0576\u0575\u0561\u0576 \u056F\u0572\u0566\u056B\u0576\u0565\u0580", "\u0531\u0576\u0563\u056B\u056C\u056B\u0561", "\u0531\u0576\u0563\u0578\u056C\u0561", "\u0531\u0576\u0564\u0578\u0580\u0580\u0561", "\u0531\u0576\u057F\u056B\u0563\u0578\u0582\u0561 \u0587 \u0532\u0561\u0580\u0562\u0578\u0582\u0564\u0561", "\u0531\u057E\u057D\u057F\u0580\u0561\u056C\u056B\u0561", "\u0531\u057E\u057D\u057F\u0580\u056B\u0561", "\u0531\u0580\u0563\u0565\u0576\u057F\u056B\u0576\u0561", "\u0531\u0580\u0578\u0582\u0562\u0561", "\u0531\u0580\u0581\u0561\u056D\u056B \u0540\u0561\u0576\u0580\u0561\u057A\u0565\u057F\u0578\u0582\u0569\u0575\u0578\u0582\u0576", "\u0531\u0580\u0587\u0565\u056C\u0575\u0561\u0576 \u0539\u056B\u0574\u0578\u0580", "\u0531\u0586\u0572\u0561\u0576\u057D\u057F\u0561\u0576", "\u0532\u0561\u0570\u0561\u0574\u0576\u0565\u0580", "\u0532\u0561\u0570\u0580\u0565\u0575\u0576", "\u0532\u0561\u0576\u0563\u056C\u0561\u0564\u0565\u0577", "\u0532\u0561\u0580\u0562\u0561\u0564\u0578\u057D", "\u0532\u0565\u056C\u0561\u057C\u0578\u0582\u057D", "\u0532\u0565\u056C\u056B\u0566", "\u0532\u0565\u0576\u056B\u0576", "\u0532\u0565\u0580\u0574\u0578\u0582\u0564\u0561", "\u0532\u0578\u056C\u056B\u057E\u056B\u0561", "\u0532\u0578\u057D\u0576\u056B\u0561 \u0587 \u0540\u0565\u0580\u0581\u0565\u0563\u0578\u057E\u056B\u0576\u0561", "\u0532\u0578\u057F\u057D\u057E\u0561\u0576\u0561", "\u0532\u0578\u0582\u0569\u0561\u0576", "\u0532\u0578\u0582\u056C\u0572\u0561\u0580\u056B\u0561", "\u0532\u0578\u0582\u0580\u056F\u056B\u0576\u0561 \u0556\u0561\u057D\u0578", "\u0532\u0578\u0582\u0580\u0578\u0582\u0576\u0564\u056B", "\u0532\u0580\u0561\u0566\u056B\u056C\u056B\u0561", "\u0532\u0580\u056B\u057F\u0561\u0576\u0561\u056F\u0561\u0576 \u054E\u056B\u0580\u057B\u056B\u0576\u0575\u0561\u0576 \u053F\u0572\u0566\u056B\u0576\u0565\u0580", "\u0532\u0580\u0578\u0582\u0576\u0565\u0575", "\u0533\u0561\u0562\u0578\u0576", "\u0533\u0561\u0574\u0562\u056B\u0561", "\u0533\u0561\u0575\u0561\u0576\u0561", "\u0533\u0565\u0580\u0574\u0561\u0576\u056B\u0561", "\u0533\u0565\u0580\u0576\u057D\u056B", "\u0533\u0578\u0582\u0561\u0574", "\u0533\u057E\u0561\u057F\u0565\u0574\u0561\u056C\u0561", "\u0533\u057E\u056B\u0576\u0565\u0561", "\u0533\u057E\u056B\u0576\u0565\u0561-\u0532\u056B\u057D\u0561\u0578\u0582", "\u0533\u0580\u0565\u0576\u0561\u0564\u0561", "\u0534\u0561\u0576\u056B\u0561", "\u0534\u0578\u0574\u056B\u0576\u056B\u056F\u0561", "\u0534\u0578\u0574\u056B\u0576\u056B\u056F\u0575\u0561\u0576 \u0540\u0561\u0576\u0580\u0561\u057A\u0565\u057F\u0578\u0582\u0569\u0575\u0578\u0582\u0576", "\u0535\u0563\u056B\u057A\u057F\u0578\u057D", "\u0535\u0569\u0578\u057E\u057A\u056B\u0561", "\u0535\u0574\u0565\u0576", "\u0536\u0561\u0574\u0562\u056B\u0561", "\u0536\u056B\u0574\u0562\u0561\u0562\u057E\u0565", "\u0537\u056F\u057E\u0561\u0564\u0578\u0580", "\u0537\u057D\u057F\u0578\u0576\u056B\u0561", "\u0537\u0580\u056B\u057F\u0580\u0565\u0561", "\u0539\u0561\u056B\u056C\u0561\u0576\u0564", "\u0539\u0561\u0575\u057E\u0561\u0576", "\u0539\u0568\u0580\u0584\u057D \u0587 \u053F\u0561\u0575\u056F\u0578\u057D \u056F\u0572\u0566\u056B\u0576\u0565\u0580", "\u0539\u0578\u0582\u0576\u056B\u057D", "\u0539\u0578\u0582\u0580\u0584\u056B\u0561", "\u0539\u0578\u0582\u0580\u0584\u0574\u0565\u0576\u057D\u057F\u0561\u0576", "\u053B\u0576\u0564\u0578\u0576\u0565\u0566\u056B\u0561", "\u053B\u057C\u056C\u0561\u0576\u0564\u056B\u0561", "\u053B\u057D\u056C\u0561\u0576\u0564\u056B\u0561", "\u053B\u057D\u057A\u0561\u0576\u056B\u0561", "\u053B\u057D\u0580\u0561\u0575\u0565\u056C", "\u053B\u057F\u0561\u056C\u056B\u0561", "\u053B\u0580\u0561\u0576", "\u053B\u0580\u0561\u0584", "\u053C\u0561\u0578\u057D", "\u053C\u0561\u057F\u057E\u056B\u0561", "\u053C\u0565\u0570\u0561\u057D\u057F\u0561\u0576", "\u053C\u0565\u057D\u0578\u0569\u0578", "\u053C\u056B\u0562\u0561\u0576\u0561\u0576", "\u053C\u056B\u0562\u0565\u0580\u056B\u0561", "\u053C\u056B\u0562\u056B\u0561", "\u053C\u056B\u056D\u057F\u0565\u0576\u0577\u057F\u0561\u0575\u0576", "\u053C\u056B\u057F\u057E\u0561", "\u053C\u0575\u0578\u0582\u0584\u057D\u0565\u0574\u0562\u0578\u0582\u0580\u0563", "\u053D\u0578\u0580\u057E\u0561\u0569\u056B\u0561", "\u053F\u0561\u0562\u0578 \u054E\u0565\u0580\u0564\u0565", "\u053F\u0561\u0574\u0562\u0578\u057B\u0561", "\u053F\u0561\u0574\u0565\u0580\u0578\u0582\u0576", "\u053F\u0561\u0575\u0574\u0561\u0576\u0575\u0561\u0576 \u056F\u0572\u0566\u056B\u0576\u0565\u0580", "\u053F\u0561\u0576\u0561\u0564\u0561", "\u053F\u0561\u057F\u0561\u0580", "\u053F\u0565\u0576\u057F\u0580\u0578\u0576\u0561\u0561\u0586\u0580\u056B\u056F\u0575\u0561\u0576 \u0540\u0561\u0576\u0580\u0561\u057A\u0565\u057F\u0578\u0582\u0569\u0575\u0578\u0582\u0576", "\u053F\u056B\u057A\u0580\u0578\u057D", "\u053F\u056B\u0580\u056B\u0562\u0561\u057F\u056B", "\u053F\u0578\u056C\u0578\u0582\u0574\u0562\u056B\u0561", "\u053F\u0578\u0574\u0578\u0580\u0576\u0565\u0580", "\u053F\u0578\u0576\u0563\u0578\u0575\u056B \u0540\u0561\u0576\u0580\u0561\u057A\u0565\u057F\u0578\u0582\u0569\u0575\u0578\u0582\u0576", "\u053F\u0578\u0576\u0563\u0578\u0575\u056B\u0534\u0565\u0574\u0578\u056F\u0580\u0561\u057F\u0561\u056F\u0561\u0576 \u0540\u0561\u0576\u0580\u0561\u057A\u0565\u057F\u0578\u0582\u0569\u0575\u0578\u0582\u0576 \u053F\u0534\u0540", "\u053F\u0578\u057D\u057F\u0561 \u054C\u056B\u056F\u0561", "\u053F\u0578\u057F \u0564'\u053B\u057E\u0578\u0582\u0561\u0580", "\u053F\u0578\u0582\u0562\u0561", "\u053F\u0578\u0582\u056F\u056B \u056F\u0572\u0566\u056B\u0576\u0565\u0580", "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576", "\u0540\u0561\u0575\u056B\u0569\u056B", "\u0540\u0561\u057D\u0561\u0580\u0561\u056F\u0561\u056E\u0561\u0575\u056B\u0576 \u0533\u057E\u056B\u0576\u0565\u0561", "\u0540\u0561\u0580\u0561\u057E\u0561\u0575\u056B\u0576 \u053F\u0578\u0580\u0565\u0561", "\u0540\u0561\u0580\u0561\u057E\u0561\u0586\u0580\u056B\u056F\u0575\u0561\u0576 \u0540\u0561\u0576\u0580\u0561\u057A\u0565\u057F\u0578\u0582\u0569\u0575\u0578\u0582\u0576", "\u0540\u0575\u0578\u0582\u057D\u056B\u057D\u0561\u0575\u056B\u0576 \u053F\u0578\u0580\u0565\u0561", "\u0540\u0575\u0578\u0582\u057D\u056B\u057D\u0561\u0575\u056B\u0576 \u0544\u0561\u056F\u0565\u0564\u0578\u0576\u056B\u0561", "\u0540\u0575\u0578\u0582\u057D\u056B\u057D\u0561\u0575\u056B\u0576 \u0544\u0561\u0580\u056B\u0561\u0576\u0575\u0561\u0576 \u056F\u0572\u0566\u056B\u0576\u0565\u0580", "\u0540\u0576\u0564\u056F\u0561\u057D\u057F\u0561\u0576", "\u0540\u0578\u0576\u0564\u0578\u0582\u0580\u0561\u057D", "\u0540\u0578\u0576\u056F\u0578\u0576\u0563", "\u0540\u0578\u0580\u0564\u0561\u0576\u0561\u0576", "\u0540\u0578\u0582\u0576\u0561\u057D\u057F\u0561\u0576", "\u0540\u0578\u0582\u0576\u0563\u0561\u0580\u056B\u0561", "\u0542\u0561\u0566\u0561\u056D\u057D\u057F\u0561\u0576", "\u0542\u0580\u0572\u0566\u057D\u057F\u0561\u0576", "\u0543\u0561\u0574\u0561\u0575\u056F\u0561", "\u0543\u0561\u057A\u0578\u0576\u056B\u0561", "\u0544\u0531\u0537", "\u0544\u0539", "\u0544\u0561\u0564\u0561\u0563\u0561\u057D\u056F\u0561\u0580", "\u0544\u0561\u056C\u0561\u0575\u0566\u056B\u0561", "\u0544\u0561\u056C\u0561\u057E\u056B", "\u0544\u0561\u056C\u0564\u056B\u057E\u0576\u0565\u0580", "\u0544\u0561\u056C\u0569\u0561", "\u0544\u0561\u056C\u056B", "\u0544\u0561\u056F\u0561\u0578\u0582", "\u0544\u0561\u0575\u0578\u057F", "\u0544\u0561\u057E\u0580\u056B\u056F\u056B\u0578\u057D", "\u0544\u0561\u057E\u0580\u056B\u057F\u0561\u0576\u056B\u0561", "\u0544\u0561\u0580\u0577\u0561\u056C\u0575\u0561\u0576 \u056F\u0572\u0566\u056B\u0576\u0565\u0580", "\u0544\u0561\u0580\u0578\u056F\u056F\u0578", "\u0544\u0565\u0576 \u056F\u0572\u0566\u056B", "\u0544\u0565\u0584\u057D\u056B\u056F\u0561", "\u0544\u056B\u056F\u0580\u0578\u0576\u0565\u0566\u056B\u0561", "\u0544\u0575\u0561\u0576\u0574\u0561", "\u0544\u0578\u0566\u0561\u0574\u0562\u056B\u056F", "\u0544\u0578\u056C\u0564\u0578\u057E\u0561", "\u0544\u0578\u0576\u0561\u056F\u0578", "\u0544\u0578\u0576\u0572\u0578\u056C\u056B\u0561", "\u0544\u0578\u0576\u057F\u057D\u0565\u0580\u0561\u057F", "\u0546\u0561\u0574\u056B\u0562\u056B\u0561", "\u0546\u0561\u0578\u0582\u0580\u0578\u0582", "\u0546\u0565\u057A\u0561\u056C", "\u0546\u056B\u0563\u0565\u0580", "\u0546\u056B\u0563\u0565\u0580\u056B\u0561", "\u0546\u056B\u0564\u0565\u0580\u056C\u0561\u0576\u0564\u0575\u0561\u0576 \u0531\u0576\u057F\u056B\u056C\u0576\u0565\u0580", "\u0546\u056B\u0564\u0565\u0580\u056C\u0561\u0576\u0564\u0576\u0565\u0580", "\u0546\u056B\u056F\u0561\u0580\u0561\u0563\u0578\u0582\u0561", "\u0546\u056B\u0578\u0582\u0565", "\u0546\u0578\u0580 \u0536\u0565\u056C\u0561\u0576\u0564\u056B\u0561", "\u0546\u0578\u0580 \u053F\u0561\u056C\u0565\u0564\u0578\u0576\u056B\u0561", "\u0546\u0578\u0580\u057E\u0565\u0563\u056B\u0561", "\u0546\u0578\u0580\u0586\u0578\u056C\u0584 \u056F\u0572\u0566\u056B", "\u0547\u057E\u0565\u0564\u056B\u0561", "\u0547\u057E\u0565\u0575\u0581\u0561\u0580\u056B\u0561", "\u0547\u0580\u056B \u053C\u0561\u0576\u056F\u0561", "\u0548\u0582\u0563\u0561\u0576\u0564\u0561", "\u0548\u0582\u0566\u0562\u0565\u056F\u057D\u057F\u0561\u0576", "\u0548\u0582\u056F\u0580\u0561\u056B\u0576\u0561", "\u0548\u0582\u0578\u056C\u056B\u057D \u0587 \u0556\u0578\u0582\u057F\u0578\u0582\u0576\u0561", "\u0548\u0582\u0580\u0578\u0582\u0563\u057E\u0561\u0575", "\u0549\u0561\u0564", "\u0549\u0565\u056D\u056B\u0561", "\u0549\u0565\u057C\u0576\u0578\u0563\u0578\u0580\u056B\u0561", "\u0549\u056B\u056C\u056B", "\u0549\u056B\u0576\u0561\u057D\u057F\u0561\u0576", "\u054A\u0561\u056C\u0561\u0578\u0582", "\u054A\u0561\u056F\u056B\u057D\u057F\u0561\u0576", "\u054A\u0561\u0572\u0565\u057D\u057F\u056B\u0576", "\u054A\u0561\u0576\u0561\u0574\u0561", "\u054A\u0561\u057A\u0578\u0582\u0561 \u0546\u0578\u0580 \u0533\u057E\u056B\u0576\u0565\u0561", "\u054A\u0561\u0580\u0561\u0563\u057E\u0561\u0575", "\u054A\u0565\u0580\u0578\u0582", "\u054A\u0578\u0580\u057F\u0578\u0582\u0563\u0561\u056C\u056B\u0561", "\u054A\u0578\u0582\u0565\u0580\u057F\u0578 \u054C\u056B\u056F\u0578", "\u054B\u0565\u0580\u057D\u056B", "\u054B\u056B\u0562\u0578\u0582\u0569\u056B", "\u054B\u056B\u0562\u0580\u0561\u056C\u0569\u0561\u0580", "\u054C\u0578\u0582\u0561\u0576\u0564\u0561", "\u054C\u0578\u0582\u0574\u056B\u0576\u056B\u0561", "\u054C\u0578\u0582\u057D\u0561\u057D\u057F\u0561\u0576", "\u054D\u0561\u056C\u057E\u0561\u0564\u0578\u0580", "\u054D\u0561\u0570\u0580\u0561\u057E\u056B\u0561", "\u054D\u0561\u0574\u0578\u0561", "\u054D\u0561\u0576 \u0544\u0561\u0580\u056B\u0576\u0578", "\u054D\u0561\u0576 \u054F\u0578\u0574\u0565 \u0587 \u054A\u0580\u056B\u0576\u057D\u056B\u057A\u056B", "\u054D\u0561\u0578\u0582\u0564\u0575\u0561\u0576 \u0531\u0580\u0561\u0562\u056B\u0561", "\u054D\u0565\u0575\u0577\u0565\u056C\u0576\u0565\u0580", "\u054D\u0565\u0576 \u0544\u0561\u0580\u057F\u0565\u0576 (\u0556\u0580\u0561\u0576\u057D\u056B\u0561\u056F\u0561\u0576 \u0531\u0576\u057F\u056B\u056C\u0576\u0565\u0580)", "\u054D\u0565\u0576\u0565\u0563\u0561\u056C", "\u054D\u0565\u0576\u057F \u053C\u0575\u0578\u0582\u057D\u056B\u0561", "\u054D\u0565\u0576\u057F \u053F\u056B\u057F\u057D \u0587 \u0546\u0587\u056B\u057D", "\u054D\u0565\u0576\u057F \u054A\u056B\u0565\u057C \u0587 \u0544\u056B\u056F\u0565\u056C\u0578\u0576", "\u054D\u0565\u0576\u057F \u054E\u056B\u0576\u057D\u0565\u0576\u057F \u0587 \u0533\u0580\u0565\u0576\u0561\u0564\u056B\u0576\u0565\u0580", "\u054D\u0565\u0580\u0562\u056B\u0561", "\u054D\u056B\u0565\u057C\u0561 \u053C\u0565\u0578\u0576\u0565", "\u054D\u056B\u0576\u0563\u0561\u057A\u0578\u0582\u0580", "\u054D\u056B\u0580\u056B\u0561", "\u054D\u056C\u0578\u057E\u0561\u056F\u056B\u0561", "\u054D\u056C\u0578\u057E\u0565\u0576\u056B\u0561", "\u054D\u0578\u0572\u0578\u0574\u0578\u0576\u0575\u0561\u0576 \u053F\u0572\u0566\u056B\u0576\u0565\u0580", "\u054D\u0578\u0574\u0561\u056C\u056B\u0561", "\u054D\u0578\u0582\u0564\u0561\u0576", "\u054D\u0578\u0582\u0580\u0562 \u0532\u0561\u0580\u0564\u0578\u0582\u0572\u056B\u0574\u0565\u0578\u057D\u056B \u056F\u0572\u0566\u056B", "\u054D\u0578\u0582\u0580\u0562 \u0540\u0565\u0572\u056B\u0576\u0565\u056B \u056F\u0572\u0566\u056B", "\u054D\u0578\u0582\u0580\u056B\u0576\u0561\u0574", "\u054D\u057E\u0561\u0566\u056B\u056C\u0565\u0576\u0564", "\u054E\u0561\u0576\u0578\u0582\u0561\u057F\u0578\u0582", "\u054E\u0561\u057F\u056B\u056F\u0561\u0576", "\u054E\u0565\u0576\u0565\u057D\u0578\u0582\u0565\u056C\u0561", "\u054E\u056B\u0565\u057F\u0576\u0561\u0574", "\u054E\u0580\u0561\u057D\u057F\u0561\u0576", "\u054F\u0561\u0576\u0566\u0561\u0576\u056B\u0561", "\u054F\u0561\u057B\u056B\u056F\u057D\u057F\u0561\u0576", "\u054F\u0578\u0563\u0578", "\u054F\u0578\u056F\u0565\u056C\u0561\u0578\u0582", "\u054F\u0578\u0576\u0563\u0561", "\u054F\u0578\u0582\u057E\u0561\u056C\u0578\u0582", "\u054F\u0580\u056B\u0576\u056B\u0564\u0561\u0564 \u054F\u0578\u0562\u0561\u0563\u0578", "\u0553\u056B\u0569\u0584\u0565\u0580\u0576 \u056F\u0572\u0566\u056B\u0576\u0565\u0580", "\u0554\u0565\u0576\u056B\u0561", "\u0554\u0578\u0582\u057E\u0565\u0575\u0569", "\u0555\u0574\u0561\u0576", "\u0556\u0561\u0580\u0565\u0580\u0575\u0561\u0576 \u056F\u0572\u0566\u056B\u0576\u0565\u0580", "\u0556\u056B\u056C\u056B\u057A\u056B\u0576\u0576\u0565\u0580", "\u0556\u056B\u0576\u056C\u0561\u0576\u0564\u056B\u0561", "\u0556\u056B\u057B\u056B", "\u0556\u0578\u056C\u056F\u056C\u0565\u0576\u0564\u0575\u0561\u0576 \u056F\u0572\u0566\u056B\u0576\u0565\u0580", "\u0556\u0580\u0561\u0576\u057D\u056B\u0561", "\u0556\u0580\u0561\u0576\u057D\u056B\u0561\u056F\u0561\u0576 \u054A\u0578\u056C\u056B\u0576\u0565\u0566\u056B\u0561"];
var i20 = ["\u0531\u0580\u0581\u0561\u056D\u056B \u0540\u0561\u0576\u0580\u0561\u057A\u0565\u057F\u0578\u0582\u0569\u0575\u0578\u0582\u0576"];
var a20 = ["\u0540\u0575\u0578\u0582\u057D\u056B\u057D\u0561\u0575\u056B\u0576", "\u0531\u0580\u0587\u0565\u056C\u0575\u0561\u0576", "\u0540\u0561\u0580\u0561\u057E\u0561\u0575\u056B\u0576", "\u0531\u0580\u0587\u0574\u057F\u0575\u0561\u0576", "\u0540\u0575\u0578\u0582\u057D\u056B\u057D\u0561\u0580\u0587\u0565\u056C\u0575\u0561\u0576", "\u0540\u0575\u0578\u0582\u057D\u056B\u057D\u0561\u0580\u0587\u0574\u057F\u0575\u0561\u0576", "\u0540\u0561\u0580\u0561\u057E\u0561\u0580\u0587\u0565\u056C\u0575\u0561\u0576", "\u0540\u0561\u0580\u0561\u057E\u0561\u0580\u0587\u0574\u057F\u0575\u0561\u0576"];
var f20 = ["\u0532\u0576. ###", "\u054F\u0578\u0582\u0576 ###"];
var n20 = ["\u0531\u0580\u0561\u0563\u0561\u056E\u0578\u057F\u0576", "\u0531\u0580\u0561\u0580\u0561\u057F", "\u0531\u0580\u0574\u0561\u057E\u056B\u0580", "\u0533\u0565\u0572\u0561\u0580\u0584\u0578\u0582\u0576\u056B\u0584", "\u053F\u0578\u057F\u0561\u0575\u0584", "\u053C\u0578\u057C\u056B", "\u0547\u056B\u0580\u0561\u056F", "\u054D\u0575\u0578\u0582\u0576\u056B\u0584", "\u054F\u0561\u057E\u0578\u0582\u0577", "\u054E\u0561\u0575\u0578\u0581 \u0571\u0578\u0580", "\u0535\u0580\u0587\u0561\u0576", "\u054D\u057F\u0565\u0583\u0561\u0576\u0561\u056F\u0565\u0580\u057F", "\u0531\u057D\u056F\u0565\u0580\u0561\u0576", "\u0540\u0561\u0564\u0580\u0578\u0582\u0569", "\u0544\u0561\u0580\u057F\u0561\u056F\u0565\u0580\u057F", "\u0544\u0561\u0580\u057F\u0578\u0582\u0576\u056B", "\u0547\u0561\u0570\u0578\u0582\u0574\u0575\u0561\u0576", "\u0547\u0578\u0582\u0577\u056B", "\u0554\u0561\u0577\u0561\u0569\u0561\u0572"];
var s20 = ["{{name.last_name}} {{address.street_suffix}}"];
var p20 = { normal: "{{address.street}} {{address.buildingNumber}}", full: "{{address.street}} {{address.buildingNumber}} {{address.secondaryAddress}}" };
var d20 = [" \u0583\u0578\u0572\u0578\u0581", " \u057A\u0578\u0572\u0578\u057F\u0561"];
var z16 = { building_number: e20, city: t20, city_prefix: r20, city_suffix: o20, country: m20, default_country: i20, direction: a20, secondary_address: f20, state: n20, street: s20, street_address: p20, street_suffix: d20 };
var l20 = z16;
var u20 = ["\u056F\u0561\u0580\u0574\u056B\u0580", "\u056F\u0561\u0576\u0561\u0579", "\u056F\u0561\u057A\u0578\u0582\u0575\u057F", "\u0564\u0565\u0572\u056B\u0576", "\u0574\u0561\u0576\u0578\u0582\u0577\u0561\u056F\u0561\u0563\u0578\u0582\u0575\u0576", "\u057D\u057A\u056B\u057F\u0561\u056F", "\u057D\u0587", "\u0576\u0561\u0580\u0576\u057B\u0561\u0563\u0578\u0582\u0575\u0576", "\u057E\u0561\u0580\u0564\u0561\u0563\u0578\u0582\u0575\u0576", "\u0574\u0578\u056D\u0580\u0561\u0563\u0578\u0582\u0575\u0576", "\u0565\u0580\u056F\u0576\u0561\u0563\u0578\u0582\u0575\u0576", "\u0578\u057D\u056F\u0565\u0563\u0578\u0582\u0575\u0576"];
var j12 = { human: u20 };
var x17 = j12;
var _15 = { wide: ["\u0540\u0578\u0582\u0576\u057E\u0561\u0580", "\u0553\u0565\u057F\u0580\u057E\u0561\u0580", "\u0544\u0561\u0580\u057F", "\u0531\u057A\u0580\u056B\u056C", "\u0544\u0561\u0575\u056B\u057D", "\u0540\u0578\u0582\u0576\u056B\u057D", "\u0540\u0578\u0582\u056C\u056B\u057D", "\u0555\u0563\u0578\u057D\u057F\u0578\u057D", "\u054D\u0565\u057A\u057F\u0565\u0574\u0562\u0565\u0580", "\u0540\u0578\u056F\u057F\u0565\u0574\u0562\u0565\u0580", "\u0546\u0578\u0575\u0565\u0574\u0562\u0565\u0580", "\u0534\u0565\u056F\u057F\u0565\u0574\u0562\u0565\u0580"], abbr: ["\u0540\u0576\u057E", "\u0553\u057F\u0580", "\u0544\u0580\u057F", "\u0531\u057A\u0580", "\u0544\u0575\u057D", "\u0540\u0576\u057D", "\u0540\u056C\u057D", "\u0555\u0563\u057D", "\u054D\u057A\u057F", "\u0540\u056F\u057F", "\u0546\u0574\u0562", "\u0534\u056F\u057F"] };
var c20 = { wide: ["\u053F\u056B\u0580\u0561\u056F\u056B", "\u0535\u0580\u056F\u0578\u0582\u0577\u0561\u0562\u0569\u056B", "\u0535\u0580\u0565\u0584\u0577\u0561\u0562\u0569\u056B", "\u0549\u0578\u0580\u0565\u0584\u0577\u0561\u0562\u0569\u056B", "\u0540\u056B\u0576\u0563\u0577\u0561\u0562\u0569\u056B", "\u0548\u0582\u0580\u0562\u0561\u0569", "\u0547\u0561\u0562\u0561\u0569"], abbr: ["\u056F\u0580\u056F", "\u0565\u0580\u056F", "\u0565\u0580\u0584", "\u0579\u0580\u0584", "\u0570\u0576\u0563", "\u0578\u0582\u0580\u0562", "\u0577\u0562\u0569"] };
var q10 = { month: _15, weekday: c20 };
var y18 = q10;
var D19 = ["com", "biz", "info", "name", "net", "org", "am"];
var v15 = { domain_suffix: D19 };
var b19 = v15;
var h20 = ["\u057F\u0561\u0580\u056B", "\u0578\u0580", "\u0583\u0578\u056D\u0565\u0581", "\u0561\u0574\u0565\u0576", "\u056B\u0576\u0579", "\u056F\u0565\u0576\u0581\u0561\u0572\u056B\u0581", "\u0574\u056B\u0576\u0579\u0587", "\u0570\u0561\u0574\u0561\u0577\u056D\u0561\u0580\u0570\u0561\u0575\u056B\u0576", "\u057F\u0576\u057F\u0565\u057D\u0578\u0582\u0569\u0575\u0578\u0582\u0576", "\u0574\u056B", "\u0584\u0561\u0576\u056B", "\u0577\u0561\u0562\u0561\u0569\u0578\u0582\u0574", "\u0562\u0576\u0561\u056F\u0561\u0576\u0578\u0576", "\u0564\u0561\u0580\u0571\u0576\u0565\u056C\u0578\u057E", "\u0561\u0575\u0576", "\u0564\u0565\u057C", "\u0565\u0580\u0565\u056F", "\u0561\u0576\u0570\u0576\u0561\u0580", "\u0567\u0580", "\u0569\u057E\u0578\u0582\u0574", "\u0568", "\u0577\u0561\u057F\u0565\u0580\u056B", "\u0570\u0561\u0574\u0561\u0580", "\u056F\u0574\u0576\u0561", "\u0578\u0580\u057A\u0565\u057D", "\u0561\u0576\u057F\u0565\u057D\u0561\u0576\u0565\u056C\u056B", "\u0561\u0572\u0565\u057F\u056B", "\u056D\u057D\u057F\u0561\u0563\u0578\u0582\u0575\u0576", "\u057D\u0561\u0570\u0574\u0561\u0576\u0561\u0583\u0561\u056F\u0578\u0582\u0574\u0576\u0565\u0580\u056B", "\u0574\u0561\u0580\u0564\u056F\u0561\u0575\u056B\u0576", "\u056F\u0578\u0580\u0578\u0582\u057D\u057F\u0576\u0565\u0580\u056B", "\u0587", "\u0563\u0578\u0580\u056E\u0561\u0566\u0580\u056F\u0578\u0582\u0569\u0575\u0561\u0576", "\u054F\u0561\u0580\u0565\u057D\u056F\u0566\u0562\u056B\u0576", "\u0579\u056B\u0576\u0561\u056F\u0561\u0576", "\u054E\u0578\u0582\u0570\u0561\u0576\u056B", "\u0577\u0578\u0582\u056F\u0561\u0575\u0578\u0582\u0574", "\u0565\u0576\u0569\u0561\u0564\u0580\u0561\u0562\u0561\u0580", "\u0579\u0572\u057B\u056B\u056F\u056B\u0581", "\u0574\u0561\u0580\u0564\u0578\u0582\u0576", "\u0583\u0578\u056D\u0561\u0576\u0581\u057E\u0561\u056E", "\u057E\u056B\u0580\u0578\u0582\u057D\u0576", "\u0561\u057A\u0561\u0581\u0578\u0582\u0581\u0565\u0581", "\u057F\u0565\u056D\u0576\u0578\u056C\u0578\u0563\u056B\u0561\u056F\u0561\u0576", "\u0576\u057E\u0561\u0573\u0578\u0582\u0574\u0576\u0565\u0580\u056B", "\u0570\u0561\u057D\u0561\u056E", "\u0574\u0561\u0580\u0564\u056F\u0578\u0582\u0569\u0575\u0578\u0582\u0576\u0568", "\u0564\u0565\u057C\u0587\u057D", "\u0577\u0561\u057F", "\u0562\u0561\u0576", "\u0579\u0563\u056B\u057F\u056B", "\u056B\u0580", "\u057D\u0565\u0583\u0561\u056F\u0561\u0576", "\u0561\u057C\u0578\u0572\u057B\u0578\u0582\u0569\u0575\u0561\u0576", "\u0562\u0576\u0578\u0582\u0569\u0575\u0561\u0576", "\u0578\u0582", "\u0564\u0580\u0561", "\u0570\u0565\u057F", "\u0570\u0561\u0580\u0561\u0562\u0565\u0580\u0578\u0582\u0569\u0575\u0578\u0582\u0576\u0576\u0565\u0580\u056B", "\u0574\u0561\u057D\u056B\u0576", "\u0533\u0561\u0580\u0576\u0561\u0576\u0568", "\u0565\u0580\u0562", "\u057E\u056B\u0580\u0578\u0582\u057D\u0568", "\u056F\u0561\u0569\u057E\u0561\u056E\u0561\u0570\u0561\u0580", "\u0561\u0580\u0565\u0581", "\u056F\u0575\u0561\u0576\u0584\u0568", "\u0563\u0580\u0565\u0569\u0565", "\u0578\u0572\u057B", "\u0561\u0577\u056D\u0561\u0580\u0570\u0578\u0582\u0574", "\u0540\u057C\u0578\u0574\u056B", "\u056F\u0561\u0569\u0578\u056C\u056B\u056F", "\u0565\u056F\u0565\u0572\u0565\u0581\u0578\u0582", "\u0561\u057C\u0561\u057B\u0576\u0578\u0580\u0564\u0576", "\u0570\u0561\u057E\u0561\u057F\u0561\u0581\u0575\u0561\u056C", "\u0570\u0578\u057F\u056B\u0576", "\u0564\u056B\u0574\u0565\u0581", "\u0561\u0572\u0578\u0569\u0584\u0578\u057E", "\u057F\u0561\u0580\u057E\u0561", "\u0568\u0576\u0569\u0561\u0581\u0584\u0578\u0582\u0574", "\u0577\u0561\u057F\u0565\u0580\u0576", "\u0567\u056B\u0576", "\u0570\u056B\u0577\u0578\u0582\u0574", "\u0574\u0565\u057B\u0562\u0565\u0580\u0578\u0582\u0574", "\u0544\u0565\u0576\u0584", "\u0561\u057C\u0561\u057B", "\u0567\u056B\u0576\u0584", "\u0577\u0561\u0580\u056A\u057E\u0578\u0582\u0574", "\u0563\u056C\u056D\u0561\u057A\u057F\u0578\u0582\u0575\u057F", "\u0561\u0580\u0561\u0563\u0578\u0582\u0569\u0575\u0561\u0574\u0562", "\u057E\u057D\u057F\u0561\u0570", "\u0578\u0582\u056A\u0565\u0572", "\u0565\u0576\u0584", "\u056F\u0561\u0580\u0578\u0572", "\u0561\u0576\u0565\u056C", "\u056F\u0561\u0574\u0565\u0576\u0561\u0576\u0584", "\u0541\u0563\u057F\u0565\u056C\u0578\u057E", "\u0561\u0576\u0571\u0576\u0561\u056F\u0561\u0576", "\u0562\u0561\u0580\u0565\u056F\u0565\u0581\u0578\u0582\u0569\u0575\u0561\u0576", "\u0574\u0565\u0576\u0584", "\u0569\u0578\u0582\u0575\u056C", "\u057F\u0561\u056C\u056B\u057D", "\u0574\u0565\u0566", "\u057F\u0561\u0580\u057E\u0565\u056C", "\u0576\u0575\u0578\u0582\u0569\u0561\u056F\u0561\u0576\u0578\u057E", "\u057E\u0561\u0566\u0578\u0582\u0574", "\u0577\u0561\u0570\u056B", "\u0565\u057F\u0587\u056B\u0581", "\u0579\u0567\u056B\u0576", "\u056F\u0561\u0576\u0563\u0576\u0565\u0581\u0576\u0578\u0582\u0574", "\u0574\u0565\u0580", "\u0577\u0578\u0582\u0580\u057B", "\u0574\u0578\u056C\u0565\u0563\u0576\u0578\u0572", "\u057A\u0561\u057F\u0565\u0580\u0561\u0566\u0574\u0576\u0565\u0580\u0576", "\u0561\u0576\u0561\u0580\u0564\u0561\u0580\u0578\u0582\u0569\u0575\u0578\u0582\u0576\u0568", "\u0578\u0579", "\u0567\u056C", "\u0561\u0572\u0584\u0561\u057F\u0576\u0565\u0580\u056B", "\u0585\u0563\u0576\u0578\u0582\u0569\u0575\u0578\u0582\u0576", "\u0561\u0572\u0565\u0580\u057D\u0578\u0572", "\u0571\u0561\u0575\u0576\u0576", "\u056C\u057D\u0578\u0582\u0574", "\u0577\u0561\u0580\u0578\u0582\u0576\u0561\u056F\u0578\u0582\u0574", "\u0568\u0576\u0569\u0561\u0581\u0584\u0568", "\u0579\u0576\u0561\u0575\u0565\u056C\u0578\u057E", "\u0562\u0561\u0576\u056B", "\u0561\u057C\u0578\u0572\u057B", "\u0574\u0576\u0561\u056C", "\u0570\u056B\u057E\u0561\u0576\u0564", "\u0570\u0561\u0575\u057F\u0561\u0580\u0561\u0580\u0565\u056C", "\u057A\u0561\u057A\u0568", "\u0531\u0576\u057F\u0565\u057D\u0561\u0576\u0565\u056C\u056B", "\u0561\u057C\u0565\u0572\u056E\u057E\u0561\u056E\u0561\u0575\u056B\u0576", "\u0574\u0565\u056F", "\u057F\u0561\u0580\u0578\u0582\u0574", "\u056D\u056C\u0565\u0581", "\u0561\u057E\u0565\u056C\u056B", "\u0584\u0561\u0576", "\u0574\u056B\u056C\u056B\u0578\u0576", "\u0570\u0561\u0566\u0561\u0580", "\u0574\u0561\u0580\u0564\u0578\u0582", "\u056F\u0575\u0561\u0576\u0584", "\u057E\u0561\u0580\u0561\u056F\u057E\u0565\u0581\u056B\u0576", "\u0574\u056B\u056C\u056B\u0578\u0576\u056B\u0581", "\u0561\u057E\u0565\u056C\u056B\u0576", "\u057E\u0561\u0580\u0561\u056F\u057E\u0561\u056E\u0576\u0565\u0580\u056B\u0581", "\u0575\u0578\u0582\u0580\u0561\u0584\u0561\u0576\u0579\u0575\u0578\u0582\u0580", "\u0579\u0578\u0580\u0580\u0578\u0580\u0564\u0568", "\u0574\u0578\u057F", "\u0574\u056B\u056C\u056B\u0578\u0576\u0568", "\u0561\u0575\u057D", "\u057A\u0561\u0570\u056B\u0576", "\u057A\u0561\u0575\u0584\u0561\u0580\u0578\u0582\u0574", "\u0567", "\u0570\u056B\u057E\u0561\u0576\u0564\u0578\u0582\u0569\u0575\u0561\u0576", "\u0564\u0565\u0574", "\u0574\u0561\u0580\u0564", "\u0563\u057F\u0576\u057E\u0578\u0582\u0574", "\u056E\u0561\u0575\u0580\u0561\u0570\u0565\u0572", "\u056E\u0561\u0576\u0580", "\u057E\u056B\u0573\u0561\u056F\u0578\u0582\u0574", "\u0535\u057E", "\u0565\u0569\u0565", "\u057F\u0561\u0580\u0565\u057D\u056F\u0566\u0562\u056B\u0576", "\u0578\u0580\u0578\u0577", "\u057A\u0565\u057F\u0578\u0582\u0569\u0575\u0578\u0582\u0576\u0576\u0565\u0580", "\u057A\u0561\u0580\u056E\u0565\u0576\u0561\u056C", "\u056B\u0580\u0565\u0576\u0581", "\u0561\u057C\u0578\u0572\u057B\u0561\u057A\u0561\u0570\u0561\u056F\u0561\u0576", "\u0570\u0561\u0574\u0561\u056F\u0561\u0580\u0563\u0565\u0580\u0578\u057E", "\u0576\u0578\u0580\u0561\u0563\u0578\u0582\u0575\u0576", "\u057F\u0565\u056D\u0576\u0578\u056C\u0578\u0563\u056B\u0561\u0576\u0565\u0580\u0578\u057E", "\u0561\u057A\u0561", "\u0570\u0561\u0574\u0561\u057E\u0561\u0580\u0561\u056F\u056B\u0581", "\u0570\u0565\u057F\u0578", "\u0561\u056F\u0576\u0570\u0561\u0575\u057F", "\u0564\u0561\u0580\u0571\u0561\u057E", "\u0561\u0576\u056F\u0561\u056D", "\u0562\u0575\u0578\u0582\u057B\u056B", "\u0579\u0561\u0583\u056B\u0581", "\u0570\u0576\u0561\u0580\u0561\u057E\u0578\u0580\u0578\u0582\u0569\u0575\u0578\u0582\u0576\u0576\u0565\u0580\u056B\u0581", "\u0570\u0561\u0580\u0578\u0582\u057D\u057F", "\u0569\u0565", "\u0561\u0572\u0584\u0561\u057F", "\u0562\u0578\u056C\u0578\u0580\u0576", "\u0565\u0576", "\u0576\u0578\u0582\u0575\u0576", "\u0576\u0561\u057E\u0561\u056F\u0578\u0582\u0574", "\u0576\u0578\u0582\u0575\u0576\u0584\u0561\u0576", "\u0561\u0576\u057A\u0561\u0577\u057F\u057A\u0561\u0576"];
var B16 = { words: h20 };
var N18 = B16;
var g19 = ["\u0544\u0561\u0580\u056B\u0561", "\u0546\u0561\u0580\u0565", "\u0544\u0561\u0576\u0565", "\u0544\u0561\u0580\u056B", "\u0544\u0561\u0580\u056B\u0561\u0574", "\u0531\u0576\u056B", "\u0531\u0576\u0563\u0565\u056C\u056B\u0576\u0561", "\u0531\u0576\u0561\u0570\u056B\u057F", "\u0537\u056C\u0565\u0576", "\u0544\u056B\u056C\u0565\u0576\u0561", "\u0535\u057E\u0561", "\u0531\u0576\u0576\u0561", "\u0531\u0580\u0583\u056B", "\u0533\u0561\u0575\u0561\u0576\u0565", "\u053C\u056B\u056C\u056B\u0569", "\u0544\u0565\u0580\u056B", "\u054E\u056B\u056F\u057F\u0578\u0580\u0575\u0561", "\u0531\u0580\u056B\u0576\u0561", "\u0545\u0561\u0576\u0561", "\u054D\u0578\u0576\u0561", "\u0546\u0561\u057F\u0561\u056C\u056B", "\u0533\u0578\u0570\u0561\u0580", "\u0540\u0561\u057D\u0574\u056B\u056F", "\u054D\u0578\u0586\u056B", "\u0537\u0574\u056B\u056C\u056B", "\u054D\u0578\u0582\u057D\u0561\u0576\u0576\u0561", "\u0531\u0580\u0587\u056B\u056F", "\u053F\u0561\u0580\u056B\u0576\u0565", "\u053C\u0575\u0578\u0582\u057D\u056B", "\u0531\u0580\u056B\u0561\u0576\u0561", "\u054F\u0561\u0569\u0587", "\u053C\u056B\u056F\u0561", "\u054C\u0578\u0582\u0566\u0561\u0576\u0576\u0561", "\u053C\u056B\u056C\u056B", "\u054D\u0578\u0586\u0575\u0561", "\u0531\u0576\u0578\u0582\u0577", "\u0537\u056C\u056B\u0576\u0561", "\u054D\u0561\u057C\u0561", "\u0546\u0561\u0576\u0565", "\u0537\u057E\u0561", "\u053C\u056B\u0561\u0576\u0561", "\u0544\u0578\u0576\u056B\u056F\u0561", "\u053F\u0561\u0580\u056B\u0576\u0561", "\u053C\u056B\u0561", "\u0546\u0561\u0580\u056B\u0576\u0565", "\u053C\u0578\u0582\u057D\u056B\u0576\u0565"];
var w12 = ["\u0544\u0561\u0580\u056B\u0561", "\u0546\u0561\u0580\u0565", "\u0544\u0561\u0576\u0565", "\u0544\u0561\u0580\u056B", "\u0544\u0561\u0580\u056B\u0561\u0574", "\u0531\u0576\u056B", "\u0531\u0576\u0563\u0565\u056C\u056B\u0576\u0561", "\u0531\u0576\u0561\u0570\u056B\u057F", "\u0537\u056C\u0565\u0576", "\u0544\u056B\u056C\u0565\u0576\u0561", "\u0535\u057E\u0561", "\u0531\u0576\u0576\u0561", "\u0531\u0580\u0583\u056B", "\u0533\u0561\u0575\u0561\u0576\u0565", "\u053C\u056B\u056C\u056B\u0569", "\u0544\u0565\u0580\u056B", "\u054E\u056B\u056F\u057F\u0578\u0580\u0575\u0561", "\u0531\u0580\u056B\u0576\u0561", "\u0545\u0561\u0576\u0561", "\u054D\u0578\u0576\u0561", "\u0546\u0561\u057F\u0561\u056C\u056B", "\u0533\u0578\u0570\u0561\u0580", "\u0540\u0561\u057D\u0574\u056B\u056F", "\u054D\u0578\u0586\u056B", "\u0537\u0574\u056B\u056C\u056B", "\u054D\u0578\u0582\u057D\u0561\u0576\u0576\u0561", "\u0531\u0580\u0587\u056B\u056F", "\u053F\u0561\u0580\u056B\u0576\u0565", "\u053C\u0575\u0578\u0582\u057D\u056B", "\u0531\u0580\u056B\u0561\u0576\u0561", "\u054F\u0561\u0569\u0587", "\u053C\u056B\u056F\u0561", "\u054C\u0578\u0582\u0566\u0561\u0576\u0576\u0561", "\u053C\u056B\u056C\u056B", "\u054D\u0578\u0586\u0575\u0561", "\u0531\u0576\u0578\u0582\u0577", "\u0537\u056C\u056B\u0576\u0561", "\u054D\u0561\u057C\u0561", "\u0546\u0561\u0576\u0565", "\u0537\u057E\u0561", "\u053C\u056B\u0561\u0576\u0561", "\u0544\u0578\u0576\u056B\u056F\u0561", "\u053F\u0561\u0580\u056B\u0576\u0561", "\u053C\u056B\u0561", "\u0546\u0561\u0580\u056B\u0576\u0565", "\u053C\u0578\u0582\u057D\u056B\u0576\u0565", "\u0534\u0561\u057E\u056B\u0569", "\u0546\u0561\u0580\u0565\u056F", "\u0531\u056C\u0565\u0584\u057D", "\u054F\u056B\u0563\u0580\u0561\u0576", "\u0540\u0561\u0575\u056F", "\u0533\u0578\u057C", "\u0531\u0580\u0569\u0578\u0582\u0580", "\u0531\u0580\u0574\u0565\u0576", "\u0544\u0561\u0580\u056F", "\u0537\u0580\u056B\u056F", "\u0531\u0580\u0561\u0574", "\u054D\u0561\u0574\u057E\u0565\u056C", "\u0531\u0580\u0574\u0561\u0576", "\u0531\u056C\u0565\u0576", "\u0531\u0577\u0578\u057F", "\u0531\u0580\u0565\u0576", "\u0533\u0561\u0563\u056B\u056F", "\u0534\u0561\u0576\u056B\u0565\u056C", "\u0531\u0580\u0565\u0563", "\u054C\u0578\u0562\u0565\u0580\u057F", "\u0531\u0580\u057F\u0575\u0578\u0574", "\u0531\u0580\u057D\u0565\u0576", "\u0544\u056B\u0584\u0561\u0575\u0565\u056C", "\u054D\u0561\u0580\u0563\u056B\u057D", "\u0540\u0578\u057E\u0570\u0561\u0576\u0576\u0565\u057D", "\u054E\u0561\u0570\u0565", "\u053F\u0561\u0580\u0565\u0576", "\u0533\u0587\u0578\u0580\u0563", "\u053C\u0587\u0578\u0576", "\u054E\u0561\u0580\u0564\u0561\u0576", "\u054C\u0578\u0582\u0562\u0565\u0576", "\u054D\u0578\u0582\u0580\u0565\u0576", "\u0540\u0561\u056F\u0578\u0562", "\u0544\u0570\u0565\u0580", "\u0531\u0576\u0564\u0580\u0561\u0576\u056B\u056F", "\u0531\u057E\u0565\u057F", "\u0533\u0580\u056B\u0563\u0578\u0580", "\u054C\u0561\u0586\u0561\u0575\u0565\u056C", "\u0531\u056C\u0565\u0584\u057D\u0561\u0576\u0564\u0580", "\u0544\u0578\u0576\u0569\u0565", "\u0540\u0561\u0580\u0578\u0582\u0569\u0575\u0578\u0582\u0576", "\u0537\u0564\u0578\u0582\u0561\u0580\u0564", "\u0531\u056C\u0562\u0565\u0580\u057F", "\u0533\u0561\u0580\u056B\u056F", "\u0540\u0561\u0574\u056C\u0565\u057F"];
var A17 = ["\u0540\u0561\u0580\u0578\u0582\u0569\u0575\u0578\u0582\u0576\u0575\u0561\u0576", "\u054D\u0561\u0580\u0563\u057D\u0575\u0561\u0576", "\u0540\u0578\u057E\u0570\u0561\u0576\u0576\u056B\u057D\u0575\u0561\u0576", "\u0533\u0580\u056B\u0563\u0578\u0580\u0575\u0561\u0576", "\u053D\u0561\u0579\u0561\u057F\u0580\u0575\u0561\u0576", "\u0540\u0561\u056F\u0578\u0562\u0575\u0561\u0576", "\u054E\u0561\u0580\u0564\u0561\u0576\u0575\u0561\u0576", "\u054A\u0565\u057F\u0580\u0578\u057D\u0575\u0561\u0576", "\u053F\u0561\u0580\u0561\u057A\u0565\u057F\u0575\u0561\u0576", "\u0533\u0587\u0578\u0580\u0563\u0575\u0561\u0576", "\u0544\u056F\u0580\u057F\u0579\u0575\u0561\u0576", "\u0542\u0561\u0566\u0561\u0580\u0575\u0561\u0576", "\u0544\u0561\u0576\u0578\u0582\u056F\u0575\u0561\u0576", "\u054A\u0578\u0572\u0578\u057D\u0575\u0561\u0576", "\u0531\u057E\u0565\u057F\u056B\u057D\u0575\u0561\u0576", "\u0544\u0561\u0580\u057F\u056B\u0580\u0578\u057D\u0575\u0561\u0576", "\u054D\u0561\u0570\u0561\u056F\u0575\u0561\u0576", "\u0534\u0561\u057E\u0569\u0575\u0561\u0576", "\u0531\u057C\u0561\u0584\u0565\u056C\u0575\u0561\u0576", "\u0544\u0561\u0580\u0563\u0561\u0580\u0575\u0561\u0576", "\u0533\u0561\u056C\u057D\u057F\u0575\u0561\u0576", "\u0532\u0561\u0572\u0564\u0561\u057D\u0561\u0580\u0575\u0561\u0576", "\u054D\u057F\u0565\u0583\u0561\u0576\u0575\u0561\u0576", "\u0540\u0561\u0575\u0580\u0561\u057A\u0565\u057F\u0575\u0561\u0576", "\u054D\u056B\u0574\u0578\u0576\u0575\u0561\u0576", "\u0531\u057E\u0561\u0563\u0575\u0561\u0576", "\u0533\u0561\u057D\u057A\u0561\u0580\u0575\u0561\u0576", "\u0544\u0578\u0582\u0580\u0561\u0564\u0575\u0561\u0576", "\u0531\u057D\u0561\u057F\u0580\u0575\u0561\u0576", "\u0540\u0578\u057E\u057D\u0565\u0583\u0575\u0561\u0576", "\u0531\u0562\u0580\u0561\u0570\u0561\u0574\u0575\u0561\u0576", "\u0536\u0561\u0584\u0561\u0580\u0575\u0561\u0576", "\u0544\u0565\u056C\u0584\u0578\u0576\u0575\u0561\u0576", "\u0531\u056C\u0565\u0584\u057D\u0561\u0576\u0575\u0561\u0576", "\u0544\u056D\u056B\u0569\u0561\u0580\u0575\u0561\u0576", "\u0532\u0561\u0580\u057D\u0565\u0572\u0575\u0561\u0576", "\u0544\u0578\u057E\u057D\u056B\u057D\u0575\u0561\u0576", "\u053F\u056B\u0580\u0561\u056F\u0578\u057D\u0575\u0561\u0576", "\u0535\u0572\u056B\u0561\u0566\u0561\u0580\u0575\u0561\u0576", "\u0532\u0561\u0562\u0561\u0575\u0561\u0576", "\u0544\u0576\u0561\u0581\u0561\u056F\u0561\u0576\u0575\u0561\u0576", "\u0539\u0561\u0564\u0587\u0578\u057D\u0575\u0561\u0576", "\u0544\u056B\u0576\u0561\u057D\u0575\u0561\u0576", "\u0540\u0561\u0574\u0562\u0561\u0580\u0571\u0578\u0582\u0574\u0575\u0561\u0576", "\u0531\u0575\u057E\u0561\u0566\u0575\u0561\u0576", "\u0533\u0561\u0562\u0580\u056B\u0565\u056C\u0575\u0561\u0576", "\u0546\u0565\u0580\u057D\u056B\u057D\u0575\u0561\u0576"];
var L16 = ["\u0534\u0561\u057E\u056B\u0569", "\u0546\u0561\u0580\u0565\u056F", "\u0531\u056C\u0565\u0584\u057D", "\u054F\u056B\u0563\u0580\u0561\u0576", "\u0540\u0561\u0575\u056F", "\u0533\u0578\u057C", "\u0531\u0580\u0569\u0578\u0582\u0580", "\u0531\u0580\u0574\u0565\u0576", "\u0544\u0561\u0580\u056F", "\u0537\u0580\u056B\u056F", "\u0531\u0580\u0561\u0574", "\u054D\u0561\u0574\u057E\u0565\u056C", "\u0531\u0580\u0574\u0561\u0576", "\u0531\u056C\u0565\u0576", "\u0531\u0577\u0578\u057F", "\u0531\u0580\u0565\u0576", "\u0533\u0561\u0563\u056B\u056F", "\u0534\u0561\u0576\u056B\u0565\u056C", "\u0531\u0580\u0565\u0563", "\u054C\u0578\u0562\u0565\u0580\u057F", "\u0531\u0580\u057F\u0575\u0578\u0574", "\u0531\u0580\u057D\u0565\u0576", "\u0544\u056B\u0584\u0561\u0575\u0565\u056C", "\u054D\u0561\u0580\u0563\u056B\u057D", "\u0540\u0578\u057E\u0570\u0561\u0576\u0576\u0565\u057D", "\u054E\u0561\u0570\u0565", "\u053F\u0561\u0580\u0565\u0576", "\u0533\u0587\u0578\u0580\u0563", "\u053C\u0587\u0578\u0576", "\u054E\u0561\u0580\u0564\u0561\u0576", "\u054C\u0578\u0582\u0562\u0565\u0576", "\u054D\u0578\u0582\u0580\u0565\u0576", "\u0540\u0561\u056F\u0578\u0562", "\u0544\u0570\u0565\u0580", "\u0531\u0576\u0564\u0580\u0561\u0576\u056B\u056F", "\u0531\u057E\u0565\u057F", "\u0533\u0580\u056B\u0563\u0578\u0580", "\u054C\u0561\u0586\u0561\u0575\u0565\u056C", "\u0531\u056C\u0565\u0584\u057D\u0561\u0576\u0564\u0580", "\u0544\u0578\u0576\u0569\u0565", "\u0540\u0561\u0580\u0578\u0582\u0569\u0575\u0578\u0582\u0576", "\u0537\u0564\u0578\u0582\u0561\u0580\u0564", "\u0531\u056C\u0562\u0565\u0580\u057F", "\u0533\u0561\u0580\u056B\u056F", "\u0540\u0561\u0574\u056C\u0565\u057F"];
var C15 = ["{{name.prefix}} {{name.first_name}} {{name.last_name}}", "{{name.first_name}} {{name.last_name}} {{name.suffix}}", "{{name.first_name}} {{name.last_name}}", "{{name.male_first_name}} {{name.last_name}}", "{{name.female_first_name}} {{name.last_name}}"];
var E12 = { female_first_name: g19, first_name: w12, last_name: A17, male_first_name: L16, name: C15 };
var I12 = E12;
var P15 = ["+374 ## ######", "+374 ### #####"];
var F14 = { formats: P15 };
var k16 = F14;
var G15 = { title: "Armenian", separator: " \u0587 ", address: l20, color: x17, date: y18, internet: b19, lorem: N18, name: I12, phone_number: k16 };
var Re = G15;

// ../../node_modules/@faker-js/faker/dist/esm/chunk-Z627URUV.mjs
init_esm_shims();
var a21 = ["##", "#"];
var i21 = ["{{address.city_name}}"];
var n21 = ["Airmadidi", "Ampana", "Amurang", "Andolo", "Banggai", "Bantaeng", "Barru", "Bau-Bau", "Benteng", "Bitung", "Bolaang Uki", "Boroko", "Bulukumba", "Bungku", "Buol", "Buranga", "Donggala", "Enrekang", "Gorontalo", "Jeneponto", "Kawangkoan", "Kendari", "Kolaka", "Kotamobagu", "Kota Raha", "Kwandang", "Lasusua", "Luwuk", "Majene", "Makale", "Makassar", "Malili", "Mamasa", "Mamuju", "Manado", "Marisa", "Maros", "Masamba", "Melonguane", "Ondong Siau", "Palopo", "Palu", "Pangkajene", "Pare-Pare", "Parigi", "Pasangkayu", "Pinrang", "Polewali", "Poso", "Rantepao", "Ratahan", "Rumbia", "Sengkang", "Sidenreng", "Sigi Biromaru", "Sinjai", "Sunggu Minasa", "Suwawa", "Tahuna", "Takalar", "Tilamuta", "Toli Toli", "Tomohon", "Tondano", "Tutuyan", "Unaaha", "Wangi Wangi", "Wanggudu", "Watampone", "Watan Soppeng", "Ambarawa", "Anyer", "Bandung", "Bangil", "Banjar (Jawa Barat)", "Banjarnegara", "Bangkalan", "Bantul", "Banyumas", "Banyuwangi", "Batang", "Batu", "Bekasi", "Blitar", "Blora", "Bogor", "Bojonegoro", "Bondowoso", "Boyolali", "Bumiayu", "Brebes", "Caruban", "Cianjur", "Ciamis", "Cibinong", "Cikampek", "Cikarang", "Cilacap", "Cilegon", "Cirebon", "Demak", "Depok", "Garut", "Gresik", "Indramayu", "Jakarta", "Jember", "Jepara", "Jombang", "Kajen", "Karanganyar", "Kebumen", "Kediri", "Kendal", "Kepanjen", "Klaten", "Pelabuhan Ratu", "Kraksaan", "Kudus", "Kuningan", "Lamongan", "Lumajang", "Madiun", "Magelang", "Magetan", "Majalengka", "Malang", "Mojokerto", "Mojosari", "Mungkid", "Ngamprah", "Nganjuk", "Ngawi", "Pacitan", "Pamekasan", "Pandeglang", "Pare", "Pati", "Pasuruan", "Pekalongan", "Pemalang", "Ponorogo", "Probolinggo", "Purbalingga", "Purwakarta", "Purwodadi", "Purwokerto", "Purworejo", "Rangkasbitung", "Rembang", "Salatiga", "Sampang", "Semarang", "Serang", "Sidayu", "Sidoarjo", "Singaparna", "Situbondo", "Slawi", "Sleman", "Soreang", "Sragen", "Subang", "Sukabumi", "Sukoharjo", "Sumber", "Sumedang", "Sumenep", "Surabaya", "Surakarta", "Tasikmalaya", "Tangerang", "Tangerang Selatan", "Tegal", "Temanggung", "Tigaraksa", "Trenggalek", "Tuban", "Tulungagung", "Ungaran", "Wates", "Wlingi", "Wonogiri", "Wonosari", "Wonosobo", "Yogyakarta", "Atambua", "Baa", "Badung", "Bajawa", "Bangli", "Bima", "Denpasar", "Dompu", "Ende", "Gianyar", "Kalabahi", "Karangasem", "Kefamenanu", "Klungkung", "Kupang", "Labuhan Bajo", "Larantuka", "Lewoleba", "Maumere", "Mataram", "Mbay", "Negara", "Praya", "Raba", "Ruteng", "Selong", "Singaraja", "Soe", "Sumbawa Besar", "Tabanan", "Taliwang", "Tambolaka", "Tanjung", "Waibakul", "Waikabubak", "Waingapu", "Negara,Bali"];
var r21 = ["Indonesia"];
var e21 = ["#####"];
var t21 = ["Aceh", "Sumatera Utara", "Sumatera Barat", "Jambi", "Bangka Belitung", "Riau", "Kepulauan Riau", "Bengkulu", "Sumatera Selatan", "Lampung", "Banten", "DKI Jakarta", "Jawa Barat", "Jawa Tengah", "Jawa Timur", "Nusa Tenggara Timur", "DI Yogyakarta", "Bali", "Nusa Tenggara Barat", "Kalimantan Barat", "Kalimantan Tengah", "Kalimantan Selatan", "Kalimantan Timur", "Kalimantan Utara", "Sulawesi Selatan", "Sulawesi Utara", "Gorontalo", "Sulawesi Tengah", "Sulawesi Barat", "Sulawesi Tenggara", "Maluku", "Maluku Utara", "Papua Barat", "Papua", "Papua Tengah", "Papua Pegunungan", "Papua Selatan"];
var m21 = ["{{address.street_prefix}} {{name.first_name}}", "{{address.street_prefix}} {{name.last_name}}"];
var o21 = { normal: "{{address.street}} no {{address.buildingNumber}}", full: "{{address.street}} no {{address.buildingNumber}} {{address.secondaryAddress}}" };
var u21 = ["Ds.", "Dk.", "Gg.", "Jln.", "Jr.", "Kpg.", "Ki.", "Psr."];
var R13 = { building_number: a21, city: i21, city_name: n21, default_country: r21, postcode: e21, state: t21, street: m21, street_address: o21, street_prefix: u21 };
var s21 = R13;
var l21 = ["{{company.prefix}} {{name.last_name}}", "{{name.last_name}} {{company.suffix}}", "{{company.prefix}} {{name.last_name}} {{company.suffix}}"];
var d21 = ["PT", "CV", "UD", "PD", "Perum", "Fa", "Yayasan", "KKB"];
var g20 = ["(Persero) Tbk", "Tbk"];
var H15 = { name_patterns: l21, prefix: d21, suffix: g20 };
var p21 = H15;
var h21 = { wide: ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"], wide_context: ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"], abbr: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Ags", "Sep", "Okt", "Nov", "Des"], abbr_context: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Ags", "Sep", "Okt", "Nov", "Des"] };
var f21 = { wide: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"], wide_context: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"], abbr: ["Min", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"], abbr_context: ["Min", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"] };
var c21 = { month: h21, weekday: f21 };
var k17 = c21;
var y19 = ["com", "net", "org", "asia", "tv", "biz", "info", "in", "name", "co", "id", "ac.id", "sch.id", "go.id", "mil.id", "co.id", "or.id", "web.id", "my.id", "net.id", "biz.id", "desa.id", "ponpes.id"];
var S17 = ["gmail.com", "yahoo.com", "gmail.co.id", "yahoo.co.id"];
var L17 = { domain_suffix: y19, free_email: S17 };
var b20 = L17;
var P16 = ["Ade", "Agnes", "Ajeng", "Amalia", "Anita", "Ayu", "Aisyah", "Ana", "Ami", "Ani", "Azalea", "Aurora", "Alika", "Anastasia", "Amelia", "Almira", "Agustina", "Aulia", "Anggun", "Bella", "Betania", "Belinda", "Citra", "Cindy", "Chelsea", "Clara", "Cornelia", "Cinta", "Cinthia", "Ciaobella", "Cici", "Carla", "Calista", "Devi", "Dewi", "Dian", "Diah", "Diana", "Dina", "Dinda", "Dalima", "Dwi", "Dyah", "Ditya", "Eka", "Eva", "Endah", "Elisa", "Eli", "Ella", "Ellis", "Elma", "Elvina", "Fitria", "Fitriani", "Febi", "Faizah", "Farah", "Farhunnisa", "Fathonah", "Febrina", "Febriana", "Fitri", "Fara", "Gabriella", "Gasti", "Gawati", "Genta", "Ghaliyati", "Gina", "Gilda", "Ganesha", "Gadis", "Halima", "Hesti", "Hilda", "Hafshah", "Hamima", "Hana", "Hani", "Hasna", "Humaira", "Ika", "Indah", "Intan", "Irma", "Icha", "Ida", "Ifa", "Ilsa", "Ina", "Ira", "Iriana", "Irawati", "Indira", "Jamalia", "Janet", "Jane", "Julia", "Juli", "Jessica", "Jasmin", "Jelita", "Kamaria", "Kamila", "Kani", "Karen", "Karimah", "Kartika", "Kasiyah", "Keisha", "Kezia", "Kiandra", "Kayla", "Kania", "Kirana", "Lala", "Lalita", "Latika", "Laila", "Laras", "Lidya", "Lili", "Lintang", "Lestari", "Linda", "Laksita", "Maria", "Mala", "Maya", "Maida", "Maimunah", "Melinda", "Mila", "Mutia", "Michelle", "Malika", "Melani", "Nadia", "Nadine", "Nabila", "Natalia", "Novi", "Nova", "Nurul", "Nilam", "Najwa", "Nada", "Naura", "Nur", "Novita", "Nimas", "Noviana", "Olivia", "Ophelia", "Oni", "Oliva", "Padma", "Putri", "Paramita", "Paris", "Patricia", "Paulin", "Puput", "Puji", "Pia", "Puspa", "Puti", "Padmi", "Puspita", "Pratiwi", "Prita", "Qori", "Queen", "Ratih", "Ratna", "Restu", "Rini", "Rika", "Rina", "Rahayu", "Rahmi", "Rachel", "Raisa", "Raina", "Rahmawati", "Retno", "Ria", "Rosalina", "Rita", "Rosa", "Sarah", "Sari", "Siti", "Siska", "Suci", "Syahrini", "Septi", "Sadina", "Safina", "Sakura", "Salimah", "Salwa", "Salsabila", "Samiah", "Shania", "Sabrina", "Silvia", "Shakila", "Sintia", "Sartika", "Safira", "Sasha", "Sherly", "Talia", "Tami", "Tira", "Tiara", "Titin", "Tania", "Tina", "Tantri", "Tari", "Titi", "Tri", "Tsabita", "Uchita", "Unjani", "Ulya", "Uli", "Ulva", "Umi", "Usyi", "Vanya", "Vanesa", "Vivi", "Vera", "Vicky", "Victoria", "Violet", "Vania", "Winda", "Widya", "Wulan", "Wirda", "Wani", "Wulandari", "Yani", "Yessi", "Yulia", "Yuliana", "Yuni", "Yunita", "Yance", "Zahra", "Zalindra", "Zaenab", "Zulfa", "Zizi", "Zulaikha", "Zamira", "Zelda", "Zelaya"];
var w13 = ["Agustina", "Andriani", "Anggraini", "Aryani", "Astuti", "Ananda", "Anandya", "Azzahra", "Aqila", "Amanta", "Afifah", "Ardiyanti", "Andini", "Aurelia", "Aryanti", "Azizah", "Anjani", "Damayanti", "Elvina", "Fujiati", "Farida", "Fathina", "Fernanda", "Febrianti", "Handayani", "Hassanah", "Hartati", "Hasanah", "Haryanti", "Hariyah", "Hastuti", "Halimah", "Harini", "Juwita", "Jelita", "Kusmawati", "Kuswandari", "Kusuma", "Kahyang", "Laksmiwati", "Laksita", "Lestari", "Lailasari", "Leilani", "Mandasari", "Mardhiyah", "Mayasari", "Melani", "Mulyani", "Maryati", "Mahestri", "Maharani", "Maheswari", "Melinda", "Mustika", "Nurdiyanti", "Novitasari", "Nuraini", "Nasyidah", "Nasyiah", "Namaga", "Nathania", "Nurlaela", "Ningrum", "Palastri", "Pudjiastuti", "Puspasari", "Puspita", "Purwanti", "Pratiwi", "Purnawati", "Pertiwi", "Permata", "Prastuti", "Padmasari", "Putri", "Purnama", "Rahmawati", "Rahayu", "Riyanti", "Rahimah", "Ramadhani", "Rachmawati", "Suartini", "Sudiati", "Suryatmi", "Susanti", "Safitri", "Salsabilla", "Salma", "Saputri", "Saraswati", "Oktaviani", "Utami", "Usamah", "Usada", "Uyainah", "Yuniar", "Yuliarti", "Yulianti", "Yolanda", "Wahyuni", "Wijayanti", "Widiastuti", "Winarsih", "Wulandari", "Wastuti", "Zulaika", "Zahrah"];
var M16 = ["dr.", "drg.", "Dr.", "Hj."];
var A18 = ["Abyasa", "Ade", "Adhiarja", "Adiarja", "Adika", "Adikara", "Adinata", "Aditya", "Agus", "Ajiman", "Ajimat", "Ajimin", "Ajiono", "Akarsana", "Alambana", "Among", "Anggabaya", "Anom", "Argono", "Aris", "Arta", "Artanto", "Artawan", "Arsipatra", "Asirwada", "Asirwanda", "Aslijan", "Asmadi", "Asman", "Asmianto", "Asmuni", "Aswani", "Atma", "Atmaja", "Bagas", "Bagiya", "Bagus", "Bagya", "Bahuraksa", "Bahuwarna", "Bahuwirya", "Bajragin", "Bakda", "Bakiadi", "Bakianto", "Bakidin", "Bakijan", "Bakiman", "Bakiono", "Bakti", "Baktiadi", "Baktianto", "Baktiono", "Bala", "Balamantri", "Balangga", "Balapati", "Balidin", "Balijan", "Bambang", "Banara", "Banawa", "Banawi", "Bancar", "Budi", "Cagak", "Cager", "Cahyadi", "Cahyanto", "Cahya", "Cahyo", "Cahyono", "Caket", "Cakrabirawa", "Cakrabuana", "Cakrajiya", "Cakrawala", "Cakrawangsa", "Candra", "Chandra", "Candrakanta", "Capa", "Caraka", "Carub", "Catur", "Caturangga", "Cawisadi", "Cawisono", "Cawuk", "Cayadi", "Cecep", "Cemani", "Cemeti", "Cemplunk", "Cengkal", "Cengkir", "Dacin", "Dadap", "Dadi", "Dagel", "Daliman", "Dalimin", "Daliono", "Damar", "Damu", "Danang", "Daniswara", "Danu", "Danuja", "Dariati", "Darijan", "Darimin", "Darmaji", "Darman", "Darmana", "Darmanto", "Darsirah", "Dartono", "Daru", "Daruna", "Daryani", "Dasa", "Digdaya", "Dimas", "Dimaz", "Dipa", "Dirja", "Drajat", "Dwi", "Dono", "Dodo", "Edi", "Eka", "Elon", "Eluh", "Eman", "Emas", "Embuh", "Emong", "Empluk", "Endra", "Enteng", "Estiawan", "Estiono", "Eko", "Edison", "Edward", "Elvin", "Erik", "Emil", "Ega", "Emin", "Eja", "Gada", "Gadang", "Gading", "Gaduh", "Gaiman", "Galak", "Galang", "Galar", "Galih", "Galiono", "Galuh", "Galur", "Gaman", "Gamani", "Gamanto", "Gambira", "Gamblang", "Ganda", "Gandewa", "Gandi", "Ganep", "Gangsa", "Gangsar", "Ganjaran", "Gantar", "Gara", "Garan", "Garang", "Garda", "Gatot", "Gatra", "Ghani", "Gibran", "Gilang", "Hairyanto", "Hardana", "Hardi", "Harimurti", "Harja", "Harjasa", "Harjaya", "Harjo", "Harsana", "Harsanto", "Harsaya", "Hartaka", "Hartana", "Harto", "Hasta", "Heru", "Himawan", "Hadi", "Halim", "Hasim", "Hasan", "Hendra", "Hendri", "Heryanto", "Hamzah", "Hari", "Imam", "Indra", "Irwan", "Irsad", "Ikhsan", "Irfan", "Ian", "Ibrahim", "Ibrani", "Ismail", "Irnanto", "Ilyas", "Ibun", "Ivan", "Ikin", "Ihsan", "Jabal", "Jaeman", "Jaga", "Jagapati", "Jagaraga", "Jail", "Jaiman", "Jaka", "Jarwa", "Jarwadi", "Jarwi", "Jasmani", "Jaswadi", "Jati", "Jatmiko", "Jaya", "Jayadi", "Jayeng", "Jinawi", "Jindra", "Joko", "Jumadi", "Jumari", "Jamal", "Jamil", "Jais", "Jefri", "Johan", "Jono", "Kacung", "Kajen", "Kambali", "Kamidin", "Kariman", "Karja", "Karma", "Karman", "Karna", "Karsa", "Karsana", "Karta", "Kasiran", "Kasusra", "Kawaca", "Kawaya", "Kayun", "Kemba", "Kenari", "Kenes", "Kuncara", "Kunthara", "Kusuma", "Kadir", "Kala", "Kalim", "Kurnia", "Kanda", "Kardi", "Karya", "Kasim", "Kairav", "Kenzie", "Kemal", "Kamal", "Koko", "Labuh", "Laksana", "Lamar", "Lanang", "Langgeng", "Lanjar", "Lantar", "Lega", "Legawa", "Lembah", "Liman", "Limar", "Luhung", "Lukita", "Luluh", "Lulut", "Lurhur", "Luwar", "Luwes", "Latif", "Lasmanto", "Lukman", "Luthfi", "Leo", "Luis", "Lutfan", "Lasmono", "Laswi", "Mahesa", "Makara", "Makuta", "Manah", "Maras", "Margana", "Mariadi", "Marsudi", "Martaka", "Martana", "Martani", "Marwata", "Maryadi", "Maryanto", "Mitra", "Mujur", "Mulya", "Mulyanto", "Mulyono", "Mumpuni", "Muni", "Mursita", "Murti", "Mustika", "Maman", "Mahmud", "Mahdi", "Mahfud", "Malik", "Muhammad", "Mustofa", "Marsito", "Mursinin", "Nalar", "Naradi", "Nardi", "Niyaga", "Nrima", "Nugraha", "Nyana", "Narji", "Nasab", "Nasrullah", "Nasim", "Najib", "Najam", "Nyoman", "Olga", "Ozy", "Omar", "Opan", "Oskar", "Oman", "Okto", "Okta", "Opung", "Paiman", "Panca", "Pangeran", "Pangestu", "Pardi", "Parman", "Perkasa", "Praba", "Prabu", "Prabawa", "Prabowo", "Prakosa", "Pranata", "Pranawa", "Prasetya", "Prasetyo", "Prayitna", "Prayoga", "Prayogo", "Purwadi", "Purwa", "Purwanto", "Panji", "Pandu", "Prima", "Putu", "Raden", "Raditya", "Raharja", "Rama", "Rangga", "Reksa", "Respati", "Rusman", "Rosman", "Rahmat", "Rahman", "Rendy", "Reza", "Rizki", "Ridwan", "Rudi", "Radit", "Radika", "Rafi", "Rafid", "Raihan", "Salman", "Saadat", "Saiful", "Surya", "Slamet", "Samsul", "Soleh", "Simon", "Sabar", "Sabri", "Sidiq", "Satya", "Setya", "Saka", "Sakti", "Taswir", "Tedi", "Teddy", "Taufan", "Taufik", "Tomi", "Tasnim", "Teguh", "Tasdik", "Timbul", "Tirta", "Tirtayasa", "Tri", "Tugiman", "Umar", "Usman", "Uda", "Umay", "Unggul", "Utama", "Umaya", "Upik", "Viktor", "Vino", "Vinsen", "Vero", "Vega", "Viman", "Virman", "Wahyu", "Wira", "Wisnu", "Wadi", "Wardi", "Warji", "Waluyo", "Wakiman", "Wage", "Wardaya", "Warsa", "Warsita", "Warta", "Wasis", "Wawan", "Xanana", "Yahya", "Yusuf", "Yosef", "Yono", "Yoga", "Zaki", "Zakir", "Zulfikar"];
var K14 = ["Adriansyah", "Ardianto", "Anggriawan", "Ahmad", "Adhitama", "Abiputra", "Antoni", "Alamsyah", "Airlangga", "Abimanyu", "Agustian", "Arifin", "Ardana", "Aswandi", "Budiman", "Budiyanto", "Bagaskara", "Damanik", "Darmawan", "Dirgantara", "Darojat", "Firmansyah", "Firgantoro", "Fabian", "Febian", "Faresta", "Gunarto", "Gunawan", "Hardiansyah", "Habibi", "Hakim", "Halim", "Haryanto", "Hidayat", "Hidayanto", "Hutagalung", "Hutapea", "Hutasoit", "Himawan", "Hermawan", "Herlambang", "Handoko", "Haikal", "Irawan", "Iswahyudi", "Irfandi", "Kuswoyo", "Januar", "Jailani", "Kurniawan", "Kusumo", "Latupono", "Lazuardi", "Lesmana", "Maheswara", "Mahendra", "Mustofa", "Mansur", "Mandala", "Megantara", "Maulana", "Maryadi", "Mangunsong", "Manullang", "Marpaung", "Marbun", "Mahardika", "Narpati", "Natsir", "Nugroho", "Najmudin", "Nashiruddin", "Nainggolan", "Nababan", "Napitupulu", "Nugraha", "Nanda", "Oktavian", "Oktovian", "Pangestu", "Putra", "Pranowo", "Prabowo", "Pratama", "Prasetya", "Prasetyo", "Pradana", "Pradipta", "Prakasa", "Permadi", "Prasasta", "Prayoga", "Perdana", "Purnawarman", "Purnama", "Purwadi", "Ramadan", "Rajasa", "Rajata", "Rendra", "Rayhan", "Rahardian", "Saptono", "Santoso", "Saputra", "Saefullah", "Setiawan", "Suryono", "Suwarno", "Siregar", "Sihombing", "Salahudin", "Samosir", "Saragih", "Sihotang", "Simanjuntak", "Sinaga", "Simbolon", "Sitompul", "Sitorus", "Sirait", "Situmorang", "Syahreza", "Sabian", "Satria", "Supriyanto", "Sudrajat", "Tampubolon", "Thamrin", "Tamba", "Tarihoran", "Utama", "Uwais", "Wahyudin", "Waluyo", "Wibowo", "Winarno", "Wibisono", "Wijaya", "Widodo", "Wacana", "Waskita", "Wasita", "Wicaksono", "Wardana", "Yulianto", "Yanuar", "Yudhistira", "Zulkarnain"];
var B17 = ["dr.", "drg.", "Dr.", "Drs.", "Ir.", "H."];
var D20 = ["{{name.male_first_name}} {{name.male_last_name}}", "{{name.male_last_name}} {{name.male_first_name}}", "{{name.male_first_name}} {{name.male_first_name}} {{name.male_last_name}}", "{{name.female_first_name}} {{name.female_last_name}}", "{{name.female_first_name}} {{name.male_last_name}}", "{{name.female_last_name}} {{name.female_first_name}}", "{{name.female_first_name}} {{name.female_first_name}} {{name.female_last_name}}"];
var j13 = [];
var J11 = ["S.Ked", "S.Gz", "S.Pt", "S.IP", "S.E.I", "S.E.", "S.Kom", "S.H.", "S.T.", "S.Pd", "S.Psi", "S.I.Kom", "S.Sos", "S.Farm", "M.M.", "M.Kom.", "M.TI.", "M.Pd", "M.Farm", "M.Ak"];
var C16 = { female_first_name: P16, female_last_name: w13, female_title: M16, male_first_name: A18, male_last_name: K14, male_title: B17, name: D20, prefix: j13, suffix: J11 };
var _16 = C16;
var
var G16 = { formats: T14 };
var N19 = G16;
var W9 = { title: "Indonesian", address: s21, company: p21, date: k17, internet: b20, name: _16, phone_number: N19 };
var Za = W9;

// ../../node_modules/@faker-js/faker/dist/esm/chunk-HA3GPRO5.mjs
init_esm_shims();
var a22 = ["###", "##", "#"];
var i22 = ["{{address.city_prefix}} {{name.first_name}} {{address.city_suffix}}", "{{address.city_prefix}} {{name.first_name}}", "{{name.first_name}} {{address.city_suffix}}", "{{name.last_name}} {{address.city_suffix}}"];
var o22 = ["Agli\xE8", "Andezeno", "Barbania", "Brosso", "Buriasco", "Caluso", "Cantoira", "Carmagnola", "Cavour", "Chiaverano", "Ciconio", "Coazze", "Cumiana", "Feletto", "Front", "Giaveno", "Grugliasco", "Lauriano", "Locana", "Lusigli\xE8", "Mathi", "Mompantero", "Nichelino", "Novalesa", "Oulx", "Perrero", "Pinerolo", "Pomaretto", "Pramollo", "Quassolo", "Rivara", "Rondissone", "Rueglio", "Santena", "Sparone", "Usseaux", "Varisella", "Vidracco", "Vinovo", "Volvera", "Balocco", "Campertogno", "Cervatto", "Cravagliana", "Formigliana", "Lamporo", "Moncrivello", "Pila", "Rassa", "Rossa", "Scopa", "Valduggia", "Vocca", "Biandrate", "Briona", "Comignago", "Galliate", "Invorio", "Mezzomerico", "Pisano", "Sillavengo", "Terdobbiate", "Vinzaglio", "Alto", "Barge", "Benevello", "Bosia", "Brondello", "Canosio", "Cartignano", "Castino", "Cervere", "Clavesana", "Demonte", "Envie", "Frassino", "Gorzegno", "Isasca", "Macra", "Marmora", "Montanera", "Murello", "Nucetto", "Pagno", "Peveragno", "Pocapaglia", "Revello", "Robilante", "Roddi", "Saliceto", "Sanfr\xE8", "Sinio", "Treiso", "Venasca", "Vignolo", "Albugnano", "Bruno", "Canelli", "Castell'Alfero", "Coazzolo", "Cortazzone", "Fontanile", "Maretto", "Monale", "Quaranti", "Scurzolengo", "Tigliole", "Viale", "Balzola", "Bosio", "Carezzano", "Casasco", "Cereseto", "Dernice", "Frugarolo", "Giarole", "Lerma", "Molare", "Montaldeo", "Mornese", "Ottiglio", "Pasturana", "Prasco", "Rivarone", "Solero", "Terruggia", "Trisobbio", "Villalvernia", "Bioglio", "Camburzano", "Cerrione", "Donato", "Magnano", "Mottalciata", "Piedicavallo", "Pray", "Tollegno", "Verrone", "Lessona", "Baceno", "Bognanco", "Caprezzo", "Crodo", "Ghiffa", "Macugnaga", "Miazzina", "Omegna", "Premia", "Trasquera", "Allein", "Avise", "Brissogne", "Chamois", "Cogne", "Etroubles", "Gressan", "Issime", "Morgex", "Pollein", "Quart", "Saint-Denis", "Saint-Rh\xE9my-en-Bosses", "Valpelline", "Villeneuve", "Azzate", "Besnate", "Bregano", "Brusimpiano", "Caravate", "Castelseprio", "Clivio", "Cugliate-Fabiasco", "Dumenza", "Gemonio", "Inarzo", "Luino", "Marnate", "Morazzone", "Saltrio", "Ternate", "Albiolo", "Barni", "Bregnano", "Cabiate", "Carbonate", "Cavargna", "Dizzasco", "Faloppio", "Guanzate", "Lasnigo", "Luisago", "Moltrasio", "Musso", "Pigra", "Pusiano", "Schignano", "Torno", "Zelbio", "Aprica", "Caiolo", "Chiavenna", "Dazio", "Gordona", "Livigno", "Morbegno", "Poggiridenti", "Sernio", "Tartano", "Valdidentro", "Abbiategrasso", "Binasco", "Buscate", "Carpiano", "Cisliano", "Corsico", "Gaggiano", "Inzago", "Magenta", "Melzo", "Nosate", "Pantigliate", "Rescaldina", "Sedriano", "Tribiano", "Vignate", "Albino", "Ardesio", "Barbata", "Bossico", "Brumano", "Capizzone", "Cerete", "Colzate", "Cusio", "Fontanella", "Gandosso", "Gorno", "Lallio", "Martinengo", "Mozzo", "Pagazzano", "Parzanica", "Piazzatorre", "Pradalunga", "Ranica", "Rovetta", "Selvino", "Sovere", "Taleggio", "Valbondione", "Valtorta", "Viadanica", "Zogno", "Acquafredda", "Artogne", "Berlingo", "Botticino", "Breno", "Calvisano", "Castelcovati", "Cellatica", "Cigole", "Cologne", "Edolo", "Gambara", "Gottolengo", "Iseo", "Lograto", "Maclodio", "Manerbio", "Milzano", "Muscoline", "Odolo", "Ospitaletto", "Passirano", "Poncarale", "Preseglie", "Sellero", "Sulzano", "Trenzano", "Piancogno", "Barbianello", "Borgarello", "Calvignano", "Casteggio", "Cervesina", "Copiano", "Fortunago", "Garlasco", "Langosco", "Lungavilla", "Menconico", "Nicorvo", "Retorbido", "Rosasco", "Sommo", "Vidigulfo", "Zerbo", "Azzanello", "Capergnanica", "Castelleone", "Crema", "Fiesco", "Grontardo", "Montodine", "Pandino", "Ricengo", "Soresina", "Tornata", "Voltido", "Casalromano", "Commessaggio", "Gonzaga", "Marmirolo", "Ostiglia", "Quistello", "Sabbioneta", "Viadana", "Barzago", "Bulciago", "Casatenovo", "Cremeno", "Erve", "Merate", "Morterone", "Pagnona", "Premana", "Sirtori", "Valmadrera", "Codogno", "Galgagnano", "Maccastorna", "Meleti", "Sordio", "Barlassina", "Briosco", "Concorezzo", "Lesmo", "Renate", "Triuggio", "Caponago", "Avelengo", "Brennero", "Castelbello-Ciardes", "Dobbiaco", "Gais", "Laion", "Luson", "Merano", "Naz-Sciaves", "Plaus", "Rasun-Anterselva", "Scena", "Stelvio", "Tirolo", "Vandoies", "Vipiteno", "Andalo", "Bieno", "Caldes", "Capriana", "Cavareno", "Cis", "Dambel", "Fierozzo", "Giustino", "Lavis", "Massimeno", "Mezzolombardo", "Nogaredo", "Pinzolo", "Ronzone", "Sanzeno", "Sover", "Storo", "Terragnolo", "Trambileno", "Vignola-Falesina", "Altavalle", "Novella", "Belfiore", "Buttapietra", "Concamarise", "Garda", "Legnago", "Oppeano", "Ronc\xE0", "Sommacampagna", "Trevenzuolo", "Zevio", "Altissimo", "Breganze", "Caltrano", "Castegnero", "Creazzo", "Gallio", "Longare", "Montegaldella", "Orgiano", "Roana", "Santorso", "Solagna", "Trissino", "Villaverla", "Valbrenta", "Gosaldo", "Sospirolo", "Casier", "Codogn\xE8", "Fontanelle", "Loria", "Montebelluna", "Paese", "Preganziol", "Sarmede", "Vedelago", "Cavarzere", "Eraclea", "Martellago", "Pianiga", "Spinea", "Agna", "Barbona", "Campodarsego", "Cartura", "Conselve", "Gazzo", "Loreggia", "Monselice", "Ponso", "Saccolongo", "Stanghella", "Tribano", "Vigonza", "Calto", "Ceneselli", "Gaiba", "Melara", "Rosolina", "Villadose", "Artegna", "Bordano", "Cassacco", "Comeglians", "Enemonzo", "Grimacco", "Mortegliano", "Pagnacco", "Pontebba", "Premariacco", "Ravascletto", "Rigolato", "Sedegliano", "Talmassons", "Torreano", "Varmo", "Sappada", "Monfalcone", "Turriaco", "Brugnera", "Claut", "Fontanafredda", "Porcia", "Spilimbergo", "Airole", "Bajardo", "Castellaro", "Chiusavecchia", "Dolcedo", "Ospedaletti", "Pontedassio", "Sanremo", "Triora", "Vessalico", "Arnasco", "Bormida", "Ceriale", "Giustenice", "Mallare", "Nasino", "Pallare", "Roccavignale", "Stellanello", "Vendone", "Bogliasco", "Carasco", "Cogoleto", "Fontanigorda", "Lorsica", "Mignanego", "Rapallo", "Rovegno", "Torriglia", "Zoagli", "Framura", "Pignone", "Zignago", "Bobbio", "Cerignale", "Gazzola", "Rottofreno", "Zerba", "Bore", "Compiano", "Fontevivo", "Palanzano", "Terenzo", "Varsi", "Brescello", "Castellarano", "Gattatico", "Poviglio", "Toano", "Bomporto", "Fanano", "Maranello", "Montefiorino", "Polinago", "Sestola", "Argelato", "Camugnano", "Fontanelice", "Marzabotto", "Valsamoggia", "Comacchio", "Tresignana", "Conselice", "Cesena", "Modigliana", "Sarsina", "Gemmano", "Saludecio", "Pennabilli", "Comano", "Montignoso", "Zeri", "Capannori", "Massarosa", "Pietrasanta", "Agliana", "Montale", "Uzzano", "Empoli", "Impruneta", "Pelago", "Signa", "Capoliveri", "Piombino", "Bientina", "Cascina", "Montescudaio", "Ponsacco", "Vicopisano", "Bucine", "Lucignano", "Monteriggioni", "Poggibonsi", "Sinalunga", "Campagnatico", "Gavorrano", "Pitigliano", "Montemurlo", "Bettona", "Collazzone", "Gubbio", "Norcia", "Pietralunga", "Sigillo", "Trevi", "Allerona", "Baschi", "Guardea", "Narni", "Porano", "Fermignano", "Lunano", "Montefelcino", "Petriano", "Sassofeltrio", "Vallefoglia", "Camerano", "Corinaldo", "Jesi", "Montemarciano", "Polverigi", "Staffolo", "Caldarola", "Colmurano", "Gagliole", "Montecassiano", "Muccia", "Sarnano", "Urbisaglia", "Castignano", "Force", "Montegallo", "Ripatransone", "Altidona", "Grottazzolina", "Montegranaro", "Ortezzano", "Smerillo", "Bomarzo", "Capranica", "Corchiano", "Graffignano", "Monterosi", "Proceno", "Tuscania", "Vetralla", "Amatrice", "Cantalice", "Collegiove", "Cottanello", "Leonessa", "Montebuono", "Selci", "Vacone", "Ariccia", "Canterano", "Ciciliano", "Formello", "Gorga", "Licenza", "Mentana", "Moricone", "Nettuno", "Pomezia", "Saracinesco", "Vallepietra", "Zagarolo", "Fiumicino", "Pontinia", "Sabaudia", "Terracina", "Alvito", "Arnara", "Casalattico", "Ceccano", "Esperia", "Fontechiari", "Morolo", "Picinisco", "Ripi", "Settefrati", "Terelle", "Vallerotonda", "Aielli", "Barete", "Calascio", "Capistrello", "Castellafiume", "Introdacqua", "Navelli", "Ortucchio", "Pescina", "Rivisondoli", "Scoppito", "Trasacco", "Arsita", "Campli", "Cermignano", "Cortino", "Notaresco", "Alanno", "Civitaquana", "Farindola", "Nocciano", "Picciano", "Salle", "Vicoli", "Atessa", "Casacanditella", "Castelguidone", "Crecchio", "Fraine", "Gessopalena", "Lentella", "Monteferrante", "Orsogna", "Palombaro", "Poggiofiorito", "Roccamontepiano", "Tollo", "Vacri", "Fallo", "Casacalenda", "Guardiaregia", "Lucito", "Monacilioni", "Oratino", "Portocannone", "Roccavivara", "Tavenna", "Ururi", "Filignano", "Macchiagodena", "Pescolanciano", "Roccamandolfi", "Venafro", "Aversa", "Capodrise", "Casaluce", "Ciorlano", "Francolise", "Liberi", "Parete", "Pratella", "Succivo", "Casapesenna", "Arpaia", "Bucciano", "Castelpagano", "Circello", "Forchia", "Montesarchio", "Paupisi", "Puglianello", "Vitulano", "Arzano", "Caivano", "Casamarciano", "Cicciano", "Frattamaggiore", "Liveri", "Nola", "Portici", "Ercolano", "Saviano", "Andretta", "Baiano", "Calitri", "Castelfranci", "Domicella", "Gesualdo", "Lapio", "Mercogliano", "Montella", "Nusco", "Quadrelle", "Senerchia", "Sturno", "Torrioni", "Venticano", "Agropoli", "Aquara", "Battipaglia", "Caggiano", "Cannalonga", "Ceraso", "Corbara", "Futani", "Laurito", "Montecorice", "Padula", "Perito", "Polla", "Ravello", "Rofrano", "Sapri", "Serramezzana", "Torchiara", "Valva", "Apricena", "Carlantino", "Faeto", "Manfredonia", "Serracapriola", "Vieste", "Alberobello", "Bitonto", "Conversano", "Molfetta", "Putignano", "Turi", "Crispiano", "Laterza", "Massafra", "Palagianello", "Cisternino", "Oria", "Alliste", "Collepasso", "Diso", "Giurdignano", "Lizzanello", "Melendugno", "Neviano", "Palmariggi", "Ruffano", "Secl\xEC", "Sternatia", "Taviano", "Ugento", "Presicce-Acquarica", "Trani", "Armento", "Baragiano", "Calvera", "Castelmezzano", "Fardella", "Latronico", "Marsicovetere", "Montemilone", "Picerno", "Rapolla", "Rotonda", "Spinoso", "Trecchina", "Ginestra", "Calciano", "Garaguso", "Pomarico", "Tursi", "Aieta", "Amendolara", "Bocchigliero", "Campana", "Castrolibero", "Cerisano", "Cleto", "Diamante", "Fuscaldo", "Lattarico", "Maier\xE0", "Marzi", "Mottafollone", "Panettieri", "Pietrafitta", "Rose", "Scigliano", "Verbicaro", "Amaroni", "Belcastro", "Conflenti", "Decollatura", "Girifalco", "Maida", "Montauro", "Petrizzi", "Squillace", "Zagarise", "Bagaladi", "Bovalino", "Canolo", "Cimin\xE0", "Delianuova", "Giffone", "Maropati", "Monasterace", "Plat\xEC", "Roghudi", "Seminara", "Stignano", "Carfizzi", "Mesoraca", "Strongoli", "Briatico", "Dinami", "Filogaso", "Limbadi", "Nicotera", "Ricadi", "Spadola", "Vazzano", "Calatafimi-Segesta", "Gibellina", "Poggioreale", "Vita", "Aliminusa", "Bisacquino", "Caltavuturo", "Castelbuono", "Cinisi", "Lascari", "Montelepre", "Roccamena", "Trabia", "Villabate", "Antillo", "Castell'Umberto", "Falcone", "Frazzan\xF2", "Graniti", "Limina", "Mandanici", "Mistretta", "Patti", "Roccafiorita", "Savoca", "Tortorici", "Venetico", "Bivona", "Cammarata", "Comitini", "Montallegro", "Ravanusa", "Bompensiere", "Gela", "Mussomeli", "Sommatino", "Assoro", "Cerami", "Pietraperzia", "Calatabiano", "Linguaglossa", "Mineo", "Pedara", "Sant'Alfio", "Vizzini", "Comiso", "Buccheri", "Floridia", "Pachino", "Aggius", "Banari", "Bono", "Buddus\xF2", "Cargeghe", "Cossoine", "Ittireddu", "Mara", "Nule", "Osilo", "Pattada", "Romana", "Sennori", "Torralba", "Telti", "Stintino", "Atzara", "Bitti", "Dorgali", "Gairo", "Irgoli", "Loculi", "Mamoiada", "Olzai", "Orgosolo", "Osidda", "Posada", "Sorgono", "Tonara", "Urzulei", "Quartucciu", "Albagiara", "Assolo", "Bidon\xEC", "Cuglieri", "Gonnostramatza", "Mogoro", "Nurachi", "Paulilatino", "Seneghe", "Simala", "Sorradile", "Uras", "Siapiccia", "Laconi", "Suni", "Barrali", "Carbonia", "Dolianova", "Esterzili", "Gergei", "Gonnesa", "Iglesias", "Monastir", "Nurallao", "Ortacesus", "Portoscuso", "Santadi", "Senorb\xEC", "Setzu", "Silius", "Tuili", "Villacidro", "Villaperuccio", "Villaspeciosa"];
var e22 = ["San", "Borgo", "Sesto", "Quarto", "Settimo"];
var n22 = ["a mare", "lido", "ligure", "del friuli", "salentino", "calabro", "veneto", "nell'emilia", "umbro", "laziale", "terme", "sardo"];
var r22 = ["Afghanistan", "Albania", "Algeria", "American Samoa", "Andorra", "Angola", "Anguilla", "Antartide (territori a sud del 60\xB0 parallelo)", "Antigua e Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Bielorussia", "Belgio", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bosnia e Herzegovina", "Botswana", "Bouvet Island (Bouvetoya)", "Brasile", "Territorio dell'arcipelago indiano", "Isole Vergini Britanniche", "Brunei Darussalam", "Bulgaria", "Burkina Faso", "Burundi", "Cambogia", "Cameroon", "Canada", "Capo Verde", "Isole Cayman", "Repubblica Centrale Africana", "Chad", "Cile", "Cina", "Isola di Pasqua", "Isola di Cocos (Keeling)", "Colombia", "Comoros", "Congo", "Isole Cook", "Costa Rica", "Costa d'Avorio", "Croazia", "Cuba", "Cipro", "Repubblica Ceca", "Danimarca", "Gibuti", "Repubblica Dominicana", "Equador", "Egitto", "El Salvador", "Guinea Equatoriale", "Eritrea", "Estonia", "Etiopia", "Isole Faroe", "Isole Falkland (Malvinas)", "Fiji", "Finlandia", "Francia", "Guyana Francese", "Polinesia Francese", "Territori Francesi del sud", "Gabon", "Gambia", "Georgia", "Germania", "Ghana", "Gibilterra", "Grecia", "Groenlandia", "Grenada", "Guadalupa", "Guam", "Guatemala", "Guernsey", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Heard Island and McDonald Islands", "Citt\xE0 del Vaticano", "Honduras", "Hong Kong", "Ungheria", "Islanda", "India", "Indonesia", "Iran", "Iraq", "Irlanda", "Isola di Man", "Israele", "Italia", "Giamaica", "Giappone", "Jersey", "Giordania", "Kazakhstan", "Kenya", "Kiribati", "Korea", "Kuwait", "Republicca Kirgiza", "Repubblica del Laos", "Latvia", "Libano", "Lesotho", "Liberia", "Libyan Arab Jamahiriya", "Liechtenstein", "Lituania", "Lussemburgo", "Macao", "Macedonia", "Madagascar", "Malawi", "Malesia", "Maldive", "Mali", "Malta", "Isole Marshall", "Martinica", "Mauritania", "Mauritius", "Mayotte", "Messico", "Micronesia", "Moldova", "Principato di Monaco", "Mongolia", "Montenegro", "Montserrat", "Marocco", "Mozambico", "Myanmar", "Namibia", "Nauru", "Nepal", "Antille Olandesi", "Olanda", "Nuova Caledonia", "Nuova Zelanda", "Nicaragua", "Niger", "Nigeria", "Niue", "Isole Norfolk", "Northern Mariana Islands", "Norvegia", "Oman", "Pakistan", "Palau", "Palestina", "Panama", "Papua Nuova Guinea", "Paraguay", "Peru", "Filippine", "Pitcairn Islands", "Polonia", "Portogallo", "Porto Rico", "Qatar", "Reunion", "Romania", "Russia", "Rwanda", "San Bartolomeo", "Sant'Elena", "Saint Kitts and Nevis", "Saint Lucia", "Saint Martin", "Saint Pierre and Miquelon", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe", "Arabia Saudita", "Senegal", "Serbia", "Seychelles", "Sierra Leone", "Singapore", "Slovenia", "Isole Solomon", "Somalia", "Sud Africa", "Georgia del sud e South Sandwich Islands", "Spagna", "Sri Lanka", "Sudan", "Suriname", "Svalbard & Jan Mayen Islands", "Swaziland", "Svezia", "Svizzera", "Siria", "Taiwan", "Tajikistan", "Tanzania", "Tailandia", "Timor-Leste", "Togo", "Tokelau", "Tonga", "Trinidad e Tobago", "Tunisia", "Turchia", "Turkmenistan", "Isole di Turks and Caicos", "Tuvalu", "Uganda", "Ucraina", "Emirati Arabi Uniti", "Regno Unito", "Stati Uniti d'America", "United States Minor Outlying Islands", "Isole Vergini Statunitensi", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Wallis and Futuna", "Western Sahara", "Yemen", "Zambia", "Zimbabwe"];
var l22 = ["Italia"];
var t22 = ["#####"];
var s22 = ["Appartamento ##", "Piano #"];
var c22 = ["Agrigento", "Alessandria", "Ancona", "Aosta", "Arezzo", "Ascoli Piceno", "Asti", "Avellino", "Bari", "Barletta-Andria-Trani", "Belluno", "Benevento", "Bergamo", "Biella", "Bologna", "Bolzano", "Brescia", "Brindisi", "Cagliari", "Caltanissetta", "Campobasso", "Carbonia-Iglesias", "Caserta", "Catania", "Catanzaro", "Chieti", "Como", "Cosenza", "Cremona", "Crotone", "Cuneo", "Enna", "Fermo", "Ferrara", "Firenze", "Foggia", "Forl\xEC-Cesena", "Frosinone", "Genova", "Gorizia", "Grosseto", "Imperia", "Isernia", "La Spezia", "L'Aquila", "Latina", "Lecce", "Lecco", "Livorno", "Lodi", "Lucca", "Macerata", "Mantova", "Massa-Carrara", "Matera", "Messina", "Milano", "Modena", "Monza e della Brianza", "Napoli", "Novara", "Nuoro", "Olbia-Tempio", "Oristano", "Padova", "Palermo", "Parma", "Pavia", "Perugia", "Pesaro e Urbino", "Pescara", "Piacenza", "Pisa", "Pistoia", "Pordenone", "Potenza", "Prato", "Ragusa", "Ravenna", "Reggio Calabria", "Reggio Emilia", "Rieti", "Rimini", "Roma", "Rovigo", "Salerno", "Medio Campidano", "Sassari", "Savona", "Siena", "Siracusa", "Sondrio", "Taranto", "Teramo", "Terni", "Torino", "Ogliastra", "Trapani", "Trento", "Treviso", "Trieste", "Udine", "Varese", "Venezia", "Verbano-Cusio-Ossola", "Vercelli", "Verona", "Vibo Valentia", "Vicenza", "Viterbo"];
var d22 = ["AG", "AL", "AN", "AO", "AR", "AP", "AT", "AV", "BA", "BT", "BL", "BN", "BG", "BI", "BO", "BZ", "BS", "BR", "CA", "CL", "CB", "CI", "CE", "CT", "CZ", "CH", "CO", "CS", "CR", "KR", "CN", "EN", "FM", "FE", "FI", "FG", "FC", "FR", "GE", "GO", "GR", "IM", "IS", "SP", "AQ", "LT", "LE", "LC", "LI", "LO", "LU", "MC", "MN", "MS", "MT", "ME", "MI", "MO", "MB", "NA", "NO", "NU", "OT", "OR", "PD", "PA", "PR", "PV", "PG", "PU", "PE", "PC", "PI", "PT", "PN", "PZ", "PO", "RG", "RA", "RC", "RE", "RI", "RN", "RM", "RO", "SA", "VS", "SS", "SV", "SI", "SR", "SO", "TA", "TE", "TR", "TO", "OG", "TP", "TN", "TV", "TS", "UD", "VA", "VE", "VB", "VC", "VR", "VV", "VI", "VT"];
var m22 = ["{{address.street_suffix}} {{name.first_name}}", "{{address.street_suffix}} {{name.last_name}}"];
var u22 = { normal: "{{address.street}} {{address.buildingNumber}}", full: "{{address.street}} {{address.buildingNumber}}, {{address.secondaryAddress}}" };
var g21 = ["Piazza", "Strada", "Via", "Borgo", "Contrada", "Rotonda", "Incrocio"];
var Z8 = { building_number: a22, city: i22, city_name: o22, city_prefix: e22, city_suffix: n22, country: r22, default_country: l22, postcode: t22, secondary_address: s22, state: c22, state_abbr: d22, street: m22, street_address: u22, street_suffix: g21 };
var C17 = Z8;
var A19 = ["24 ore", "24/7", "terza generazione", "quarta generazione", "quinta generazione", "sesta generazione", "asimmetrica", "asincrona", "background", "bi-direzionale", "biforcata", "bottom-line", "coerente", "coesiva", "composita", "sensibile al contesto", "basta sul contesto", "basata sul contenuto", "dedicata", "didattica", "direzionale", "discreta", "dinamica", "eco-centrica", "esecutiva", "esplicita", "full-range", "globale", "euristica", "alto livello", "olistica", "omogenea", "ibrida", "impattante", "incrementale", "intangibile", "interattiva", "intermediaria", "locale", "logistica", "massimizzata", "metodica", "mission-critical", "mobile", "modulare", "motivazionale", "multimedia", "multi-tasking", "nazionale", "neutrale", "nextgeneration", "non-volatile", "object-oriented", "ottima", "ottimizzante", "radicale", "real-time", "reciproca", "regionale", "responsiva", "scalabile", "secondaria", "stabile", "statica", "sistematica", "sistemica", "tangibile", "terziaria", "uniforme", "valore aggiunto"];
var z17 = ["valore aggiunto", "verticalizzate", "proattive", "forti", "rivoluzionari", "scalabili", "innovativi", "intuitivi", "strategici", "e-business", "mission-critical", "24/7", "globali", "B2B", "B2C", "granulari", "virtuali", "virali", "dinamiche", "magnetiche", "web", "interattive", "sexy", "back-end", "real-time", "efficienti", "front-end", "distributivi", "estensibili", "mondiali", "open-source", "cross-platform", "sinergiche", "out-of-the-box", "enterprise", "integrate", "di impatto", "wireless", "trasparenti", "next-generation", "cutting-edge", "visionari", "plug-and-play", "collaborative", "olistiche", "ricche"];
var M17 = ["partnerships", "comunit\xE0", "ROI", "soluzioni", "e-services", "nicchie", "tecnologie", "contenuti", "supply-chains", "convergenze", "relazioni", "architetture", "interfacce", "mercati", "e-commerce", "sistemi", "modelli", "schemi", "reti", "applicazioni", "metriche", "e-business", "funzionalit\xE0", "esperienze", "webservices", "metodologie"];
var S18 = ["implementate", "utilizzo", "integrate", "ottimali", "evolutive", "abilitate", "reinventate", "aggregate", "migliorate", "incentivate", "monetizzate", "sinergizzate", "strategiche", "deploy", "marchi", "accrescitive", "target", "sintetizzate", "spedizioni", "massimizzate", "innovazione", "guida", "estensioni", "generate", "exploit", "transizionali", "matrici", "ricontestualizzate"];
var p22 = ["adattiva", "avanzata", "migliorata", "assimilata", "automatizzata", "bilanciata", "centralizzata", "compatibile", "configurabile", "cross-platform", "decentralizzata", "digitalizzata", "distribuita", "piccola", "ergonomica", "esclusiva", "espansa", "estesa", "fondamentale", "orizzontale", "implementata", "innovativa", "integrata", "intuitiva", "inversa", "gestita", "obbligatoria", "monitorata", "multi-canale", "multi-laterale", "open-source", "operativa", "ottimizzata", "organica", "persistente", "polarizzata", "proattiva", "programmabile", "progressiva", "reattiva", "riallineata", "ricontestualizzata", "ridotta", "robusta", "sicura", "condivisibile", "stand-alone", "switchabile", "sincronizzata", "sinergica", "totale", "universale", "user-friendly", "versatile", "virtuale", "visionaria"];
var b21 = ["{{name.last_name}} {{company.suffix}}", "{{name.last_name}}-{{name.last_name}} {{company.suffix}}", "{{name.last_name}}, {{name.last_name}} e {{name.last_name}} {{company.suffix}}"];
var P17 = ["Abilit\xE0", "Access", "Adattatore", "Algoritmo", "Alleanza", "Analizzatore", "Applicazione", "Approccio", "Architettura", "Archivio", "Intelligenza artificiale", "Array", "Attitudine", "Benchmark", "Capacit\xE0", "Sfida", "Circuito", "Collaborazione", "Complessit\xE0", "Concetto", "Conglomerato", "Contingenza", "Core", "Database", "Data-warehouse", "Definizione", "Emulazione", "Codifica", "Criptazione", "Firmware", "Flessibilit\xE0", "Previsione", "Frame", "framework", "Funzione", "Funzionalit\xE0", "Interfaccia grafica", "Hardware", "Help-desk", "Gerarchia", "Hub", "Implementazione", "Infrastruttura", "Iniziativa", "Installazione", "Set di istruzioni", "Interfaccia", "Soluzione internet", "Intranet", "Conoscenza base", "Matrici", "Matrice", "Metodologia", "Middleware", "Migrazione", "Modello", "Moderazione", "Monitoraggio", "Moratoria", "Rete", "Architettura aperta", "Sistema aperto", "Orchestrazione", "Paradigma", "Parallelismo", "Policy", "Portale", "Struttura di prezzo", "Prodotto", "Produttivit\xE0", "Progetto", "Proiezione", "Protocollo", "Servizio clienti", "Software", "Soluzione", "Standardizzazione", "Strategia", "Struttura", "Successo", "Sovrastruttura", "Supporto", "Sinergia", "Task-force", "Finestra temporale", "Strumenti", "Utilizzazione", "Sito web", "Forza lavoro"];
var G17 = ["SPA", "e figli", "Group", "s.r.l."];
var U11 = { adjective: A19, bs_adjective: z17, bs_noun: M17, bs_verb: S18, descriptor: p22, name_patterns: b21, noun: P17, suffix: G17 };
var v16 = U11;
var B18 = ["com", "net", "org", "it"];
var f22 = ["gmail.com", "yahoo.com", "hotmail.com", "email.it", "libero.it", "yahoo.it"];
var x18 = { domain_suffix: B18, free_email: f22 };
var D21 = x18;
var L18 = ["Abbondanza", "Acilia", "Ada", "Adalberta", "Adalgisa", "Addolorata", "Adelaide", "Adelasia", "Adele", "Adelina", "Adina", "Adria", "Adriana", "Agape", "Agata", "Agnese", "Agostina", "Aida", "Alba", "Alberta", "Albina", "Alcina", "Alda", "Alessandra", "Alessia", "Alfonsa", "Alfreda", "Alice", "Alida", "Alina", "Allegra", "Alma", "Altea", "Amalia", "Amanda", "Amata", "Ambra", "Amelia", "Amina", "Anastasia", "Anatolia", "Ancilla", "Andromeda", "Angela", "Angelica", "Anita", "Anna", "Annabella", "Annagrazia", "Annamaria", "Annunziata", "Antea", "Antigone", "Antonella", "Antonia", "Apollina", "Apollonia", "Appia", "Arabella", "Argelia", "Arianna", "Armida", "Artemisa", "Asella", "Asia", "Assunta", "Astrid", "Atanasia", "Aurelia", "Aurora", "Ausilia", "Ausiliatrice", "Ave", "Aza", "Azelia", "Azzurra", "Babila", "Bambina", "Barbara", "Bartolomea", "Basilia", "Bassilla", "Batilda", "Beata", "Beatrice", "Belina", "Benedetta", "Beniamina", "Benigna", "Benvenuta", "Berenice", "Bernadetta", "Betta", "Bianca", "Bibiana", "Bice", "Brigida", "Brigitta", "Bruna", "Brunilde", "Calogera", "Calpurnia", "Camelia", "Camilla", "Candida", "Capitolina", "Carina", "Carla", "Carlotta", "Carmela", "Carmen", "Carola", "Carolina", "Casilda", "Casimira", "Cassandra", "Cassiopea", "Catena", "Caterina", "Cecilia", "Celeste", "Celinia", "Chiara", "Cinzia", "Cirilla", "Clara", "Claudia", "Clelia", "Clemenzia", "Cleo", "Cleofe", "Cleopatra", "Cloe", "Clorinda", "Cointa", "Colomba", "Concetta", "Consolata", "Cora", "Cordelia", "Corinna", "Cornelia", "Cosima", "Costanza", "Crescenzia", "Cristiana", "Cristina", "Crocefissa", "Cronida", "Cunegonda", "Cuzia", "Dafne", "Dalida", "Dalila", "Damiana", "Daniela", "Daria", "Deanna", "Debora", "Degna", "Delfina", "Delia", "Delinda", "Delizia", "Demetria", "Deodata", "Desdemona", "Desiderata", "Devota", "Diamante", "Diana", "Dianora", "Diletta", "Dina", "Diodata", "Dionisia", "Doda", "Dolores", "Domenica", "Donata", "Donatella", "Donna", "Dora", "Dorotea", "Druina", "Dulina", "Ebe", "Edda", "Edelberga", "Editta", "Edvige", "Egizia", "Egle", "Elaide", "Elda", "Elena", "Eleonora", "Elettra", "Eliana", "Elide", "Elimena", "Elisa", "Elisabetta", "Elisea", "Ella", "Eloisa", "Elsa", "Elvia", "Elvira", "Emanuela", "Emilia", "Emiliana", "Emma", "Enimia", "Enrica", "Eracla", "Ermelinda", "Ermenegarda", "Ermenegilda", "Erminia", "Ernesta", "Ersilia", "Esmeralda", "Estella", "Ester", "Esterina", "Eufemia", "Eufrasia", "Eugenia", "Eulalia", "Euridice", "Eusebia", "Eutalia", "Eva", "Evangelina", "Evelina", "Fabiana", "Fabiola", "Fatima", "Fausta", "Federica", "Fedora", "Felicia", "Felicita", "Fernanda", "Fiammetta", "Filippa", "Filomena", "Fiordaliso", "Fiore", "Fiorella", "Fiorenza", "Flaminia", "Flavia", "Flaviana", "Flora", "Floriana", "Floridia", "Florina", "Foca", "Fortunata", "Fosca", "Franca", "Francesca", "Fulvia", "Gabriella", "Gaia", "Galatea", "Gaudenzia", "Gelsomina", "Geltrude", "Gemma", "Generosa", "Genesia", "Genoveffa", "Germana", "Gertrude", "Ghita", "Giacinta", "Giada", "Gigliola", "Gilda", "Giliola", "Ginevra", "Gioacchina", "Gioconda", "Gioia", "Giorgia", "Giovanna", "Gisella", "Giuditta", "Giulia", "Giuliana", "Giulitta", "Giuseppa", "Giuseppina", "Giusta", "Glenda", "Gloria", "Godeberta", "Godiva", "Grazia", "Graziana", "Graziella", "Greta", "Griselda", "Guenda", "Guendalina", "Gundelinda", "Ianira", "Ida", "Idea", "Iginia", "Ilaria", "Ilda", "Ildegarda", "Ildegonda", "Ileana", "Ilenia", "Ilia", "Ilva", "Imelda", "Immacolata", "Incoronata", "Ines", "Innocenza", "Iolanda", "Iole", "Iona", "Ione", "Ionne", "Irene", "Iride", "Iris", "Irma", "Irmina", "Isa", "Isabella", "Iside", "Isidora", "Isotta", "Italia", "Ivetta", "Lara", "Laura", "Lavinia", "Lea", "Leda", "Lelia", "Lena", "Leonia", "Leonilda", "Leontina", "Letizia", "Lia", "Liana", "Liberata", "Liboria", "Licia", "Lidania", "Lidia", "Liliana", "Linda", "Lisa", "Livia", "Liviana", "Lodovica", "Loredana", "Lorella", "Lorena", "Lorenza", "Loretta", "Loriana", "Luana", "Luce", "Lucia", "Luciana", "Lucilla", "Lucrezia", "Ludovica", "Luigia", "Luisa", "Luminosa", "Luna", "Macaria", "Maddalena", "Mafalda", "Magda", "Maida", "Manuela", "Mara", "Marana", "Marcella", "Mareta", "Margherita", "Maria", "Marianna", "Marica", "Mariella", "Marilena", "Marina", "Marinella", "Marinetta", "Marisa", "Marita", "Marta", "Martina", "Maruta", "Marzia", "Massima", "Matilde", "Maura", "Melania", "Melissa", "Melitina", "Menodora", "Mercede", "Messalina", "Mia", "Michela", "Milena", "Mimma", "Mina", "Minerva", "Minervina", "Miranda", "Mirella", "Miriam", "Mirta", "Moira", "Monica", "Morena", "Morgana", "Nadia", "Natalia", "Natalina", "Neiva", "Nerea", "Nicla", "Nicoletta", "Nilde", "Nina", "Ninfa", "Nives", "Noemi", "Norina", "Norma", "Novella", "Nuccia", "Nunziata", "Odetta", "Odilia", "Ofelia", "Olga", "Olimpia", "Olinda", "Olivia", "Oliviera", "Ombretta", "Ondina", "Onesta", "Onorata", "Onorina", "Orchidea", "Oriana", "Orietta", "Ornella", "Orsola", "Orsolina", "Ortensia", "Osanna", "Otilia", "Ottilia", "Palladia", "Palmazio", "Palmira", "Pamela", "Paola", "Patrizia", "Pelagia", "Penelope", "Perla", "Petronilla", "Pia", "Piera", "Placida", "Polissena", "Porzia", "Prisca", "Priscilla", "Proserpina", "Prospera", "Prudenzia", "Quartilla", "Quieta", "Quiteria", "Rachele", "Raffaella", "Rainelda", "Rebecca", "Regina", "Renata", "Riccarda", "Rina", "Rita", "Roberta", "Romana", "Romilda", "Romina", "Romola", "Rosa", "Rosalia", "Rosalinda", "Rosamunda", "Rosanna", "Rosita", "Rosmunda", "Rossana", "Rossella", "Rufina", "Saba", "Sabina", "Sabrina", "Samanta", "Samona", "Sandra", "Santina", "Sara", "Savina", "Scolastica", "Sebastiana", "Seconda", "Secondina", "Sefora", "Selene", "Selvaggia", "Semiramide", "Serafina", "Serena", "Severa", "Sibilla", "Sidonia", "Silvana", "Silvia", "Simona", "Simonetta", "Siria", "Smeralda", "Soave", "Sofia", "Sofronia", "Solange", "Sonia", "Speranza", "Stefania", "Stella", "Susanna", "Sveva", "Tabita", "Tamara", "Tarquinia", "Tarsilla", "Taziana", "Tea", "Tecla", "Telica", "Teodata", "Teodolinda", "Teodora", "Teresa", "Teudosia", "Tina", "Tiziana", "Tosca", "Trasea", "Tullia", "Ugolina", "Ulfa", "Uliva", "Unna", "Vala", "Valentina", "Valeria", "Valeriana", "Vanda", "Vanessa", "Vanna", "Venera", "Veneranda", "Venere", "Venusta", "Vera", "Verdiana", "Verena", "Veriana", "Veridiana", "Veronica", "Viliana", "Vilma", "Vincenza", "Viola", "Violante", "Virginia", "Vissia", "Vittoria", "Viviana", "Wanda", "Zabina", "Zaira", "Zama", "Zanita", "Zarina", "Zelinda", "Zenobia", "Zita", "Zoe", "Zosima"];
var F15 = ["Abaco", "Abbondanzio", "Abbondio", "Abdone", "Abelardo", "Abele", "Abenzio", "Abibo", "Abramio", "Abramo", "Acacio", "Acario", "Accursio", "Achille", "Acilio", "Aciscolo", "Acrisio", "Adalardo", "Adalberto", "Adalfredo", "Adalgiso", "Adalrico", "Adamo", "Addo", "Adelardo", "Adelberto", "Adelchi", "Adelfo", "Adelgardo", "Adelmo", "Adeodato", "Adolfo", "Adone", "Adriano", "Adrione", "Afro", "Agabio", "Agamennone", "Agapito", "Agazio", "Agenore", "Agesilao", "Agostino", "Agrippa", "Aiace", "Aidano", "Aimone", "Aladino", "Alamanno", "Alano", "Alarico", "Albano", "Alberico", "Alberto", "Albino", "Alboino", "Albrico", "Alceo", "Alceste", "Alcibiade", "Alcide", "Alcino", "Aldo", "Aldobrando", "Aleandro", "Aleardo", "Aleramo", "Alessandro", "Alessio", "Alfio", "Alfonso", "Alfredo", "Algiso", "Alighiero", "Almerigo", "Almiro", "Aloisio", "Alvaro", "Alviero", "Alvise", "Amabile", "Amadeo", "Amando", "Amanzio", "Amaranto", "Amato", "Amatore", "Amauri", "Ambrogio", "Ambrosiano", "Amedeo", "Amelio", "Amerigo", "Amico", "Amilcare", "Amintore", "Amleto", "Amone", "Amore", "Amos", "Ampelio", "Anacleto", "Andrea", "Angelo", "Aniceto", "Aniello", "Annibale", "Ansaldo", "Anselmo", "Ansovino", "Antelmo", "Antero", "Antimo", "Antino", "Antioco", "Antonello", "Antonio", "Apollinare", "Apollo", "Apuleio", "Aquilino", "Araldo", "Aratone", "Arcadio", "Archimede", "Archippo", "Arcibaldo", "Ardito", "Arduino", "Aresio", "Argimiro", "Argo", "Arialdo", "Ariberto", "Ariele", "Ariosto", "Aris", "Aristarco", "Aristeo", "Aristide", "Aristione", "Aristo", "Aristofane", "Aristotele", "Armando", "Arminio", "Arnaldo", "Aronne", "Arrigo", "Arturo", "Ascanio", "Asdrubale", "Asimodeo", "Assunto", "Asterio", "Astianatte", "Ataleo", "Atanasio", "Athos", "Attila", "Attilano", "Attilio", "Auberto", "Audace", "Augusto", "Aureliano", "Aurelio", "Auro", "Ausilio", "Averardo", "Azeglio", "Azelio", "Bacco", "Baldassarre", "Balderico", "Baldo", "Baldomero", "Baldovino", "Barbarigo", "Bardo", "Bardomiano", "Barnaba", "Barsaba", "Barsimeo", "Bartolo", "Bartolomeo", "Basileo", "Basilio", "Bassiano", "Bastiano", "Battista", "Beato", "Bellino", "Beltramo", "Benedetto", "Beniamino", "Benigno", "Benito", "Benvenuto", "Berardo", "Berengario", "Bernardo", "Beronico", "Bertoldo", "Bertolfo", "Biagio", "Bibiano", "Bindo", "Bino", "Birino", "Bonagiunta", "Bonaldo", "Bonaventura", "Bonavita", "Bonifacio", "Bonito", "Boris", "Bortolo", "Brancaleone", "Brando", "Bruno", "Bruto", "Caino", "Caio", "Calanico", "Calcedonio", "Callisto", "Calogero", "Camillo", "Candido", "Cantidio", "Canziano", "Carlo", "Carmelo", "Carmine", "Caronte", "Carponio", "Casimiro", "Cassiano", "Cassio", "Casto", "Cataldo", "Catullo", "Cecco", "Cecilio", "Celso", "Cesare", "Cesario", "Cherubino", "Chiaffredo", "Cino", "Cipriano", "Cirano", "Ciriaco", "Cirillo", "Cirino", "Ciro", "Clarenzio", "Claudio", "Cleandro", "Clemente", "Cleonico", "Climaco", "Clinio", "Clodomiro", "Clodoveo", "Colmanno", "Colmazio", "Colombano", "Colombo", "Concetto", "Concordio", "Corbiniano", "Coreno", "Coriolano", "Cornelio", "Coronato", "Corrado", "Cosimo", "Cosma", "Costante", "Costantino", "Costanzo", "Cremenzio", "Crescente", "Crescenzio", "Crespignano", "Crispino", "Cristaldo", "Cristiano", "Cristoforo", "Crocefisso", "Cuniberto", "Cupido", "Daciano", "Dacio", "Dagoberto", "Dalmazio", "Damaso", "Damiano", "Damocle", "Daniele", "Danilo", "Danio", "Dante", "Dario", "Davide", "Davino", "Decimo", "Delfino", "Demetrio", "Democrito", "Demostene", "Deodato", "Desiderato", "Desiderio", "Didimo", "Diego", "Dino", "Diocleziano", "Diodoro", "Diogene", "Diomede", "Dione", "Dionigi", "Dionisio", "Divo", "Dodato", "Domenico", "Domezio", "Domiziano", "Donatello", "Donato", "Doriano", "Doroteo", "Duccio", "Duilio", "Durante", "Eberardo", "Ecclesio", "Edgardo", "Edilberto", "Edmondo", "Edoardo", "Efisio", "Efrem", "Egeo", "Egidio", "Eginardo", "Egisto", "Eleuterio", "Elia", "Eliano", "Elifio", "Eligio", "Elio", "Eliodoro", "Eliseo", "Elita", "Elmo", "Elogio", "Elpidio", "Elvezio", "Elvino", "Emanuele", "Emidio", "Emiliano", "Emilio", "Emmerico", "Empirio", "Endrigo", "Enea", "Enecone", "Ennio", "Enrico", "Enzo", "Eraclide", "Eraldo", "Erardo", "Erasmo", "Erberto", "Ercolano", "Ercole", "Erenia", "Eriberto", "Erico", "Ermanno", "Ermenegildo", "Ermes", "Ermete", "Ermilo", "Erminio", "Ernesto", "Eros", "Esa\uFFFD", "Esuperio", "Eterie", "Ettore", "Euclide", "Eufebio", "Eufemio", "Eufronio", "Eugenio", "Eusebio", "Euseo", "Eustorgio", "Eustosio", "Eutalio", "Evaldo", "Evandro", "Evaristo", "Evasio", "Everardo", "Evidio", "Evodio", "Evremondo", "Ezechiele", "Ezio", "Fabiano", "Fabio", "Fabrizio", "Famiano", "Fausto", "Fazio", "Fedele", "Federico", "Fedro", "Felice", "Feliciano", "Ferdinando", "Fermiano", "Fermo", "Fernando", "Ferruccio", "Festo", "Fidenziano", "Fidenzio", "Filiberto", "Filippo", "Filomeno", "Fiorenziano", "Fiorenzo", "Flaviano", "Flavio", "Fleano", "Floriano", "Folco", "Fortunato", "Fosco", "Francesco", "Franco", "Frido", "Frontiniano", "Fulberto", "Fulgenzio", "Fulvio", "Furio", "Furseo", "Fuscolo", "Gabino", "Gabriele", "Gaetano", "Gaglioffo", "Gaio", "Galdino", "Galeazzo", "Galileo", "Gallicano", "Gandolfo", "Garimberto", "Gaspare", "Gastone", "Gaudenzio", "Gaudino", "Gautiero", "Gavino", "Gedeone", "Geminiano", "Generoso", "Genesio", "Gennaro", "Gentile", "Genziano", "Gerardo", "Gerasimo", "Geremia", "Gerino", "Germano", "Gerolamo", "Geronimo", "Geronzio", "Gervasio", "Gesualdo", "Gherardo", "Giacinto", "Giacobbe", "Giacomo", "Giadero", "Giambattista", "Gianbattista", "Giancarlo", "Giandomenico", "Gianfranco", "Gianluca", "Gianluigi", "Gianmarco", "Gianmaria", "Gianmario", "Gianni", "Gianpaolo", "Gianpiero", "Gianpietro", "Gianuario", "Giasone", "Gilberto", "Gildo", "Gillo", "Gineto", "Gino", "Gioacchino", "Giobbe", "Gioberto", "Giocondo", "Gioele", "Giona", "Gionata", "Giordano", "Giorgio", "Giosu\uFFFD", "Giosuele", "Giotto", "Giovanni", "Giove", "Gioventino", "Giovenzio", "Girardo", "Girolamo", "Giuda", "Giuliano", "Giulio", "Giuseppe", "Giustiniano", "Giusto", "Glauco", "Goffredo", "Golia", "Gomberto", "Gondulfo", "Gonerio", "Gonzaga", "Gordiano", "Gosto", "Gottardo", "Graciliano", "Grato", "Graziano", "Gregorio", "Grimaldo", "Gualberto", "Gualtiero", "Guelfo", "Guerrino", "Guglielmo", "Guiberto", "Guido", "Guiscardo", "Gumesindo", "Gustavo", "Iacopo", "Iacopone", "Iago", "Icaro", "Icilio", "Ido", "Iginio", "Igino", "Ignazio", "Igor", "Ilario", "Ildebrando", "Ildefonso", "Illidio", "Illuminato", "Immacolato", "Indro", "Innocente", "Innocenzo", "Iorio", "Ippocrate", "Ippolito", "Ireneo", "Isacco", "Isaia", "Ischirione", "Isidoro", "Ismaele", "Italo", "Ivan", "Ivano", "Ivanoe", "Ivo", "Ivone", "Ladislao", "Lamberto", "Lancilotto", "Landolfo", "Lanfranco", "Lapo", "Laurentino", "Lauriano", "Lautone", "Lavinio", "Lazzaro", "Leandro", "Leo", "Leonardo", "Leone", "Leonida", "Leonio", "Leonzio", "Leopardo", "Leopoldo", "Letterio", "Liberato", "Liberatore", "Liberio", "Libero", "Liberto", "Liborio", "Lidio", "Lieto", "Lino", "Lisandro", "Livino", "Livio", "Lodovico", "Loreno", "Lorenzo", "Loris", "Luca", "Luciano", "Lucio", "Ludano", "Ludovico", "Luigi", "Macario", "Maccabeo", "Maffeo", "Maggiorino", "Magno", "Maiorico", "Malco", "Mamante", "Mancio", "Manetto", "Manfredo", "Manilio", "Manlio", "Mansueto", "Manuele", "Marcello", "Marciano", "Marco", "Mariano", "Marino", "Mario", "Marolo", "Martino", "Marzio", "Massimiliano", "Massimo", "Matroniano", "Matteo", "Mattia", "Maurilio", "Maurizio", "Mauro", "Medardo", "Medoro", "Melanio", "Melchiade", "Melchiorre", "Melezio", "Menardo", "Menelao", "Meneo", "Mennone", "Mercurio", "Metello", "Metrofane", "Michelangelo", "Michele", "Milo", "Minervino", "Mirco", "Mirko", "Mirocleto", "Misaele", "Modesto", "Monaldo", "Monitore", "Moreno", "Mos\uFFFD", "Muziano", "Namazio", "Napoleone", "Narciso", "Narseo", "Narsete", "Natale", "Nazario", "Nazzareno", "Nazzaro", "Neopolo", "Neoterio", "Nereo", "Neri", "Nestore", "Nicarete", "Nicea", "Niceforo", "Niceto", "Nicezio", "Nico", "Nicodemo", "Nicola", "Nicol\uFFFD", "Niniano", "Nino", "No\uFFFD", "Norberto", "Nostriano", "Nunzio", "Oddone", "Oderico", "Odidone", "Odorico", "Olimpio", "Olindo", "Oliviero", "Omar", "Omero", "Onesto", "Onofrio", "Onorino", "Onorio", "Orazio", "Orenzio", "Oreste", "Orfeo", "Orio", "Orlando", "Oronzo", "Orsino", "Orso", "Ortensio", "Oscar", "Osmondo", "Osvaldo", "Otello", "Ottaviano", "Ottavio", "Ottone", "Ovidio", "Paciano", "Pacifico", "Pacomio", "Palatino", "Palladio", "Pammachio", "Pancario", "Pancrazio", "Panfilo", "Pantaleo", "Pantaleone", "Paolo", "Pardo", "Paride", "Parmenio", "Pasquale", "Paterniano", "Patrizio", "Patroclo", "Pauside", "Peleo", "Pellegrino", "Pericle", "Perseo", "Petronio", "Pierangelo", "Piergiorgio", "Pierluigi", "Piermarco", "Piero", "Piersilvio", "Pietro", "Pio", "Pippo", "Placido", "Platone", "Plinio", "Plutarco", "Polidoro", "Polifemo", "Pollione", "Pompeo", "Pomponio", "Ponziano", "Ponzio", "Porfirio", "Porziano", "Postumio", "Prassede", "Priamo", "Primo", "Prisco", "Privato", "Procopio", "Prospero", "Protasio", "Proteo", "Prudenzio", "Publio", "Pupolo", "Pusicio", "Quarto", "Quasimodo", "Querano", "Quintiliano", "Quintilio", "Quintino", "Quinziano", "Quinzio", "Quirino", "Radolfo", "Raffaele", "Raide", "Raimondo", "Rainaldo", "Ramiro", "Raniero", "Ranolfo", "Reginaldo", "Regolo", "Remigio", "Remo", "Remondo", "Renato", "Renzo", "Respicio", "Ricario", "Riccardo", "Richelmo", "Rinaldo", "Rino", "Robaldo", "Roberto", "Rocco", "Rodiano", "Rodolfo", "Rodrigo", "Rolando", "Rolfo", "Romano", "Romeo", "Romero", "Romoaldo", "Romolo", "Romualdo", "Rosario", "Rubiano", "Rufino", "Rufo", "Ruggero", "Ruperto", "Rutilo", "Sabato", "Sabazio", "Sabele", "Sabino", "Saffiro", "Saffo", "Saladino", "Salom\uFFFD", "Salomone", "Salustio", "Salvatore", "Salvo", "Samuele", "Sandro", "Sansone", "Sante", "Santo", "Sapiente", "Sarbello", "Saturniano", "Saturnino", "Saul", "Saverio", "Savino", "Sebastiano", "Secondiano", "Secondo", "Semplicio", "Sempronio", "Senesio", "Senofonte", "Serafino", "Serapione", "Sergio", "Servidio", "Serviliano", "Sesto", "Settimio", "Settimo", "Severiano", "Severino", "Severo", "Sico", "Sicuro", "Sidonio", "Sigfrido", "Sigismondo", "Silvano", "Silverio", "Silvestro", "Silvio", "Simeone", "Simone", "Sinesio", "Sinfronio", "Sireno", "Siriano", "Siricio", "Sirio", "Siro", "Sisto", "Soccorso", "Socrate", "Solocone", "Sostene", "Sosteneo", "Sostrato", "Spano", "Spartaco", "Speranzio", "Stanislao", "Stefano", "Stiliano", "Stiriaco", "Surano", "Sviturno", "Taddeo", "Taide", "Tammaro", "Tancredi", "Tarcisio", "Tarso", "Taziano", "Tazio", "Telchide", "Telemaco", "Temistocle", "Teobaldo", "Teodoro", "Teodosio", "Teodoto", "Teogene", "Terenzio", "Terzo", "Tesauro", "Tesifonte", "Tibaldo", "Tiberio", "Tiburzio", "Ticone", "Timoteo", "Tirone", "Tito", "Tiziano", "Tizio", "Tobia", "Tolomeo", "Tommaso", "Torquato", "Tosco", "Tranquillo", "Tristano", "Tulliano", "Tullio", "Turi", "Turibio", "Tussio", "Ubaldo", "Ubertino", "Uberto", "Ugo", "Ugolino", "Uguccione", "Ulberto", "Ulderico", "Ulfo", "Ulisse", "Ulpiano", "Ulrico", "Ulstano", "Ultimo", "Umberto", "Umile", "Uranio", "Urbano", "Urdino", "Uriele", "Ursicio", "Ursino", "Ursmaro", "Valente", "Valentino", "Valeriano", "Valerico", "Valerio", "Valfredo", "Valfrido", "Valtena", "Valter", "Varo", "Vasco", "Vedasto", "Velio", "Venanzio", "Venceslao", "Venerando", "Venerio", "Ventura", "Venustiano", "Venusto", "Verano", "Verecondo", "Verenzio", "Verulo", "Vespasiano", "Vezio", "Vidiano", "Vidone", "Vilfredo", "Viliberto", "Vincenzo", "Vindonio", "Vinebaldo", "Vinfrido", "Vinicio", "Virgilio", "Virginio", "Virone", "Viscardo", "Vitale", "Vitalico", "Vito", "Vittore", "Vittoriano", "Vittorio", "Vivaldo", "Viviano", "Vladimiro", "Vodingo", "Volfango", "Vulmaro", "Vulpiano", "Walter", "Zabedeo", "Zaccaria", "Zaccheo", "Zanobi", "Zefiro", "Zena", "Zenaide", "Zenebio", "Zeno", "Zenobio", "Zenone", "Zetico", "Zoilo", "Zosimo", "Abbondanza", "Acilia", "Ada", "Adalberta", "Adalgisa", "Addolorata", "Adelaide", "Adelasia", "Adele", "Adelina", "Adina", "Adria", "Adriana", "Agape", "Agata", "Agnese", "Agostina", "Aida", "Alba", "Alberta", "Albina", "Alcina", "Alda", "Alessandra", "Alessia", "Alfonsa", "Alfreda", "Alice", "Alida", "Alina", "Allegra", "Alma", "Altea", "Amalia", "Amanda", "Amata", "Ambra", "Amelia", "Amina", "Anastasia", "Anatolia", "Ancilla", "Andromeda", "Angela", "Angelica", "Anita", "Anna", "Annabella", "Annagrazia", "Annamaria", "Annunziata", "Antea", "Antigone", "Antonella", "Antonia", "Apollina", "Apollonia", "Appia", "Arabella", "Argelia", "Arianna", "Armida", "Artemisa", "Asella", "Asia", "Assunta", "Astrid", "Atanasia", "Aurelia", "Aurora", "Ausilia", "Ausiliatrice", "Ave", "Aza", "Azelia", "Azzurra", "Babila", "Bambina", "Barbara", "Bartolomea", "Basilia", "Bassilla", "Batilda", "Beata", "Beatrice", "Belina", "Benedetta", "Beniamina", "Benigna", "Benvenuta", "Berenice", "Bernadetta", "Betta", "Bianca", "Bibiana", "Bice", "Brigida", "Brigitta", "Bruna", "Brunilde", "Calogera", "Calpurnia", "Camelia", "Camilla", "Candida", "Capitolina", "Carina", "Carla", "Carlotta", "Carmela", "Carmen", "Carola", "Carolina", "Casilda", "Casimira", "Cassandra", "Cassiopea", "Catena", "Caterina", "Cecilia", "Celeste", "Celinia", "Chiara", "Cinzia", "Cirilla", "Clara", "Claudia", "Clelia", "Clemenzia", "Cleo", "Cleofe", "Cleopatra", "Cloe", "Clorinda", "Cointa", "Colomba", "Concetta", "Consolata", "Cora", "Cordelia", "Corinna", "Cornelia", "Cosima", "Costanza", "Crescenzia", "Cristiana", "Cristina", "Crocefissa", "Cronida", "Cunegonda", "Cuzia", "Dafne", "Dalida", "Dalila", "Damiana", "Daniela", "Daria", "Deanna", "Debora", "Degna", "Delfina", "Delia", "Delinda", "Delizia", "Demetria", "Deodata", "Desdemona", "Desiderata", "Devota", "Diamante", "Diana", "Dianora", "Diletta", "Dina", "Diodata", "Dionisia", "Doda", "Dolores", "Domenica", "Donata", "Donatella", "Donna", "Dora", "Dorotea", "Druina", "Dulina", "Ebe", "Edda", "Edelberga", "Editta", "Edvige", "Egizia", "Egle", "Elaide", "Elda", "Elena", "Eleonora", "Elettra", "Eliana", "Elide", "Elimena", "Elisa", "Elisabetta", "Elisea", "Ella", "Eloisa", "Elsa", "Elvia", "Elvira", "Emanuela", "Emilia", "Emiliana", "Emma", "Enimia", "Enrica", "Eracla", "Ermelinda", "Ermenegarda", "Ermenegilda", "Erminia", "Ernesta", "Ersilia", "Esmeralda", "Estella", "Ester", "Esterina", "Eufemia", "Eufrasia", "Eugenia", "Eulalia", "Euridice", "Eusebia", "Eutalia", "Eva", "Evangelina", "Evelina", "Fabiana", "Fabiola", "Fatima", "Fausta", "Federica", "Fedora", "Felicia", "Felicita", "Fernanda", "Fiammetta", "Filippa", "Filomena", "Fiordaliso", "Fiore", "Fiorella", "Fiorenza", "Flaminia", "Flavia", "Flaviana", "Flora", "Floriana", "Floridia", "Florina", "Foca", "Fortunata", "Fosca", "Franca", "Francesca", "Fulvia", "Gabriella", "Gaia", "Galatea", "Gaudenzia", "Gelsomina", "Geltrude", "Gemma", "Generosa", "Genesia", "Genoveffa", "Germana", "Gertrude", "Ghita", "Giacinta", "Giada", "Gigliola", "Gilda", "Giliola", "Ginevra", "Gioacchina", "Gioconda", "Gioia", "Giorgia", "Giovanna", "Gisella", "Giuditta", "Giulia", "Giuliana", "Giulitta", "Giuseppa", "Giuseppina", "Giusta", "Glenda", "Gloria", "Godeberta", "Godiva", "Grazia", "Graziana", "Graziella", "Greta", "Griselda", "Guenda", "Guendalina", "Gundelinda", "Ianira", "Ida", "Idea", "Iginia", "Ilaria", "Ilda", "Ildegarda", "Ildegonda", "Ileana", "Ilenia", "Ilia", "Ilva", "Imelda", "Immacolata", "Incoronata", "Ines", "Innocenza", "Iolanda", "Iole", "Iona", "Ione", "Ionne", "Irene", "Iride", "Iris", "Irma", "Irmina", "Isa", "Isabella", "Iside", "Isidora", "Isotta", "Italia", "Ivetta", "Lara", "Laura", "Lavinia", "Lea", "Leda", "Lelia", "Lena", "Leonia", "Leonilda", "Leontina", "Letizia", "Lia", "Liana", "Liberata", "Liboria", "Licia", "Lidania", "Lidia", "Liliana", "Linda", "Lisa", "Livia", "Liviana", "Lodovica", "Loredana", "Lorella", "Lorena", "Lorenza", "Loretta", "Loriana", "Luana", "Luce", "Lucia", "Luciana", "Lucilla", "Lucrezia", "Ludovica", "Luigia", "Luisa", "Luminosa", "Luna", "Macaria", "Maddalena", "Mafalda", "Magda", "Maida", "Manuela", "Mara", "Marana", "Marcella", "Mareta", "Margherita", "Maria", "Marianna", "Marica", "Mariella", "Marilena", "Marina", "Marinella", "Marinetta", "Marisa", "Marita", "Marta", "Martina", "Maruta", "Marzia", "Massima", "Matilde", "Maura", "Melania", "Melissa", "Melitina", "Menodora", "Mercede", "Messalina", "Mia", "Michela", "Milena", "Mimma", "Mina", "Minerva", "Minervina", "Miranda", "Mirella", "Miriam", "Mirta", "Moira", "Monica", "Morena", "Morgana", "Nadia", "Natalia", "Natalina", "Neiva", "Nerea", "Nicla", "Nicoletta", "Nilde", "Nina", "Ninfa", "Nives", "Noemi", "Norina", "Norma", "Novella", "Nuccia", "Nunziata", "Odetta", "Odilia", "Ofelia", "Olga", "Olimpia", "Olinda", "Olivia", "Oliviera", "Ombretta", "Ondina", "Onesta", "Onorata", "Onorina", "Orchidea", "Oriana", "Orietta", "Ornella", "Orsola", "Orsolina", "Ortensia", "Osanna", "Otilia", "Ottilia", "Palladia", "Palmazio", "Palmira", "Pamela", "Paola", "Patrizia", "Pelagia", "Penelope", "Perla", "Petronilla", "Pia", "Piera", "Placida", "Polissena", "Porzia", "Prisca", "Priscilla", "Proserpina", "Prospera", "Prudenzia", "Quartilla", "Quieta", "Quiteria", "Rachele", "Raffaella", "Rainelda", "Rebecca", "Regina", "Renata", "Riccarda", "Rina", "Rita", "Roberta", "Romana", "Romilda", "Romina", "Romola", "Rosa", "Rosalia", "Rosalinda", "Rosamunda", "Rosanna", "Rosita", "Rosmunda", "Rossana", "Rossella", "Rufina", "Saba", "Sabina", "Sabrina", "Samanta", "Samona", "Sandra", "Santina", "Sara", "Savina", "Scolastica", "Sebastiana", "Seconda", "Secondina", "Sefora", "Selene", "Selvaggia", "Semiramide", "Serafina", "Serena", "Severa", "Sibilla", "Sidonia", "Silvana", "Silvia", "Simona", "Simonetta", "Siria", "Smeralda", "Soave", "Sofia", "Sofronia", "Solange", "Sonia", "Speranza", "Stefania", "Stella", "Susanna", "Sveva", "Tabita", "Tamara", "Tarquinia", "Tarsilla", "Taziana", "Tea", "Tecla", "Telica", "Teodata", "Teodolinda", "Teodora", "Teresa", "Teudosia", "Tina", "Tiziana", "Tosca", "Trasea", "Tullia", "Ugolina", "Ulfa", "Uliva", "Unna", "Vala", "Valentina", "Valeria", "Valeriana", "Vanda", "Vanessa", "Vanna", "Venera", "Veneranda", "Venere", "Venusta", "Vera", "Verdiana", "Verena", "Veriana", "Veridiana", "Veronica", "Viliana", "Vilma", "Vincenza", "Viola", "Violante", "Virginia", "Vissia", "Vittoria", "Viviana", "Wanda", "Zabina", "Zaira", "Zama", "Zanita", "Zarina", "Zelinda", "Zenobia", "Zita", "Zoe", "Zosima"];
var V14 = ["Abate", "Abbate", "Abbondanza", "Abbrescia", "Accardi", "Accardo", "Accurso", "Aceto", "Acquadro", "Acquaviva", "Acquistapace", "Adami", "Adamo", "Addari", "Addis", "Adragna", "Affinito", "Agnello", "Agostinelli", "Agostini", "Agresta", "Aiello", "Alaimo", "Albanese", "Albano", "Alberti", "Alcamo", "Alessandrini", "Alessi", "Alfano", "Alfieri", "Alivernini", "Allegretti", "Aloi", "Altieri", "Amabile", "Amadori", "Amato", "Ambrosini", "Ambrosino", "Ambrosio", "Amendola", "Amerio", "Amici", "Amico", "Ammoscato", "Amoroso", "Amoruso", "Ancona", "Andreoli", "Andrisani", "Anelli", "Angeletti", "Angeli", "Angelini", "Angeloni", "Angelucci", "Annunziata", "Anselmi", "Anselmo", "Antenucci", "Antezza", "Antonacci", "Antonelli", "Antonini", "Antonucci", "Anzalone", "Apicella", "Aprile", "Aquino", "Aramini", "Arcangeli", "Arena", "Argenio", "Argento", "Argiolas", "Artioli", "Asaro", "Ascione", "Astolfi", "Atzeni", "Atzori", "Avallone", "Avola", "Azara", "Babini", "Bacci", "Baggio", "Baiocco", "Balboni", "Baldacci", "Baldassarre", "Baldi", "Baldini", "Baldo", "Balducci", "Balestra", "Balistreri", "Ballarin", "Balsamo", "Balzano", "Bandini", "Bani", "Baraldi", "Barbagallo", "Barbarossa", "Barbarulo", "Barbato", "Barbera", "Barberi", "Barberis", "Barbero", "Barbieri", "Barbiero", "Barile", "Barill\xE0", "Barletta", "Barone", "Baroni", "Barra", "Barreca", "Barresi", "Barretta", "Barsotti", "Bartoli", "Bartolini", "Bartolomei", "Bartolucci", "Basile", "Bassani", "Bassi", "Basso", "Battaglia", "Battista", "Battisti", "Battistini", "Bedini", "Belli", "Bellini", "Bellomo", "Bellotti", "Bellucci", "Belmonte", "Belotti", "Beltrame", "Beltrami", "Belvisi", "Benatti", "Benedetti", "Benedetto", "Benetti", "Benigni", "Benini", "Bennardo", "Bentivoglio", "Benvenuti", "Benvenuto", "Berardi", "Beretta", "Bergamasco", "Bergamini", "Bernabei", "Bernardi", "Bernardini", "Bernasconi", "Bertaccini", "Bertani", "Bertelli", "Berti", "Bertini", "Berto", "Bertolini", "Bertolussi", "Beso", "Betti", "Bevilacqua", "Biagetti", "Biagi", "Biagini", "Bianc", "Biancheri", "Bianchetti", "Bianchi", "Bianchini", "Bianco", "Biasci", "Biccari", "Biggi", "Bindi", "Bini", "Bionaz", "Biondi", "Bisconti", "Bisio", "Bizzarri", "Blanc", "Blasi", "Bocchi", "Boccia", "Bodini", "Boffa", "Boi", "Bologna", "Bonanni", "Bonanno", "Bonato", "Bonazzi", "Bonelli", "Bonetti", "Bongiorno", "Bongiovanni", "Boni", "Bonifazi", "Bonini", "Bono", "Bonomi", "Bonomo", "Bordoni", "Borelli", "Borghi", "Borgia", "Borrelli", "Bortolin", "Bortoluzzi", "Bortot", "Boscaino", "Boschetti", "Boschi", "Bosco", "Boscolo", "Bosi", "Botta", "Bove", "Bovolenta", "Bozzi", "Bozzo", "Braia", "Brambilla", "Branca", "Brandi", "Bresciani", "Bressan", "Briano", "Brigand\xEC", "Brignone", "Brizzi", "Brogi", "Brumat", "Brunelli", "Brunetti", "Bruni", "Bruno", "Bruschi", "Bruzzone", "Buccheri", "Bucci", "Bulgarelli", "Buongiorno", "Buonomo", "Burgio", "Butera", "Buzzi", "Cabras", "Caccamo", "Caccavo", "Cacciapuoti", "Cacciatore", "Cadoni", "Caforio", "Caggiano", "Caiazza", "Caiazzo", "Calabrese", "Calabria", "Calabr\xF2", "Calafiore", "Calandro", "Cal\xEC", "Califano", "Callegari", "Calligaris", "Cal\xF2", "Camilli", "Cammarata", "Cammisa", "Campagna", "Campana", "Campanell