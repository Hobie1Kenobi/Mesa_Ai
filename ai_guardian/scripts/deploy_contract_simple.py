import os
import json
import logging
from pathlib import Path
from dotenv import load_dotenv
from web3 import Web3

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Load environment variables
load_dotenv()

# Define bytecode and ABI from the already compiled contract
BYTECODE = "0x608060405234801561001057600080fd5b50610c67806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063728afd421161005b578063728afd42146100e557806395a078e814610115578063b2bdfa7b14610145578063e16c7d9814610163576100886101a7565b80631facf961146100945780632fe26020146100a95780633af32abf146100bc5780636299a00c146100d2575b6100926101a7565b005b6100a76100a236600461082b565b6102c1565b005b6100a76100b736600461082b565b6103d5565b6100bf6104ca565b6040516100cc91906108c0565b60405180910390f35b6100bf6100e036600461092c565b6104d3565b6100fd6100f336600461099c565b610570565b6040516001600160a01b0390911681526020016100cc565b61012861012336600461099c565b610625565b6040516001600160a01b039283168152911660208201526040016100cc565b61014d61066a565b6040516001600160a01b0390911681526020016100cc565b61017661017136600461092c565b610679565b60408051825151815291516020808401919091528101516040820152606081019190915260806020820181905260009082015260a0016100cc565b6000805a905060006040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f50616e69633a20617373657274696f6e206661696c65642e0000000000000000604482015260640160405180910390fd5b6001600160a01b0383166000908152602081815260408083208484529091529020600381015460ff166103335760405162461bcd60e51b815260206004820152601460248201527318dbdb881c5d1e881d1a5d995b9d08195e1a5cdd6021604482015260640160405180910390fd5b6002810180546001600160a01b0319166001600160a01b03851617905543600383015561036c83836000546001600160a01b031690565b82600001600082825461037f91906109f656b9091555050600182018054839183156108fc0291849190818181858888f193505050501580156103b3573d6000803e3d6000fd5b506003810180546001600160581b0319166001600160581b0392909216919091179055505050565b6001600160a01b038216600090815260208181526040808320848452909152902060010154436104195760405162461bcd60e51b81526020600482015260016024820152603960f91b604482015260640160405180910390fd5b6001600160a01b038216600090815260016020526040902080546001919060006104429084610a67565b9091555050600160a01b9190911660208181526040928390208251918201909252905442908290830190815261047e90839083906104ca565b856000016000828254610490919061069c565b90915550506001820180546001600160a01b0319166001600160a01b0385161790558151815560208201516001820155604082015160028201556060820151600382015560808201516004820155439055505050565b600080fd5b600080838285604051602001610547939291906040808252825460026000196101006001841615020190911604908201819052818301604090910190849080156105e55780601f106105ba576101008083540402835291602001916105e556b820191906000526020600020905b8154815290600101906020018083116105c857829003601f168201915b5050825160209384036101000a60001901801990931692909201935060a092019650878752828301939093528281018560a060278363002090380190999f5b60008060006106308686604051809460a0885260208801955060208801945060608701936060880193600193600393610679565b506000838152602081815260408083208484529091529020548015610662576106628383836102c1565b5050505050565b6000546001600160a01b031690565b60606000606060006106998986604051602060a08152610547604c8152610547602b815281610679565b90565b6000806106a78561066a565b6001600160a01b0316826106b98561066a565b6001600160a01b03161061066257600080fd5b80356001600160a01b03811681146106e457600080fd5b919050565b60008060008060008060c087890312156107025760006106a7565b61070b876106cd565b9550602087013594506040870135935060608701359250608087013591506107348760a0880161069c565b90509295509295509295565b600080600080600080600080610100898b031215610768576000630adf3e6c61075f6106cd565b91505090565b61077688896106cd565b97506020890135965060408901359550606089013594506080890135935060a0890135925060c0890135915061075f8960e08a01610caf565b6000602082840312156107c2576000610caf565b813567ffffffffffffffff811681146107d9576000610caf565b8201601f810184136107ea576000610caf565b8035828111156107fc576000836107f5826106a7565b6107f5826106cd56b04051601f19603f83011681018181108482111715610caf5760008061081d826106cd565b939093013592505050565b6000806040838503121561083e576000610caf565b61084783610caf565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115610885576108856108aa565b604051601f8501601f19908116603f011681019082821181831017156108ad576108ad6108aa565b816040528093508581528486860111156108aa5760006108c661069c565b600091825260208083209091019485529381019392909201905b600060208083528351808285015260005b8181116109095781810151858301526020016108ed565b506000604082860101526040601f19601f8301168501019250505092915050565b600080600060608486031215610941576000610caf565b61094a84610caf565b925061095860208501610caf565b9150604084013590509250925092565b600181811c9082168061097c57607f821691505b60208210810361099657634e487b7160e01b600052602260045260246000fd5b50919050565b600080602083850312156109af576000610caf565b82356001600160e01b0319811681146109c7576000610caf565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a0957610a096109e0565b92915050565b600181815b80851115610a5957505060902090565b838110610a6757905061069c565b5090565b81810180821115610a0957610a096109e0565b600060208284031215610a8a576000610caf565b5035919050565b600060018201610aa357610aa36109e0565b5060010190565b600060a0808385031215610abd576000610caf565b6040519050808201825281358152602083013560208201526040830135604082015260608301356060820152608083013560808201528091505092915050565b600060808284031215610b0f576000610caf565b6040516080810181811067ffffffffffffffff82111715610b3257610b326108aa565b6040526080610caf60e01b836000610b49836106cd565b815260208301358015158114610b5e576000610caf565b81602083015250604083013560408201526060830135606082015294935050505056fea2646970667358221220ca6c55dcab6c21fa06e26eafe28c8f06f59bd3c5c5e0c17e7cd7d39d96df93cc64736f6c63430008110033"

# Blockchain Configuration
WEB3_PROVIDER_URI = os.getenv("WEB3_PROVIDER_URI", "https://sepolia.base.org")
PRIVATE_KEY = os.getenv("PRIVATE_KEY", "")
WALLET_ADDRESS = os.getenv("WALLET_ADDRESS", "")

def deploy_contract():
    """Deploy the RightsVault contract to Base Sepolia using precompiled bytecode"""
    # Connect to Base Sepolia
    web3 = Web3(Web3.HTTPProvider(WEB3_PROVIDER_URI))
    
    if not web3.is_connected():
        logging.error(f"Failed to connect to {WEB3_PROVIDER_URI}")
        return
    
    logging.info(f"Connected to Base Sepolia at {WEB3_PROVIDER_URI}")
    
    # Check wallet balance
    if WALLET_ADDRESS:
        balance = web3.eth.get_balance(WALLET_ADDRESS)
        balance_eth = web3.from_wei(balance, 'ether')
        logging.info(f"Wallet balance: {balance_eth} ETH")
    
    # Check private key
    if not PRIVATE_KEY:
        logging.error("Private key is missing. Please set the PRIVATE_KEY environment variable.")
        return
    
    # Try to create account from private key
    try:
        account = web3.eth.account.from_key(PRIVATE_KEY)
        sender_address = account.address
        logging.info(f"Successfully loaded private key for address: {sender_address}")
    except Exception as e:
        logging.error(f"Error loading private key: {e}")
        return
    
    # Get transaction count (nonce)
    nonce = web3.eth.get_transaction_count(sender_address)
    
    # Build deployment transaction
    transaction = {
        "chainId": web3.eth.chain_id,
        "from": sender_address,
        "nonce": nonce,
        "gas": 3000000,
        "gasPrice": web3.eth.gas_price,
        "data": BYTECODE
    }
    
    # Sign the transaction
    try:
        signed_txn = web3.eth.account.sign_transaction(transaction, PRIVATE_KEY)
        logging.info("Transaction signed successfully.")
    except Exception as e:
        logging.error(f"Error signing transaction: {e}")
        return
    
    # Send the transaction
    try:
        logging.info("Sending deployment transaction...")
        tx_hash = web3.eth.send_raw_transaction(signed_txn.raw_transaction)
        logging.info(f"Transaction sent! Hash: {tx_hash.hex()}")
    except Exception as e:
        logging.error(f"Error sending transaction: {e}")
        return
    
    # Wait for transaction receipt
    try:
        tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash, timeout=300)
        contract_address = tx_receipt.contractAddress
        logging.info(f"Contract deployed successfully to address: {contract_address}")
    except Exception as e:
        logging.error(f"Error waiting for transaction receipt: {e}")
        return
    
    # Update .env file with contract address
    env_path = Path(__file__).resolve().parent / ".env"
    try:
        with open(env_path, "r") as file:
            env_content = file.read()
        
        # Replace contract address
        env_content = env_content.replace(
            f"RIGHTS_VAULT_CONTRACT={os.getenv('RIGHTS_VAULT_CONTRACT')}",
            f"RIGHTS_VAULT_CONTRACT={contract_address}"
        )
        
        with open(env_path, "w") as file:
            file.write(env_content)
        
        logging.info(f"Updated .env file with new contract address: {contract_address}")
    except Exception as e:
        logging.error(f"Error updating .env file: {e}")
    
    return contract_address

if __name__ == "__main__":
    deploy_contract() 