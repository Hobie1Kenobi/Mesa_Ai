-- Music Rights Table
CREATE TABLE music_rights (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  
  -- Core Work Information
  track_title TEXT NOT NULL,
  artist_name TEXT NOT NULL,
  publisher TEXT,
  
  -- Rights Classification
  rights_type TEXT NOT NULL, -- "songwriting", "master", "both"
  jurisdiction TEXT,
  
  -- Rights Owner Information
  rightsholder_name TEXT NOT NULL,
  rightsholder_email TEXT,
  rightsholder_role TEXT, -- Type of contribution
  rightsholder_ipi TEXT, -- International Performer Identifier
  split_percentage TEXT NOT NULL, -- Percentage ownership
  rightsholder_address TEXT, -- Physical address
  rightsholder_phone TEXT,
  rightsholder_id TEXT, -- ID number (passport, etc.)
  
  -- Additional Metadata
  iswc_code TEXT, -- International Standard Work Code
  isrc_code TEXT, -- Recording code
  designated_administrator TEXT, -- Who manages the rights
  wallet_address TEXT, -- Blockchain address
  
  -- System Fields
  attestation_uid TEXT,
  blockchain_status TEXT DEFAULT 'PENDING',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  last_synced TIMESTAMP WITH TIME ZONE,
  error_message TEXT
);

-- Useful indexes
CREATE INDEX idx_music_rights_attestation ON music_rights(attestation_uid);
CREATE INDEX idx_music_rights_status ON music_rights(blockchain_status);
CREATE INDEX idx_music_rights_updated ON music_rights(updated_at);
CREATE INDEX idx_music_rights_rightsholder ON music_rights(rightsholder_name);
CREATE INDEX idx_music_rights_rights_type ON music_rights(rights_type);

-- Auto-update the 'updated_at' timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_music_rights_updated_at
BEFORE UPDATE ON music_rights
FOR EACH ROW
EXECUTE PROCEDURE update_updated_at_column();

-- Helper function for the RPC call in our code
CREATE OR REPLACE FUNCTION create_music_rights_table()
RETURNS VOID AS $$
BEGIN
  -- Table already created above, this is just to support the RPC call
  -- You could add additional setup logic here if needed
  RETURN;
END;
$$ LANGUAGE plpgsql;

-- Insert sample data for testing
INSERT INTO music_rights (
  track_title, 
  artist_name, 
  publisher,
  rights_type,
  jurisdiction,
  rightsholder_name,
  rightsholder_email,
  rightsholder_role,
  rightsholder_ipi,
  split_percentage,
  rightsholder_address,
  rightsholder_phone,
  rightsholder_id,
  iswc_code,
  isrc_code,
  designated_administrator,
  wallet_address
) VALUES 
(
  'Blockchain Symphony',
  'Crypto Collective',
  'MESA Publishing',
  'both',
  'United States',
  'Jane Smith',
  'jane.smith@example.com',
  'Composer',
  '00378495712',
  '60',
  '123 Blockchain Ave, San Francisco, CA',
  '+1-555-123-4567',
  'US-PASSPORT-483921',
  'T-123456789-1',
  'USRC17294831',
  'MESA Rights Management',
  '0xbDE22Ea0D5d21925f8c64d28c0b1a376763a76d8'
),
(
  'Decentralized Melody',
  'Web3 Ensemble',
  'Base Records',
  'songwriting',
  'European Union',
  'Marcus Johnson',
  'marcus@web3music.io',
  'Lyricist',
  '00492837561',
  '75',
  '45 Digital Street, Berlin, Germany',
  '+49-555-789-1234',
  'DE-ID-78392183',
  'T-987654321-2',
  null,
  'MESA Rights Management',
  '0xbDE22Ea0D5d21925f8c64d28c0b1a376763a76d8'
);

-- Create a view for easier reporting
CREATE VIEW music_rights_attestations AS
SELECT 
  id,
  track_title,
  artist_name,
  rightsholder_name,
  rights_type,
  split_percentage,
  attestation_uid,
  blockchain_status,
  created_at,
  updated_at,
  last_synced
FROM 
  music_rights
ORDER BY
  updated_at DESC; 